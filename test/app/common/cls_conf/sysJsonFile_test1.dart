/*
 * (C)2023 TERAOKA SEIKO Co., Ltd./株式会社寺岡精工
 * CONFIDENTIAL/社外秘
 * 無断開示・無断複製禁止
 */
 
import 'package:flutter_pos/app/common/environment.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/cupertino.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';
import 'package:path/path.dart';
import 'dart:io';
import 'unitTestParts.dart';

import '../../../../lib/app/common/cls_conf/configJsonFile.dart';
import '../../../../lib/app/common/cls_conf/sysJsonFile.dart';

late SysJsonFile sys;

void main(){
  sysJsonFile_test1();
}

void sysJsonFile_test1()
{
  TestWidgetsFlutterBinding.ensureInitialized();
  const String confPath = "conf/";
  const String testDir = "test_assets";
  const String fileName = "sys.json";
  const String section = "info";
  const String key = "version";
  const defaultData = "00.00.85";
  const testData1  =  987654321;    // テストデータ1
  const testData1s = "987654321";
  const testData2  =  192834675;    // テストデータ2
  const testData2s = "192834675";
  const testData3  =  129834765;    // テストデータ3
  const testData3s = "129834765";

  group('SysJsonFile',()
  {
    setUp(() async{
      PathProviderPlatform.instance = MockPathProviderPlatform();
      // 当該JSONファイルをデフォルトに戻す。
      await SysJsonFile().setDefault();
    });

    // 各テストの事後処理
    tearDown(() async{
      // 当該JSONファイルをデフォルトに戻す。
      await SysJsonFile().setDefault();
    });

    // ********************************************************
    // テスト00001 : load
    // 前提：アプリ用フォルダに対象JSONファイルが存在しないこと。
    // 試験手順：loadを実行する。
    // 期待結果：①assets/confにある対象JSONファイルがアプリ用フォルダに作成されること。
    // 　　　　　②対象JSONファイルの各プロパティ値を読み込んでいること。
    // ********************************************************
    test('00001_load_01', () async {
      print("\n********** テスト実行：00001_load_01 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // 前提状態構築
      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == true) {
        fileBefore.deleteSync();
      }
      // ⓪：事前状態確認（対象JSONファイルが存在しないこと。）
      expect(fileBefore.exists() == false, false);

      await sys.load();

      final File fileAfter = File(jsonPath);
      // ①-1：load実行により対象JSONファイルが作成されていること。
      expect(fileAfter.existsSync(), true);

      // ②：対象JSONファイルの各プロパティ値を読み込んでいること。
      allPropatyCheck(sys,true);

      print("********** テスト終了：00001_load_01 **********\n\n");
    });

    // ********************************************************
    // テスト00002 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：loadを実行する。
    // 期待結果：アプリ用フォルダの対象JSONファイルの各プロパティ値を読み込んでいること。
    // ********************************************************
    test("00002_load_02", () async {
      print("\n********** テスト実行：00002_load_02 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == false) {
        sys.setDefault();
        debugPrint("setDefault実行");
      }
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      await sys.load();

      // 対象JSONファイルの各プロパティ値を読み込んでいること。
      // 00001実行後で、デフォルト値前提
      allPropatyCheck(sys,true);

      print("********** テスト終了：00002_load_02 **********\n\n");
    });

    // ********************************************************
    // テスト00003 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②任意のプロパティの値を変更する。
    // 　　　　　③loadを実行する。
    // 期待結果：当該プロパティ値の変更が取り消されること。
    // ********************************************************
    test('00003_load_03', () async {
      print("\n********** テスト実行：00003_load_03 **********");
      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①：loadを実行する。
      await sys.load();

      // ②任意のプロパティの値を変更する。
      final prefixData = sys.info.version;
      sys.info.version = testData1s;
      expect(sys.info.version == testData1s, true);

      // ③loadを実行する。
      //   当該プロパティ値の変更が取り消されること。
      await sys.load();
      expect(sys.info.version != testData1s, true);
      expect(sys.info.version == prefixData, true);

      print("********** テスト終了：00003_load_03 **********\n\n");
    });

    // ********************************************************
    // テスト00004 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②任意のプロパティの値を変更する。
    // 　　　　　③loadを実行する。
    // 期待結果：当該プロパティ値の変更が取り消されること。
    // ********************************************************
    test('00004_load_04', () async {
      print("\n********** テスト実行：00004_load_04 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②任意のプロパティの値を変更する。
      final prefixData = sys.info.version;
      sys.info.version = testData1s;
      expect(sys.info.version, testData1s);

      // ③saveを実行する。
      await sys.save();

      // ④loadを実行する。
      await sys.load();

      expect(sys.info.version != prefixData, true);
      expect(sys.info.version == testData1s, true);
      allPropatyCheck(sys,false);

      print("********** テスト終了：00004_load_04 **********\n\n");
    });

    // ********************************************************
    // テスト00005 : save
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②saveを実行する。
    // 期待結果：アプリ用フォルダにある対象JSONファイルの内容に変化がないこと。
    // ********************************************************
    test('00005_save_01', () async {
      print("\n********** テスト実行：00005_save_01 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      // ① loadを実行する。
      await sys.load();

      // save実行前のJSONファイルを保存する。
      final String jsonBefor = await fileBefore.readAsString();

      // ② saveを実行する。
      await sys.save();

      final File fileAfter = File(jsonPath);
      expect(fileAfter.existsSync(), true);

      // アプリ用フォルダにある対象JSONファイルの内容に変化がないこと。
      final String jsonAfter = await fileAfter.readAsString();
      expect(jsonBefor.replaceAll("\r\n", "\n") == jsonAfter.replaceAll("\r\n", "\n"), true);

      print("********** テスト終了：00201_save_01 **********\n\n");
    });

    // ********************************************************
    // テスト00006 : save
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    // 期待結果：アプリ用フォルダにある対象JSONファイルの当該プロパティの値が
    //         変更した値に変更されていること。
    // ********************************************************
    test('00006_save_02', () async {
      print("\n********** テスト実行：00006_save_02 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      // ① loadを実行する。
      await sys.load();

      // save実行前のJSONファイルを保存する。
      final String jsonBefor = await fileBefore.readAsString();
      expect(sys.info.version, defaultData);

      // ②任意のプロパティの値を変更する。
      final prefixData = sys.info.version;
      sys.info.version = testData1s;

      // ③ saveを実行する。
      await sys.save();

      final File fileAfter1 = File(jsonPath);
      expect(fileAfter1.existsSync(), true);

      // アプリ用フォルダにある対象JSONファイルの内容に変化ががあること。
      // 手順②で変更した内容になっていること。
      final String jsonAfter1 = await fileAfter1.readAsString();
      expect(jsonBefor.replaceAll("\r\n", "\n") != jsonAfter1.replaceAll("\r\n", "\n"), true);
      expect(testData1s != prefixData, true);
      expect(sys.info.version, testData1s);

      // ④ loadを実行する。
      await sys.load();

      // アプリ用フォルダにある対象JSONファイルの内容が同じであること。
      // 手順②で変更した内容であること。
      final String jsonAfter2 = await fileAfter1.readAsString();
      expect(jsonAfter1.replaceAll("\r\n", "\n") == jsonAfter2.replaceAll("\r\n", "\n"), true);

      expect(sys.info.version == testData1s, true);
      allPropatyCheck(sys,false);

      print("********** テスト終了：00006_save_02 **********\n\n");
    });

    // ********************************************************
    // テスト00007 : setDefault
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    //         アプリ用フォルダに対象JSONファイルが存在し、任意の編集を施すこと。
    // 試験手順：①アプリ用フォルダにある対象JSONファイルを削除する。
    //         ②setDefaultを実行する。
    // 期待結果：手順②実行後、assets/confにある対象JSONファイルが
    //         アプリ用フォルダに作成されること。
    // ********************************************************
    test('00007_setDefault_01', () async {
      print("\n********** テスト実行：00007_setDefault_01 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①アプリ用フォルダにある対象JSONファイルを削除する。
      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == true) {
        fileBefore.deleteSync();
      }
      expect(fileBefore.existsSync() , false);

      // ②setDefaultを実行する。
      await sys.setDefault();
      expect(fileBefore.existsSync() , true);
      allPropatyCheck(sys,true);

      print("********** テスト終了：00007_setDefault_01 **********\n\n");
    });

    // ********************************************************
    // テスト00008 : setDefault
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    //         アプリ用フォルダに対象JSONファイルが存在し、任意の編集を施すこと。
    // 試験手順：①任意のプロパティの値を変更し、saveを実行する。
    //         ②setDefaultを実行する。
    // 期待結果：手順②実行後、assets/confにある対象JSONファイルの内容で上書きされること。
    //         （変更が取り消されていること）
    // ********************************************************
    test('00008_setDefault_02', () async {
      print("\n********** テスト実行：00008_setDefault_02 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②任意のプロパティの値を変更する。
      sys.info.version = testData1s;
      expect(sys.info.version, testData1s);

      // ③saveを実行する。
      await sys.save();
      expect(sys.info.version, testData1s);

      // ④loadを実行する。
      await sys.setDefault();

      // （デフォルト値と同じであること。）
      allPropatyCheck(sys,true);

      print("********** テスト終了：00008_setDefault_02 **********\n\n");
    });

    // ********************************************************
    // テスト00009 : セクション/キー名称による設定（setValueWithName）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
    //         ②loadを実行する。
    // 期待結果：手順②実行後、手順①で設定したプロパティ変更後の内容で
    //         プロパティ値が設定されていること。
    // ********************************************************
    test('00009_setValueWithName_01', () async {
      print("\n********** テスト実行：00009_setValueWithName_01 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      await sys.setValueWithName(section, key, testData1s);

      // ②loadを実行する。
      await sys.load();

      // 手順②実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(sys.info.version == testData1s, true);

      print("********** テスト終了：00009_setValueWithName_01 **********\n\n");
    });

    test('00010_setValueWithName_02', () async {
      print("\n********** テスト実行：00010_setValueWithName_02 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      final value = await sys.setValueWithName("test_section", key, testData1s);


      // 手順実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(value.result, false);
      expect(value.cause == json_result.element_not_found, true);

      print("********** テスト終了：00010_setValueWithName_02 **********\n\n");
    });

    test('00011_setValueWithName_03', () async {
      print("\n********** テスト実行：00011_setValueWithName_03 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      final value = await sys.setValueWithName(section, "test_key", testData1s);

      // 手順①実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(value.result, false);
      expect(value.cause == json_result.element_not_found, true);

      print("********** テスト終了：00011_setValueWithName_03 **********\n\n");
    });

    // ********************************************************
    // テスト00010 : セクション/キー名称による取得（getValueWithName）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティを変更する。
    //         ③saveを実行する。
    //         ④①で指定したプロパティに相当するセクション名、キー名にて
    //           getValueWithNameを実行する。
    // 期待結果：手順④で設定した値が手順②で設定した値と一致すること。
    // ********************************************************
    test('00012_getValueWithName_01', () async {
      print("\n********** テスト実行：00012_getValueWithName_01********** ");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②任意のプロパティを変更する。
      sys.info.version = testData1s;

      // ③saveを実行する。
      await sys.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await sys.getValueWithName(section, key);
      //print(testData.toString() + " == " + verify.value.toString());
      expect(testData1s == verify.value, true);

      print("********** テスト終了：00012_getValueWithName_01**********\n\n");
    });

    test('00013_getValueWithName_02', () async {
      print("\n********** テスト実行：00013_getValueWithName_02********** ");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②任意のプロパティを変更する。
      sys.info.version = testData1s;

      // ③saveを実行する。
      await sys.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await sys.getValueWithName("test_section", key);
      //print(testData.toString() + " == " + verify.value.toString());

      expect(verify.result, false);
      expect(verify.cause == json_result.element_not_found, true);

      print("********** テスト終了：00013_getValueWithName_02**********\n\n");
    });

    test('00014_getValueWithName_03', () async {
      print("\n********** テスト実行：00014_getValueWithName_03********** ");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②任意のプロパティを変更する。
      sys.info.version = testData1s;

      // ③saveを実行する。
      await sys.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await sys.getValueWithName(section, "test_key");
      //print(testData.toString() + " == " + verify.value.toString());

      expect(verify.result, false);
      expect(verify.cause == json_result.element_not_found, true);

      print("********** テスト終了：00014_getValueWithName_03**********\n\n");
    });

    // ********************************************************
    // テスト00015 : 任意フォルダ設定（_setAbsolutePath）
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティ値を変更し、テスト用フォルダにJSONのコピーを作成する。
    //         ②setDefaultを実行する。
    //         ③テスト用フォルダのパスを引数としてsetAbsolutePathを実行する。
    //         ④loadを実行する。
    // 期待結果：手順④実行後、プロパティ変更後の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00015:_setAbsolutePath_01', () async {
      print("\n********** テスト実行：00015_setAbsolutePath_01 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①任意のフォルダのパスを引数としてsetAbsolutePathを実行する。
      final appDir = Directory(EnvironmentData.TPRX_HOME);
      JsonPath().absolutePath = join(appDir.path, testDir);

      // ②loadを実行する。
      await sys.load();

      // 手順②実行後に①で指定したパスに/assets/conf/当該JSONファイルが作成されていること。
      final String jsonPath = join(appDir.path, testDir, confPath, fileName);
      //print("存在確認先：" + jsonPath);
      final File file = File(jsonPath);
      expect(file.existsSync() == true , true);

      // ③任意のプロパティ値を変更する。
      sys.info.version = testData1s;
      expect(sys.info.version, testData1s);

      // ④saveを実行する。
      await sys.save();

      // 手順④実行後、プロパティ変更後の内容でプロパティ値が設定されていること。
      expect(sys.info.version, testData1s);
      
      // アプリフォルダのパスを元に戻しておく（このテストだけの後処理）。
      JsonPath().absolutePath = join(appDir.path);

      print("********** テスト終了：00015_setAbsolutePath_01 **********\n\n");
    });

    // ********************************************************
    // テスト00016 : ファイル復元（_restoreJson：バックアップ作成中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    //         ④バックアップファイルを作成し、破損状態とする。
    //         ⑤loadを実行する。
    // 期待結果：手順③実行後、プロパティ変更前の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00016_restoreJson_01', () async {
      print("\n********** テスト実行：00016_restoreJson_01 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ②Jsonファイルの任意のプロパティの値を変更する。
      // ④バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern1, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern1);

      // ⑤loadを実行する。
      await sys.load();

      // 手順⑤実行後、手順②で変更した内容でプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      expect(sys.info.version == testData1s, true);

      print("********** テスト終了：00016_restoreJson_01 **********\n\n");
    });

    // ********************************************************
    // テスト00017 : ファイル復元（_restoreJson：バックアップ作成直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    //         ④バックアップファイルを作成する。
    //         ⑤loadを実行する。
    // 期待結果：手順③実行後、プロパティ変更前の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('0017_restoreJson_02', () async {
      print("\n********** テスト実行：00017_restoreJson_02 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ②任意のプロパティの値を変更する。
      // ④バックアップファイルを作成する。
      await makeTestData(confPath, fileName, testFunc.makePattern2, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern2);

      // ⑤loadを実行する。
      await sys.load();

      // 手順⑤実行後、手順②で変更した内容でプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      expect(sys.info.version == testData2s, true);

      print("********** テスト終了：00017_restoreJson_02 **********\n\n");
    });

    // ********************************************************
    // テスト00018 : ファイル復元（_restoreJson：JSON更新中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成する。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00018_restoreJson_03', () async {
      print("\n********** テスト実行：00018_restoreJson_03 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern3, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern3);

      // ③loadを実行する。
      await sys.load();

      // 手順③実行後、①の内容ででプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      expect(sys.info.version == testData1s, true);

      print("********** テスト終了：00018_restoreJson_03 **********\n\n");
    });

    // ********************************************************
    // テスト00019 : ファイル復元（_restoreJson：JSON作成直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成する。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新する。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、②の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00019_restoreJson_04', () async {
      print("\n********** テスト実行：00019_restoreJson_04 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern4, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern4);

      // ③loadを実行する。
      await sys.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      expect(sys.info.version == testData2s, true);

      print("********** テスト終了：00019_restoreJson_04 **********\n\n");
    });

    // ********************************************************
    // テスト00020 : ファイル復元（_restoreJson：バックアップ削除中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更した内容でJSONファイルを更新する。
    //         ②バックアップファイルを作成し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00020_restoreJson_05', () async {
      print("\n********** テスト実行：00020_restoreJson_05 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern5, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern5);

      // ③loadを実行する。
      await sys.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      expect(sys.info.version == testData1s, true);

      print("********** テスト終了：00020_restoreJson_05 **********\n\n");
    });

    // ********************************************************
    // テスト00021 : ファイル復元（_restoreJson：バックアップ削除直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更する。
    //         ②①の内容でJSONファイルを更新する。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00021_restoreJson_06', () async {
      print("\n********** テスト実行：00021_restoreJson_06 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern6, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern6);

      // ③loadを実行する。
      await sys.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      expect(sys.info.version == testData1s, true);

      print("********** テスト終了：00021_restoreJson_06 **********\n\n");
    });

    // ********************************************************
    // テスト00022 : ファイル復元（_restoreJson：バックアップとJSON共に破損：バックアップが新しい日付）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ②バックアップファイルを作成し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：デフォルトの内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00022_restoreJson_07', () async {
      print("\n********** テスト実行：00022_restoreJson_07 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      // ②バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern7, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern7);

      // ③loadを実行する。
      await sys.load();

      // デフォルトの内容でプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      allPropatyCheck(sys,true);

      print("********** テスト終了：00022_restoreJson_07 **********\n\n");
    });

    // ********************************************************
    // テスト00023 : ファイル復元（_restoreJson：バックアップとJSON共に破損：JSONが新しい日付）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成し、破損状態とする。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：デフォルトの内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00023_restoreJson_08', () async {
      print("\n********** テスト実行：00023_restoreJson_08 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      // ②バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern8, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern8);

      // ③loadを実行する。
      await sys.load();

      // デフォルトの内容でプロパティ値が設定されていること。
      print("check:" + sys.info.version.toString());
      allPropatyCheck(sys,true);

      print("********** テスト終了：00023_restoreJson_08 **********\n\n");
    });

    // ********************************************************
    // テスト00024 ～ : 要素取得・設定
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    //         実行前にsetConfigを実行すること。
    // 試験手順：①loadを実行する。
    //         ②指定したプロパティの初期値を取得する。
    //         ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
    //         ④saveを実行後、loadを実行する。
    //         ⑤同じプロパティを読み込み、データに変化がないことを確認する。
    //         ⑥③～⑤を異なるテストデータで実施する。
    //         ⑦③～⑤を手順①で取得した初期値で実施する。
    //         ⑧全てのプロパティが初期値になっていることを確認する。
    // 期待結果：全プロパティ値を取得、設定できること。（１要素、1テストで実施する）
    // ********************************************************
     test('00024_element_check_00001', () async {
      print("\n********** テスト実行：00024_element_check_00001 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.info.version;
      print(sys.info.version);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.info.version = testData1s;
      print(sys.info.version);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.info.version == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.info.version == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.info.version = testData2s;
      print(sys.info.version);
      expect(sys.info.version == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.info.version == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.info.version = defalut;
      print(sys.info.version);
      expect(sys.info.version == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.info.version == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00024_element_check_00001 **********\n\n");
    });

    test('00025_element_check_00002', () async {
      print("\n********** テスト実行：00025_element_check_00002 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.info.comment;
      print(sys.info.comment);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.info.comment = testData1s;
      print(sys.info.comment);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.info.comment == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.info.comment == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.info.comment = testData2s;
      print(sys.info.comment);
      expect(sys.info.comment == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.info.comment == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.info.comment = defalut;
      print(sys.info.comment);
      expect(sys.info.comment == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.info.comment == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00025_element_check_00002 **********\n\n");
    });

    test('00026_element_check_00003', () async {
      print("\n********** テスト実行：00026_element_check_00003 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dual;
      print(sys.type.dual);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dual = testData1s;
      print(sys.type.dual);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dual == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dual == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dual = testData2s;
      print(sys.type.dual);
      expect(sys.type.dual == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dual == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dual = defalut;
      print(sys.type.dual);
      expect(sys.type.dual == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dual == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00026_element_check_00003 **********\n\n");
    });

    test('00027_element_check_00004', () async {
      print("\n********** テスト実行：00027_element_check_00004 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.webjr;
      print(sys.type.webjr);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.webjr = testData1s;
      print(sys.type.webjr);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.webjr == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.webjr == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.webjr = testData2s;
      print(sys.type.webjr);
      expect(sys.type.webjr == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.webjr == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.webjr = defalut;
      print(sys.type.webjr);
      expect(sys.type.webjr == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.webjr == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00027_element_check_00004 **********\n\n");
    });

    test('00028_element_check_00005', () async {
      print("\n********** テスト実行：00028_element_check_00005 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.web2300;
      print(sys.type.web2300);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.web2300 = testData1s;
      print(sys.type.web2300);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.web2300 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.web2300 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.web2300 = testData2s;
      print(sys.type.web2300);
      expect(sys.type.web2300 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2300 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.web2300 = defalut;
      print(sys.type.web2300);
      expect(sys.type.web2300 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2300 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00028_element_check_00005 **********\n\n");
    });

    test('00029_element_check_00006', () async {
      print("\n********** テスト実行：00029_element_check_00006 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.webplus;
      print(sys.type.webplus);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.webplus = testData1s;
      print(sys.type.webplus);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.webplus == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.webplus == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.webplus = testData2s;
      print(sys.type.webplus);
      expect(sys.type.webplus == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.webplus == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.webplus = defalut;
      print(sys.type.webplus);
      expect(sys.type.webplus == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.webplus == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00029_element_check_00006 **********\n\n");
    });

    test('00030_element_check_00007', () async {
      print("\n********** テスト実行：00030_element_check_00007 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.web2800;
      print(sys.type.web2800);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.web2800 = testData1s;
      print(sys.type.web2800);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.web2800 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.web2800 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.web2800 = testData2s;
      print(sys.type.web2800);
      expect(sys.type.web2800 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2800 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.web2800 = defalut;
      print(sys.type.web2800);
      expect(sys.type.web2800 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2800 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00030_element_check_00007 **********\n\n");
    });

    test('00031_element_check_00008', () async {
      print("\n********** テスト実行：00031_element_check_00008 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.web2350;
      print(sys.type.web2350);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.web2350 = testData1s;
      print(sys.type.web2350);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.web2350 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.web2350 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.web2350 = testData2s;
      print(sys.type.web2350);
      expect(sys.type.web2350 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2350 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.web2350 = defalut;
      print(sys.type.web2350);
      expect(sys.type.web2350 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2350 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00031_element_check_00008 **********\n\n");
    });

    test('00032_element_check_00009', () async {
      print("\n********** テスト実行：00032_element_check_00009 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.web2500;
      print(sys.type.web2500);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.web2500 = testData1s;
      print(sys.type.web2500);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.web2500 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.web2500 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.web2500 = testData2s;
      print(sys.type.web2500);
      expect(sys.type.web2500 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2500 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.web2500 = defalut;
      print(sys.type.web2500);
      expect(sys.type.web2500 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.web2500 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00032_element_check_00009 **********\n\n");
    });

    test('00033_element_check_00010', () async {
      print("\n********** テスト実行：00033_element_check_00010 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.webplus2;
      print(sys.type.webplus2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.webplus2 = testData1s;
      print(sys.type.webplus2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.webplus2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.webplus2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.webplus2 = testData2s;
      print(sys.type.webplus2);
      expect(sys.type.webplus2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.webplus2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.webplus2 = defalut;
      print(sys.type.webplus2);
      expect(sys.type.webplus2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.webplus2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00033_element_check_00010 **********\n\n");
    });

    test('00034_element_check_00011', () async {
      print("\n********** テスト実行：00034_element_check_00011 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tower;
      print(sys.type.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tower = testData1s;
      print(sys.type.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tower == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tower == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tower = testData2s;
      print(sys.type.tower);
      expect(sys.type.tower == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tower == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tower = defalut;
      print(sys.type.tower);
      expect(sys.type.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00034_element_check_00011 **********\n\n");
    });

    test('00035_element_check_00012', () async {
      print("\n********** テスト実行：00035_element_check_00012 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mskind;
      print(sys.type.mskind);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mskind = testData1s;
      print(sys.type.mskind);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mskind == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mskind == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mskind = testData2s;
      print(sys.type.mskind);
      expect(sys.type.mskind == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mskind == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mskind = defalut;
      print(sys.type.mskind);
      expect(sys.type.mskind == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mskind == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00035_element_check_00012 **********\n\n");
    });

    test('00036_element_check_00013', () async {
      print("\n********** テスト実行：00036_element_check_00013 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.standalone;
      print(sys.type.standalone);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.standalone = testData1s;
      print(sys.type.standalone);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.standalone == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.standalone == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.standalone = testData2s;
      print(sys.type.standalone);
      expect(sys.type.standalone == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.standalone == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.standalone = defalut;
      print(sys.type.standalone);
      expect(sys.type.standalone == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.standalone == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00036_element_check_00013 **********\n\n");
    });

    test('00037_element_check_00014', () async {
      print("\n********** テスト実行：00037_element_check_00014 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.membersystem;
      print(sys.type.membersystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.membersystem = testData1s;
      print(sys.type.membersystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.membersystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.membersystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.membersystem = testData2s;
      print(sys.type.membersystem);
      expect(sys.type.membersystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.membersystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.membersystem = defalut;
      print(sys.type.membersystem);
      expect(sys.type.membersystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.membersystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00037_element_check_00014 **********\n\n");
    });

    test('00038_element_check_00015', () async {
      print("\n********** テスト実行：00038_element_check_00015 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.memberpoint;
      print(sys.type.memberpoint);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.memberpoint = testData1s;
      print(sys.type.memberpoint);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.memberpoint == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.memberpoint == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.memberpoint = testData2s;
      print(sys.type.memberpoint);
      expect(sys.type.memberpoint == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.memberpoint == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.memberpoint = defalut;
      print(sys.type.memberpoint);
      expect(sys.type.memberpoint == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.memberpoint == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00038_element_check_00015 **********\n\n");
    });

    test('00039_element_check_00016', () async {
      print("\n********** テスト実行：00039_element_check_00016 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.memberfsp;
      print(sys.type.memberfsp);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.memberfsp = testData1s;
      print(sys.type.memberfsp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.memberfsp == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.memberfsp == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.memberfsp = testData2s;
      print(sys.type.memberfsp);
      expect(sys.type.memberfsp == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.memberfsp == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.memberfsp = defalut;
      print(sys.type.memberfsp);
      expect(sys.type.memberfsp == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.memberfsp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00039_element_check_00016 **********\n\n");
    });

    test('00040_element_check_00017', () async {
      print("\n********** テスト実行：00040_element_check_00017 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.creditsystem;
      print(sys.type.creditsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.creditsystem = testData1s;
      print(sys.type.creditsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.creditsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.creditsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.creditsystem = testData2s;
      print(sys.type.creditsystem);
      expect(sys.type.creditsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.creditsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.creditsystem = defalut;
      print(sys.type.creditsystem);
      expect(sys.type.creditsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.creditsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00040_element_check_00017 **********\n\n");
    });

    test('00041_element_check_00018', () async {
      print("\n********** テスト実行：00041_element_check_00018 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.special_receipt;
      print(sys.type.special_receipt);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.special_receipt = testData1s;
      print(sys.type.special_receipt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.special_receipt == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.special_receipt == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.special_receipt = testData2s;
      print(sys.type.special_receipt);
      expect(sys.type.special_receipt == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.special_receipt == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.special_receipt = defalut;
      print(sys.type.special_receipt);
      expect(sys.type.special_receipt == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.special_receipt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00041_element_check_00018 **********\n\n");
    });

    test('00042_element_check_00019', () async {
      print("\n********** テスト実行：00042_element_check_00019 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.disc_barcode;
      print(sys.type.disc_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.disc_barcode = testData1s;
      print(sys.type.disc_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.disc_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.disc_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.disc_barcode = testData2s;
      print(sys.type.disc_barcode);
      expect(sys.type.disc_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.disc_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.disc_barcode = defalut;
      print(sys.type.disc_barcode);
      expect(sys.type.disc_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.disc_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00042_element_check_00019 **********\n\n");
    });

    test('00043_element_check_00020', () async {
      print("\n********** テスト実行：00043_element_check_00020 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.iwaisystem;
      print(sys.type.iwaisystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.iwaisystem = testData1s;
      print(sys.type.iwaisystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.iwaisystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.iwaisystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.iwaisystem = testData2s;
      print(sys.type.iwaisystem);
      expect(sys.type.iwaisystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.iwaisystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.iwaisystem = defalut;
      print(sys.type.iwaisystem);
      expect(sys.type.iwaisystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.iwaisystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00043_element_check_00020 **********\n\n");
    });

    test('00044_element_check_00021', () async {
      print("\n********** テスト実行：00044_element_check_00021 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.self_gate;
      print(sys.type.self_gate);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.self_gate = testData1s;
      print(sys.type.self_gate);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.self_gate == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.self_gate == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.self_gate = testData2s;
      print(sys.type.self_gate);
      expect(sys.type.self_gate == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.self_gate == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.self_gate = defalut;
      print(sys.type.self_gate);
      expect(sys.type.self_gate == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.self_gate == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00044_element_check_00021 **********\n\n");
    });

    test('00045_element_check_00022', () async {
      print("\n********** テスト実行：00045_element_check_00022 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.vismacsystem;
      print(sys.type.vismacsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.vismacsystem = testData1s;
      print(sys.type.vismacsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.vismacsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.vismacsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.vismacsystem = testData2s;
      print(sys.type.vismacsystem);
      expect(sys.type.vismacsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.vismacsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.vismacsystem = defalut;
      print(sys.type.vismacsystem);
      expect(sys.type.vismacsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.vismacsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00045_element_check_00022 **********\n\n");
    });

    test('00046_element_check_00023', () async {
      print("\n********** テスト実行：00046_element_check_00023 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sys_24hour;
      print(sys.type.sys_24hour);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sys_24hour = testData1s;
      print(sys.type.sys_24hour);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sys_24hour == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sys_24hour == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sys_24hour = testData2s;
      print(sys.type.sys_24hour);
      expect(sys.type.sys_24hour == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sys_24hour == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sys_24hour = defalut;
      print(sys.type.sys_24hour);
      expect(sys.type.sys_24hour == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sys_24hour == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00046_element_check_00023 **********\n\n");
    });

    test('00047_element_check_00024', () async {
      print("\n********** テスト実行：00047_element_check_00024 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hq_asp;
      print(sys.type.hq_asp);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hq_asp = testData1s;
      print(sys.type.hq_asp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hq_asp == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hq_asp == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hq_asp = testData2s;
      print(sys.type.hq_asp);
      expect(sys.type.hq_asp == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_asp == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hq_asp = defalut;
      print(sys.type.hq_asp);
      expect(sys.type.hq_asp == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_asp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00047_element_check_00024 **********\n\n");
    });

    test('00048_element_check_00025', () async {
      print("\n********** テスト実行：00048_element_check_00025 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.jasaitama_sys;
      print(sys.type.jasaitama_sys);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.jasaitama_sys = testData1s;
      print(sys.type.jasaitama_sys);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.jasaitama_sys == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.jasaitama_sys == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.jasaitama_sys = testData2s;
      print(sys.type.jasaitama_sys);
      expect(sys.type.jasaitama_sys == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jasaitama_sys == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.jasaitama_sys = defalut;
      print(sys.type.jasaitama_sys);
      expect(sys.type.jasaitama_sys == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jasaitama_sys == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00048_element_check_00025 **********\n\n");
    });

    test('00049_element_check_00026', () async {
      print("\n********** テスト実行：00049_element_check_00026 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.promsystem;
      print(sys.type.promsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.promsystem = testData1s;
      print(sys.type.promsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.promsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.promsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.promsystem = testData2s;
      print(sys.type.promsystem);
      expect(sys.type.promsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.promsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.promsystem = defalut;
      print(sys.type.promsystem);
      expect(sys.type.promsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.promsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00049_element_check_00026 **********\n\n");
    });

    test('00050_element_check_00027', () async {
      print("\n********** テスト実行：00050_element_check_00027 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.edysystem;
      print(sys.type.edysystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.edysystem = testData1s;
      print(sys.type.edysystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.edysystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.edysystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.edysystem = testData2s;
      print(sys.type.edysystem);
      expect(sys.type.edysystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.edysystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.edysystem = defalut;
      print(sys.type.edysystem);
      expect(sys.type.edysystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.edysystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00050_element_check_00027 **********\n\n");
    });

    test('00051_element_check_00028', () async {
      print("\n********** テスト実行：00051_element_check_00028 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fresh_barcode;
      print(sys.type.fresh_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fresh_barcode = testData1s;
      print(sys.type.fresh_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fresh_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fresh_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fresh_barcode = testData2s;
      print(sys.type.fresh_barcode);
      expect(sys.type.fresh_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fresh_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fresh_barcode = defalut;
      print(sys.type.fresh_barcode);
      expect(sys.type.fresh_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fresh_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00051_element_check_00028 **********\n\n");
    });

    test('00052_element_check_00029', () async {
      print("\n********** テスト実行：00052_element_check_00029 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sugi_sys;
      print(sys.type.sugi_sys);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sugi_sys = testData1s;
      print(sys.type.sugi_sys);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sugi_sys == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sugi_sys == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sugi_sys = testData2s;
      print(sys.type.sugi_sys);
      expect(sys.type.sugi_sys == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sugi_sys == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sugi_sys = defalut;
      print(sys.type.sugi_sys);
      expect(sys.type.sugi_sys == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sugi_sys == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00052_element_check_00029 **********\n\n");
    });

    test('00053_element_check_00030', () async {
      print("\n********** テスト実行：00053_element_check_00030 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hesokurisystem;
      print(sys.type.hesokurisystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hesokurisystem = testData1s;
      print(sys.type.hesokurisystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hesokurisystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hesokurisystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hesokurisystem = testData2s;
      print(sys.type.hesokurisystem);
      expect(sys.type.hesokurisystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hesokurisystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hesokurisystem = defalut;
      print(sys.type.hesokurisystem);
      expect(sys.type.hesokurisystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hesokurisystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00053_element_check_00030 **********\n\n");
    });

    test('00054_element_check_00031', () async {
      print("\n********** テスト実行：00054_element_check_00031 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.greenstamp_sys;
      print(sys.type.greenstamp_sys);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.greenstamp_sys = testData1s;
      print(sys.type.greenstamp_sys);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.greenstamp_sys == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.greenstamp_sys == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.greenstamp_sys = testData2s;
      print(sys.type.greenstamp_sys);
      expect(sys.type.greenstamp_sys == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.greenstamp_sys == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.greenstamp_sys = defalut;
      print(sys.type.greenstamp_sys);
      expect(sys.type.greenstamp_sys == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.greenstamp_sys == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00054_element_check_00031 **********\n\n");
    });

    test('00055_element_check_00032', () async {
      print("\n********** テスト実行：00055_element_check_00032 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.coopsystem;
      print(sys.type.coopsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.coopsystem = testData1s;
      print(sys.type.coopsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.coopsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.coopsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.coopsystem = testData2s;
      print(sys.type.coopsystem);
      expect(sys.type.coopsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.coopsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.coopsystem = defalut;
      print(sys.type.coopsystem);
      expect(sys.type.coopsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.coopsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00055_element_check_00032 **********\n\n");
    });

    test('00056_element_check_00033', () async {
      print("\n********** テスト実行：00056_element_check_00033 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pointcardsystem;
      print(sys.type.pointcardsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pointcardsystem = testData1s;
      print(sys.type.pointcardsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pointcardsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pointcardsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pointcardsystem = testData2s;
      print(sys.type.pointcardsystem);
      expect(sys.type.pointcardsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pointcardsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pointcardsystem = defalut;
      print(sys.type.pointcardsystem);
      expect(sys.type.pointcardsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pointcardsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00056_element_check_00033 **********\n\n");
    });

    test('00057_element_check_00034', () async {
      print("\n********** テスト実行：00057_element_check_00034 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mobilesystem;
      print(sys.type.mobilesystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mobilesystem = testData1s;
      print(sys.type.mobilesystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mobilesystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mobilesystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mobilesystem = testData2s;
      print(sys.type.mobilesystem);
      expect(sys.type.mobilesystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mobilesystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mobilesystem = defalut;
      print(sys.type.mobilesystem);
      expect(sys.type.mobilesystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mobilesystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00057_element_check_00034 **********\n\n");
    });

    test('00058_element_check_00035', () async {
      print("\n********** テスト実行：00058_element_check_00035 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hq_other;
      print(sys.type.hq_other);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hq_other = testData1s;
      print(sys.type.hq_other);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hq_other == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hq_other == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hq_other = testData2s;
      print(sys.type.hq_other);
      expect(sys.type.hq_other == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_other == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hq_other = defalut;
      print(sys.type.hq_other);
      expect(sys.type.hq_other == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_other == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00058_element_check_00035 **********\n\n");
    });

    test('00059_element_check_00036', () async {
      print("\n********** テスト実行：00059_element_check_00036 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.regconnectsystem;
      print(sys.type.regconnectsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.regconnectsystem = testData1s;
      print(sys.type.regconnectsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.regconnectsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.regconnectsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.regconnectsystem = testData2s;
      print(sys.type.regconnectsystem);
      expect(sys.type.regconnectsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.regconnectsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.regconnectsystem = defalut;
      print(sys.type.regconnectsystem);
      expect(sys.type.regconnectsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.regconnectsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00059_element_check_00036 **********\n\n");
    });

    test('00060_element_check_00037', () async {
      print("\n********** テスト実行：00060_element_check_00037 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.clothes_barcode;
      print(sys.type.clothes_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.clothes_barcode = testData1s;
      print(sys.type.clothes_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.clothes_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.clothes_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.clothes_barcode = testData2s;
      print(sys.type.clothes_barcode);
      expect(sys.type.clothes_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.clothes_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.clothes_barcode = defalut;
      print(sys.type.clothes_barcode);
      expect(sys.type.clothes_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.clothes_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00060_element_check_00037 **********\n\n");
    });

    test('00061_element_check_00038', () async {
      print("\n********** テスト実行：00061_element_check_00038 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fjss;
      print(sys.type.fjss);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fjss = testData1s;
      print(sys.type.fjss);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fjss == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fjss == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fjss = testData2s;
      print(sys.type.fjss);
      expect(sys.type.fjss == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fjss == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fjss = defalut;
      print(sys.type.fjss);
      expect(sys.type.fjss == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fjss == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00061_element_check_00038 **********\n\n");
    });

    test('00062_element_check_00039', () async {
      print("\n********** テスト実行：00062_element_check_00039 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mcsystem;
      print(sys.type.mcsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mcsystem = testData1s;
      print(sys.type.mcsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mcsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mcsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mcsystem = testData2s;
      print(sys.type.mcsystem);
      expect(sys.type.mcsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mcsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mcsystem = defalut;
      print(sys.type.mcsystem);
      expect(sys.type.mcsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mcsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00062_element_check_00039 **********\n\n");
    });

    test('00063_element_check_00040', () async {
      print("\n********** テスト実行：00063_element_check_00040 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.network_prn;
      print(sys.type.network_prn);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.network_prn = testData1s;
      print(sys.type.network_prn);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.network_prn == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.network_prn == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.network_prn = testData2s;
      print(sys.type.network_prn);
      expect(sys.type.network_prn == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.network_prn == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.network_prn = defalut;
      print(sys.type.network_prn);
      expect(sys.type.network_prn == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.network_prn == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00063_element_check_00040 **********\n\n");
    });

    test('00064_element_check_00041', () async {
      print("\n********** テスト実行：00064_element_check_00041 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.poppy_print;
      print(sys.type.poppy_print);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.poppy_print = testData1s;
      print(sys.type.poppy_print);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.poppy_print == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.poppy_print == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.poppy_print = testData2s;
      print(sys.type.poppy_print);
      expect(sys.type.poppy_print == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.poppy_print == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.poppy_print = defalut;
      print(sys.type.poppy_print);
      expect(sys.type.poppy_print == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.poppy_print == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00064_element_check_00041 **********\n\n");
    });

    test('00065_element_check_00042', () async {
      print("\n********** テスト実行：00065_element_check_00042 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tag_print;
      print(sys.type.tag_print);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tag_print = testData1s;
      print(sys.type.tag_print);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tag_print == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tag_print == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tag_print = testData2s;
      print(sys.type.tag_print);
      expect(sys.type.tag_print == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tag_print == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tag_print = defalut;
      print(sys.type.tag_print);
      expect(sys.type.tag_print == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tag_print == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00065_element_check_00042 **********\n\n");
    });

    test('00066_element_check_00043', () async {
      print("\n********** テスト実行：00066_element_check_00043 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.taurus;
      print(sys.type.taurus);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.taurus = testData1s;
      print(sys.type.taurus);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.taurus == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.taurus == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.taurus = testData2s;
      print(sys.type.taurus);
      expect(sys.type.taurus == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.taurus == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.taurus = defalut;
      print(sys.type.taurus);
      expect(sys.type.taurus == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.taurus == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00066_element_check_00043 **********\n\n");
    });

    test('00067_element_check_00044', () async {
      print("\n********** テスト実行：00067_element_check_00044 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ntt_asp;
      print(sys.type.ntt_asp);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ntt_asp = testData1s;
      print(sys.type.ntt_asp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ntt_asp == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ntt_asp == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ntt_asp = testData2s;
      print(sys.type.ntt_asp);
      expect(sys.type.ntt_asp == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ntt_asp == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ntt_asp = defalut;
      print(sys.type.ntt_asp);
      expect(sys.type.ntt_asp == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ntt_asp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00067_element_check_00044 **********\n\n");
    });

    test('00068_element_check_00045', () async {
      print("\n********** テスト実行：00068_element_check_00045 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.eat_in;
      print(sys.type.eat_in);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.eat_in = testData1s;
      print(sys.type.eat_in);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.eat_in == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.eat_in == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.eat_in = testData2s;
      print(sys.type.eat_in);
      expect(sys.type.eat_in == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.eat_in == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.eat_in = defalut;
      print(sys.type.eat_in);
      expect(sys.type.eat_in == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.eat_in == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00068_element_check_00045 **********\n\n");
    });

    test('00069_element_check_00046', () async {
      print("\n********** テスト実行：00069_element_check_00046 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mobilesystem2;
      print(sys.type.mobilesystem2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mobilesystem2 = testData1s;
      print(sys.type.mobilesystem2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mobilesystem2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mobilesystem2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mobilesystem2 = testData2s;
      print(sys.type.mobilesystem2);
      expect(sys.type.mobilesystem2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mobilesystem2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mobilesystem2 = defalut;
      print(sys.type.mobilesystem2);
      expect(sys.type.mobilesystem2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mobilesystem2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00069_element_check_00046 **********\n\n");
    });

    test('00070_element_check_00047', () async {
      print("\n********** テスト実行：00070_element_check_00047 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.magazine_barcode;
      print(sys.type.magazine_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.magazine_barcode = testData1s;
      print(sys.type.magazine_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.magazine_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.magazine_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.magazine_barcode = testData2s;
      print(sys.type.magazine_barcode);
      expect(sys.type.magazine_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.magazine_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.magazine_barcode = defalut;
      print(sys.type.magazine_barcode);
      expect(sys.type.magazine_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.magazine_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00070_element_check_00047 **********\n\n");
    });

    test('00071_element_check_00048', () async {
      print("\n********** テスト実行：00071_element_check_00048 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hq_other_real;
      print(sys.type.hq_other_real);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hq_other_real = testData1s;
      print(sys.type.hq_other_real);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hq_other_real == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hq_other_real == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hq_other_real = testData2s;
      print(sys.type.hq_other_real);
      expect(sys.type.hq_other_real == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_other_real == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hq_other_real = defalut;
      print(sys.type.hq_other_real);
      expect(sys.type.hq_other_real == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_other_real == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00071_element_check_00048 **********\n\n");
    });

    test('00072_element_check_00049', () async {
      print("\n********** テスト実行：00072_element_check_00049 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pw410system;
      print(sys.type.pw410system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pw410system = testData1s;
      print(sys.type.pw410system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pw410system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pw410system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pw410system = testData2s;
      print(sys.type.pw410system);
      expect(sys.type.pw410system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pw410system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pw410system = defalut;
      print(sys.type.pw410system);
      expect(sys.type.pw410system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pw410system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00072_element_check_00049 **********\n\n");
    });

    test('00073_element_check_00050', () async {
      print("\n********** テスト実行：00073_element_check_00050 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.nsc_credit;
      print(sys.type.nsc_credit);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.nsc_credit = testData1s;
      print(sys.type.nsc_credit);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.nsc_credit == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.nsc_credit == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.nsc_credit = testData2s;
      print(sys.type.nsc_credit);
      expect(sys.type.nsc_credit == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.nsc_credit == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.nsc_credit = defalut;
      print(sys.type.nsc_credit);
      expect(sys.type.nsc_credit == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.nsc_credit == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00073_element_check_00050 **********\n\n");
    });

    test('00074_element_check_00051', () async {
      print("\n********** テスト実行：00074_element_check_00051 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hq_prod;
      print(sys.type.hq_prod);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hq_prod = testData1s;
      print(sys.type.hq_prod);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hq_prod == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hq_prod == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hq_prod = testData2s;
      print(sys.type.hq_prod);
      expect(sys.type.hq_prod == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_prod == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hq_prod = defalut;
      print(sys.type.hq_prod);
      expect(sys.type.hq_prod == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_prod == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00074_element_check_00051 **********\n\n");
    });

    test('00075_element_check_00052', () async {
      print("\n********** テスト実行：00075_element_check_00052 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.felicasystem;
      print(sys.type.felicasystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.felicasystem = testData1s;
      print(sys.type.felicasystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.felicasystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.felicasystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.felicasystem = testData2s;
      print(sys.type.felicasystem);
      expect(sys.type.felicasystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.felicasystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.felicasystem = defalut;
      print(sys.type.felicasystem);
      expect(sys.type.felicasystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.felicasystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00075_element_check_00052 **********\n\n");
    });

    test('00076_element_check_00053', () async {
      print("\n********** テスト実行：00076_element_check_00053 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.psp70system;
      print(sys.type.psp70system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.psp70system = testData1s;
      print(sys.type.psp70system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.psp70system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.psp70system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.psp70system = testData2s;
      print(sys.type.psp70system);
      expect(sys.type.psp70system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.psp70system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.psp70system = defalut;
      print(sys.type.psp70system);
      expect(sys.type.psp70system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.psp70system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00076_element_check_00053 **********\n\n");
    });

    test('00077_element_check_00054', () async {
      print("\n********** テスト実行：00077_element_check_00054 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ntt_bcom;
      print(sys.type.ntt_bcom);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ntt_bcom = testData1s;
      print(sys.type.ntt_bcom);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ntt_bcom == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ntt_bcom == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ntt_bcom = testData2s;
      print(sys.type.ntt_bcom);
      expect(sys.type.ntt_bcom == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ntt_bcom == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ntt_bcom = defalut;
      print(sys.type.ntt_bcom);
      expect(sys.type.ntt_bcom == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ntt_bcom == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00077_element_check_00054 **********\n\n");
    });

    test('00078_element_check_00055', () async {
      print("\n********** テスト実行：00078_element_check_00055 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.catalinasystem;
      print(sys.type.catalinasystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.catalinasystem = testData1s;
      print(sys.type.catalinasystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.catalinasystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.catalinasystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.catalinasystem = testData2s;
      print(sys.type.catalinasystem);
      expect(sys.type.catalinasystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.catalinasystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.catalinasystem = defalut;
      print(sys.type.catalinasystem);
      expect(sys.type.catalinasystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.catalinasystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00078_element_check_00055 **********\n\n");
    });

    test('00079_element_check_00056', () async {
      print("\n********** テスト実行：00079_element_check_00056 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.prcchkr;
      print(sys.type.prcchkr);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.prcchkr = testData1s;
      print(sys.type.prcchkr);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.prcchkr == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.prcchkr == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.prcchkr = testData2s;
      print(sys.type.prcchkr);
      expect(sys.type.prcchkr == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prcchkr == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.prcchkr = defalut;
      print(sys.type.prcchkr);
      expect(sys.type.prcchkr == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prcchkr == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00079_element_check_00056 **********\n\n");
    });

    test('00080_element_check_00057', () async {
      print("\n********** テスト実行：00080_element_check_00057 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dishcalcsystem;
      print(sys.type.dishcalcsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dishcalcsystem = testData1s;
      print(sys.type.dishcalcsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dishcalcsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dishcalcsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dishcalcsystem = testData2s;
      print(sys.type.dishcalcsystem);
      expect(sys.type.dishcalcsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dishcalcsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dishcalcsystem = defalut;
      print(sys.type.dishcalcsystem);
      expect(sys.type.dishcalcsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dishcalcsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00080_element_check_00057 **********\n\n");
    });

    test('00081_element_check_00058', () async {
      print("\n********** テスト実行：00081_element_check_00058 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.itf_barcode;
      print(sys.type.itf_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.itf_barcode = testData1s;
      print(sys.type.itf_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.itf_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.itf_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.itf_barcode = testData2s;
      print(sys.type.itf_barcode);
      expect(sys.type.itf_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.itf_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.itf_barcode = defalut;
      print(sys.type.itf_barcode);
      expect(sys.type.itf_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.itf_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00081_element_check_00058 **********\n\n");
    });

    test('00082_element_check_00059', () async {
      print("\n********** テスト実行：00082_element_check_00059 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.css_act;
      print(sys.type.css_act);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.css_act = testData1s;
      print(sys.type.css_act);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.css_act == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.css_act == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.css_act = testData2s;
      print(sys.type.css_act);
      expect(sys.type.css_act == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.css_act == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.css_act = defalut;
      print(sys.type.css_act);
      expect(sys.type.css_act == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.css_act == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00082_element_check_00059 **********\n\n");
    });

    test('00083_element_check_00060', () async {
      print("\n********** テスト実行：00083_element_check_00060 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cust_detail;
      print(sys.type.cust_detail);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cust_detail = testData1s;
      print(sys.type.cust_detail);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cust_detail == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cust_detail == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cust_detail = testData2s;
      print(sys.type.cust_detail);
      expect(sys.type.cust_detail == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cust_detail == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cust_detail = defalut;
      print(sys.type.cust_detail);
      expect(sys.type.cust_detail == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cust_detail == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00083_element_check_00060 **********\n\n");
    });

    test('00084_element_check_00061', () async {
      print("\n********** テスト実行：00084_element_check_00061 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custrealsvr;
      print(sys.type.custrealsvr);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custrealsvr = testData1s;
      print(sys.type.custrealsvr);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custrealsvr == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custrealsvr == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custrealsvr = testData2s;
      print(sys.type.custrealsvr);
      expect(sys.type.custrealsvr == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custrealsvr == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custrealsvr = defalut;
      print(sys.type.custrealsvr);
      expect(sys.type.custrealsvr == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custrealsvr == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00084_element_check_00061 **********\n\n");
    });

    test('00085_element_check_00062', () async {
      print("\n********** テスト実行：00085_element_check_00062 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.suica_cat;
      print(sys.type.suica_cat);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.suica_cat = testData1s;
      print(sys.type.suica_cat);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.suica_cat == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.suica_cat == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.suica_cat = testData2s;
      print(sys.type.suica_cat);
      expect(sys.type.suica_cat == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.suica_cat == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.suica_cat = defalut;
      print(sys.type.suica_cat);
      expect(sys.type.suica_cat == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.suica_cat == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00085_element_check_00062 **********\n\n");
    });

    test('00086_element_check_00063', () async {
      print("\n********** テスト実行：00086_element_check_00063 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.yomocasystem;
      print(sys.type.yomocasystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.yomocasystem = testData1s;
      print(sys.type.yomocasystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.yomocasystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.yomocasystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.yomocasystem = testData2s;
      print(sys.type.yomocasystem);
      expect(sys.type.yomocasystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yomocasystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.yomocasystem = defalut;
      print(sys.type.yomocasystem);
      expect(sys.type.yomocasystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yomocasystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00086_element_check_00063 **********\n\n");
    });

    test('00087_element_check_00064', () async {
      print("\n********** テスト実行：00087_element_check_00064 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.smartplussystem;
      print(sys.type.smartplussystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.smartplussystem = testData1s;
      print(sys.type.smartplussystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.smartplussystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.smartplussystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.smartplussystem = testData2s;
      print(sys.type.smartplussystem);
      expect(sys.type.smartplussystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.smartplussystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.smartplussystem = defalut;
      print(sys.type.smartplussystem);
      expect(sys.type.smartplussystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.smartplussystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00087_element_check_00064 **********\n\n");
    });

    test('00088_element_check_00065', () async {
      print("\n********** テスト実行：00088_element_check_00065 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.duty;
      print(sys.type.duty);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.duty = testData1s;
      print(sys.type.duty);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.duty == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.duty == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.duty = testData2s;
      print(sys.type.duty);
      expect(sys.type.duty == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.duty == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.duty = defalut;
      print(sys.type.duty);
      expect(sys.type.duty == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.duty == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00088_element_check_00065 **********\n\n");
    });

    test('00089_element_check_00066', () async {
      print("\n********** テスト実行：00089_element_check_00066 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ecoasystem;
      print(sys.type.ecoasystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ecoasystem = testData1s;
      print(sys.type.ecoasystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ecoasystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ecoasystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ecoasystem = testData2s;
      print(sys.type.ecoasystem);
      expect(sys.type.ecoasystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ecoasystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ecoasystem = defalut;
      print(sys.type.ecoasystem);
      expect(sys.type.ecoasystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ecoasystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00089_element_check_00066 **********\n\n");
    });

    test('00090_element_check_00067', () async {
      print("\n********** テスト実行：00090_element_check_00067 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.iccardsystem;
      print(sys.type.iccardsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.iccardsystem = testData1s;
      print(sys.type.iccardsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.iccardsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.iccardsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.iccardsystem = testData2s;
      print(sys.type.iccardsystem);
      expect(sys.type.iccardsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.iccardsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.iccardsystem = defalut;
      print(sys.type.iccardsystem);
      expect(sys.type.iccardsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.iccardsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00090_element_check_00067 **********\n\n");
    });

    test('00091_element_check_00068', () async {
      print("\n********** テスト実行：00091_element_check_00068 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sub_ticket;
      print(sys.type.sub_ticket);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sub_ticket = testData1s;
      print(sys.type.sub_ticket);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sub_ticket == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sub_ticket == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sub_ticket = testData2s;
      print(sys.type.sub_ticket);
      expect(sys.type.sub_ticket == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sub_ticket == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sub_ticket = defalut;
      print(sys.type.sub_ticket);
      expect(sys.type.sub_ticket == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sub_ticket == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00091_element_check_00068 **********\n\n");
    });

    test('00092_element_check_00069', () async {
      print("\n********** テスト実行：00092_element_check_00069 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.quicpaysystem;
      print(sys.type.quicpaysystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.quicpaysystem = testData1s;
      print(sys.type.quicpaysystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.quicpaysystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.quicpaysystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.quicpaysystem = testData2s;
      print(sys.type.quicpaysystem);
      expect(sys.type.quicpaysystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quicpaysystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.quicpaysystem = defalut;
      print(sys.type.quicpaysystem);
      expect(sys.type.quicpaysystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quicpaysystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00092_element_check_00069 **********\n\n");
    });

    test('00093_element_check_00070', () async {
      print("\n********** テスト実行：00093_element_check_00070 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.idsystem;
      print(sys.type.idsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.idsystem = testData1s;
      print(sys.type.idsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.idsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.idsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.idsystem = testData2s;
      print(sys.type.idsystem);
      expect(sys.type.idsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.idsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.idsystem = defalut;
      print(sys.type.idsystem);
      expect(sys.type.idsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.idsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00093_element_check_00070 **********\n\n");
    });

    test('00094_element_check_00071', () async {
      print("\n********** テスト実行：00094_element_check_00071 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.revival_receipt;
      print(sys.type.revival_receipt);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.revival_receipt = testData1s;
      print(sys.type.revival_receipt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.revival_receipt == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.revival_receipt == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.revival_receipt = testData2s;
      print(sys.type.revival_receipt);
      expect(sys.type.revival_receipt == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.revival_receipt == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.revival_receipt = defalut;
      print(sys.type.revival_receipt);
      expect(sys.type.revival_receipt == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.revival_receipt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00094_element_check_00071 **********\n\n");
    });

    test('00095_element_check_00072', () async {
      print("\n********** テスト実行：00095_element_check_00072 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.quick_self;
      print(sys.type.quick_self);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.quick_self = testData1s;
      print(sys.type.quick_self);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.quick_self == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.quick_self == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.quick_self = testData2s;
      print(sys.type.quick_self);
      expect(sys.type.quick_self == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quick_self == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.quick_self = defalut;
      print(sys.type.quick_self);
      expect(sys.type.quick_self == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quick_self == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00095_element_check_00072 **********\n\n");
    });

    test('00096_element_check_00073', () async {
      print("\n********** テスト実行：00096_element_check_00073 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.quick_self_chg;
      print(sys.type.quick_self_chg);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.quick_self_chg = testData1s;
      print(sys.type.quick_self_chg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.quick_self_chg == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.quick_self_chg == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.quick_self_chg = testData2s;
      print(sys.type.quick_self_chg);
      expect(sys.type.quick_self_chg == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quick_self_chg == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.quick_self_chg = defalut;
      print(sys.type.quick_self_chg);
      expect(sys.type.quick_self_chg == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quick_self_chg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00096_element_check_00073 **********\n\n");
    });

    test('00097_element_check_00074', () async {
      print("\n********** テスト実行：00097_element_check_00074 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.assist_monitor;
      print(sys.type.assist_monitor);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.assist_monitor = testData1s;
      print(sys.type.assist_monitor);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.assist_monitor == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.assist_monitor == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.assist_monitor = testData2s;
      print(sys.type.assist_monitor);
      expect(sys.type.assist_monitor == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.assist_monitor == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.assist_monitor = defalut;
      print(sys.type.assist_monitor);
      expect(sys.type.assist_monitor == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.assist_monitor == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00097_element_check_00074 **********\n\n");
    });

    test('00098_element_check_00075', () async {
      print("\n********** テスト実行：00098_element_check_00075 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mp1_print;
      print(sys.type.mp1_print);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mp1_print = testData1s;
      print(sys.type.mp1_print);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mp1_print == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mp1_print == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mp1_print = testData2s;
      print(sys.type.mp1_print);
      expect(sys.type.mp1_print == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mp1_print == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mp1_print = defalut;
      print(sys.type.mp1_print);
      expect(sys.type.mp1_print == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mp1_print == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00098_element_check_00075 **********\n\n");
    });

    test('00099_element_check_00076', () async {
      print("\n********** テスト実行：00099_element_check_00076 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.realitmsend;
      print(sys.type.realitmsend);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.realitmsend = testData1s;
      print(sys.type.realitmsend);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.realitmsend == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.realitmsend == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.realitmsend = testData2s;
      print(sys.type.realitmsend);
      expect(sys.type.realitmsend == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.realitmsend == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.realitmsend = defalut;
      print(sys.type.realitmsend);
      expect(sys.type.realitmsend == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.realitmsend == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00099_element_check_00076 **********\n\n");
    });

    test('00100_element_check_00077', () async {
      print("\n********** テスト実行：00100_element_check_00077 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.rainbowcard;
      print(sys.type.rainbowcard);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.rainbowcard = testData1s;
      print(sys.type.rainbowcard);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.rainbowcard == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.rainbowcard == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.rainbowcard = testData2s;
      print(sys.type.rainbowcard);
      expect(sys.type.rainbowcard == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.rainbowcard == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.rainbowcard = defalut;
      print(sys.type.rainbowcard);
      expect(sys.type.rainbowcard == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.rainbowcard == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00100_element_check_00077 **********\n\n");
    });

    test('00101_element_check_00078', () async {
      print("\n********** テスト実行：00101_element_check_00078 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.gramx;
      print(sys.type.gramx);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.gramx = testData1s;
      print(sys.type.gramx);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.gramx == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.gramx == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.gramx = testData2s;
      print(sys.type.gramx);
      expect(sys.type.gramx == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.gramx == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.gramx = defalut;
      print(sys.type.gramx);
      expect(sys.type.gramx == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.gramx == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00101_element_check_00078 **********\n\n");
    });

    test('00102_element_check_00079', () async {
      print("\n********** テスト実行：00102_element_check_00079 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mm_abj;
      print(sys.type.mm_abj);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mm_abj = testData1s;
      print(sys.type.mm_abj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mm_abj == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mm_abj == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mm_abj = testData2s;
      print(sys.type.mm_abj);
      expect(sys.type.mm_abj == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mm_abj == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mm_abj = defalut;
      print(sys.type.mm_abj);
      expect(sys.type.mm_abj == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mm_abj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00102_element_check_00079 **********\n\n");
    });

    test('00103_element_check_00080', () async {
      print("\n********** テスト実行：00103_element_check_00080 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cat_point;
      print(sys.type.cat_point);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cat_point = testData1s;
      print(sys.type.cat_point);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cat_point == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cat_point == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cat_point = testData2s;
      print(sys.type.cat_point);
      expect(sys.type.cat_point == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cat_point == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cat_point = defalut;
      print(sys.type.cat_point);
      expect(sys.type.cat_point == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cat_point == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00103_element_check_00080 **********\n\n");
    });

    test('00104_element_check_00081', () async {
      print("\n********** テスト実行：00104_element_check_00081 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tagrdwt;
      print(sys.type.tagrdwt);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tagrdwt = testData1s;
      print(sys.type.tagrdwt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tagrdwt == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tagrdwt == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tagrdwt = testData2s;
      print(sys.type.tagrdwt);
      expect(sys.type.tagrdwt == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tagrdwt == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tagrdwt = defalut;
      print(sys.type.tagrdwt);
      expect(sys.type.tagrdwt == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tagrdwt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00104_element_check_00081 **********\n\n");
    });

    test('00105_element_check_00082', () async {
      print("\n********** テスト実行：00105_element_check_00082 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.department_store;
      print(sys.type.department_store);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.department_store = testData1s;
      print(sys.type.department_store);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.department_store == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.department_store == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.department_store = testData2s;
      print(sys.type.department_store);
      expect(sys.type.department_store == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.department_store == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.department_store = defalut;
      print(sys.type.department_store);
      expect(sys.type.department_store == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.department_store == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00105_element_check_00082 **********\n\n");
    });

    test('00106_element_check_00083', () async {
      print("\n********** テスト実行：00106_element_check_00083 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.edyno_mbr;
      print(sys.type.edyno_mbr);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.edyno_mbr = testData1s;
      print(sys.type.edyno_mbr);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.edyno_mbr == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.edyno_mbr == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.edyno_mbr = testData2s;
      print(sys.type.edyno_mbr);
      expect(sys.type.edyno_mbr == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.edyno_mbr == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.edyno_mbr = defalut;
      print(sys.type.edyno_mbr);
      expect(sys.type.edyno_mbr == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.edyno_mbr == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00106_element_check_00083 **********\n\n");
    });

    test('00107_element_check_00084', () async {
      print("\n********** テスト実行：00107_element_check_00084 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fcf_card;
      print(sys.type.fcf_card);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fcf_card = testData1s;
      print(sys.type.fcf_card);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fcf_card == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fcf_card == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fcf_card = testData2s;
      print(sys.type.fcf_card);
      expect(sys.type.fcf_card == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fcf_card == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fcf_card = defalut;
      print(sys.type.fcf_card);
      expect(sys.type.fcf_card == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fcf_card == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00107_element_check_00084 **********\n\n");
    });

    test('00108_element_check_00085', () async {
      print("\n********** テスト実行：00108_element_check_00085 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.panamembersystem;
      print(sys.type.panamembersystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.panamembersystem = testData1s;
      print(sys.type.panamembersystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.panamembersystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.panamembersystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.panamembersystem = testData2s;
      print(sys.type.panamembersystem);
      expect(sys.type.panamembersystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.panamembersystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.panamembersystem = defalut;
      print(sys.type.panamembersystem);
      expect(sys.type.panamembersystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.panamembersystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00108_element_check_00085 **********\n\n");
    });

    test('00109_element_check_00086', () async {
      print("\n********** テスト実行：00109_element_check_00086 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.landisk;
      print(sys.type.landisk);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.landisk = testData1s;
      print(sys.type.landisk);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.landisk == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.landisk == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.landisk = testData2s;
      print(sys.type.landisk);
      expect(sys.type.landisk == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.landisk == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.landisk = defalut;
      print(sys.type.landisk);
      expect(sys.type.landisk == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.landisk == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00109_element_check_00086 **********\n\n");
    });

    test('00110_element_check_00087', () async {
      print("\n********** テスト実行：00110_element_check_00087 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pitapasystem;
      print(sys.type.pitapasystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pitapasystem = testData1s;
      print(sys.type.pitapasystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pitapasystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pitapasystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pitapasystem = testData2s;
      print(sys.type.pitapasystem);
      expect(sys.type.pitapasystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pitapasystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pitapasystem = defalut;
      print(sys.type.pitapasystem);
      expect(sys.type.pitapasystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pitapasystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00110_element_check_00087 **********\n\n");
    });

    test('00111_element_check_00088', () async {
      print("\n********** テスト実行：00111_element_check_00088 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tuocardsystem;
      print(sys.type.tuocardsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tuocardsystem = testData1s;
      print(sys.type.tuocardsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tuocardsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tuocardsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tuocardsystem = testData2s;
      print(sys.type.tuocardsystem);
      expect(sys.type.tuocardsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tuocardsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tuocardsystem = defalut;
      print(sys.type.tuocardsystem);
      expect(sys.type.tuocardsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tuocardsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00111_element_check_00088 **********\n\n");
    });

    test('00112_element_check_00089', () async {
      print("\n********** テスト実行：00112_element_check_00089 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sallmtbar;
      print(sys.type.sallmtbar);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sallmtbar = testData1s;
      print(sys.type.sallmtbar);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sallmtbar == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sallmtbar == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sallmtbar = testData2s;
      print(sys.type.sallmtbar);
      expect(sys.type.sallmtbar == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sallmtbar == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sallmtbar = defalut;
      print(sys.type.sallmtbar);
      expect(sys.type.sallmtbar == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sallmtbar == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00112_element_check_00089 **********\n\n");
    });

    test('00113_element_check_00090', () async {
      print("\n********** テスト実行：00113_element_check_00090 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.business_mode;
      print(sys.type.business_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.business_mode = testData1s;
      print(sys.type.business_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.business_mode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.business_mode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.business_mode = testData2s;
      print(sys.type.business_mode);
      expect(sys.type.business_mode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.business_mode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.business_mode = defalut;
      print(sys.type.business_mode);
      expect(sys.type.business_mode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.business_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00113_element_check_00090 **********\n\n");
    });

    test('00114_element_check_00091', () async {
      print("\n********** テスト実行：00114_element_check_00091 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mcp200system;
      print(sys.type.mcp200system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mcp200system = testData1s;
      print(sys.type.mcp200system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mcp200system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mcp200system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mcp200system = testData2s;
      print(sys.type.mcp200system);
      expect(sys.type.mcp200system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mcp200system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mcp200system = defalut;
      print(sys.type.mcp200system);
      expect(sys.type.mcp200system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mcp200system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00114_element_check_00091 **********\n\n");
    });

    test('00115_element_check_00092', () async {
      print("\n********** テスト実行：00115_element_check_00092 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.spvtsystem;
      print(sys.type.spvtsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.spvtsystem = testData1s;
      print(sys.type.spvtsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.spvtsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.spvtsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.spvtsystem = testData2s;
      print(sys.type.spvtsystem);
      expect(sys.type.spvtsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.spvtsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.spvtsystem = defalut;
      print(sys.type.spvtsystem);
      expect(sys.type.spvtsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.spvtsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00115_element_check_00092 **********\n\n");
    });

    test('00116_element_check_00093', () async {
      print("\n********** テスト実行：00116_element_check_00093 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.remotesystem;
      print(sys.type.remotesystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.remotesystem = testData1s;
      print(sys.type.remotesystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.remotesystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.remotesystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.remotesystem = testData2s;
      print(sys.type.remotesystem);
      expect(sys.type.remotesystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.remotesystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.remotesystem = defalut;
      print(sys.type.remotesystem);
      expect(sys.type.remotesystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.remotesystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00116_element_check_00093 **********\n\n");
    });

    test('00117_element_check_00094', () async {
      print("\n********** テスト実行：00117_element_check_00094 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.order_mode;
      print(sys.type.order_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.order_mode = testData1s;
      print(sys.type.order_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.order_mode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.order_mode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.order_mode = testData2s;
      print(sys.type.order_mode);
      expect(sys.type.order_mode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.order_mode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.order_mode = defalut;
      print(sys.type.order_mode);
      expect(sys.type.order_mode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.order_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00117_element_check_00094 **********\n\n");
    });

    test('00118_element_check_00095', () async {
      print("\n********** テスト実行：00118_element_check_00095 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.jrem_multisystem;
      print(sys.type.jrem_multisystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.jrem_multisystem = testData1s;
      print(sys.type.jrem_multisystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.jrem_multisystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.jrem_multisystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.jrem_multisystem = testData2s;
      print(sys.type.jrem_multisystem);
      expect(sys.type.jrem_multisystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jrem_multisystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.jrem_multisystem = defalut;
      print(sys.type.jrem_multisystem);
      expect(sys.type.jrem_multisystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jrem_multisystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00118_element_check_00095 **********\n\n");
    });

    test('00119_element_check_00096', () async {
      print("\n********** テスト実行：00119_element_check_00096 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.media_info;
      print(sys.type.media_info);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.media_info = testData1s;
      print(sys.type.media_info);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.media_info == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.media_info == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.media_info = testData2s;
      print(sys.type.media_info);
      expect(sys.type.media_info == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.media_info == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.media_info = defalut;
      print(sys.type.media_info);
      expect(sys.type.media_info == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.media_info == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00119_element_check_00096 **********\n\n");
    });

    test('00120_element_check_00097', () async {
      print("\n********** テスト実行：00120_element_check_00097 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.gs1_barcode;
      print(sys.type.gs1_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.gs1_barcode = testData1s;
      print(sys.type.gs1_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.gs1_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.gs1_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.gs1_barcode = testData2s;
      print(sys.type.gs1_barcode);
      expect(sys.type.gs1_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.gs1_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.gs1_barcode = defalut;
      print(sys.type.gs1_barcode);
      expect(sys.type.gs1_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.gs1_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00120_element_check_00097 **********\n\n");
    });

    test('00121_element_check_00098', () async {
      print("\n********** テスト実行：00121_element_check_00098 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.assortsystem;
      print(sys.type.assortsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.assortsystem = testData1s;
      print(sys.type.assortsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.assortsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.assortsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.assortsystem = testData2s;
      print(sys.type.assortsystem);
      expect(sys.type.assortsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.assortsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.assortsystem = defalut;
      print(sys.type.assortsystem);
      expect(sys.type.assortsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.assortsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00121_element_check_00098 **********\n\n");
    });

    test('00122_element_check_00099', () async {
      print("\n********** テスト実行：00122_element_check_00099 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.center_server;
      print(sys.type.center_server);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.center_server = testData1s;
      print(sys.type.center_server);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.center_server == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.center_server == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.center_server = testData2s;
      print(sys.type.center_server);
      expect(sys.type.center_server == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.center_server == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.center_server = defalut;
      print(sys.type.center_server);
      expect(sys.type.center_server == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.center_server == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00122_element_check_00099 **********\n\n");
    });

    test('00123_element_check_00100', () async {
      print("\n********** テスト実行：00123_element_check_00100 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.reservsystem;
      print(sys.type.reservsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.reservsystem = testData1s;
      print(sys.type.reservsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.reservsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.reservsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.reservsystem = testData2s;
      print(sys.type.reservsystem);
      expect(sys.type.reservsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.reservsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.reservsystem = defalut;
      print(sys.type.reservsystem);
      expect(sys.type.reservsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.reservsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00123_element_check_00100 **********\n\n");
    });

    test('00124_element_check_00101', () async {
      print("\n********** テスト実行：00124_element_check_00101 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.drug_rev;
      print(sys.type.drug_rev);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.drug_rev = testData1s;
      print(sys.type.drug_rev);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.drug_rev == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.drug_rev == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.drug_rev = testData2s;
      print(sys.type.drug_rev);
      expect(sys.type.drug_rev == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.drug_rev == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.drug_rev = defalut;
      print(sys.type.drug_rev);
      expect(sys.type.drug_rev == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.drug_rev == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00124_element_check_00101 **********\n\n");
    });

    test('00125_element_check_00102', () async {
      print("\n********** テスト実行：00125_element_check_00102 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.gincardsystem;
      print(sys.type.gincardsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.gincardsystem = testData1s;
      print(sys.type.gincardsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.gincardsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.gincardsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.gincardsystem = testData2s;
      print(sys.type.gincardsystem);
      expect(sys.type.gincardsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.gincardsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.gincardsystem = defalut;
      print(sys.type.gincardsystem);
      expect(sys.type.gincardsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.gincardsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00125_element_check_00102 **********\n\n");
    });

    test('00126_element_check_00103', () async {
      print("\n********** テスト実行：00126_element_check_00103 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fclqpsystem;
      print(sys.type.fclqpsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fclqpsystem = testData1s;
      print(sys.type.fclqpsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fclqpsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fclqpsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fclqpsystem = testData2s;
      print(sys.type.fclqpsystem);
      expect(sys.type.fclqpsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fclqpsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fclqpsystem = defalut;
      print(sys.type.fclqpsystem);
      expect(sys.type.fclqpsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fclqpsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00126_element_check_00103 **********\n\n");
    });

    test('00127_element_check_00104', () async {
      print("\n********** テスト実行：00127_element_check_00104 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fcledysystem;
      print(sys.type.fcledysystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fcledysystem = testData1s;
      print(sys.type.fcledysystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fcledysystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fcledysystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fcledysystem = testData2s;
      print(sys.type.fcledysystem);
      expect(sys.type.fcledysystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fcledysystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fcledysystem = defalut;
      print(sys.type.fcledysystem);
      expect(sys.type.fcledysystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fcledysystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00127_element_check_00104 **********\n\n");
    });

    test('00128_element_check_00105', () async {
      print("\n********** テスト実行：00128_element_check_00105 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.caps_cafis;
      print(sys.type.caps_cafis);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.caps_cafis = testData1s;
      print(sys.type.caps_cafis);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.caps_cafis == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.caps_cafis == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.caps_cafis = testData2s;
      print(sys.type.caps_cafis);
      expect(sys.type.caps_cafis == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_cafis == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.caps_cafis = defalut;
      print(sys.type.caps_cafis);
      expect(sys.type.caps_cafis == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_cafis == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00128_element_check_00105 **********\n\n");
    });

    test('00129_element_check_00106', () async {
      print("\n********** テスト実行：00129_element_check_00106 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fclidsystem;
      print(sys.type.fclidsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fclidsystem = testData1s;
      print(sys.type.fclidsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fclidsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fclidsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fclidsystem = testData2s;
      print(sys.type.fclidsystem);
      expect(sys.type.fclidsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fclidsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fclidsystem = defalut;
      print(sys.type.fclidsystem);
      expect(sys.type.fclidsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fclidsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00129_element_check_00106 **********\n\n");
    });

    test('00130_element_check_00107', () async {
      print("\n********** テスト実行：00130_element_check_00107 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ptcktissusystem;
      print(sys.type.ptcktissusystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ptcktissusystem = testData1s;
      print(sys.type.ptcktissusystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ptcktissusystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ptcktissusystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ptcktissusystem = testData2s;
      print(sys.type.ptcktissusystem);
      expect(sys.type.ptcktissusystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ptcktissusystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ptcktissusystem = defalut;
      print(sys.type.ptcktissusystem);
      expect(sys.type.ptcktissusystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ptcktissusystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00130_element_check_00107 **********\n\n");
    });

    test('00131_element_check_00108', () async {
      print("\n********** テスト実行：00131_element_check_00108 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.abs_prepaid;
      print(sys.type.abs_prepaid);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.abs_prepaid = testData1s;
      print(sys.type.abs_prepaid);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.abs_prepaid == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.abs_prepaid == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.abs_prepaid = testData2s;
      print(sys.type.abs_prepaid);
      expect(sys.type.abs_prepaid == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.abs_prepaid == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.abs_prepaid = defalut;
      print(sys.type.abs_prepaid);
      expect(sys.type.abs_prepaid == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.abs_prepaid == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00131_element_check_00108 **********\n\n");
    });

    test('00132_element_check_00109', () async {
      print("\n********** テスト実行：00132_element_check_00109 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.prod_item_autoset;
      print(sys.type.prod_item_autoset);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.prod_item_autoset = testData1s;
      print(sys.type.prod_item_autoset);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.prod_item_autoset == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.prod_item_autoset == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.prod_item_autoset = testData2s;
      print(sys.type.prod_item_autoset);
      expect(sys.type.prod_item_autoset == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prod_item_autoset == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.prod_item_autoset = defalut;
      print(sys.type.prod_item_autoset);
      expect(sys.type.prod_item_autoset == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prod_item_autoset == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00132_element_check_00109 **********\n\n");
    });

    test('00133_element_check_00110', () async {
      print("\n********** テスト実行：00133_element_check_00110 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.prod_itf14_barcode;
      print(sys.type.prod_itf14_barcode);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.prod_itf14_barcode = testData1s;
      print(sys.type.prod_itf14_barcode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.prod_itf14_barcode == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.prod_itf14_barcode == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.prod_itf14_barcode = testData2s;
      print(sys.type.prod_itf14_barcode);
      expect(sys.type.prod_itf14_barcode == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prod_itf14_barcode == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.prod_itf14_barcode = defalut;
      print(sys.type.prod_itf14_barcode);
      expect(sys.type.prod_itf14_barcode == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prod_itf14_barcode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00133_element_check_00110 **********\n\n");
    });

    test('00134_element_check_00111', () async {
      print("\n********** テスト実行：00134_element_check_00111 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.special_coupon;
      print(sys.type.special_coupon);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.special_coupon = testData1s;
      print(sys.type.special_coupon);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.special_coupon == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.special_coupon == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.special_coupon = testData2s;
      print(sys.type.special_coupon);
      expect(sys.type.special_coupon == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.special_coupon == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.special_coupon = defalut;
      print(sys.type.special_coupon);
      expect(sys.type.special_coupon == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.special_coupon == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00134_element_check_00111 **********\n\n");
    });

    test('00135_element_check_00112', () async {
      print("\n********** テスト実行：00135_element_check_00112 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.bluechip_server;
      print(sys.type.bluechip_server);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.bluechip_server = testData1s;
      print(sys.type.bluechip_server);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.bluechip_server == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.bluechip_server == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.bluechip_server = testData2s;
      print(sys.type.bluechip_server);
      expect(sys.type.bluechip_server == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.bluechip_server == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.bluechip_server = defalut;
      print(sys.type.bluechip_server);
      expect(sys.type.bluechip_server == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.bluechip_server == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00135_element_check_00112 **********\n\n");
    });

    test('00136_element_check_00113', () async {
      print("\n********** テスト実行：00136_element_check_00113 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hitachi_bluechip;
      print(sys.type.hitachi_bluechip);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hitachi_bluechip = testData1s;
      print(sys.type.hitachi_bluechip);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hitachi_bluechip == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hitachi_bluechip == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hitachi_bluechip = testData2s;
      print(sys.type.hitachi_bluechip);
      expect(sys.type.hitachi_bluechip == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hitachi_bluechip == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hitachi_bluechip = defalut;
      print(sys.type.hitachi_bluechip);
      expect(sys.type.hitachi_bluechip == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hitachi_bluechip == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00136_element_check_00113 **********\n\n");
    });

    test('00137_element_check_00114', () async {
      print("\n********** テスト実行：00137_element_check_00114 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hq_other_cantevole;
      print(sys.type.hq_other_cantevole);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hq_other_cantevole = testData1s;
      print(sys.type.hq_other_cantevole);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hq_other_cantevole == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hq_other_cantevole == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hq_other_cantevole = testData2s;
      print(sys.type.hq_other_cantevole);
      expect(sys.type.hq_other_cantevole == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_other_cantevole == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hq_other_cantevole = defalut;
      print(sys.type.hq_other_cantevole);
      expect(sys.type.hq_other_cantevole == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hq_other_cantevole == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00137_element_check_00114 **********\n\n");
    });

    test('00138_element_check_00115', () async {
      print("\n********** テスト実行：00138_element_check_00115 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.qcashier_system;
      print(sys.type.qcashier_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.qcashier_system = testData1s;
      print(sys.type.qcashier_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.qcashier_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.qcashier_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.qcashier_system = testData2s;
      print(sys.type.qcashier_system);
      expect(sys.type.qcashier_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.qcashier_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.qcashier_system = defalut;
      print(sys.type.qcashier_system);
      expect(sys.type.qcashier_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.qcashier_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00138_element_check_00115 **********\n\n");
    });

    test('00139_element_check_00116', () async {
      print("\n********** テスト実行：00139_element_check_00116 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.receipt_qr_system;
      print(sys.type.receipt_qr_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.receipt_qr_system = testData1s;
      print(sys.type.receipt_qr_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.receipt_qr_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.receipt_qr_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.receipt_qr_system = testData2s;
      print(sys.type.receipt_qr_system);
      expect(sys.type.receipt_qr_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.receipt_qr_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.receipt_qr_system = defalut;
      print(sys.type.receipt_qr_system);
      expect(sys.type.receipt_qr_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.receipt_qr_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00139_element_check_00116 **********\n\n");
    });

    test('00140_element_check_00117', () async {
      print("\n********** テスト実行：00140_element_check_00117 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.visatouch_infox;
      print(sys.type.visatouch_infox);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.visatouch_infox = testData1s;
      print(sys.type.visatouch_infox);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.visatouch_infox == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.visatouch_infox == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.visatouch_infox = testData2s;
      print(sys.type.visatouch_infox);
      expect(sys.type.visatouch_infox == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.visatouch_infox == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.visatouch_infox = defalut;
      print(sys.type.visatouch_infox);
      expect(sys.type.visatouch_infox == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.visatouch_infox == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00140_element_check_00117 **********\n\n");
    });

    test('00141_element_check_00118', () async {
      print("\n********** テスト実行：00141_element_check_00118 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pbchg_system;
      print(sys.type.pbchg_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pbchg_system = testData1s;
      print(sys.type.pbchg_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pbchg_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pbchg_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pbchg_system = testData2s;
      print(sys.type.pbchg_system);
      expect(sys.type.pbchg_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pbchg_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pbchg_system = defalut;
      print(sys.type.pbchg_system);
      expect(sys.type.pbchg_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pbchg_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00141_element_check_00118 **********\n\n");
    });

    test('00142_element_check_00119', () async {
      print("\n********** テスト実行：00142_element_check_00119 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hc1_system;
      print(sys.type.hc1_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hc1_system = testData1s;
      print(sys.type.hc1_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hc1_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hc1_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hc1_system = testData2s;
      print(sys.type.hc1_system);
      expect(sys.type.hc1_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc1_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hc1_system = defalut;
      print(sys.type.hc1_system);
      expect(sys.type.hc1_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc1_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00142_element_check_00119 **********\n\n");
    });

    test('00143_element_check_00120', () async {
      print("\n********** テスト実行：00143_element_check_00120 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.caps_hc1_cafis;
      print(sys.type.caps_hc1_cafis);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.caps_hc1_cafis = testData1s;
      print(sys.type.caps_hc1_cafis);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.caps_hc1_cafis == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.caps_hc1_cafis == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.caps_hc1_cafis = testData2s;
      print(sys.type.caps_hc1_cafis);
      expect(sys.type.caps_hc1_cafis == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_hc1_cafis == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.caps_hc1_cafis = defalut;
      print(sys.type.caps_hc1_cafis);
      expect(sys.type.caps_hc1_cafis == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_hc1_cafis == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00143_element_check_00120 **********\n\n");
    });

    test('00144_element_check_00121', () async {
      print("\n********** テスト実行：00144_element_check_00121 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.remoteserver;
      print(sys.type.remoteserver);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.remoteserver = testData1s;
      print(sys.type.remoteserver);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.remoteserver == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.remoteserver == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.remoteserver = testData2s;
      print(sys.type.remoteserver);
      expect(sys.type.remoteserver == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.remoteserver == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.remoteserver = defalut;
      print(sys.type.remoteserver);
      expect(sys.type.remoteserver == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.remoteserver == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00144_element_check_00121 **********\n\n");
    });

    test('00145_element_check_00122', () async {
      print("\n********** テスト実行：00145_element_check_00122 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mrycardsystem;
      print(sys.type.mrycardsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mrycardsystem = testData1s;
      print(sys.type.mrycardsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mrycardsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mrycardsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mrycardsystem = testData2s;
      print(sys.type.mrycardsystem);
      expect(sys.type.mrycardsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mrycardsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mrycardsystem = defalut;
      print(sys.type.mrycardsystem);
      expect(sys.type.mrycardsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mrycardsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00145_element_check_00122 **********\n\n");
    });

    test('00146_element_check_00123', () async {
      print("\n********** テスト実行：00146_element_check_00123 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sp_department;
      print(sys.type.sp_department);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sp_department = testData1s;
      print(sys.type.sp_department);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sp_department == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sp_department == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sp_department = testData2s;
      print(sys.type.sp_department);
      expect(sys.type.sp_department == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sp_department == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sp_department = defalut;
      print(sys.type.sp_department);
      expect(sys.type.sp_department == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sp_department == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00146_element_check_00123 **********\n\n");
    });

    test('00147_element_check_00124', () async {
      print("\n********** テスト実行：00147_element_check_00124 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.decimalitmsend;
      print(sys.type.decimalitmsend);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.decimalitmsend = testData1s;
      print(sys.type.decimalitmsend);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.decimalitmsend == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.decimalitmsend == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.decimalitmsend = testData2s;
      print(sys.type.decimalitmsend);
      expect(sys.type.decimalitmsend == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.decimalitmsend == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.decimalitmsend = defalut;
      print(sys.type.decimalitmsend);
      expect(sys.type.decimalitmsend == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.decimalitmsend == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00147_element_check_00124 **********\n\n");
    });

    test('00148_element_check_00125', () async {
      print("\n********** テスト実行：00148_element_check_00125 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.wiz_cnct;
      print(sys.type.wiz_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.wiz_cnct = testData1s;
      print(sys.type.wiz_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.wiz_cnct == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.wiz_cnct == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.wiz_cnct = testData2s;
      print(sys.type.wiz_cnct);
      expect(sys.type.wiz_cnct == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.wiz_cnct == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.wiz_cnct = defalut;
      print(sys.type.wiz_cnct);
      expect(sys.type.wiz_cnct == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.wiz_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00148_element_check_00125 **********\n\n");
    });

    test('00149_element_check_00126', () async {
      print("\n********** テスト実行：00149_element_check_00126 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.absv31_rwt;
      print(sys.type.absv31_rwt);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.absv31_rwt = testData1s;
      print(sys.type.absv31_rwt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.absv31_rwt == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.absv31_rwt == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.absv31_rwt = testData2s;
      print(sys.type.absv31_rwt);
      expect(sys.type.absv31_rwt == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.absv31_rwt == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.absv31_rwt = defalut;
      print(sys.type.absv31_rwt);
      expect(sys.type.absv31_rwt == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.absv31_rwt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00149_element_check_00126 **********\n\n");
    });

    test('00150_element_check_00127', () async {
      print("\n********** テスト実行：00150_element_check_00127 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pluralqr_system;
      print(sys.type.pluralqr_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pluralqr_system = testData1s;
      print(sys.type.pluralqr_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pluralqr_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pluralqr_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pluralqr_system = testData2s;
      print(sys.type.pluralqr_system);
      expect(sys.type.pluralqr_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pluralqr_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pluralqr_system = defalut;
      print(sys.type.pluralqr_system);
      expect(sys.type.pluralqr_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pluralqr_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00150_element_check_00127 **********\n\n");
    });

    test('00151_element_check_00128', () async {
      print("\n********** テスト実行：00151_element_check_00128 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.netdoareserv;
      print(sys.type.netdoareserv);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.netdoareserv = testData1s;
      print(sys.type.netdoareserv);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.netdoareserv == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.netdoareserv == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.netdoareserv = testData2s;
      print(sys.type.netdoareserv);
      expect(sys.type.netdoareserv == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.netdoareserv == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.netdoareserv = defalut;
      print(sys.type.netdoareserv);
      expect(sys.type.netdoareserv == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.netdoareserv == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00151_element_check_00128 **********\n\n");
    });

    test('00152_element_check_00129', () async {
      print("\n********** テスト実行：00152_element_check_00129 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.selpluadj;
      print(sys.type.selpluadj);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.selpluadj = testData1s;
      print(sys.type.selpluadj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.selpluadj == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.selpluadj == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.selpluadj = testData2s;
      print(sys.type.selpluadj);
      expect(sys.type.selpluadj == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.selpluadj == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.selpluadj = defalut;
      print(sys.type.selpluadj);
      expect(sys.type.selpluadj == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.selpluadj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00152_element_check_00129 **********\n\n");
    });

    test('00153_element_check_00130', () async {
      print("\n********** テスト実行：00153_element_check_00130 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_webser;
      print(sys.type.custreal_webser);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_webser = testData1s;
      print(sys.type.custreal_webser);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_webser == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_webser == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_webser = testData2s;
      print(sys.type.custreal_webser);
      expect(sys.type.custreal_webser == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_webser == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_webser = defalut;
      print(sys.type.custreal_webser);
      expect(sys.type.custreal_webser == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_webser == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00153_element_check_00130 **********\n\n");
    });

    test('00154_element_check_00131', () async {
      print("\n********** テスト実行：00154_element_check_00131 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.wiz_abj;
      print(sys.type.wiz_abj);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.wiz_abj = testData1s;
      print(sys.type.wiz_abj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.wiz_abj == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.wiz_abj == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.wiz_abj = testData2s;
      print(sys.type.wiz_abj);
      expect(sys.type.wiz_abj == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.wiz_abj == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.wiz_abj = defalut;
      print(sys.type.wiz_abj);
      expect(sys.type.wiz_abj == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.wiz_abj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00154_element_check_00131 **********\n\n");
    });

    test('00155_element_check_00132', () async {
      print("\n********** テスト実行：00155_element_check_00132 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_uid;
      print(sys.type.custreal_uid);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_uid = testData1s;
      print(sys.type.custreal_uid);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_uid == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_uid == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_uid = testData2s;
      print(sys.type.custreal_uid);
      expect(sys.type.custreal_uid == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_uid == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_uid = defalut;
      print(sys.type.custreal_uid);
      expect(sys.type.custreal_uid == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_uid == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00155_element_check_00132 **********\n\n");
    });

    test('00156_element_check_00133', () async {
      print("\n********** テスト実行：00156_element_check_00133 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.bdlitmsend;
      print(sys.type.bdlitmsend);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.bdlitmsend = testData1s;
      print(sys.type.bdlitmsend);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.bdlitmsend == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.bdlitmsend == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.bdlitmsend = testData2s;
      print(sys.type.bdlitmsend);
      expect(sys.type.bdlitmsend == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.bdlitmsend == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.bdlitmsend = defalut;
      print(sys.type.bdlitmsend);
      expect(sys.type.bdlitmsend == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.bdlitmsend == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00156_element_check_00133 **********\n\n");
    });

    test('00157_element_check_00134', () async {
      print("\n********** テスト実行：00157_element_check_00134 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_netdoa;
      print(sys.type.custreal_netdoa);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_netdoa = testData1s;
      print(sys.type.custreal_netdoa);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_netdoa == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_netdoa == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_netdoa = testData2s;
      print(sys.type.custreal_netdoa);
      expect(sys.type.custreal_netdoa == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_netdoa == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_netdoa = defalut;
      print(sys.type.custreal_netdoa);
      expect(sys.type.custreal_netdoa == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_netdoa == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00157_element_check_00134 **********\n\n");
    });

    test('00158_element_check_00135', () async {
      print("\n********** テスト実行：00158_element_check_00135 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ut_cnct;
      print(sys.type.ut_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ut_cnct = testData1s;
      print(sys.type.ut_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ut_cnct == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ut_cnct == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ut_cnct = testData2s;
      print(sys.type.ut_cnct);
      expect(sys.type.ut_cnct == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ut_cnct == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ut_cnct = defalut;
      print(sys.type.ut_cnct);
      expect(sys.type.ut_cnct == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ut_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00158_element_check_00135 **********\n\n");
    });

    test('00159_element_check_00136', () async {
      print("\n********** テスト実行：00159_element_check_00136 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.caps_pqvic;
      print(sys.type.caps_pqvic);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.caps_pqvic = testData1s;
      print(sys.type.caps_pqvic);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.caps_pqvic == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.caps_pqvic == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.caps_pqvic = testData2s;
      print(sys.type.caps_pqvic);
      expect(sys.type.caps_pqvic == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_pqvic == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.caps_pqvic = defalut;
      print(sys.type.caps_pqvic);
      expect(sys.type.caps_pqvic == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_pqvic == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00159_element_check_00136 **********\n\n");
    });

    test('00160_element_check_00137', () async {
      print("\n********** テスト実行：00160_element_check_00137 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.yamato_system;
      print(sys.type.yamato_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.yamato_system = testData1s;
      print(sys.type.yamato_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.yamato_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.yamato_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.yamato_system = testData2s;
      print(sys.type.yamato_system);
      expect(sys.type.yamato_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yamato_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.yamato_system = defalut;
      print(sys.type.yamato_system);
      expect(sys.type.yamato_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yamato_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00160_element_check_00137 **********\n\n");
    });

    test('00161_element_check_00138', () async {
      print("\n********** テスト実行：00161_element_check_00138 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.caps_cafis_standard;
      print(sys.type.caps_cafis_standard);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.caps_cafis_standard = testData1s;
      print(sys.type.caps_cafis_standard);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.caps_cafis_standard == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.caps_cafis_standard == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.caps_cafis_standard = testData2s;
      print(sys.type.caps_cafis_standard);
      expect(sys.type.caps_cafis_standard == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_cafis_standard == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.caps_cafis_standard = defalut;
      print(sys.type.caps_cafis_standard);
      expect(sys.type.caps_cafis_standard == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_cafis_standard == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00161_element_check_00138 **********\n\n");
    });

    test('00162_element_check_00139', () async {
      print("\n********** テスト実行：00162_element_check_00139 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.nttd_preca;
      print(sys.type.nttd_preca);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.nttd_preca = testData1s;
      print(sys.type.nttd_preca);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.nttd_preca == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.nttd_preca == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.nttd_preca = testData2s;
      print(sys.type.nttd_preca);
      expect(sys.type.nttd_preca == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.nttd_preca == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.nttd_preca = defalut;
      print(sys.type.nttd_preca);
      expect(sys.type.nttd_preca == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.nttd_preca == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00162_element_check_00139 **********\n\n");
    });

    test('00163_element_check_00140', () async {
      print("\n********** テスト実行：00163_element_check_00140 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.usbcam_cnct;
      print(sys.type.usbcam_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.usbcam_cnct = testData1s;
      print(sys.type.usbcam_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.usbcam_cnct == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.usbcam_cnct == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.usbcam_cnct = testData2s;
      print(sys.type.usbcam_cnct);
      expect(sys.type.usbcam_cnct == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.usbcam_cnct == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.usbcam_cnct = defalut;
      print(sys.type.usbcam_cnct);
      expect(sys.type.usbcam_cnct == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.usbcam_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00163_element_check_00140 **********\n\n");
    });

    test('00164_element_check_00141', () async {
      print("\n********** テスト実行：00164_element_check_00141 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.drugstore;
      print(sys.type.drugstore);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.drugstore = testData1s;
      print(sys.type.drugstore);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.drugstore == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.drugstore == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.drugstore = testData2s;
      print(sys.type.drugstore);
      expect(sys.type.drugstore == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.drugstore == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.drugstore = defalut;
      print(sys.type.drugstore);
      expect(sys.type.drugstore == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.drugstore == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00164_element_check_00141 **********\n\n");
    });

    test('00165_element_check_00142', () async {
      print("\n********** テスト実行：00165_element_check_00142 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_nec;
      print(sys.type.custreal_nec);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_nec = testData1s;
      print(sys.type.custreal_nec);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_nec == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_nec == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_nec = testData2s;
      print(sys.type.custreal_nec);
      expect(sys.type.custreal_nec == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_nec == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_nec = defalut;
      print(sys.type.custreal_nec);
      expect(sys.type.custreal_nec == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_nec == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00165_element_check_00142 **********\n\n");
    });

    test('00166_element_check_00143', () async {
      print("\n********** テスト実行：00166_element_check_00143 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_op;
      print(sys.type.custreal_op);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_op = testData1s;
      print(sys.type.custreal_op);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_op == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_op == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_op = testData2s;
      print(sys.type.custreal_op);
      expect(sys.type.custreal_op == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_op == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_op = defalut;
      print(sys.type.custreal_op);
      expect(sys.type.custreal_op == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_op == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00166_element_check_00143 **********\n\n");
    });

    test('00167_element_check_00144', () async {
      print("\n********** テスト実行：00167_element_check_00144 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dummy_crdt;
      print(sys.type.dummy_crdt);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dummy_crdt = testData1s;
      print(sys.type.dummy_crdt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dummy_crdt == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dummy_crdt == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dummy_crdt = testData2s;
      print(sys.type.dummy_crdt);
      expect(sys.type.dummy_crdt == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dummy_crdt == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dummy_crdt = defalut;
      print(sys.type.dummy_crdt);
      expect(sys.type.dummy_crdt == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dummy_crdt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00167_element_check_00144 **********\n\n");
    });

    test('00168_element_check_00145', () async {
      print("\n********** テスト実行：00168_element_check_00145 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hc2_system;
      print(sys.type.hc2_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hc2_system = testData1s;
      print(sys.type.hc2_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hc2_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hc2_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hc2_system = testData2s;
      print(sys.type.hc2_system);
      expect(sys.type.hc2_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc2_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hc2_system = defalut;
      print(sys.type.hc2_system);
      expect(sys.type.hc2_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc2_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00168_element_check_00145 **********\n\n");
    });

    test('00169_element_check_00146', () async {
      print("\n********** テスト実行：00169_element_check_00146 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.price_sound;
      print(sys.type.price_sound);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.price_sound = testData1s;
      print(sys.type.price_sound);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.price_sound == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.price_sound == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.price_sound = testData2s;
      print(sys.type.price_sound);
      expect(sys.type.price_sound == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.price_sound == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.price_sound = defalut;
      print(sys.type.price_sound);
      expect(sys.type.price_sound == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.price_sound == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00169_element_check_00146 **********\n\n");
    });

    test('00170_element_check_00147', () async {
      print("\n********** テスト実行：00170_element_check_00147 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dummy_preca;
      print(sys.type.dummy_preca);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dummy_preca = testData1s;
      print(sys.type.dummy_preca);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dummy_preca == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dummy_preca == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dummy_preca = testData2s;
      print(sys.type.dummy_preca);
      expect(sys.type.dummy_preca == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dummy_preca == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dummy_preca = defalut;
      print(sys.type.dummy_preca);
      expect(sys.type.dummy_preca == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dummy_preca == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00170_element_check_00147 **********\n\n");
    });

    test('00171_element_check_00148', () async {
      print("\n********** テスト実行：00171_element_check_00148 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.monitored_system;
      print(sys.type.monitored_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.monitored_system = testData1s;
      print(sys.type.monitored_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.monitored_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.monitored_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.monitored_system = testData2s;
      print(sys.type.monitored_system);
      expect(sys.type.monitored_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.monitored_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.monitored_system = defalut;
      print(sys.type.monitored_system);
      expect(sys.type.monitored_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.monitored_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00171_element_check_00148 **********\n\n");
    });

    test('00172_element_check_00149', () async {
      print("\n********** テスト実行：00172_element_check_00149 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.jmups_system;
      print(sys.type.jmups_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.jmups_system = testData1s;
      print(sys.type.jmups_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.jmups_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.jmups_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.jmups_system = testData2s;
      print(sys.type.jmups_system);
      expect(sys.type.jmups_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jmups_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.jmups_system = defalut;
      print(sys.type.jmups_system);
      expect(sys.type.jmups_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jmups_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00172_element_check_00149 **********\n\n");
    });

    test('00173_element_check_00150', () async {
      print("\n********** テスト実行：00173_element_check_00150 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ut1qpsystem;
      print(sys.type.ut1qpsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ut1qpsystem = testData1s;
      print(sys.type.ut1qpsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ut1qpsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ut1qpsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ut1qpsystem = testData2s;
      print(sys.type.ut1qpsystem);
      expect(sys.type.ut1qpsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ut1qpsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ut1qpsystem = defalut;
      print(sys.type.ut1qpsystem);
      expect(sys.type.ut1qpsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ut1qpsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00173_element_check_00150 **********\n\n");
    });

    test('00174_element_check_00151', () async {
      print("\n********** テスト実行：00174_element_check_00151 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ut1idsystem;
      print(sys.type.ut1idsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ut1idsystem = testData1s;
      print(sys.type.ut1idsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ut1idsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ut1idsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ut1idsystem = testData2s;
      print(sys.type.ut1idsystem);
      expect(sys.type.ut1idsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ut1idsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ut1idsystem = defalut;
      print(sys.type.ut1idsystem);
      expect(sys.type.ut1idsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ut1idsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00174_element_check_00151 **********\n\n");
    });

    test('00175_element_check_00152', () async {
      print("\n********** テスト実行：00175_element_check_00152 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.brain_system;
      print(sys.type.brain_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.brain_system = testData1s;
      print(sys.type.brain_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.brain_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.brain_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.brain_system = testData2s;
      print(sys.type.brain_system);
      expect(sys.type.brain_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.brain_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.brain_system = defalut;
      print(sys.type.brain_system);
      expect(sys.type.brain_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.brain_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00175_element_check_00152 **********\n\n");
    });

    test('00176_element_check_00153', () async {
      print("\n********** テスト実行：00176_element_check_00153 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pfmpitapasystem;
      print(sys.type.pfmpitapasystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pfmpitapasystem = testData1s;
      print(sys.type.pfmpitapasystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pfmpitapasystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pfmpitapasystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pfmpitapasystem = testData2s;
      print(sys.type.pfmpitapasystem);
      expect(sys.type.pfmpitapasystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pfmpitapasystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pfmpitapasystem = defalut;
      print(sys.type.pfmpitapasystem);
      expect(sys.type.pfmpitapasystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pfmpitapasystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00176_element_check_00153 **********\n\n");
    });

    test('00177_element_check_00154', () async {
      print("\n********** テスト実行：00177_element_check_00154 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pfmjricsystem;
      print(sys.type.pfmjricsystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pfmjricsystem = testData1s;
      print(sys.type.pfmjricsystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pfmjricsystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pfmjricsystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pfmjricsystem = testData2s;
      print(sys.type.pfmjricsystem);
      expect(sys.type.pfmjricsystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pfmjricsystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pfmjricsystem = defalut;
      print(sys.type.pfmjricsystem);
      expect(sys.type.pfmjricsystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pfmjricsystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00177_element_check_00154 **********\n\n");
    });

    test('00178_element_check_00155', () async {
      print("\n********** テスト実行：00178_element_check_00155 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.chargeslip_system;
      print(sys.type.chargeslip_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.chargeslip_system = testData1s;
      print(sys.type.chargeslip_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.chargeslip_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.chargeslip_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.chargeslip_system = testData2s;
      print(sys.type.chargeslip_system);
      expect(sys.type.chargeslip_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.chargeslip_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.chargeslip_system = defalut;
      print(sys.type.chargeslip_system);
      expect(sys.type.chargeslip_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.chargeslip_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00178_element_check_00155 **********\n\n");
    });

    test('00179_element_check_00156', () async {
      print("\n********** テスト実行：00179_element_check_00156 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pfmjricchargesystem;
      print(sys.type.pfmjricchargesystem);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pfmjricchargesystem = testData1s;
      print(sys.type.pfmjricchargesystem);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pfmjricchargesystem == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pfmjricchargesystem == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pfmjricchargesystem = testData2s;
      print(sys.type.pfmjricchargesystem);
      expect(sys.type.pfmjricchargesystem == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pfmjricchargesystem == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pfmjricchargesystem = defalut;
      print(sys.type.pfmjricchargesystem);
      expect(sys.type.pfmjricchargesystem == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pfmjricchargesystem == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00179_element_check_00156 **********\n\n");
    });

    test('00180_element_check_00157', () async {
      print("\n********** テスト実行：00180_element_check_00157 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.itemprc_reduction_coupon;
      print(sys.type.itemprc_reduction_coupon);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.itemprc_reduction_coupon = testData1s;
      print(sys.type.itemprc_reduction_coupon);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.itemprc_reduction_coupon == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.itemprc_reduction_coupon == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.itemprc_reduction_coupon = testData2s;
      print(sys.type.itemprc_reduction_coupon);
      expect(sys.type.itemprc_reduction_coupon == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.itemprc_reduction_coupon == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.itemprc_reduction_coupon = defalut;
      print(sys.type.itemprc_reduction_coupon);
      expect(sys.type.itemprc_reduction_coupon == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.itemprc_reduction_coupon == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00180_element_check_00157 **********\n\n");
    });

    test('00181_element_check_00158', () async {
      print("\n********** テスト実行：00181_element_check_00158 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cat_jmups_system;
      print(sys.type.cat_jmups_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cat_jmups_system = testData1s;
      print(sys.type.cat_jmups_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cat_jmups_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cat_jmups_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cat_jmups_system = testData2s;
      print(sys.type.cat_jmups_system);
      expect(sys.type.cat_jmups_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cat_jmups_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cat_jmups_system = defalut;
      print(sys.type.cat_jmups_system);
      expect(sys.type.cat_jmups_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cat_jmups_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00181_element_check_00158 **********\n\n");
    });

    test('00182_element_check_00159', () async {
      print("\n********** テスト実行：00182_element_check_00159 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sqrc_ticket_system;
      print(sys.type.sqrc_ticket_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sqrc_ticket_system = testData1s;
      print(sys.type.sqrc_ticket_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sqrc_ticket_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sqrc_ticket_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sqrc_ticket_system = testData2s;
      print(sys.type.sqrc_ticket_system);
      expect(sys.type.sqrc_ticket_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sqrc_ticket_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sqrc_ticket_system = defalut;
      print(sys.type.sqrc_ticket_system);
      expect(sys.type.sqrc_ticket_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sqrc_ticket_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00182_element_check_00159 **********\n\n");
    });

    test('00183_element_check_00160', () async {
      print("\n********** テスト実行：00183_element_check_00160 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cct_connect_system;
      print(sys.type.cct_connect_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cct_connect_system = testData1s;
      print(sys.type.cct_connect_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cct_connect_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cct_connect_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cct_connect_system = testData2s;
      print(sys.type.cct_connect_system);
      expect(sys.type.cct_connect_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_connect_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cct_connect_system = defalut;
      print(sys.type.cct_connect_system);
      expect(sys.type.cct_connect_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_connect_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00183_element_check_00160 **********\n\n");
    });

    test('00184_element_check_00161', () async {
      print("\n********** テスト実行：00184_element_check_00161 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cct_emoney_system;
      print(sys.type.cct_emoney_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cct_emoney_system = testData1s;
      print(sys.type.cct_emoney_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cct_emoney_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cct_emoney_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cct_emoney_system = testData2s;
      print(sys.type.cct_emoney_system);
      expect(sys.type.cct_emoney_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_emoney_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cct_emoney_system = defalut;
      print(sys.type.cct_emoney_system);
      expect(sys.type.cct_emoney_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_emoney_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00184_element_check_00161 **********\n\n");
    });

    test('00185_element_check_00162', () async {
      print("\n********** テスト実行：00185_element_check_00162 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tec_infox_jet_s_system;
      print(sys.type.tec_infox_jet_s_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tec_infox_jet_s_system = testData1s;
      print(sys.type.tec_infox_jet_s_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tec_infox_jet_s_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tec_infox_jet_s_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tec_infox_jet_s_system = testData2s;
      print(sys.type.tec_infox_jet_s_system);
      expect(sys.type.tec_infox_jet_s_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tec_infox_jet_s_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tec_infox_jet_s_system = defalut;
      print(sys.type.tec_infox_jet_s_system);
      expect(sys.type.tec_infox_jet_s_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tec_infox_jet_s_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00185_element_check_00162 **********\n\n");
    });

    test('00186_element_check_00163', () async {
      print("\n********** テスト実行：00186_element_check_00163 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.prod_instore_zero_flg;
      print(sys.type.prod_instore_zero_flg);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.prod_instore_zero_flg = testData1s;
      print(sys.type.prod_instore_zero_flg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.prod_instore_zero_flg == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.prod_instore_zero_flg == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.prod_instore_zero_flg = testData2s;
      print(sys.type.prod_instore_zero_flg);
      expect(sys.type.prod_instore_zero_flg == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prod_instore_zero_flg == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.prod_instore_zero_flg = defalut;
      print(sys.type.prod_instore_zero_flg);
      expect(sys.type.prod_instore_zero_flg == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.prod_instore_zero_flg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00186_element_check_00163 **********\n\n");
    });

    test('00187_element_check_00164', () async {
      print("\n********** テスト実行：00187_element_check_00164 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.front_self_system;
      print(sys.type.front_self_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.front_self_system = testData1s;
      print(sys.type.front_self_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.front_self_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.front_self_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.front_self_system = testData2s;
      print(sys.type.front_self_system);
      expect(sys.type.front_self_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.front_self_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.front_self_system = defalut;
      print(sys.type.front_self_system);
      expect(sys.type.front_self_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.front_self_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00187_element_check_00164 **********\n\n");
    });

    test('00188_element_check_00165', () async {
      print("\n********** テスト実行：00188_element_check_00165 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.trk_preca;
      print(sys.type.trk_preca);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.trk_preca = testData1s;
      print(sys.type.trk_preca);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.trk_preca == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.trk_preca == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.trk_preca = testData2s;
      print(sys.type.trk_preca);
      expect(sys.type.trk_preca == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.trk_preca == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.trk_preca = defalut;
      print(sys.type.trk_preca);
      expect(sys.type.trk_preca == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.trk_preca == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00188_element_check_00165 **********\n\n");
    });

    test('00189_element_check_00166', () async {
      print("\n********** テスト実行：00189_element_check_00166 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.desktop_cashier_system;
      print(sys.type.desktop_cashier_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.desktop_cashier_system = testData1s;
      print(sys.type.desktop_cashier_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.desktop_cashier_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.desktop_cashier_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.desktop_cashier_system = testData2s;
      print(sys.type.desktop_cashier_system);
      expect(sys.type.desktop_cashier_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.desktop_cashier_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.desktop_cashier_system = defalut;
      print(sys.type.desktop_cashier_system);
      expect(sys.type.desktop_cashier_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.desktop_cashier_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00189_element_check_00166 **********\n\n");
    });

    test('00190_element_check_00167', () async {
      print("\n********** テスト実行：00190_element_check_00167 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.suica_charge_system;
      print(sys.type.suica_charge_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.suica_charge_system = testData1s;
      print(sys.type.suica_charge_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.suica_charge_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.suica_charge_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.suica_charge_system = testData2s;
      print(sys.type.suica_charge_system);
      expect(sys.type.suica_charge_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.suica_charge_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.suica_charge_system = defalut;
      print(sys.type.suica_charge_system);
      expect(sys.type.suica_charge_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.suica_charge_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00190_element_check_00167 **********\n\n");
    });

    test('00191_element_check_00168', () async {
      print("\n********** テスト実行：00191_element_check_00168 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.nimoca_point_system;
      print(sys.type.nimoca_point_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.nimoca_point_system = testData1s;
      print(sys.type.nimoca_point_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.nimoca_point_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.nimoca_point_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.nimoca_point_system = testData2s;
      print(sys.type.nimoca_point_system);
      expect(sys.type.nimoca_point_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.nimoca_point_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.nimoca_point_system = defalut;
      print(sys.type.nimoca_point_system);
      expect(sys.type.nimoca_point_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.nimoca_point_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00191_element_check_00168 **********\n\n");
    });

    test('00192_element_check_00169', () async {
      print("\n********** テスト実行：00192_element_check_00169 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_pointartist;
      print(sys.type.custreal_pointartist);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_pointartist = testData1s;
      print(sys.type.custreal_pointartist);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_pointartist == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_pointartist == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_pointartist = testData2s;
      print(sys.type.custreal_pointartist);
      expect(sys.type.custreal_pointartist == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_pointartist == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_pointartist = defalut;
      print(sys.type.custreal_pointartist);
      expect(sys.type.custreal_pointartist == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_pointartist == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00192_element_check_00169 **********\n\n");
    });

    test('00193_element_check_00170', () async {
      print("\n********** テスト実行：00193_element_check_00170 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tb1_system;
      print(sys.type.tb1_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tb1_system = testData1s;
      print(sys.type.tb1_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tb1_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tb1_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tb1_system = testData2s;
      print(sys.type.tb1_system);
      expect(sys.type.tb1_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tb1_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tb1_system = defalut;
      print(sys.type.tb1_system);
      expect(sys.type.tb1_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tb1_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00193_element_check_00170 **********\n\n");
    });

    test('00194_element_check_00171', () async {
      print("\n********** テスト実行：00194_element_check_00171 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tax_free_system;
      print(sys.type.tax_free_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tax_free_system = testData1s;
      print(sys.type.tax_free_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tax_free_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tax_free_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tax_free_system = testData2s;
      print(sys.type.tax_free_system);
      expect(sys.type.tax_free_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tax_free_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tax_free_system = defalut;
      print(sys.type.tax_free_system);
      expect(sys.type.tax_free_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tax_free_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00194_element_check_00171 **********\n\n");
    });

    test('00195_element_check_00172', () async {
      print("\n********** テスト実行：00195_element_check_00172 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.repica_system;
      print(sys.type.repica_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.repica_system = testData1s;
      print(sys.type.repica_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.repica_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.repica_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.repica_system = testData2s;
      print(sys.type.repica_system);
      expect(sys.type.repica_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.repica_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.repica_system = defalut;
      print(sys.type.repica_system);
      expect(sys.type.repica_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.repica_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00195_element_check_00172 **********\n\n");
    });

    test('00196_element_check_00173', () async {
      print("\n********** テスト実行：00196_element_check_00173 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.caps_cardnet_system;
      print(sys.type.caps_cardnet_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.caps_cardnet_system = testData1s;
      print(sys.type.caps_cardnet_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.caps_cardnet_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.caps_cardnet_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.caps_cardnet_system = testData2s;
      print(sys.type.caps_cardnet_system);
      expect(sys.type.caps_cardnet_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_cardnet_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.caps_cardnet_system = defalut;
      print(sys.type.caps_cardnet_system);
      expect(sys.type.caps_cardnet_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.caps_cardnet_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00196_element_check_00173 **********\n\n");
    });

    test('00197_element_check_00174', () async {
      print("\n********** テスト実行：00197_element_check_00174 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.yumeca_system;
      print(sys.type.yumeca_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.yumeca_system = testData1s;
      print(sys.type.yumeca_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.yumeca_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.yumeca_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.yumeca_system = testData2s;
      print(sys.type.yumeca_system);
      expect(sys.type.yumeca_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yumeca_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.yumeca_system = defalut;
      print(sys.type.yumeca_system);
      expect(sys.type.yumeca_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yumeca_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00197_element_check_00174 **********\n\n");
    });

    test('00198_element_check_00175', () async {
      print("\n********** テスト実行：00198_element_check_00175 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dummy_suica;
      print(sys.type.dummy_suica);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dummy_suica = testData1s;
      print(sys.type.dummy_suica);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dummy_suica == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dummy_suica == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dummy_suica = testData2s;
      print(sys.type.dummy_suica);
      expect(sys.type.dummy_suica == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dummy_suica == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dummy_suica = defalut;
      print(sys.type.dummy_suica);
      expect(sys.type.dummy_suica == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dummy_suica == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00198_element_check_00175 **********\n\n");
    });

    test('00199_element_check_00176', () async {
      print("\n********** テスト実行：00199_element_check_00176 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.payment_mng;
      print(sys.type.payment_mng);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.payment_mng = testData1s;
      print(sys.type.payment_mng);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.payment_mng == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.payment_mng == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.payment_mng = testData2s;
      print(sys.type.payment_mng);
      expect(sys.type.payment_mng == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.payment_mng == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.payment_mng = defalut;
      print(sys.type.payment_mng);
      expect(sys.type.payment_mng == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.payment_mng == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00199_element_check_00176 **********\n\n");
    });

    test('00200_element_check_00177', () async {
      print("\n********** テスト実行：00200_element_check_00177 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_tpoint;
      print(sys.type.custreal_tpoint);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_tpoint = testData1s;
      print(sys.type.custreal_tpoint);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_tpoint == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_tpoint == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_tpoint = testData2s;
      print(sys.type.custreal_tpoint);
      expect(sys.type.custreal_tpoint == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_tpoint == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_tpoint = defalut;
      print(sys.type.custreal_tpoint);
      expect(sys.type.custreal_tpoint == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_tpoint == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00200_element_check_00177 **********\n\n");
    });

    test('00201_element_check_00178', () async {
      print("\n********** テスト実行：00201_element_check_00178 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mammy_system;
      print(sys.type.mammy_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mammy_system = testData1s;
      print(sys.type.mammy_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mammy_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mammy_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mammy_system = testData2s;
      print(sys.type.mammy_system);
      expect(sys.type.mammy_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mammy_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mammy_system = defalut;
      print(sys.type.mammy_system);
      expect(sys.type.mammy_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mammy_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00201_element_check_00178 **********\n\n");
    });

    test('00202_element_check_00179', () async {
      print("\n********** テスト実行：00202_element_check_00179 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.itemtyp_send;
      print(sys.type.itemtyp_send);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.itemtyp_send = testData1s;
      print(sys.type.itemtyp_send);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.itemtyp_send == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.itemtyp_send == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.itemtyp_send = testData2s;
      print(sys.type.itemtyp_send);
      expect(sys.type.itemtyp_send == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.itemtyp_send == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.itemtyp_send = defalut;
      print(sys.type.itemtyp_send);
      expect(sys.type.itemtyp_send == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.itemtyp_send == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00202_element_check_00179 **********\n\n");
    });

    test('00203_element_check_00180', () async {
      print("\n********** テスト実行：00203_element_check_00180 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.yumeca_pol_system;
      print(sys.type.yumeca_pol_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.yumeca_pol_system = testData1s;
      print(sys.type.yumeca_pol_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.yumeca_pol_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.yumeca_pol_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.yumeca_pol_system = testData2s;
      print(sys.type.yumeca_pol_system);
      expect(sys.type.yumeca_pol_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yumeca_pol_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.yumeca_pol_system = defalut;
      print(sys.type.yumeca_pol_system);
      expect(sys.type.yumeca_pol_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.yumeca_pol_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00203_element_check_00180 **********\n\n");
    });

    test('00204_element_check_00181', () async {
      print("\n********** テスト実行：00204_element_check_00181 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_hps;
      print(sys.type.custreal_hps);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_hps = testData1s;
      print(sys.type.custreal_hps);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_hps == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_hps == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_hps = testData2s;
      print(sys.type.custreal_hps);
      expect(sys.type.custreal_hps == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_hps == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_hps = defalut;
      print(sys.type.custreal_hps);
      expect(sys.type.custreal_hps == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_hps == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00204_element_check_00181 **********\n\n");
    });

    test('00205_element_check_00182', () async {
      print("\n********** テスト実行：00205_element_check_00182 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.maruto_system;
      print(sys.type.maruto_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.maruto_system = testData1s;
      print(sys.type.maruto_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.maruto_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.maruto_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.maruto_system = testData2s;
      print(sys.type.maruto_system);
      expect(sys.type.maruto_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.maruto_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.maruto_system = defalut;
      print(sys.type.maruto_system);
      expect(sys.type.maruto_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.maruto_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00205_element_check_00182 **********\n\n");
    });

    test('00206_element_check_00183', () async {
      print("\n********** テスト実行：00206_element_check_00183 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hc3_system;
      print(sys.type.hc3_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hc3_system = testData1s;
      print(sys.type.hc3_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hc3_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hc3_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hc3_system = testData2s;
      print(sys.type.hc3_system);
      expect(sys.type.hc3_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc3_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hc3_system = defalut;
      print(sys.type.hc3_system);
      expect(sys.type.hc3_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc3_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00206_element_check_00183 **********\n\n");
    });

    test('00207_element_check_00184', () async {
      print("\n********** テスト実行：00207_element_check_00184 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm3_marui_system;
      print(sys.type.sm3_marui_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm3_marui_system = testData1s;
      print(sys.type.sm3_marui_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm3_marui_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm3_marui_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm3_marui_system = testData2s;
      print(sys.type.sm3_marui_system);
      expect(sys.type.sm3_marui_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm3_marui_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm3_marui_system = defalut;
      print(sys.type.sm3_marui_system);
      expect(sys.type.sm3_marui_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm3_marui_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00207_element_check_00184 **********\n\n");
    });

    test('00208_element_check_00185', () async {
      print("\n********** テスト実行：00208_element_check_00185 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.kitchen_print;
      print(sys.type.kitchen_print);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.kitchen_print = testData1s;
      print(sys.type.kitchen_print);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.kitchen_print == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.kitchen_print == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.kitchen_print = testData2s;
      print(sys.type.kitchen_print);
      expect(sys.type.kitchen_print == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.kitchen_print == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.kitchen_print = defalut;
      print(sys.type.kitchen_print);
      expect(sys.type.kitchen_print == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.kitchen_print == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00208_element_check_00185 **********\n\n");
    });

    test('00209_element_check_00186', () async {
      print("\n********** テスト実行：00209_element_check_00186 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cogca_system;
      print(sys.type.cogca_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cogca_system = testData1s;
      print(sys.type.cogca_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cogca_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cogca_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cogca_system = testData2s;
      print(sys.type.cogca_system);
      expect(sys.type.cogca_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cogca_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cogca_system = defalut;
      print(sys.type.cogca_system);
      expect(sys.type.cogca_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cogca_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00209_element_check_00186 **********\n\n");
    });

    test('00210_element_check_00187', () async {
      print("\n********** テスト実行：00210_element_check_00187 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.bdl_multi_select_system;
      print(sys.type.bdl_multi_select_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.bdl_multi_select_system = testData1s;
      print(sys.type.bdl_multi_select_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.bdl_multi_select_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.bdl_multi_select_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.bdl_multi_select_system = testData2s;
      print(sys.type.bdl_multi_select_system);
      expect(sys.type.bdl_multi_select_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.bdl_multi_select_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.bdl_multi_select_system = defalut;
      print(sys.type.bdl_multi_select_system);
      expect(sys.type.bdl_multi_select_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.bdl_multi_select_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00210_element_check_00187 **********\n\n");
    });

    test('00211_element_check_00188', () async {
      print("\n********** テスト実行：00211_element_check_00188 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sallmtbar26;
      print(sys.type.sallmtbar26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sallmtbar26 = testData1s;
      print(sys.type.sallmtbar26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sallmtbar26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sallmtbar26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sallmtbar26 = testData2s;
      print(sys.type.sallmtbar26);
      expect(sys.type.sallmtbar26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sallmtbar26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sallmtbar26 = defalut;
      print(sys.type.sallmtbar26);
      expect(sys.type.sallmtbar26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sallmtbar26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00211_element_check_00188 **********\n\n");
    });

    test('00212_element_check_00189', () async {
      print("\n********** テスト実行：00212_element_check_00189 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.purchase_ticket_system;
      print(sys.type.purchase_ticket_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.purchase_ticket_system = testData1s;
      print(sys.type.purchase_ticket_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.purchase_ticket_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.purchase_ticket_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.purchase_ticket_system = testData2s;
      print(sys.type.purchase_ticket_system);
      expect(sys.type.purchase_ticket_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.purchase_ticket_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.purchase_ticket_system = defalut;
      print(sys.type.purchase_ticket_system);
      expect(sys.type.purchase_ticket_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.purchase_ticket_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00212_element_check_00189 **********\n\n");
    });

    test('00213_element_check_00190', () async {
      print("\n********** テスト実行：00213_element_check_00190 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_uni_system;
      print(sys.type.custreal_uni_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_uni_system = testData1s;
      print(sys.type.custreal_uni_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_uni_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_uni_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_uni_system = testData2s;
      print(sys.type.custreal_uni_system);
      expect(sys.type.custreal_uni_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_uni_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_uni_system = defalut;
      print(sys.type.custreal_uni_system);
      expect(sys.type.custreal_uni_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_uni_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00213_element_check_00190 **********\n\n");
    });

    test('00214_element_check_00191', () async {
      print("\n********** テスト実行：00214_element_check_00191 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ej_animation_system;
      print(sys.type.ej_animation_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ej_animation_system = testData1s;
      print(sys.type.ej_animation_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ej_animation_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ej_animation_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ej_animation_system = testData2s;
      print(sys.type.ej_animation_system);
      expect(sys.type.ej_animation_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ej_animation_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ej_animation_system = defalut;
      print(sys.type.ej_animation_system);
      expect(sys.type.ej_animation_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ej_animation_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00214_element_check_00191 **********\n\n");
    });

    test('00215_element_check_00192', () async {
      print("\n********** テスト実行：00215_element_check_00192 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.value_card_system;
      print(sys.type.value_card_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.value_card_system = testData1s;
      print(sys.type.value_card_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.value_card_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.value_card_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.value_card_system = testData2s;
      print(sys.type.value_card_system);
      expect(sys.type.value_card_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.value_card_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.value_card_system = defalut;
      print(sys.type.value_card_system);
      expect(sys.type.value_card_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.value_card_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00215_element_check_00192 **********\n\n");
    });

    test('00216_element_check_00193', () async {
      print("\n********** テスト実行：00216_element_check_00193 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm4_comodi_system;
      print(sys.type.sm4_comodi_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm4_comodi_system = testData1s;
      print(sys.type.sm4_comodi_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm4_comodi_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm4_comodi_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm4_comodi_system = testData2s;
      print(sys.type.sm4_comodi_system);
      expect(sys.type.sm4_comodi_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm4_comodi_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm4_comodi_system = defalut;
      print(sys.type.sm4_comodi_system);
      expect(sys.type.sm4_comodi_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm4_comodi_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00216_element_check_00193 **********\n\n");
    });

    test('00217_element_check_00194', () async {
      print("\n********** テスト実行：00217_element_check_00194 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm5_itoku_system;
      print(sys.type.sm5_itoku_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm5_itoku_system = testData1s;
      print(sys.type.sm5_itoku_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm5_itoku_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm5_itoku_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm5_itoku_system = testData2s;
      print(sys.type.sm5_itoku_system);
      expect(sys.type.sm5_itoku_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm5_itoku_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm5_itoku_system = defalut;
      print(sys.type.sm5_itoku_system);
      expect(sys.type.sm5_itoku_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm5_itoku_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00217_element_check_00194 **********\n\n");
    });

    test('00218_element_check_00195', () async {
      print("\n********** テスト実行：00218_element_check_00195 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cct_pointuse_system;
      print(sys.type.cct_pointuse_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cct_pointuse_system = testData1s;
      print(sys.type.cct_pointuse_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cct_pointuse_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cct_pointuse_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cct_pointuse_system = testData2s;
      print(sys.type.cct_pointuse_system);
      expect(sys.type.cct_pointuse_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_pointuse_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cct_pointuse_system = defalut;
      print(sys.type.cct_pointuse_system);
      expect(sys.type.cct_pointuse_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_pointuse_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00218_element_check_00195 **********\n\n");
    });

    test('00219_element_check_00196', () async {
      print("\n********** テスト実行：00219_element_check_00196 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.zhq_system;
      print(sys.type.zhq_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.zhq_system = testData1s;
      print(sys.type.zhq_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.zhq_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.zhq_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.zhq_system = testData2s;
      print(sys.type.zhq_system);
      expect(sys.type.zhq_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.zhq_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.zhq_system = defalut;
      print(sys.type.zhq_system);
      expect(sys.type.zhq_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.zhq_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00219_element_check_00196 **********\n\n");
    });

    test('00220_element_check_00197', () async {
      print("\n********** テスト実行：00220_element_check_00197 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.rpoint_system;
      print(sys.type.rpoint_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.rpoint_system = testData1s;
      print(sys.type.rpoint_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.rpoint_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.rpoint_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.rpoint_system = testData2s;
      print(sys.type.rpoint_system);
      expect(sys.type.rpoint_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.rpoint_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.rpoint_system = defalut;
      print(sys.type.rpoint_system);
      expect(sys.type.rpoint_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.rpoint_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00220_element_check_00197 **********\n\n");
    });

    test('00221_element_check_00198', () async {
      print("\n********** テスト実行：00221_element_check_00198 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.vesca_system;
      print(sys.type.vesca_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.vesca_system = testData1s;
      print(sys.type.vesca_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.vesca_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.vesca_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.vesca_system = testData2s;
      print(sys.type.vesca_system);
      expect(sys.type.vesca_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.vesca_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.vesca_system = defalut;
      print(sys.type.vesca_system);
      expect(sys.type.vesca_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.vesca_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00221_element_check_00198 **********\n\n");
    });

    test('00222_element_check_00199', () async {
      print("\n********** テスト実行：00222_element_check_00199 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ajs_emoney_system;
      print(sys.type.ajs_emoney_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ajs_emoney_system = testData1s;
      print(sys.type.ajs_emoney_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ajs_emoney_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ajs_emoney_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ajs_emoney_system = testData2s;
      print(sys.type.ajs_emoney_system);
      expect(sys.type.ajs_emoney_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ajs_emoney_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ajs_emoney_system = defalut;
      print(sys.type.ajs_emoney_system);
      expect(sys.type.ajs_emoney_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ajs_emoney_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00222_element_check_00199 **********\n\n");
    });

    test('00223_element_check_00200', () async {
      print("\n********** テスト実行：00223_element_check_00200 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm16_taiyo_toyocho_system;
      print(sys.type.sm16_taiyo_toyocho_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm16_taiyo_toyocho_system = testData1s;
      print(sys.type.sm16_taiyo_toyocho_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm16_taiyo_toyocho_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm16_taiyo_toyocho_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm16_taiyo_toyocho_system = testData2s;
      print(sys.type.sm16_taiyo_toyocho_system);
      expect(sys.type.sm16_taiyo_toyocho_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm16_taiyo_toyocho_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm16_taiyo_toyocho_system = defalut;
      print(sys.type.sm16_taiyo_toyocho_system);
      expect(sys.type.sm16_taiyo_toyocho_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm16_taiyo_toyocho_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00223_element_check_00200 **********\n\n");
    });

    test('00224_element_check_00201', () async {
      print("\n********** テスト実行：00224_element_check_00201 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.infox_detail_send_system;
      print(sys.type.infox_detail_send_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.infox_detail_send_system = testData1s;
      print(sys.type.infox_detail_send_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.infox_detail_send_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.infox_detail_send_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.infox_detail_send_system = testData2s;
      print(sys.type.infox_detail_send_system);
      expect(sys.type.infox_detail_send_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.infox_detail_send_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.infox_detail_send_system = defalut;
      print(sys.type.infox_detail_send_system);
      expect(sys.type.infox_detail_send_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.infox_detail_send_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00224_element_check_00201 **********\n\n");
    });

    test('00225_element_check_00202', () async {
      print("\n********** テスト実行：00225_element_check_00202 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.self_medication_system;
      print(sys.type.self_medication_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.self_medication_system = testData1s;
      print(sys.type.self_medication_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.self_medication_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.self_medication_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.self_medication_system = testData2s;
      print(sys.type.self_medication_system);
      expect(sys.type.self_medication_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.self_medication_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.self_medication_system = defalut;
      print(sys.type.self_medication_system);
      expect(sys.type.self_medication_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.self_medication_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00225_element_check_00202 **********\n\n");
    });

    test('00226_element_check_00203', () async {
      print("\n********** テスト実行：00226_element_check_00203 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm20_maeda_system;
      print(sys.type.sm20_maeda_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm20_maeda_system = testData1s;
      print(sys.type.sm20_maeda_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm20_maeda_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm20_maeda_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm20_maeda_system = testData2s;
      print(sys.type.sm20_maeda_system);
      expect(sys.type.sm20_maeda_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm20_maeda_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm20_maeda_system = defalut;
      print(sys.type.sm20_maeda_system);
      expect(sys.type.sm20_maeda_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm20_maeda_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00226_element_check_00203 **********\n\n");
    });

    test('00227_element_check_00204', () async {
      print("\n********** テスト実行：00227_element_check_00204 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pana_waon_system;
      print(sys.type.pana_waon_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pana_waon_system = testData1s;
      print(sys.type.pana_waon_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pana_waon_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pana_waon_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pana_waon_system = testData2s;
      print(sys.type.pana_waon_system);
      expect(sys.type.pana_waon_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pana_waon_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pana_waon_system = defalut;
      print(sys.type.pana_waon_system);
      expect(sys.type.pana_waon_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pana_waon_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00227_element_check_00204 **********\n\n");
    });

    test('00228_element_check_00205', () async {
      print("\n********** テスト実行：00228_element_check_00205 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.onepay_system;
      print(sys.type.onepay_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.onepay_system = testData1s;
      print(sys.type.onepay_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.onepay_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.onepay_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.onepay_system = testData2s;
      print(sys.type.onepay_system);
      expect(sys.type.onepay_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.onepay_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.onepay_system = defalut;
      print(sys.type.onepay_system);
      expect(sys.type.onepay_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.onepay_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00228_element_check_00205 **********\n\n");
    });

    test('00229_element_check_00206', () async {
      print("\n********** テスト実行：00229_element_check_00206 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.happyself_system;
      print(sys.type.happyself_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.happyself_system = testData1s;
      print(sys.type.happyself_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.happyself_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.happyself_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.happyself_system = testData2s;
      print(sys.type.happyself_system);
      expect(sys.type.happyself_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.happyself_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.happyself_system = defalut;
      print(sys.type.happyself_system);
      expect(sys.type.happyself_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.happyself_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00229_element_check_00206 **********\n\n");
    });

    test('00230_element_check_00207', () async {
      print("\n********** テスト実行：00230_element_check_00207 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.happyself_smile_system;
      print(sys.type.happyself_smile_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.happyself_smile_system = testData1s;
      print(sys.type.happyself_smile_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.happyself_smile_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.happyself_smile_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.happyself_smile_system = testData2s;
      print(sys.type.happyself_smile_system);
      expect(sys.type.happyself_smile_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.happyself_smile_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.happyself_smile_system = defalut;
      print(sys.type.happyself_smile_system);
      expect(sys.type.happyself_smile_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.happyself_smile_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00230_element_check_00207 **********\n\n");
    });

    test('00231_element_check_00208', () async {
      print("\n********** テスト実行：00231_element_check_00208 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.linepay_system;
      print(sys.type.linepay_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.linepay_system = testData1s;
      print(sys.type.linepay_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.linepay_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.linepay_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.linepay_system = testData2s;
      print(sys.type.linepay_system);
      expect(sys.type.linepay_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.linepay_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.linepay_system = defalut;
      print(sys.type.linepay_system);
      expect(sys.type.linepay_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.linepay_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00231_element_check_00208 **********\n\n");
    });

    test('00232_element_check_00209', () async {
      print("\n********** テスト実行：00232_element_check_00209 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.staff_release_system;
      print(sys.type.staff_release_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.staff_release_system = testData1s;
      print(sys.type.staff_release_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.staff_release_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.staff_release_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.staff_release_system = testData2s;
      print(sys.type.staff_release_system);
      expect(sys.type.staff_release_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.staff_release_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.staff_release_system = defalut;
      print(sys.type.staff_release_system);
      expect(sys.type.staff_release_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.staff_release_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00232_element_check_00209 **********\n\n");
    });

    test('00233_element_check_00210', () async {
      print("\n********** テスト実行：00233_element_check_00210 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.wiz_base_system;
      print(sys.type.wiz_base_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.wiz_base_system = testData1s;
      print(sys.type.wiz_base_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.wiz_base_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.wiz_base_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.wiz_base_system = testData2s;
      print(sys.type.wiz_base_system);
      expect(sys.type.wiz_base_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.wiz_base_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.wiz_base_system = defalut;
      print(sys.type.wiz_base_system);
      expect(sys.type.wiz_base_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.wiz_base_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00233_element_check_00210 **********\n\n");
    });

    test('00234_element_check_00211', () async {
      print("\n********** テスト実行：00234_element_check_00211 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.pack_on_time_system;
      print(sys.type.pack_on_time_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.pack_on_time_system = testData1s;
      print(sys.type.pack_on_time_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.pack_on_time_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.pack_on_time_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.pack_on_time_system = testData2s;
      print(sys.type.pack_on_time_system);
      expect(sys.type.pack_on_time_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pack_on_time_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.pack_on_time_system = defalut;
      print(sys.type.pack_on_time_system);
      expect(sys.type.pack_on_time_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.pack_on_time_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00234_element_check_00211 **********\n\n");
    });

    test('00235_element_check_00212', () async {
      print("\n********** テスト実行：00235_element_check_00212 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.shop_and_go_system;
      print(sys.type.shop_and_go_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.shop_and_go_system = testData1s;
      print(sys.type.shop_and_go_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.shop_and_go_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.shop_and_go_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.shop_and_go_system = testData2s;
      print(sys.type.shop_and_go_system);
      expect(sys.type.shop_and_go_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.shop_and_go_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.shop_and_go_system = defalut;
      print(sys.type.shop_and_go_system);
      expect(sys.type.shop_and_go_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.shop_and_go_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00235_element_check_00212 **********\n\n");
    });

    test('00236_element_check_00213', () async {
      print("\n********** テスト実行：00236_element_check_00213 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.staffid1_ymss_system;
      print(sys.type.staffid1_ymss_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.staffid1_ymss_system = testData1s;
      print(sys.type.staffid1_ymss_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.staffid1_ymss_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.staffid1_ymss_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.staffid1_ymss_system = testData2s;
      print(sys.type.staffid1_ymss_system);
      expect(sys.type.staffid1_ymss_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.staffid1_ymss_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.staffid1_ymss_system = defalut;
      print(sys.type.staffid1_ymss_system);
      expect(sys.type.staffid1_ymss_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.staffid1_ymss_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00236_element_check_00213 **********\n\n");
    });

    test('00237_element_check_00214', () async {
      print("\n********** テスト実行：00237_element_check_00214 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm33_nishizawa_system;
      print(sys.type.sm33_nishizawa_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm33_nishizawa_system = testData1s;
      print(sys.type.sm33_nishizawa_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm33_nishizawa_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm33_nishizawa_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm33_nishizawa_system = testData2s;
      print(sys.type.sm33_nishizawa_system);
      expect(sys.type.sm33_nishizawa_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm33_nishizawa_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm33_nishizawa_system = defalut;
      print(sys.type.sm33_nishizawa_system);
      expect(sys.type.sm33_nishizawa_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm33_nishizawa_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00237_element_check_00214 **********\n\n");
    });

    test('00238_element_check_00215', () async {
      print("\n********** テスト実行：00238_element_check_00215 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ds2_godai_system;
      print(sys.type.ds2_godai_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ds2_godai_system = testData1s;
      print(sys.type.ds2_godai_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ds2_godai_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ds2_godai_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ds2_godai_system = testData2s;
      print(sys.type.ds2_godai_system);
      expect(sys.type.ds2_godai_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ds2_godai_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ds2_godai_system = defalut;
      print(sys.type.ds2_godai_system);
      expect(sys.type.ds2_godai_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ds2_godai_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00238_element_check_00215 **********\n\n");
    });

    test('00239_element_check_00216', () async {
      print("\n********** テスト実行：00239_element_check_00216 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.taxfree_passportinfo_system;
      print(sys.type.taxfree_passportinfo_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.taxfree_passportinfo_system = testData1s;
      print(sys.type.taxfree_passportinfo_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.taxfree_passportinfo_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.taxfree_passportinfo_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.taxfree_passportinfo_system = testData2s;
      print(sys.type.taxfree_passportinfo_system);
      expect(sys.type.taxfree_passportinfo_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.taxfree_passportinfo_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.taxfree_passportinfo_system = defalut;
      print(sys.type.taxfree_passportinfo_system);
      expect(sys.type.taxfree_passportinfo_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.taxfree_passportinfo_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00239_element_check_00216 **********\n\n");
    });

    test('00240_element_check_00217', () async {
      print("\n********** テスト実行：00240_element_check_00217 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm36_sanpraza_system;
      print(sys.type.sm36_sanpraza_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm36_sanpraza_system = testData1s;
      print(sys.type.sm36_sanpraza_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm36_sanpraza_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm36_sanpraza_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm36_sanpraza_system = testData2s;
      print(sys.type.sm36_sanpraza_system);
      expect(sys.type.sm36_sanpraza_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm36_sanpraza_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm36_sanpraza_system = defalut;
      print(sys.type.sm36_sanpraza_system);
      expect(sys.type.sm36_sanpraza_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm36_sanpraza_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00240_element_check_00217 **********\n\n");
    });

    test('00241_element_check_00218', () async {
      print("\n********** テスト実行：00241_element_check_00218 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cr50_system;
      print(sys.type.cr50_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cr50_system = testData1s;
      print(sys.type.cr50_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cr50_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cr50_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cr50_system = testData2s;
      print(sys.type.cr50_system);
      expect(sys.type.cr50_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cr50_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cr50_system = defalut;
      print(sys.type.cr50_system);
      expect(sys.type.cr50_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cr50_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00241_element_check_00218 **********\n\n");
    });

    test('00242_element_check_00219', () async {
      print("\n********** テスト実行：00242_element_check_00219 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.case_clothes_barcode_system;
      print(sys.type.case_clothes_barcode_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.case_clothes_barcode_system = testData1s;
      print(sys.type.case_clothes_barcode_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.case_clothes_barcode_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.case_clothes_barcode_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.case_clothes_barcode_system = testData2s;
      print(sys.type.case_clothes_barcode_system);
      expect(sys.type.case_clothes_barcode_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.case_clothes_barcode_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.case_clothes_barcode_system = defalut;
      print(sys.type.case_clothes_barcode_system);
      expect(sys.type.case_clothes_barcode_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.case_clothes_barcode_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00242_element_check_00219 **********\n\n");
    });

    test('00243_element_check_00220', () async {
      print("\n********** テスト実行：00243_element_check_00220 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_dummy_system;
      print(sys.type.custreal_dummy_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_dummy_system = testData1s;
      print(sys.type.custreal_dummy_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_dummy_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_dummy_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_dummy_system = testData2s;
      print(sys.type.custreal_dummy_system);
      expect(sys.type.custreal_dummy_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_dummy_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_dummy_system = defalut;
      print(sys.type.custreal_dummy_system);
      expect(sys.type.custreal_dummy_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_dummy_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00243_element_check_00220 **********\n\n");
    });

    test('00244_element_check_00221', () async {
      print("\n********** テスト実行：00244_element_check_00221 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.reason_select_std_system;
      print(sys.type.reason_select_std_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.reason_select_std_system = testData1s;
      print(sys.type.reason_select_std_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.reason_select_std_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.reason_select_std_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.reason_select_std_system = testData2s;
      print(sys.type.reason_select_std_system);
      expect(sys.type.reason_select_std_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.reason_select_std_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.reason_select_std_system = defalut;
      print(sys.type.reason_select_std_system);
      expect(sys.type.reason_select_std_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.reason_select_std_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00244_element_check_00221 **********\n\n");
    });

    test('00245_element_check_00222', () async {
      print("\n********** テスト実行：00245_element_check_00222 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.barcode_pay1_system;
      print(sys.type.barcode_pay1_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.barcode_pay1_system = testData1s;
      print(sys.type.barcode_pay1_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.barcode_pay1_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.barcode_pay1_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.barcode_pay1_system = testData2s;
      print(sys.type.barcode_pay1_system);
      expect(sys.type.barcode_pay1_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.barcode_pay1_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.barcode_pay1_system = defalut;
      print(sys.type.barcode_pay1_system);
      expect(sys.type.barcode_pay1_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.barcode_pay1_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00245_element_check_00222 **********\n\n");
    });

    test('00246_element_check_00223', () async {
      print("\n********** テスト実行：00246_element_check_00223 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_ptactix;
      print(sys.type.custreal_ptactix);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_ptactix = testData1s;
      print(sys.type.custreal_ptactix);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_ptactix == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_ptactix == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_ptactix = testData2s;
      print(sys.type.custreal_ptactix);
      expect(sys.type.custreal_ptactix == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_ptactix == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_ptactix = defalut;
      print(sys.type.custreal_ptactix);
      expect(sys.type.custreal_ptactix == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_ptactix == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00246_element_check_00223 **********\n\n");
    });

    test('00247_element_check_00224', () async {
      print("\n********** テスト実行：00247_element_check_00224 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cr3_sharp_system;
      print(sys.type.cr3_sharp_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cr3_sharp_system = testData1s;
      print(sys.type.cr3_sharp_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cr3_sharp_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cr3_sharp_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cr3_sharp_system = testData2s;
      print(sys.type.cr3_sharp_system);
      expect(sys.type.cr3_sharp_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cr3_sharp_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cr3_sharp_system = defalut;
      print(sys.type.cr3_sharp_system);
      expect(sys.type.cr3_sharp_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cr3_sharp_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00247_element_check_00224 **********\n\n");
    });

    test('00248_element_check_00225', () async {
      print("\n********** テスト実行：00248_element_check_00225 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.game_barcode_system;
      print(sys.type.game_barcode_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.game_barcode_system = testData1s;
      print(sys.type.game_barcode_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.game_barcode_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.game_barcode_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.game_barcode_system = testData2s;
      print(sys.type.game_barcode_system);
      expect(sys.type.game_barcode_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.game_barcode_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.game_barcode_system = defalut;
      print(sys.type.game_barcode_system);
      expect(sys.type.game_barcode_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.game_barcode_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00248_element_check_00225 **********\n\n");
    });

    test('00249_element_check_00226', () async {
      print("\n********** テスト実行：00249_element_check_00226 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cct_codepay_system;
      print(sys.type.cct_codepay_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cct_codepay_system = testData1s;
      print(sys.type.cct_codepay_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cct_codepay_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cct_codepay_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cct_codepay_system = testData2s;
      print(sys.type.cct_codepay_system);
      expect(sys.type.cct_codepay_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_codepay_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cct_codepay_system = defalut;
      print(sys.type.cct_codepay_system);
      expect(sys.type.cct_codepay_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cct_codepay_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00249_element_check_00226 **********\n\n");
    });

    test('00250_element_check_00227', () async {
      print("\n********** テスト実行：00250_element_check_00227 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ws_system;
      print(sys.type.ws_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ws_system = testData1s;
      print(sys.type.ws_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ws_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ws_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ws_system = testData2s;
      print(sys.type.ws_system);
      expect(sys.type.ws_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ws_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ws_system = defalut;
      print(sys.type.ws_system);
      expect(sys.type.ws_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ws_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00250_element_check_00227 **********\n\n");
    });

    test('00251_element_check_00228', () async {
      print("\n********** テスト実行：00251_element_check_00228 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_pointinfinity;
      print(sys.type.custreal_pointinfinity);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_pointinfinity = testData1s;
      print(sys.type.custreal_pointinfinity);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_pointinfinity == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_pointinfinity == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_pointinfinity = testData2s;
      print(sys.type.custreal_pointinfinity);
      expect(sys.type.custreal_pointinfinity == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_pointinfinity == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_pointinfinity = defalut;
      print(sys.type.custreal_pointinfinity);
      expect(sys.type.custreal_pointinfinity == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_pointinfinity == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00251_element_check_00228 **********\n\n");
    });

    test('00252_element_check_00229', () async {
      print("\n********** テスト実行：00252_element_check_00229 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.toy_system;
      print(sys.type.toy_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.toy_system = testData1s;
      print(sys.type.toy_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.toy_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.toy_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.toy_system = testData2s;
      print(sys.type.toy_system);
      expect(sys.type.toy_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.toy_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.toy_system = defalut;
      print(sys.type.toy_system);
      expect(sys.type.toy_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.toy_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00252_element_check_00229 **********\n\n");
    });

    test('00253_element_check_00230', () async {
      print("\n********** テスト実行：00253_element_check_00230 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.canal_payment_service_system;
      print(sys.type.canal_payment_service_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.canal_payment_service_system = testData1s;
      print(sys.type.canal_payment_service_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.canal_payment_service_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.canal_payment_service_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.canal_payment_service_system = testData2s;
      print(sys.type.canal_payment_service_system);
      expect(sys.type.canal_payment_service_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.canal_payment_service_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.canal_payment_service_system = defalut;
      print(sys.type.canal_payment_service_system);
      expect(sys.type.canal_payment_service_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.canal_payment_service_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00253_element_check_00230 **********\n\n");
    });

    test('00254_element_check_00231', () async {
      print("\n********** テスト実行：00254_element_check_00231 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.multi_vega_system;
      print(sys.type.multi_vega_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.multi_vega_system = testData1s;
      print(sys.type.multi_vega_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.multi_vega_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.multi_vega_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.multi_vega_system = testData2s;
      print(sys.type.multi_vega_system);
      expect(sys.type.multi_vega_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.multi_vega_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.multi_vega_system = defalut;
      print(sys.type.multi_vega_system);
      expect(sys.type.multi_vega_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.multi_vega_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00254_element_check_00231 **********\n\n");
    });

    test('00255_element_check_00232', () async {
      print("\n********** テスト実行：00255_element_check_00232 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dispensing_pharmacy_system;
      print(sys.type.dispensing_pharmacy_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dispensing_pharmacy_system = testData1s;
      print(sys.type.dispensing_pharmacy_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dispensing_pharmacy_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dispensing_pharmacy_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dispensing_pharmacy_system = testData2s;
      print(sys.type.dispensing_pharmacy_system);
      expect(sys.type.dispensing_pharmacy_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dispensing_pharmacy_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dispensing_pharmacy_system = defalut;
      print(sys.type.dispensing_pharmacy_system);
      expect(sys.type.dispensing_pharmacy_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dispensing_pharmacy_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00255_element_check_00232 **********\n\n");
    });

    test('00256_element_check_00233', () async {
      print("\n********** テスト実行：00256_element_check_00233 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm41_bellejois_system;
      print(sys.type.sm41_bellejois_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm41_bellejois_system = testData1s;
      print(sys.type.sm41_bellejois_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm41_bellejois_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm41_bellejois_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm41_bellejois_system = testData2s;
      print(sys.type.sm41_bellejois_system);
      expect(sys.type.sm41_bellejois_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm41_bellejois_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm41_bellejois_system = defalut;
      print(sys.type.sm41_bellejois_system);
      expect(sys.type.sm41_bellejois_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm41_bellejois_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00256_element_check_00233 **********\n\n");
    });

    test('00257_element_check_00234', () async {
      print("\n********** テスト実行：00257_element_check_00234 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm42_kanesue_system;
      print(sys.type.sm42_kanesue_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm42_kanesue_system = testData1s;
      print(sys.type.sm42_kanesue_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm42_kanesue_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm42_kanesue_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm42_kanesue_system = testData2s;
      print(sys.type.sm42_kanesue_system);
      expect(sys.type.sm42_kanesue_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm42_kanesue_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm42_kanesue_system = defalut;
      print(sys.type.sm42_kanesue_system);
      expect(sys.type.sm42_kanesue_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm42_kanesue_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00257_element_check_00234 **********\n\n");
    });

    test('00258_element_check_00235', () async {
      print("\n********** テスト実行：00258_element_check_00235 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.dpoint_system;
      print(sys.type.dpoint_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.dpoint_system = testData1s;
      print(sys.type.dpoint_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.dpoint_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.dpoint_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.dpoint_system = testData2s;
      print(sys.type.dpoint_system);
      expect(sys.type.dpoint_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dpoint_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.dpoint_system = defalut;
      print(sys.type.dpoint_system);
      expect(sys.type.dpoint_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.dpoint_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00258_element_check_00235 **********\n\n");
    });

    test('00259_element_check_00236', () async {
      print("\n********** テスト実行：00259_element_check_00236 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.public_barcode_pay_system;
      print(sys.type.public_barcode_pay_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.public_barcode_pay_system = testData1s;
      print(sys.type.public_barcode_pay_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.public_barcode_pay_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.public_barcode_pay_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.public_barcode_pay_system = testData2s;
      print(sys.type.public_barcode_pay_system);
      expect(sys.type.public_barcode_pay_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.public_barcode_pay_system = defalut;
      print(sys.type.public_barcode_pay_system);
      expect(sys.type.public_barcode_pay_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00259_element_check_00236 **********\n\n");
    });

    test('00260_element_check_00237', () async {
      print("\n********** テスト実行：00260_element_check_00237 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.ts_indiv_setting_system;
      print(sys.type.ts_indiv_setting_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.ts_indiv_setting_system = testData1s;
      print(sys.type.ts_indiv_setting_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.ts_indiv_setting_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.ts_indiv_setting_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.ts_indiv_setting_system = testData2s;
      print(sys.type.ts_indiv_setting_system);
      expect(sys.type.ts_indiv_setting_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ts_indiv_setting_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.ts_indiv_setting_system = defalut;
      print(sys.type.ts_indiv_setting_system);
      expect(sys.type.ts_indiv_setting_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.ts_indiv_setting_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00260_element_check_00237 **********\n\n");
    });

    test('00261_element_check_00238', () async {
      print("\n********** テスト実行：00261_element_check_00238 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm44_ja_tsuruoka_system;
      print(sys.type.sm44_ja_tsuruoka_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm44_ja_tsuruoka_system = testData1s;
      print(sys.type.sm44_ja_tsuruoka_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm44_ja_tsuruoka_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm44_ja_tsuruoka_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm44_ja_tsuruoka_system = testData2s;
      print(sys.type.sm44_ja_tsuruoka_system);
      expect(sys.type.sm44_ja_tsuruoka_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm44_ja_tsuruoka_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm44_ja_tsuruoka_system = defalut;
      print(sys.type.sm44_ja_tsuruoka_system);
      expect(sys.type.sm44_ja_tsuruoka_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm44_ja_tsuruoka_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00261_element_check_00238 **********\n\n");
    });

    test('00262_element_check_00239', () async {
      print("\n********** テスト実行：00262_element_check_00239 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.stera_terminal_system;
      print(sys.type.stera_terminal_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.stera_terminal_system = testData1s;
      print(sys.type.stera_terminal_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.stera_terminal_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.stera_terminal_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.stera_terminal_system = testData2s;
      print(sys.type.stera_terminal_system);
      expect(sys.type.stera_terminal_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.stera_terminal_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.stera_terminal_system = defalut;
      print(sys.type.stera_terminal_system);
      expect(sys.type.stera_terminal_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.stera_terminal_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00262_element_check_00239 **********\n\n");
    });

    test('00263_element_check_00240', () async {
      print("\n********** テスト実行：00263_element_check_00240 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.repica_point_system;
      print(sys.type.repica_point_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.repica_point_system = testData1s;
      print(sys.type.repica_point_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.repica_point_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.repica_point_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.repica_point_system = testData2s;
      print(sys.type.repica_point_system);
      expect(sys.type.repica_point_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.repica_point_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.repica_point_system = defalut;
      print(sys.type.repica_point_system);
      expect(sys.type.repica_point_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.repica_point_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00263_element_check_00240 **********\n\n");
    });

    test('00264_element_check_00241', () async {
      print("\n********** テスト実行：00264_element_check_00241 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm45_ocean_system;
      print(sys.type.sm45_ocean_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm45_ocean_system = testData1s;
      print(sys.type.sm45_ocean_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm45_ocean_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm45_ocean_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm45_ocean_system = testData2s;
      print(sys.type.sm45_ocean_system);
      expect(sys.type.sm45_ocean_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm45_ocean_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm45_ocean_system = defalut;
      print(sys.type.sm45_ocean_system);
      expect(sys.type.sm45_ocean_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm45_ocean_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00264_element_check_00241 **********\n\n");
    });

    test('00265_element_check_00242', () async {
      print("\n********** テスト実行：00265_element_check_00242 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.fujitsu_fip_codepay_system;
      print(sys.type.fujitsu_fip_codepay_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.fujitsu_fip_codepay_system = testData1s;
      print(sys.type.fujitsu_fip_codepay_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.fujitsu_fip_codepay_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.fujitsu_fip_codepay_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.fujitsu_fip_codepay_system = testData2s;
      print(sys.type.fujitsu_fip_codepay_system);
      expect(sys.type.fujitsu_fip_codepay_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fujitsu_fip_codepay_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.fujitsu_fip_codepay_system = defalut;
      print(sys.type.fujitsu_fip_codepay_system);
      expect(sys.type.fujitsu_fip_codepay_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.fujitsu_fip_codepay_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00265_element_check_00242 **********\n\n");
    });

    test('00266_element_check_00243', () async {
      print("\n********** テスト実行：00266_element_check_00243 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm49_itochain_system;
      print(sys.type.sm49_itochain_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm49_itochain_system = testData1s;
      print(sys.type.sm49_itochain_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm49_itochain_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm49_itochain_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm49_itochain_system = testData2s;
      print(sys.type.sm49_itochain_system);
      expect(sys.type.sm49_itochain_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm49_itochain_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm49_itochain_system = defalut;
      print(sys.type.sm49_itochain_system);
      expect(sys.type.sm49_itochain_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm49_itochain_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00266_element_check_00243 **********\n\n");
    });

    test('00267_element_check_00244', () async {
      print("\n********** テスト実行：00267_element_check_00244 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.taxfree_server_system;
      print(sys.type.taxfree_server_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.taxfree_server_system = testData1s;
      print(sys.type.taxfree_server_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.taxfree_server_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.taxfree_server_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.taxfree_server_system = testData2s;
      print(sys.type.taxfree_server_system);
      expect(sys.type.taxfree_server_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.taxfree_server_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.taxfree_server_system = defalut;
      print(sys.type.taxfree_server_system);
      expect(sys.type.taxfree_server_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.taxfree_server_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00267_element_check_00244 **********\n\n");
    });

    test('00268_element_check_00245', () async {
      print("\n********** テスト実行：00268_element_check_00245 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.employee_card_payment_system;
      print(sys.type.employee_card_payment_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.employee_card_payment_system = testData1s;
      print(sys.type.employee_card_payment_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.employee_card_payment_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.employee_card_payment_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.employee_card_payment_system = testData2s;
      print(sys.type.employee_card_payment_system);
      expect(sys.type.employee_card_payment_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.employee_card_payment_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.employee_card_payment_system = defalut;
      print(sys.type.employee_card_payment_system);
      expect(sys.type.employee_card_payment_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.employee_card_payment_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00268_element_check_00245 **********\n\n");
    });

    test('00269_element_check_00246', () async {
      print("\n********** テスト実行：00269_element_check_00246 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.net_receipt_system;
      print(sys.type.net_receipt_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.net_receipt_system = testData1s;
      print(sys.type.net_receipt_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.net_receipt_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.net_receipt_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.net_receipt_system = testData2s;
      print(sys.type.net_receipt_system);
      expect(sys.type.net_receipt_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.net_receipt_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.net_receipt_system = defalut;
      print(sys.type.net_receipt_system);
      expect(sys.type.net_receipt_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.net_receipt_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00269_element_check_00246 **********\n\n");
    });

    test('00270_element_check_00247', () async {
      print("\n********** テスト実行：00270_element_check_00247 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.public_barcode_pay2_system;
      print(sys.type.public_barcode_pay2_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.public_barcode_pay2_system = testData1s;
      print(sys.type.public_barcode_pay2_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.public_barcode_pay2_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.public_barcode_pay2_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.public_barcode_pay2_system = testData2s;
      print(sys.type.public_barcode_pay2_system);
      expect(sys.type.public_barcode_pay2_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay2_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.public_barcode_pay2_system = defalut;
      print(sys.type.public_barcode_pay2_system);
      expect(sys.type.public_barcode_pay2_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay2_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00270_element_check_00247 **********\n\n");
    });

    test('00271_element_check_00248', () async {
      print("\n********** テスト実行：00271_element_check_00248 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm52_palette_system;
      print(sys.type.sm52_palette_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm52_palette_system = testData1s;
      print(sys.type.sm52_palette_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm52_palette_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm52_palette_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm52_palette_system = testData2s;
      print(sys.type.sm52_palette_system);
      expect(sys.type.sm52_palette_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm52_palette_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm52_palette_system = defalut;
      print(sys.type.sm52_palette_system);
      expect(sys.type.sm52_palette_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm52_palette_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00271_element_check_00248 **********\n\n");
    });

    test('00272_element_check_00249', () async {
      print("\n********** テスト実行：00272_element_check_00249 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.public_barcode_pay3_system;
      print(sys.type.public_barcode_pay3_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.public_barcode_pay3_system = testData1s;
      print(sys.type.public_barcode_pay3_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.public_barcode_pay3_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.public_barcode_pay3_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.public_barcode_pay3_system = testData2s;
      print(sys.type.public_barcode_pay3_system);
      expect(sys.type.public_barcode_pay3_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay3_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.public_barcode_pay3_system = defalut;
      print(sys.type.public_barcode_pay3_system);
      expect(sys.type.public_barcode_pay3_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay3_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00272_element_check_00249 **********\n\n");
    });

    test('00273_element_check_00250', () async {
      print("\n********** テスト実行：00273_element_check_00250 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.svscls2_stlpdsc_system;
      print(sys.type.svscls2_stlpdsc_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.svscls2_stlpdsc_system = testData1s;
      print(sys.type.svscls2_stlpdsc_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.svscls2_stlpdsc_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.svscls2_stlpdsc_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.svscls2_stlpdsc_system = testData2s;
      print(sys.type.svscls2_stlpdsc_system);
      expect(sys.type.svscls2_stlpdsc_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.svscls2_stlpdsc_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.svscls2_stlpdsc_system = defalut;
      print(sys.type.svscls2_stlpdsc_system);
      expect(sys.type.svscls2_stlpdsc_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.svscls2_stlpdsc_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00273_element_check_00250 **********\n\n");
    });

    test('00274_element_check_00251', () async {
      print("\n********** テスト実行：00274_element_check_00251 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm55_takayanagi_system;
      print(sys.type.sm55_takayanagi_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm55_takayanagi_system = testData1s;
      print(sys.type.sm55_takayanagi_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm55_takayanagi_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm55_takayanagi_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm55_takayanagi_system = testData2s;
      print(sys.type.sm55_takayanagi_system);
      expect(sys.type.sm55_takayanagi_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm55_takayanagi_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm55_takayanagi_system = defalut;
      print(sys.type.sm55_takayanagi_system);
      expect(sys.type.sm55_takayanagi_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm55_takayanagi_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00274_element_check_00251 **********\n\n");
    });

    test('00275_element_check_00252', () async {
      print("\n********** テスト実行：00275_element_check_00252 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.mail_send_system;
      print(sys.type.mail_send_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.mail_send_system = testData1s;
      print(sys.type.mail_send_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.mail_send_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.mail_send_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.mail_send_system = testData2s;
      print(sys.type.mail_send_system);
      expect(sys.type.mail_send_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mail_send_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.mail_send_system = defalut;
      print(sys.type.mail_send_system);
      expect(sys.type.mail_send_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.mail_send_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00275_element_check_00252 **********\n\n");
    });

    test('00276_element_check_00253', () async {
      print("\n********** テスト実行：00276_element_check_00253 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.netstars_codepay_system;
      print(sys.type.netstars_codepay_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.netstars_codepay_system = testData1s;
      print(sys.type.netstars_codepay_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.netstars_codepay_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.netstars_codepay_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.netstars_codepay_system = testData2s;
      print(sys.type.netstars_codepay_system);
      expect(sys.type.netstars_codepay_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.netstars_codepay_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.netstars_codepay_system = defalut;
      print(sys.type.netstars_codepay_system);
      expect(sys.type.netstars_codepay_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.netstars_codepay_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00276_element_check_00253 **********\n\n");
    });

    test('00277_element_check_00254', () async {
      print("\n********** テスト実行：00277_element_check_00254 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm56_kobebussan_system;
      print(sys.type.sm56_kobebussan_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm56_kobebussan_system = testData1s;
      print(sys.type.sm56_kobebussan_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm56_kobebussan_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm56_kobebussan_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm56_kobebussan_system = testData2s;
      print(sys.type.sm56_kobebussan_system);
      expect(sys.type.sm56_kobebussan_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm56_kobebussan_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm56_kobebussan_system = defalut;
      print(sys.type.sm56_kobebussan_system);
      expect(sys.type.sm56_kobebussan_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm56_kobebussan_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00277_element_check_00254 **********\n\n");
    });

    test('00278_element_check_00255', () async {
      print("\n********** テスト実行：00278_element_check_00255 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hys1_seria_system;
      print(sys.type.hys1_seria_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hys1_seria_system = testData1s;
      print(sys.type.hys1_seria_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hys1_seria_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hys1_seria_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hys1_seria_system = testData2s;
      print(sys.type.hys1_seria_system);
      expect(sys.type.hys1_seria_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hys1_seria_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hys1_seria_system = defalut;
      print(sys.type.hys1_seria_system);
      expect(sys.type.hys1_seria_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hys1_seria_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00278_element_check_00255 **********\n\n");
    });

    test('00279_element_check_00256', () async {
      print("\n********** テスト実行：00279_element_check_00256 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.liqr_taxfree_system;
      print(sys.type.liqr_taxfree_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.liqr_taxfree_system = testData1s;
      print(sys.type.liqr_taxfree_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.liqr_taxfree_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.liqr_taxfree_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.liqr_taxfree_system = testData2s;
      print(sys.type.liqr_taxfree_system);
      expect(sys.type.liqr_taxfree_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.liqr_taxfree_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.liqr_taxfree_system = defalut;
      print(sys.type.liqr_taxfree_system);
      expect(sys.type.liqr_taxfree_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.liqr_taxfree_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00279_element_check_00256 **********\n\n");
    });

    test('00280_element_check_00257', () async {
      print("\n********** テスト実行：00280_element_check_00257 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_gyomuca_system;
      print(sys.type.custreal_gyomuca_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_gyomuca_system = testData1s;
      print(sys.type.custreal_gyomuca_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_gyomuca_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_gyomuca_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_gyomuca_system = testData2s;
      print(sys.type.custreal_gyomuca_system);
      expect(sys.type.custreal_gyomuca_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_gyomuca_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_gyomuca_system = defalut;
      print(sys.type.custreal_gyomuca_system);
      expect(sys.type.custreal_gyomuca_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_gyomuca_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00280_element_check_00257 **********\n\n");
    });

    test('00281_element_check_00258', () async {
      print("\n********** テスト実行：00281_element_check_00258 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm59_takaramc_system;
      print(sys.type.sm59_takaramc_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm59_takaramc_system = testData1s;
      print(sys.type.sm59_takaramc_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm59_takaramc_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm59_takaramc_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm59_takaramc_system = testData2s;
      print(sys.type.sm59_takaramc_system);
      expect(sys.type.sm59_takaramc_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm59_takaramc_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm59_takaramc_system = defalut;
      print(sys.type.sm59_takaramc_system);
      expect(sys.type.sm59_takaramc_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm59_takaramc_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00281_element_check_00258 **********\n\n");
    });

    test('00282_element_check_00259', () async {
      print("\n********** テスト実行：00282_element_check_00259 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.detail_noprn_system;
      print(sys.type.detail_noprn_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.detail_noprn_system = testData1s;
      print(sys.type.detail_noprn_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.detail_noprn_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.detail_noprn_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.detail_noprn_system = testData2s;
      print(sys.type.detail_noprn_system);
      expect(sys.type.detail_noprn_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.detail_noprn_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.detail_noprn_system = defalut;
      print(sys.type.detail_noprn_system);
      expect(sys.type.detail_noprn_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.detail_noprn_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00282_element_check_00259 **********\n\n");
    });

    test('00283_element_check_00260', () async {
      print("\n********** テスト実行：00283_element_check_00260 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm61_fujifilm_system;
      print(sys.type.sm61_fujifilm_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm61_fujifilm_system = testData1s;
      print(sys.type.sm61_fujifilm_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm61_fujifilm_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm61_fujifilm_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm61_fujifilm_system = testData2s;
      print(sys.type.sm61_fujifilm_system);
      expect(sys.type.sm61_fujifilm_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm61_fujifilm_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm61_fujifilm_system = defalut;
      print(sys.type.sm61_fujifilm_system);
      expect(sys.type.sm61_fujifilm_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm61_fujifilm_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00283_element_check_00260 **********\n\n");
    });

    test('00284_element_check_00261', () async {
      print("\n********** テスト実行：00284_element_check_00261 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.department2_system;
      print(sys.type.department2_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.department2_system = testData1s;
      print(sys.type.department2_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.department2_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.department2_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.department2_system = testData2s;
      print(sys.type.department2_system);
      expect(sys.type.department2_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.department2_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.department2_system = defalut;
      print(sys.type.department2_system);
      expect(sys.type.department2_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.department2_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00284_element_check_00261 **********\n\n");
    });

    test('00285_element_check_00262', () async {
      print("\n********** テスト実行：00285_element_check_00262 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.custreal_crosspoint;
      print(sys.type.custreal_crosspoint);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.custreal_crosspoint = testData1s;
      print(sys.type.custreal_crosspoint);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.custreal_crosspoint == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.custreal_crosspoint == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.custreal_crosspoint = testData2s;
      print(sys.type.custreal_crosspoint);
      expect(sys.type.custreal_crosspoint == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_crosspoint == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.custreal_crosspoint = defalut;
      print(sys.type.custreal_crosspoint);
      expect(sys.type.custreal_crosspoint == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.custreal_crosspoint == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00285_element_check_00262 **********\n\n");
    });

    test('00286_element_check_00263', () async {
      print("\n********** テスト実行：00286_element_check_00263 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.hc12_joyful_honda_system;
      print(sys.type.hc12_joyful_honda_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.hc12_joyful_honda_system = testData1s;
      print(sys.type.hc12_joyful_honda_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.hc12_joyful_honda_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.hc12_joyful_honda_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.hc12_joyful_honda_system = testData2s;
      print(sys.type.hc12_joyful_honda_system);
      expect(sys.type.hc12_joyful_honda_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc12_joyful_honda_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.hc12_joyful_honda_system = defalut;
      print(sys.type.hc12_joyful_honda_system);
      expect(sys.type.hc12_joyful_honda_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.hc12_joyful_honda_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00286_element_check_00263 **********\n\n");
    });

    test('00287_element_check_00264', () async {
      print("\n********** テスト実行：00287_element_check_00264 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm62_maruichi_system;
      print(sys.type.sm62_maruichi_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm62_maruichi_system = testData1s;
      print(sys.type.sm62_maruichi_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm62_maruichi_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm62_maruichi_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm62_maruichi_system = testData2s;
      print(sys.type.sm62_maruichi_system);
      expect(sys.type.sm62_maruichi_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm62_maruichi_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm62_maruichi_system = defalut;
      print(sys.type.sm62_maruichi_system);
      expect(sys.type.sm62_maruichi_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm62_maruichi_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00287_element_check_00264 **********\n\n");
    });

    test('00288_element_check_00265', () async {
      print("\n********** テスト実行：00288_element_check_00265 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm65_ryubo_system;
      print(sys.type.sm65_ryubo_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm65_ryubo_system = testData1s;
      print(sys.type.sm65_ryubo_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm65_ryubo_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm65_ryubo_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm65_ryubo_system = testData2s;
      print(sys.type.sm65_ryubo_system);
      expect(sys.type.sm65_ryubo_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm65_ryubo_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm65_ryubo_system = defalut;
      print(sys.type.sm65_ryubo_system);
      expect(sys.type.sm65_ryubo_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm65_ryubo_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00288_element_check_00265 **********\n\n");
    });

    test('00289_element_check_00266', () async {
      print("\n********** テスト実行：00289_element_check_00266 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.tomoIF_system;
      print(sys.type.tomoIF_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.tomoIF_system = testData1s;
      print(sys.type.tomoIF_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.tomoIF_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.tomoIF_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.tomoIF_system = testData2s;
      print(sys.type.tomoIF_system);
      expect(sys.type.tomoIF_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tomoIF_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.tomoIF_system = defalut;
      print(sys.type.tomoIF_system);
      expect(sys.type.tomoIF_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.tomoIF_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00289_element_check_00266 **********\n\n");
    });

    test('00290_element_check_00267', () async {
      print("\n********** テスト実行：00290_element_check_00267 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm66_fresta_system;
      print(sys.type.sm66_fresta_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm66_fresta_system = testData1s;
      print(sys.type.sm66_fresta_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm66_fresta_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm66_fresta_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm66_fresta_system = testData2s;
      print(sys.type.sm66_fresta_system);
      expect(sys.type.sm66_fresta_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm66_fresta_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm66_fresta_system = defalut;
      print(sys.type.sm66_fresta_system);
      expect(sys.type.sm66_fresta_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm66_fresta_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00290_element_check_00267 **********\n\n");
    });

    test('00291_element_check_00268', () async {
      print("\n********** テスト実行：00291_element_check_00268 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cosme1_istyle_system;
      print(sys.type.cosme1_istyle_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cosme1_istyle_system = testData1s;
      print(sys.type.cosme1_istyle_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cosme1_istyle_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cosme1_istyle_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cosme1_istyle_system = testData2s;
      print(sys.type.cosme1_istyle_system);
      expect(sys.type.cosme1_istyle_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cosme1_istyle_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cosme1_istyle_system = defalut;
      print(sys.type.cosme1_istyle_system);
      expect(sys.type.cosme1_istyle_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cosme1_istyle_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00291_element_check_00268 **********\n\n");
    });

    test('00292_element_check_00269', () async {
      print("\n********** テスト実行：00292_element_check_00269 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm71_selection_system;
      print(sys.type.sm71_selection_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm71_selection_system = testData1s;
      print(sys.type.sm71_selection_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm71_selection_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm71_selection_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm71_selection_system = testData2s;
      print(sys.type.sm71_selection_system);
      expect(sys.type.sm71_selection_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm71_selection_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm71_selection_system = defalut;
      print(sys.type.sm71_selection_system);
      expect(sys.type.sm71_selection_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm71_selection_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00292_element_check_00269 **********\n\n");
    });

    test('00293_element_check_00270', () async {
      print("\n********** テスト実行：00293_element_check_00270 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.kitchen_print_recipt;
      print(sys.type.kitchen_print_recipt);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.kitchen_print_recipt = testData1s;
      print(sys.type.kitchen_print_recipt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.kitchen_print_recipt == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.kitchen_print_recipt == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.kitchen_print_recipt = testData2s;
      print(sys.type.kitchen_print_recipt);
      expect(sys.type.kitchen_print_recipt == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.kitchen_print_recipt == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.kitchen_print_recipt = defalut;
      print(sys.type.kitchen_print_recipt);
      expect(sys.type.kitchen_print_recipt == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.kitchen_print_recipt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00293_element_check_00270 **********\n\n");
    });

    test('00294_element_check_00271', () async {
      print("\n********** テスト実行：00294_element_check_00271 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.miyazaki_city_system;
      print(sys.type.miyazaki_city_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.miyazaki_city_system = testData1s;
      print(sys.type.miyazaki_city_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.miyazaki_city_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.miyazaki_city_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.miyazaki_city_system = testData2s;
      print(sys.type.miyazaki_city_system);
      expect(sys.type.miyazaki_city_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.miyazaki_city_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.miyazaki_city_system = defalut;
      print(sys.type.miyazaki_city_system);
      expect(sys.type.miyazaki_city_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.miyazaki_city_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00294_element_check_00271 **********\n\n");
    });

    test('00295_element_check_00272', () async {
      print("\n********** テスト実行：00295_element_check_00272 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.public_barcode_pay4_system;
      print(sys.type.public_barcode_pay4_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.public_barcode_pay4_system = testData1s;
      print(sys.type.public_barcode_pay4_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.public_barcode_pay4_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.public_barcode_pay4_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.public_barcode_pay4_system = testData2s;
      print(sys.type.public_barcode_pay4_system);
      expect(sys.type.public_barcode_pay4_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay4_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.public_barcode_pay4_system = defalut;
      print(sys.type.public_barcode_pay4_system);
      expect(sys.type.public_barcode_pay4_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.public_barcode_pay4_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00295_element_check_00272 **********\n\n");
    });

    test('00296_element_check_00273', () async {
      print("\n********** テスト実行：00296_element_check_00273 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sp1_qr_read_system;
      print(sys.type.sp1_qr_read_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sp1_qr_read_system = testData1s;
      print(sys.type.sp1_qr_read_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sp1_qr_read_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sp1_qr_read_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sp1_qr_read_system = testData2s;
      print(sys.type.sp1_qr_read_system);
      expect(sys.type.sp1_qr_read_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sp1_qr_read_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sp1_qr_read_system = defalut;
      print(sys.type.sp1_qr_read_system);
      expect(sys.type.sp1_qr_read_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sp1_qr_read_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00296_element_check_00273 **********\n\n");
    });

    test('00297_element_check_00274', () async {
      print("\n********** テスト実行：00297_element_check_00274 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.aibox_alignment_system;
      print(sys.type.aibox_alignment_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.aibox_alignment_system = testData1s;
      print(sys.type.aibox_alignment_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.aibox_alignment_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.aibox_alignment_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.aibox_alignment_system = testData2s;
      print(sys.type.aibox_alignment_system);
      expect(sys.type.aibox_alignment_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.aibox_alignment_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.aibox_alignment_system = defalut;
      print(sys.type.aibox_alignment_system);
      expect(sys.type.aibox_alignment_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.aibox_alignment_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00297_element_check_00274 **********\n\n");
    });

    test('00298_element_check_00275', () async {
      print("\n********** テスト実行：00298_element_check_00275 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.cashonly_keyopt_system;
      print(sys.type.cashonly_keyopt_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.cashonly_keyopt_system = testData1s;
      print(sys.type.cashonly_keyopt_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.cashonly_keyopt_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.cashonly_keyopt_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.cashonly_keyopt_system = testData2s;
      print(sys.type.cashonly_keyopt_system);
      expect(sys.type.cashonly_keyopt_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cashonly_keyopt_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.cashonly_keyopt_system = defalut;
      print(sys.type.cashonly_keyopt_system);
      expect(sys.type.cashonly_keyopt_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.cashonly_keyopt_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00298_element_check_00275 **********\n\n");
    });

    test('00299_element_check_00276', () async {
      print("\n********** テスト実行：00299_element_check_00276 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.sm74_ozeki_system;
      print(sys.type.sm74_ozeki_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.sm74_ozeki_system = testData1s;
      print(sys.type.sm74_ozeki_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.sm74_ozeki_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.sm74_ozeki_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.sm74_ozeki_system = testData2s;
      print(sys.type.sm74_ozeki_system);
      expect(sys.type.sm74_ozeki_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm74_ozeki_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.sm74_ozeki_system = defalut;
      print(sys.type.sm74_ozeki_system);
      expect(sys.type.sm74_ozeki_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.sm74_ozeki_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00299_element_check_00276 **********\n\n");
    });

    test('00300_element_check_00277', () async {
      print("\n********** テスト実行：00300_element_check_00277 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.carparking_qr_system;
      print(sys.type.carparking_qr_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.carparking_qr_system = testData1s;
      print(sys.type.carparking_qr_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.carparking_qr_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.carparking_qr_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.carparking_qr_system = testData2s;
      print(sys.type.carparking_qr_system);
      expect(sys.type.carparking_qr_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.carparking_qr_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.carparking_qr_system = defalut;
      print(sys.type.carparking_qr_system);
      expect(sys.type.carparking_qr_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.carparking_qr_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00300_element_check_00277 **********\n\n");
    });

    test('00301_element_check_00278', () async {
      print("\n********** テスト実行：00301_element_check_00278 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.olc_system;
      print(sys.type.olc_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.olc_system = testData1s;
      print(sys.type.olc_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.olc_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.olc_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.olc_system = testData2s;
      print(sys.type.olc_system);
      expect(sys.type.olc_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.olc_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.olc_system = defalut;
      print(sys.type.olc_system);
      expect(sys.type.olc_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.olc_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00301_element_check_00278 **********\n\n");
    });

    test('00302_element_check_00279', () async {
      print("\n********** テスト実行：00302_element_check_00279 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.quiz_payment_system;
      print(sys.type.quiz_payment_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.quiz_payment_system = testData1s;
      print(sys.type.quiz_payment_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.quiz_payment_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.quiz_payment_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.quiz_payment_system = testData2s;
      print(sys.type.quiz_payment_system);
      expect(sys.type.quiz_payment_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quiz_payment_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.quiz_payment_system = defalut;
      print(sys.type.quiz_payment_system);
      expect(sys.type.quiz_payment_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.quiz_payment_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00302_element_check_00279 **********\n\n");
    });

    test('00303_element_check_00280', () async {
      print("\n********** テスト実行：00303_element_check_00280 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.jets_lane_system;
      print(sys.type.jets_lane_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.jets_lane_system = testData1s;
      print(sys.type.jets_lane_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.jets_lane_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.jets_lane_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.jets_lane_system = testData2s;
      print(sys.type.jets_lane_system);
      expect(sys.type.jets_lane_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jets_lane_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.jets_lane_system = defalut;
      print(sys.type.jets_lane_system);
      expect(sys.type.jets_lane_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.jets_lane_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00303_element_check_00280 **********\n\n");
    });

    test('00304_element_check_00281', () async {
      print("\n********** テスト実行：00304_element_check_00281 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.type.rf1_hs_system;
      print(sys.type.rf1_hs_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.type.rf1_hs_system = testData1s;
      print(sys.type.rf1_hs_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.type.rf1_hs_system == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.type.rf1_hs_system == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.type.rf1_hs_system = testData2s;
      print(sys.type.rf1_hs_system);
      expect(sys.type.rf1_hs_system == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.type.rf1_hs_system == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.type.rf1_hs_system = defalut;
      print(sys.type.rf1_hs_system);
      expect(sys.type.rf1_hs_system == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.type.rf1_hs_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00304_element_check_00281 **********\n\n");
    });

    test('00305_element_check_00282', () async {
      print("\n********** テスト実行：00305_element_check_00282 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.dip_sw.subcpu1;
      print(sys.dip_sw.subcpu1);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.dip_sw.subcpu1 = testData1s;
      print(sys.dip_sw.subcpu1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.dip_sw.subcpu1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.dip_sw.subcpu1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.dip_sw.subcpu1 = testData2s;
      print(sys.dip_sw.subcpu1);
      expect(sys.dip_sw.subcpu1 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.dip_sw.subcpu1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.dip_sw.subcpu1 = defalut;
      print(sys.dip_sw.subcpu1);
      expect(sys.dip_sw.subcpu1 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.dip_sw.subcpu1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00305_element_check_00282 **********\n\n");
    });

    test('00306_element_check_00283', () async {
      print("\n********** テスト実行：00306_element_check_00283 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.dip_sw.subcpu2;
      print(sys.dip_sw.subcpu2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.dip_sw.subcpu2 = testData1s;
      print(sys.dip_sw.subcpu2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.dip_sw.subcpu2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.dip_sw.subcpu2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.dip_sw.subcpu2 = testData2s;
      print(sys.dip_sw.subcpu2);
      expect(sys.dip_sw.subcpu2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.dip_sw.subcpu2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.dip_sw.subcpu2 = defalut;
      print(sys.dip_sw.subcpu2);
      expect(sys.dip_sw.subcpu2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.dip_sw.subcpu2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00306_element_check_00283 **********\n\n");
    });

    test('00307_element_check_00284', () async {
      print("\n********** テスト実行：00307_element_check_00284 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers01;
      print(sys.boot_webplus2_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers01 = testData1s;
      print(sys.boot_webplus2_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers01 = testData2s;
      print(sys.boot_webplus2_desktop.drivers01);
      expect(sys.boot_webplus2_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers01 = defalut;
      print(sys.boot_webplus2_desktop.drivers01);
      expect(sys.boot_webplus2_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00307_element_check_00284 **********\n\n");
    });

    test('00308_element_check_00285', () async {
      print("\n********** テスト実行：00308_element_check_00285 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers02;
      print(sys.boot_webplus2_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers02 = testData1s;
      print(sys.boot_webplus2_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers02 = testData2s;
      print(sys.boot_webplus2_desktop.drivers02);
      expect(sys.boot_webplus2_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers02 = defalut;
      print(sys.boot_webplus2_desktop.drivers02);
      expect(sys.boot_webplus2_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00308_element_check_00285 **********\n\n");
    });

    test('00309_element_check_00286', () async {
      print("\n********** テスト実行：00309_element_check_00286 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers03;
      print(sys.boot_webplus2_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers03 = testData1s;
      print(sys.boot_webplus2_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers03 = testData2s;
      print(sys.boot_webplus2_desktop.drivers03);
      expect(sys.boot_webplus2_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers03 = defalut;
      print(sys.boot_webplus2_desktop.drivers03);
      expect(sys.boot_webplus2_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00309_element_check_00286 **********\n\n");
    });

    test('00310_element_check_00287', () async {
      print("\n********** テスト実行：00310_element_check_00287 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers04;
      print(sys.boot_webplus2_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers04 = testData1s;
      print(sys.boot_webplus2_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers04 = testData2s;
      print(sys.boot_webplus2_desktop.drivers04);
      expect(sys.boot_webplus2_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers04 = defalut;
      print(sys.boot_webplus2_desktop.drivers04);
      expect(sys.boot_webplus2_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00310_element_check_00287 **********\n\n");
    });

    test('00311_element_check_00288', () async {
      print("\n********** テスト実行：00311_element_check_00288 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers05;
      print(sys.boot_webplus2_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers05 = testData1s;
      print(sys.boot_webplus2_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers05 = testData2s;
      print(sys.boot_webplus2_desktop.drivers05);
      expect(sys.boot_webplus2_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers05 = defalut;
      print(sys.boot_webplus2_desktop.drivers05);
      expect(sys.boot_webplus2_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00311_element_check_00288 **********\n\n");
    });

    test('00312_element_check_00289', () async {
      print("\n********** テスト実行：00312_element_check_00289 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers06;
      print(sys.boot_webplus2_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers06 = testData1s;
      print(sys.boot_webplus2_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers06 = testData2s;
      print(sys.boot_webplus2_desktop.drivers06);
      expect(sys.boot_webplus2_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers06 = defalut;
      print(sys.boot_webplus2_desktop.drivers06);
      expect(sys.boot_webplus2_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00312_element_check_00289 **********\n\n");
    });

    test('00313_element_check_00290', () async {
      print("\n********** テスト実行：00313_element_check_00290 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers07;
      print(sys.boot_webplus2_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers07 = testData1s;
      print(sys.boot_webplus2_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers07 = testData2s;
      print(sys.boot_webplus2_desktop.drivers07);
      expect(sys.boot_webplus2_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers07 = defalut;
      print(sys.boot_webplus2_desktop.drivers07);
      expect(sys.boot_webplus2_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00313_element_check_00290 **********\n\n");
    });

    test('00314_element_check_00291', () async {
      print("\n********** テスト実行：00314_element_check_00291 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers08;
      print(sys.boot_webplus2_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers08 = testData1s;
      print(sys.boot_webplus2_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers08 = testData2s;
      print(sys.boot_webplus2_desktop.drivers08);
      expect(sys.boot_webplus2_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers08 = defalut;
      print(sys.boot_webplus2_desktop.drivers08);
      expect(sys.boot_webplus2_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00314_element_check_00291 **********\n\n");
    });

    test('00315_element_check_00292', () async {
      print("\n********** テスト実行：00315_element_check_00292 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers09;
      print(sys.boot_webplus2_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers09 = testData1s;
      print(sys.boot_webplus2_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers09 = testData2s;
      print(sys.boot_webplus2_desktop.drivers09);
      expect(sys.boot_webplus2_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers09 = defalut;
      print(sys.boot_webplus2_desktop.drivers09);
      expect(sys.boot_webplus2_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00315_element_check_00292 **********\n\n");
    });

    test('00316_element_check_00293', () async {
      print("\n********** テスト実行：00316_element_check_00293 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers10;
      print(sys.boot_webplus2_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers10 = testData1s;
      print(sys.boot_webplus2_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers10 = testData2s;
      print(sys.boot_webplus2_desktop.drivers10);
      expect(sys.boot_webplus2_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers10 = defalut;
      print(sys.boot_webplus2_desktop.drivers10);
      expect(sys.boot_webplus2_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00316_element_check_00293 **********\n\n");
    });

    test('00317_element_check_00294', () async {
      print("\n********** テスト実行：00317_element_check_00294 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers11;
      print(sys.boot_webplus2_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers11 = testData1s;
      print(sys.boot_webplus2_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers11 = testData2s;
      print(sys.boot_webplus2_desktop.drivers11);
      expect(sys.boot_webplus2_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers11 = defalut;
      print(sys.boot_webplus2_desktop.drivers11);
      expect(sys.boot_webplus2_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00317_element_check_00294 **********\n\n");
    });

    test('00318_element_check_00295', () async {
      print("\n********** テスト実行：00318_element_check_00295 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers12;
      print(sys.boot_webplus2_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers12 = testData1s;
      print(sys.boot_webplus2_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers12 = testData2s;
      print(sys.boot_webplus2_desktop.drivers12);
      expect(sys.boot_webplus2_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers12 = defalut;
      print(sys.boot_webplus2_desktop.drivers12);
      expect(sys.boot_webplus2_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00318_element_check_00295 **********\n\n");
    });

    test('00319_element_check_00296', () async {
      print("\n********** テスト実行：00319_element_check_00296 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers13;
      print(sys.boot_webplus2_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers13 = testData1s;
      print(sys.boot_webplus2_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers13 = testData2s;
      print(sys.boot_webplus2_desktop.drivers13);
      expect(sys.boot_webplus2_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers13 = defalut;
      print(sys.boot_webplus2_desktop.drivers13);
      expect(sys.boot_webplus2_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00319_element_check_00296 **********\n\n");
    });

    test('00320_element_check_00297', () async {
      print("\n********** テスト実行：00320_element_check_00297 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers14;
      print(sys.boot_webplus2_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers14 = testData1s;
      print(sys.boot_webplus2_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers14 = testData2s;
      print(sys.boot_webplus2_desktop.drivers14);
      expect(sys.boot_webplus2_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers14 = defalut;
      print(sys.boot_webplus2_desktop.drivers14);
      expect(sys.boot_webplus2_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00320_element_check_00297 **********\n\n");
    });

    test('00321_element_check_00298', () async {
      print("\n********** テスト実行：00321_element_check_00298 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers15;
      print(sys.boot_webplus2_desktop.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers15 = testData1s;
      print(sys.boot_webplus2_desktop.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers15 = testData2s;
      print(sys.boot_webplus2_desktop.drivers15);
      expect(sys.boot_webplus2_desktop.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers15 = defalut;
      print(sys.boot_webplus2_desktop.drivers15);
      expect(sys.boot_webplus2_desktop.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00321_element_check_00298 **********\n\n");
    });

    test('00322_element_check_00299', () async {
      print("\n********** テスト実行：00322_element_check_00299 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers16;
      print(sys.boot_webplus2_desktop.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers16 = testData1s;
      print(sys.boot_webplus2_desktop.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers16 = testData2s;
      print(sys.boot_webplus2_desktop.drivers16);
      expect(sys.boot_webplus2_desktop.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers16 = defalut;
      print(sys.boot_webplus2_desktop.drivers16);
      expect(sys.boot_webplus2_desktop.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00322_element_check_00299 **********\n\n");
    });

    test('00323_element_check_00300', () async {
      print("\n********** テスト実行：00323_element_check_00300 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers17;
      print(sys.boot_webplus2_desktop.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers17 = testData1s;
      print(sys.boot_webplus2_desktop.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers17 = testData2s;
      print(sys.boot_webplus2_desktop.drivers17);
      expect(sys.boot_webplus2_desktop.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers17 = defalut;
      print(sys.boot_webplus2_desktop.drivers17);
      expect(sys.boot_webplus2_desktop.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00323_element_check_00300 **********\n\n");
    });

    test('00324_element_check_00301', () async {
      print("\n********** テスト実行：00324_element_check_00301 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers18;
      print(sys.boot_webplus2_desktop.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers18 = testData1s;
      print(sys.boot_webplus2_desktop.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers18 = testData2s;
      print(sys.boot_webplus2_desktop.drivers18);
      expect(sys.boot_webplus2_desktop.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers18 = defalut;
      print(sys.boot_webplus2_desktop.drivers18);
      expect(sys.boot_webplus2_desktop.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00324_element_check_00301 **********\n\n");
    });

    test('00325_element_check_00302', () async {
      print("\n********** テスト実行：00325_element_check_00302 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers36;
      print(sys.boot_webplus2_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers36 = testData1s;
      print(sys.boot_webplus2_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers36 = testData2s;
      print(sys.boot_webplus2_desktop.drivers36);
      expect(sys.boot_webplus2_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers36 = defalut;
      print(sys.boot_webplus2_desktop.drivers36);
      expect(sys.boot_webplus2_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00325_element_check_00302 **********\n\n");
    });

    test('00326_element_check_00303', () async {
      print("\n********** テスト実行：00326_element_check_00303 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers37;
      print(sys.boot_webplus2_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers37 = testData1s;
      print(sys.boot_webplus2_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers37 = testData2s;
      print(sys.boot_webplus2_desktop.drivers37);
      expect(sys.boot_webplus2_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers37 = defalut;
      print(sys.boot_webplus2_desktop.drivers37);
      expect(sys.boot_webplus2_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00326_element_check_00303 **********\n\n");
    });

    test('00327_element_check_00304', () async {
      print("\n********** テスト実行：00327_element_check_00304 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers38;
      print(sys.boot_webplus2_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers38 = testData1s;
      print(sys.boot_webplus2_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers38 = testData2s;
      print(sys.boot_webplus2_desktop.drivers38);
      expect(sys.boot_webplus2_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers38 = defalut;
      print(sys.boot_webplus2_desktop.drivers38);
      expect(sys.boot_webplus2_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00327_element_check_00304 **********\n\n");
    });

    test('00328_element_check_00305', () async {
      print("\n********** テスト実行：00328_element_check_00305 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus2_desktop.drivers39;
      print(sys.boot_webplus2_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus2_desktop.drivers39 = testData1s;
      print(sys.boot_webplus2_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus2_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus2_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus2_desktop.drivers39 = testData2s;
      print(sys.boot_webplus2_desktop.drivers39);
      expect(sys.boot_webplus2_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus2_desktop.drivers39 = defalut;
      print(sys.boot_webplus2_desktop.drivers39);
      expect(sys.boot_webplus2_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus2_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00328_element_check_00305 **********\n\n");
    });

    test('00329_element_check_00306', () async {
      print("\n********** テスト実行：00329_element_check_00306 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers01;
      print(sys.boot_web2350_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers01 = testData1s;
      print(sys.boot_web2350_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers01 = testData2s;
      print(sys.boot_web2350_tower.drivers01);
      expect(sys.boot_web2350_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers01 = defalut;
      print(sys.boot_web2350_tower.drivers01);
      expect(sys.boot_web2350_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00329_element_check_00306 **********\n\n");
    });

    test('00330_element_check_00307', () async {
      print("\n********** テスト実行：00330_element_check_00307 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers02;
      print(sys.boot_web2350_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers02 = testData1s;
      print(sys.boot_web2350_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers02 = testData2s;
      print(sys.boot_web2350_tower.drivers02);
      expect(sys.boot_web2350_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers02 = defalut;
      print(sys.boot_web2350_tower.drivers02);
      expect(sys.boot_web2350_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00330_element_check_00307 **********\n\n");
    });

    test('00331_element_check_00308', () async {
      print("\n********** テスト実行：00331_element_check_00308 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers03;
      print(sys.boot_web2350_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers03 = testData1s;
      print(sys.boot_web2350_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers03 = testData2s;
      print(sys.boot_web2350_tower.drivers03);
      expect(sys.boot_web2350_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers03 = defalut;
      print(sys.boot_web2350_tower.drivers03);
      expect(sys.boot_web2350_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00331_element_check_00308 **********\n\n");
    });

    test('00332_element_check_00309', () async {
      print("\n********** テスト実行：00332_element_check_00309 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers04;
      print(sys.boot_web2350_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers04 = testData1s;
      print(sys.boot_web2350_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers04 = testData2s;
      print(sys.boot_web2350_tower.drivers04);
      expect(sys.boot_web2350_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers04 = defalut;
      print(sys.boot_web2350_tower.drivers04);
      expect(sys.boot_web2350_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00332_element_check_00309 **********\n\n");
    });

    test('00333_element_check_00310', () async {
      print("\n********** テスト実行：00333_element_check_00310 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers05;
      print(sys.boot_web2350_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers05 = testData1s;
      print(sys.boot_web2350_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers05 = testData2s;
      print(sys.boot_web2350_tower.drivers05);
      expect(sys.boot_web2350_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers05 = defalut;
      print(sys.boot_web2350_tower.drivers05);
      expect(sys.boot_web2350_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00333_element_check_00310 **********\n\n");
    });

    test('00334_element_check_00311', () async {
      print("\n********** テスト実行：00334_element_check_00311 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers06;
      print(sys.boot_web2350_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers06 = testData1s;
      print(sys.boot_web2350_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers06 = testData2s;
      print(sys.boot_web2350_tower.drivers06);
      expect(sys.boot_web2350_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers06 = defalut;
      print(sys.boot_web2350_tower.drivers06);
      expect(sys.boot_web2350_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00334_element_check_00311 **********\n\n");
    });

    test('00335_element_check_00312', () async {
      print("\n********** テスト実行：00335_element_check_00312 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers07;
      print(sys.boot_web2350_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers07 = testData1s;
      print(sys.boot_web2350_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers07 = testData2s;
      print(sys.boot_web2350_tower.drivers07);
      expect(sys.boot_web2350_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers07 = defalut;
      print(sys.boot_web2350_tower.drivers07);
      expect(sys.boot_web2350_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00335_element_check_00312 **********\n\n");
    });

    test('00336_element_check_00313', () async {
      print("\n********** テスト実行：00336_element_check_00313 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers08;
      print(sys.boot_web2350_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers08 = testData1s;
      print(sys.boot_web2350_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers08 = testData2s;
      print(sys.boot_web2350_tower.drivers08);
      expect(sys.boot_web2350_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers08 = defalut;
      print(sys.boot_web2350_tower.drivers08);
      expect(sys.boot_web2350_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00336_element_check_00313 **********\n\n");
    });

    test('00337_element_check_00314', () async {
      print("\n********** テスト実行：00337_element_check_00314 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers09;
      print(sys.boot_web2350_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers09 = testData1s;
      print(sys.boot_web2350_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers09 = testData2s;
      print(sys.boot_web2350_tower.drivers09);
      expect(sys.boot_web2350_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers09 = defalut;
      print(sys.boot_web2350_tower.drivers09);
      expect(sys.boot_web2350_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00337_element_check_00314 **********\n\n");
    });

    test('00338_element_check_00315', () async {
      print("\n********** テスト実行：00338_element_check_00315 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers10;
      print(sys.boot_web2350_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers10 = testData1s;
      print(sys.boot_web2350_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers10 = testData2s;
      print(sys.boot_web2350_tower.drivers10);
      expect(sys.boot_web2350_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers10 = defalut;
      print(sys.boot_web2350_tower.drivers10);
      expect(sys.boot_web2350_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00338_element_check_00315 **********\n\n");
    });

    test('00339_element_check_00316', () async {
      print("\n********** テスト実行：00339_element_check_00316 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers11;
      print(sys.boot_web2350_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers11 = testData1s;
      print(sys.boot_web2350_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers11 = testData2s;
      print(sys.boot_web2350_tower.drivers11);
      expect(sys.boot_web2350_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers11 = defalut;
      print(sys.boot_web2350_tower.drivers11);
      expect(sys.boot_web2350_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00339_element_check_00316 **********\n\n");
    });

    test('00340_element_check_00317', () async {
      print("\n********** テスト実行：00340_element_check_00317 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers12;
      print(sys.boot_web2350_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers12 = testData1s;
      print(sys.boot_web2350_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers12 = testData2s;
      print(sys.boot_web2350_tower.drivers12);
      expect(sys.boot_web2350_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers12 = defalut;
      print(sys.boot_web2350_tower.drivers12);
      expect(sys.boot_web2350_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00340_element_check_00317 **********\n\n");
    });

    test('00341_element_check_00318', () async {
      print("\n********** テスト実行：00341_element_check_00318 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers13;
      print(sys.boot_web2350_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers13 = testData1s;
      print(sys.boot_web2350_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers13 = testData2s;
      print(sys.boot_web2350_tower.drivers13);
      expect(sys.boot_web2350_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers13 = defalut;
      print(sys.boot_web2350_tower.drivers13);
      expect(sys.boot_web2350_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00341_element_check_00318 **********\n\n");
    });

    test('00342_element_check_00319', () async {
      print("\n********** テスト実行：00342_element_check_00319 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers14;
      print(sys.boot_web2350_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers14 = testData1s;
      print(sys.boot_web2350_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers14 = testData2s;
      print(sys.boot_web2350_tower.drivers14);
      expect(sys.boot_web2350_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers14 = defalut;
      print(sys.boot_web2350_tower.drivers14);
      expect(sys.boot_web2350_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00342_element_check_00319 **********\n\n");
    });

    test('00343_element_check_00320', () async {
      print("\n********** テスト実行：00343_element_check_00320 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers15;
      print(sys.boot_web2350_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers15 = testData1s;
      print(sys.boot_web2350_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers15 = testData2s;
      print(sys.boot_web2350_tower.drivers15);
      expect(sys.boot_web2350_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers15 = defalut;
      print(sys.boot_web2350_tower.drivers15);
      expect(sys.boot_web2350_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00343_element_check_00320 **********\n\n");
    });

    test('00344_element_check_00321', () async {
      print("\n********** テスト実行：00344_element_check_00321 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers16;
      print(sys.boot_web2350_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers16 = testData1s;
      print(sys.boot_web2350_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers16 = testData2s;
      print(sys.boot_web2350_tower.drivers16);
      expect(sys.boot_web2350_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers16 = defalut;
      print(sys.boot_web2350_tower.drivers16);
      expect(sys.boot_web2350_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00344_element_check_00321 **********\n\n");
    });

    test('00345_element_check_00322', () async {
      print("\n********** テスト実行：00345_element_check_00322 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers17;
      print(sys.boot_web2350_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers17 = testData1s;
      print(sys.boot_web2350_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers17 = testData2s;
      print(sys.boot_web2350_tower.drivers17);
      expect(sys.boot_web2350_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers17 = defalut;
      print(sys.boot_web2350_tower.drivers17);
      expect(sys.boot_web2350_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00345_element_check_00322 **********\n\n");
    });

    test('00346_element_check_00323', () async {
      print("\n********** テスト実行：00346_element_check_00323 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers18;
      print(sys.boot_web2350_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers18 = testData1s;
      print(sys.boot_web2350_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers18 = testData2s;
      print(sys.boot_web2350_tower.drivers18);
      expect(sys.boot_web2350_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers18 = defalut;
      print(sys.boot_web2350_tower.drivers18);
      expect(sys.boot_web2350_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00346_element_check_00323 **********\n\n");
    });

    test('00347_element_check_00324', () async {
      print("\n********** テスト実行：00347_element_check_00324 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers19;
      print(sys.boot_web2350_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers19 = testData1s;
      print(sys.boot_web2350_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers19 = testData2s;
      print(sys.boot_web2350_tower.drivers19);
      expect(sys.boot_web2350_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers19 = defalut;
      print(sys.boot_web2350_tower.drivers19);
      expect(sys.boot_web2350_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00347_element_check_00324 **********\n\n");
    });

    test('00348_element_check_00325', () async {
      print("\n********** テスト実行：00348_element_check_00325 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers20;
      print(sys.boot_web2350_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers20 = testData1s;
      print(sys.boot_web2350_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers20 = testData2s;
      print(sys.boot_web2350_tower.drivers20);
      expect(sys.boot_web2350_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers20 = defalut;
      print(sys.boot_web2350_tower.drivers20);
      expect(sys.boot_web2350_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00348_element_check_00325 **********\n\n");
    });

    test('00349_element_check_00326', () async {
      print("\n********** テスト実行：00349_element_check_00326 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers21;
      print(sys.boot_web2350_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers21 = testData1s;
      print(sys.boot_web2350_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers21 = testData2s;
      print(sys.boot_web2350_tower.drivers21);
      expect(sys.boot_web2350_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers21 = defalut;
      print(sys.boot_web2350_tower.drivers21);
      expect(sys.boot_web2350_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00349_element_check_00326 **********\n\n");
    });

    test('00350_element_check_00327', () async {
      print("\n********** テスト実行：00350_element_check_00327 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers22;
      print(sys.boot_web2350_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers22 = testData1s;
      print(sys.boot_web2350_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers22 = testData2s;
      print(sys.boot_web2350_tower.drivers22);
      expect(sys.boot_web2350_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers22 = defalut;
      print(sys.boot_web2350_tower.drivers22);
      expect(sys.boot_web2350_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00350_element_check_00327 **********\n\n");
    });

    test('00351_element_check_00328', () async {
      print("\n********** テスト実行：00351_element_check_00328 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers23;
      print(sys.boot_web2350_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers23 = testData1s;
      print(sys.boot_web2350_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers23 = testData2s;
      print(sys.boot_web2350_tower.drivers23);
      expect(sys.boot_web2350_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers23 = defalut;
      print(sys.boot_web2350_tower.drivers23);
      expect(sys.boot_web2350_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00351_element_check_00328 **********\n\n");
    });

    test('00352_element_check_00329', () async {
      print("\n********** テスト実行：00352_element_check_00329 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers24;
      print(sys.boot_web2350_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers24 = testData1s;
      print(sys.boot_web2350_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers24 = testData2s;
      print(sys.boot_web2350_tower.drivers24);
      expect(sys.boot_web2350_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers24 = defalut;
      print(sys.boot_web2350_tower.drivers24);
      expect(sys.boot_web2350_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00352_element_check_00329 **********\n\n");
    });

    test('00353_element_check_00330', () async {
      print("\n********** テスト実行：00353_element_check_00330 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers36;
      print(sys.boot_web2350_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers36 = testData1s;
      print(sys.boot_web2350_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers36 = testData2s;
      print(sys.boot_web2350_tower.drivers36);
      expect(sys.boot_web2350_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers36 = defalut;
      print(sys.boot_web2350_tower.drivers36);
      expect(sys.boot_web2350_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00353_element_check_00330 **********\n\n");
    });

    test('00354_element_check_00331', () async {
      print("\n********** テスト実行：00354_element_check_00331 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers37;
      print(sys.boot_web2350_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers37 = testData1s;
      print(sys.boot_web2350_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers37 = testData2s;
      print(sys.boot_web2350_tower.drivers37);
      expect(sys.boot_web2350_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers37 = defalut;
      print(sys.boot_web2350_tower.drivers37);
      expect(sys.boot_web2350_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00354_element_check_00331 **********\n\n");
    });

    test('00355_element_check_00332', () async {
      print("\n********** テスト実行：00355_element_check_00332 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers38;
      print(sys.boot_web2350_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers38 = testData1s;
      print(sys.boot_web2350_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers38 = testData2s;
      print(sys.boot_web2350_tower.drivers38);
      expect(sys.boot_web2350_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers38 = defalut;
      print(sys.boot_web2350_tower.drivers38);
      expect(sys.boot_web2350_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00355_element_check_00332 **********\n\n");
    });

    test('00356_element_check_00333', () async {
      print("\n********** テスト実行：00356_element_check_00333 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_tower.drivers39;
      print(sys.boot_web2350_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_tower.drivers39 = testData1s;
      print(sys.boot_web2350_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_tower.drivers39 = testData2s;
      print(sys.boot_web2350_tower.drivers39);
      expect(sys.boot_web2350_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_tower.drivers39 = defalut;
      print(sys.boot_web2350_tower.drivers39);
      expect(sys.boot_web2350_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00356_element_check_00333 **********\n\n");
    });

    test('00357_element_check_00334', () async {
      print("\n********** テスト実行：00357_element_check_00334 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers01;
      print(sys.boot_web2350_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers01 = testData1s;
      print(sys.boot_web2350_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers01 = testData2s;
      print(sys.boot_web2350_desktop.drivers01);
      expect(sys.boot_web2350_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers01 = defalut;
      print(sys.boot_web2350_desktop.drivers01);
      expect(sys.boot_web2350_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00357_element_check_00334 **********\n\n");
    });

    test('00358_element_check_00335', () async {
      print("\n********** テスト実行：00358_element_check_00335 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers02;
      print(sys.boot_web2350_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers02 = testData1s;
      print(sys.boot_web2350_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers02 = testData2s;
      print(sys.boot_web2350_desktop.drivers02);
      expect(sys.boot_web2350_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers02 = defalut;
      print(sys.boot_web2350_desktop.drivers02);
      expect(sys.boot_web2350_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00358_element_check_00335 **********\n\n");
    });

    test('00359_element_check_00336', () async {
      print("\n********** テスト実行：00359_element_check_00336 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers03;
      print(sys.boot_web2350_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers03 = testData1s;
      print(sys.boot_web2350_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers03 = testData2s;
      print(sys.boot_web2350_desktop.drivers03);
      expect(sys.boot_web2350_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers03 = defalut;
      print(sys.boot_web2350_desktop.drivers03);
      expect(sys.boot_web2350_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00359_element_check_00336 **********\n\n");
    });

    test('00360_element_check_00337', () async {
      print("\n********** テスト実行：00360_element_check_00337 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers04;
      print(sys.boot_web2350_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers04 = testData1s;
      print(sys.boot_web2350_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers04 = testData2s;
      print(sys.boot_web2350_desktop.drivers04);
      expect(sys.boot_web2350_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers04 = defalut;
      print(sys.boot_web2350_desktop.drivers04);
      expect(sys.boot_web2350_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00360_element_check_00337 **********\n\n");
    });

    test('00361_element_check_00338', () async {
      print("\n********** テスト実行：00361_element_check_00338 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers05;
      print(sys.boot_web2350_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers05 = testData1s;
      print(sys.boot_web2350_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers05 = testData2s;
      print(sys.boot_web2350_desktop.drivers05);
      expect(sys.boot_web2350_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers05 = defalut;
      print(sys.boot_web2350_desktop.drivers05);
      expect(sys.boot_web2350_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00361_element_check_00338 **********\n\n");
    });

    test('00362_element_check_00339', () async {
      print("\n********** テスト実行：00362_element_check_00339 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers06;
      print(sys.boot_web2350_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers06 = testData1s;
      print(sys.boot_web2350_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers06 = testData2s;
      print(sys.boot_web2350_desktop.drivers06);
      expect(sys.boot_web2350_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers06 = defalut;
      print(sys.boot_web2350_desktop.drivers06);
      expect(sys.boot_web2350_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00362_element_check_00339 **********\n\n");
    });

    test('00363_element_check_00340', () async {
      print("\n********** テスト実行：00363_element_check_00340 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers07;
      print(sys.boot_web2350_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers07 = testData1s;
      print(sys.boot_web2350_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers07 = testData2s;
      print(sys.boot_web2350_desktop.drivers07);
      expect(sys.boot_web2350_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers07 = defalut;
      print(sys.boot_web2350_desktop.drivers07);
      expect(sys.boot_web2350_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00363_element_check_00340 **********\n\n");
    });

    test('00364_element_check_00341', () async {
      print("\n********** テスト実行：00364_element_check_00341 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers08;
      print(sys.boot_web2350_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers08 = testData1s;
      print(sys.boot_web2350_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers08 = testData2s;
      print(sys.boot_web2350_desktop.drivers08);
      expect(sys.boot_web2350_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers08 = defalut;
      print(sys.boot_web2350_desktop.drivers08);
      expect(sys.boot_web2350_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00364_element_check_00341 **********\n\n");
    });

    test('00365_element_check_00342', () async {
      print("\n********** テスト実行：00365_element_check_00342 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers09;
      print(sys.boot_web2350_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers09 = testData1s;
      print(sys.boot_web2350_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers09 = testData2s;
      print(sys.boot_web2350_desktop.drivers09);
      expect(sys.boot_web2350_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers09 = defalut;
      print(sys.boot_web2350_desktop.drivers09);
      expect(sys.boot_web2350_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00365_element_check_00342 **********\n\n");
    });

    test('00366_element_check_00343', () async {
      print("\n********** テスト実行：00366_element_check_00343 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers10;
      print(sys.boot_web2350_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers10 = testData1s;
      print(sys.boot_web2350_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers10 = testData2s;
      print(sys.boot_web2350_desktop.drivers10);
      expect(sys.boot_web2350_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers10 = defalut;
      print(sys.boot_web2350_desktop.drivers10);
      expect(sys.boot_web2350_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00366_element_check_00343 **********\n\n");
    });

    test('00367_element_check_00344', () async {
      print("\n********** テスト実行：00367_element_check_00344 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers11;
      print(sys.boot_web2350_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers11 = testData1s;
      print(sys.boot_web2350_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers11 = testData2s;
      print(sys.boot_web2350_desktop.drivers11);
      expect(sys.boot_web2350_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers11 = defalut;
      print(sys.boot_web2350_desktop.drivers11);
      expect(sys.boot_web2350_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00367_element_check_00344 **********\n\n");
    });

    test('00368_element_check_00345', () async {
      print("\n********** テスト実行：00368_element_check_00345 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers12;
      print(sys.boot_web2350_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers12 = testData1s;
      print(sys.boot_web2350_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers12 = testData2s;
      print(sys.boot_web2350_desktop.drivers12);
      expect(sys.boot_web2350_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers12 = defalut;
      print(sys.boot_web2350_desktop.drivers12);
      expect(sys.boot_web2350_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00368_element_check_00345 **********\n\n");
    });

    test('00369_element_check_00346', () async {
      print("\n********** テスト実行：00369_element_check_00346 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers13;
      print(sys.boot_web2350_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers13 = testData1s;
      print(sys.boot_web2350_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers13 = testData2s;
      print(sys.boot_web2350_desktop.drivers13);
      expect(sys.boot_web2350_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers13 = defalut;
      print(sys.boot_web2350_desktop.drivers13);
      expect(sys.boot_web2350_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00369_element_check_00346 **********\n\n");
    });

    test('00370_element_check_00347', () async {
      print("\n********** テスト実行：00370_element_check_00347 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers14;
      print(sys.boot_web2350_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers14 = testData1s;
      print(sys.boot_web2350_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers14 = testData2s;
      print(sys.boot_web2350_desktop.drivers14);
      expect(sys.boot_web2350_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers14 = defalut;
      print(sys.boot_web2350_desktop.drivers14);
      expect(sys.boot_web2350_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00370_element_check_00347 **********\n\n");
    });

    test('00371_element_check_00348', () async {
      print("\n********** テスト実行：00371_element_check_00348 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers36;
      print(sys.boot_web2350_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers36 = testData1s;
      print(sys.boot_web2350_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers36 = testData2s;
      print(sys.boot_web2350_desktop.drivers36);
      expect(sys.boot_web2350_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers36 = defalut;
      print(sys.boot_web2350_desktop.drivers36);
      expect(sys.boot_web2350_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00371_element_check_00348 **********\n\n");
    });

    test('00372_element_check_00349', () async {
      print("\n********** テスト実行：00372_element_check_00349 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers37;
      print(sys.boot_web2350_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers37 = testData1s;
      print(sys.boot_web2350_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers37 = testData2s;
      print(sys.boot_web2350_desktop.drivers37);
      expect(sys.boot_web2350_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers37 = defalut;
      print(sys.boot_web2350_desktop.drivers37);
      expect(sys.boot_web2350_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00372_element_check_00349 **********\n\n");
    });

    test('00373_element_check_00350', () async {
      print("\n********** テスト実行：00373_element_check_00350 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers38;
      print(sys.boot_web2350_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers38 = testData1s;
      print(sys.boot_web2350_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers38 = testData2s;
      print(sys.boot_web2350_desktop.drivers38);
      expect(sys.boot_web2350_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers38 = defalut;
      print(sys.boot_web2350_desktop.drivers38);
      expect(sys.boot_web2350_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00373_element_check_00350 **********\n\n");
    });

    test('00374_element_check_00351', () async {
      print("\n********** テスト実行：00374_element_check_00351 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2350_desktop.drivers39;
      print(sys.boot_web2350_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2350_desktop.drivers39 = testData1s;
      print(sys.boot_web2350_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2350_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2350_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2350_desktop.drivers39 = testData2s;
      print(sys.boot_web2350_desktop.drivers39);
      expect(sys.boot_web2350_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2350_desktop.drivers39 = defalut;
      print(sys.boot_web2350_desktop.drivers39);
      expect(sys.boot_web2350_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2350_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00374_element_check_00351 **********\n\n");
    });

    test('00375_element_check_00352', () async {
      print("\n********** テスト実行：00375_element_check_00352 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers01;
      print(sys.boot_web2500_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers01 = testData1s;
      print(sys.boot_web2500_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers01 = testData2s;
      print(sys.boot_web2500_tower.drivers01);
      expect(sys.boot_web2500_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers01 = defalut;
      print(sys.boot_web2500_tower.drivers01);
      expect(sys.boot_web2500_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00375_element_check_00352 **********\n\n");
    });

    test('00376_element_check_00353', () async {
      print("\n********** テスト実行：00376_element_check_00353 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers02;
      print(sys.boot_web2500_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers02 = testData1s;
      print(sys.boot_web2500_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers02 = testData2s;
      print(sys.boot_web2500_tower.drivers02);
      expect(sys.boot_web2500_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers02 = defalut;
      print(sys.boot_web2500_tower.drivers02);
      expect(sys.boot_web2500_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00376_element_check_00353 **********\n\n");
    });

    test('00377_element_check_00354', () async {
      print("\n********** テスト実行：00377_element_check_00354 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers03;
      print(sys.boot_web2500_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers03 = testData1s;
      print(sys.boot_web2500_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers03 = testData2s;
      print(sys.boot_web2500_tower.drivers03);
      expect(sys.boot_web2500_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers03 = defalut;
      print(sys.boot_web2500_tower.drivers03);
      expect(sys.boot_web2500_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00377_element_check_00354 **********\n\n");
    });

    test('00378_element_check_00355', () async {
      print("\n********** テスト実行：00378_element_check_00355 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers04;
      print(sys.boot_web2500_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers04 = testData1s;
      print(sys.boot_web2500_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers04 = testData2s;
      print(sys.boot_web2500_tower.drivers04);
      expect(sys.boot_web2500_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers04 = defalut;
      print(sys.boot_web2500_tower.drivers04);
      expect(sys.boot_web2500_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00378_element_check_00355 **********\n\n");
    });

    test('00379_element_check_00356', () async {
      print("\n********** テスト実行：00379_element_check_00356 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers05;
      print(sys.boot_web2500_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers05 = testData1s;
      print(sys.boot_web2500_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers05 = testData2s;
      print(sys.boot_web2500_tower.drivers05);
      expect(sys.boot_web2500_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers05 = defalut;
      print(sys.boot_web2500_tower.drivers05);
      expect(sys.boot_web2500_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00379_element_check_00356 **********\n\n");
    });

    test('00380_element_check_00357', () async {
      print("\n********** テスト実行：00380_element_check_00357 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers06;
      print(sys.boot_web2500_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers06 = testData1s;
      print(sys.boot_web2500_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers06 = testData2s;
      print(sys.boot_web2500_tower.drivers06);
      expect(sys.boot_web2500_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers06 = defalut;
      print(sys.boot_web2500_tower.drivers06);
      expect(sys.boot_web2500_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00380_element_check_00357 **********\n\n");
    });

    test('00381_element_check_00358', () async {
      print("\n********** テスト実行：00381_element_check_00358 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers07;
      print(sys.boot_web2500_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers07 = testData1s;
      print(sys.boot_web2500_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers07 = testData2s;
      print(sys.boot_web2500_tower.drivers07);
      expect(sys.boot_web2500_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers07 = defalut;
      print(sys.boot_web2500_tower.drivers07);
      expect(sys.boot_web2500_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00381_element_check_00358 **********\n\n");
    });

    test('00382_element_check_00359', () async {
      print("\n********** テスト実行：00382_element_check_00359 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers08;
      print(sys.boot_web2500_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers08 = testData1s;
      print(sys.boot_web2500_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers08 = testData2s;
      print(sys.boot_web2500_tower.drivers08);
      expect(sys.boot_web2500_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers08 = defalut;
      print(sys.boot_web2500_tower.drivers08);
      expect(sys.boot_web2500_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00382_element_check_00359 **********\n\n");
    });

    test('00383_element_check_00360', () async {
      print("\n********** テスト実行：00383_element_check_00360 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers09;
      print(sys.boot_web2500_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers09 = testData1s;
      print(sys.boot_web2500_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers09 = testData2s;
      print(sys.boot_web2500_tower.drivers09);
      expect(sys.boot_web2500_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers09 = defalut;
      print(sys.boot_web2500_tower.drivers09);
      expect(sys.boot_web2500_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00383_element_check_00360 **********\n\n");
    });

    test('00384_element_check_00361', () async {
      print("\n********** テスト実行：00384_element_check_00361 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers10;
      print(sys.boot_web2500_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers10 = testData1s;
      print(sys.boot_web2500_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers10 = testData2s;
      print(sys.boot_web2500_tower.drivers10);
      expect(sys.boot_web2500_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers10 = defalut;
      print(sys.boot_web2500_tower.drivers10);
      expect(sys.boot_web2500_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00384_element_check_00361 **********\n\n");
    });

    test('00385_element_check_00362', () async {
      print("\n********** テスト実行：00385_element_check_00362 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers11;
      print(sys.boot_web2500_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers11 = testData1s;
      print(sys.boot_web2500_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers11 = testData2s;
      print(sys.boot_web2500_tower.drivers11);
      expect(sys.boot_web2500_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers11 = defalut;
      print(sys.boot_web2500_tower.drivers11);
      expect(sys.boot_web2500_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00385_element_check_00362 **********\n\n");
    });

    test('00386_element_check_00363', () async {
      print("\n********** テスト実行：00386_element_check_00363 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers12;
      print(sys.boot_web2500_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers12 = testData1s;
      print(sys.boot_web2500_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers12 = testData2s;
      print(sys.boot_web2500_tower.drivers12);
      expect(sys.boot_web2500_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers12 = defalut;
      print(sys.boot_web2500_tower.drivers12);
      expect(sys.boot_web2500_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00386_element_check_00363 **********\n\n");
    });

    test('00387_element_check_00364', () async {
      print("\n********** テスト実行：00387_element_check_00364 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers13;
      print(sys.boot_web2500_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers13 = testData1s;
      print(sys.boot_web2500_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers13 = testData2s;
      print(sys.boot_web2500_tower.drivers13);
      expect(sys.boot_web2500_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers13 = defalut;
      print(sys.boot_web2500_tower.drivers13);
      expect(sys.boot_web2500_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00387_element_check_00364 **********\n\n");
    });

    test('00388_element_check_00365', () async {
      print("\n********** テスト実行：00388_element_check_00365 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers14;
      print(sys.boot_web2500_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers14 = testData1s;
      print(sys.boot_web2500_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers14 = testData2s;
      print(sys.boot_web2500_tower.drivers14);
      expect(sys.boot_web2500_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers14 = defalut;
      print(sys.boot_web2500_tower.drivers14);
      expect(sys.boot_web2500_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00388_element_check_00365 **********\n\n");
    });

    test('00389_element_check_00366', () async {
      print("\n********** テスト実行：00389_element_check_00366 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers15;
      print(sys.boot_web2500_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers15 = testData1s;
      print(sys.boot_web2500_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers15 = testData2s;
      print(sys.boot_web2500_tower.drivers15);
      expect(sys.boot_web2500_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers15 = defalut;
      print(sys.boot_web2500_tower.drivers15);
      expect(sys.boot_web2500_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00389_element_check_00366 **********\n\n");
    });

    test('00390_element_check_00367', () async {
      print("\n********** テスト実行：00390_element_check_00367 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers16;
      print(sys.boot_web2500_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers16 = testData1s;
      print(sys.boot_web2500_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers16 = testData2s;
      print(sys.boot_web2500_tower.drivers16);
      expect(sys.boot_web2500_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers16 = defalut;
      print(sys.boot_web2500_tower.drivers16);
      expect(sys.boot_web2500_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00390_element_check_00367 **********\n\n");
    });

    test('00391_element_check_00368', () async {
      print("\n********** テスト実行：00391_element_check_00368 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers17;
      print(sys.boot_web2500_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers17 = testData1s;
      print(sys.boot_web2500_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers17 = testData2s;
      print(sys.boot_web2500_tower.drivers17);
      expect(sys.boot_web2500_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers17 = defalut;
      print(sys.boot_web2500_tower.drivers17);
      expect(sys.boot_web2500_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00391_element_check_00368 **********\n\n");
    });

    test('00392_element_check_00369', () async {
      print("\n********** テスト実行：00392_element_check_00369 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers18;
      print(sys.boot_web2500_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers18 = testData1s;
      print(sys.boot_web2500_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers18 = testData2s;
      print(sys.boot_web2500_tower.drivers18);
      expect(sys.boot_web2500_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers18 = defalut;
      print(sys.boot_web2500_tower.drivers18);
      expect(sys.boot_web2500_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00392_element_check_00369 **********\n\n");
    });

    test('00393_element_check_00370', () async {
      print("\n********** テスト実行：00393_element_check_00370 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers19;
      print(sys.boot_web2500_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers19 = testData1s;
      print(sys.boot_web2500_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers19 = testData2s;
      print(sys.boot_web2500_tower.drivers19);
      expect(sys.boot_web2500_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers19 = defalut;
      print(sys.boot_web2500_tower.drivers19);
      expect(sys.boot_web2500_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00393_element_check_00370 **********\n\n");
    });

    test('00394_element_check_00371', () async {
      print("\n********** テスト実行：00394_element_check_00371 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers20;
      print(sys.boot_web2500_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers20 = testData1s;
      print(sys.boot_web2500_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers20 = testData2s;
      print(sys.boot_web2500_tower.drivers20);
      expect(sys.boot_web2500_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers20 = defalut;
      print(sys.boot_web2500_tower.drivers20);
      expect(sys.boot_web2500_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00394_element_check_00371 **********\n\n");
    });

    test('00395_element_check_00372', () async {
      print("\n********** テスト実行：00395_element_check_00372 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers21;
      print(sys.boot_web2500_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers21 = testData1s;
      print(sys.boot_web2500_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers21 = testData2s;
      print(sys.boot_web2500_tower.drivers21);
      expect(sys.boot_web2500_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers21 = defalut;
      print(sys.boot_web2500_tower.drivers21);
      expect(sys.boot_web2500_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00395_element_check_00372 **********\n\n");
    });

    test('00396_element_check_00373', () async {
      print("\n********** テスト実行：00396_element_check_00373 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers22;
      print(sys.boot_web2500_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers22 = testData1s;
      print(sys.boot_web2500_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers22 = testData2s;
      print(sys.boot_web2500_tower.drivers22);
      expect(sys.boot_web2500_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers22 = defalut;
      print(sys.boot_web2500_tower.drivers22);
      expect(sys.boot_web2500_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00396_element_check_00373 **********\n\n");
    });

    test('00397_element_check_00374', () async {
      print("\n********** テスト実行：00397_element_check_00374 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers23;
      print(sys.boot_web2500_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers23 = testData1s;
      print(sys.boot_web2500_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers23 = testData2s;
      print(sys.boot_web2500_tower.drivers23);
      expect(sys.boot_web2500_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers23 = defalut;
      print(sys.boot_web2500_tower.drivers23);
      expect(sys.boot_web2500_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00397_element_check_00374 **********\n\n");
    });

    test('00398_element_check_00375', () async {
      print("\n********** テスト実行：00398_element_check_00375 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers24;
      print(sys.boot_web2500_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers24 = testData1s;
      print(sys.boot_web2500_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers24 = testData2s;
      print(sys.boot_web2500_tower.drivers24);
      expect(sys.boot_web2500_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers24 = defalut;
      print(sys.boot_web2500_tower.drivers24);
      expect(sys.boot_web2500_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00398_element_check_00375 **********\n\n");
    });

    test('00399_element_check_00376', () async {
      print("\n********** テスト実行：00399_element_check_00376 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers25;
      print(sys.boot_web2500_tower.drivers25);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers25 = testData1s;
      print(sys.boot_web2500_tower.drivers25);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers25 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers25 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers25 = testData2s;
      print(sys.boot_web2500_tower.drivers25);
      expect(sys.boot_web2500_tower.drivers25 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers25 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers25 = defalut;
      print(sys.boot_web2500_tower.drivers25);
      expect(sys.boot_web2500_tower.drivers25 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers25 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00399_element_check_00376 **********\n\n");
    });

    test('00400_element_check_00377', () async {
      print("\n********** テスト実行：00400_element_check_00377 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers26;
      print(sys.boot_web2500_tower.drivers26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers26 = testData1s;
      print(sys.boot_web2500_tower.drivers26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers26 = testData2s;
      print(sys.boot_web2500_tower.drivers26);
      expect(sys.boot_web2500_tower.drivers26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers26 = defalut;
      print(sys.boot_web2500_tower.drivers26);
      expect(sys.boot_web2500_tower.drivers26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00400_element_check_00377 **********\n\n");
    });

    test('00401_element_check_00378', () async {
      print("\n********** テスト実行：00401_element_check_00378 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers27;
      print(sys.boot_web2500_tower.drivers27);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers27 = testData1s;
      print(sys.boot_web2500_tower.drivers27);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers27 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers27 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers27 = testData2s;
      print(sys.boot_web2500_tower.drivers27);
      expect(sys.boot_web2500_tower.drivers27 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers27 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers27 = defalut;
      print(sys.boot_web2500_tower.drivers27);
      expect(sys.boot_web2500_tower.drivers27 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers27 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00401_element_check_00378 **********\n\n");
    });

    test('00402_element_check_00379', () async {
      print("\n********** テスト実行：00402_element_check_00379 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers28;
      print(sys.boot_web2500_tower.drivers28);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers28 = testData1s;
      print(sys.boot_web2500_tower.drivers28);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers28 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers28 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers28 = testData2s;
      print(sys.boot_web2500_tower.drivers28);
      expect(sys.boot_web2500_tower.drivers28 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers28 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers28 = defalut;
      print(sys.boot_web2500_tower.drivers28);
      expect(sys.boot_web2500_tower.drivers28 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers28 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00402_element_check_00379 **********\n\n");
    });

    test('00403_element_check_00380', () async {
      print("\n********** テスト実行：00403_element_check_00380 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers36;
      print(sys.boot_web2500_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers36 = testData1s;
      print(sys.boot_web2500_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers36 = testData2s;
      print(sys.boot_web2500_tower.drivers36);
      expect(sys.boot_web2500_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers36 = defalut;
      print(sys.boot_web2500_tower.drivers36);
      expect(sys.boot_web2500_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00403_element_check_00380 **********\n\n");
    });

    test('00404_element_check_00381', () async {
      print("\n********** テスト実行：00404_element_check_00381 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers37;
      print(sys.boot_web2500_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers37 = testData1s;
      print(sys.boot_web2500_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers37 = testData2s;
      print(sys.boot_web2500_tower.drivers37);
      expect(sys.boot_web2500_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers37 = defalut;
      print(sys.boot_web2500_tower.drivers37);
      expect(sys.boot_web2500_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00404_element_check_00381 **********\n\n");
    });

    test('00405_element_check_00382', () async {
      print("\n********** テスト実行：00405_element_check_00382 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers38;
      print(sys.boot_web2500_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers38 = testData1s;
      print(sys.boot_web2500_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers38 = testData2s;
      print(sys.boot_web2500_tower.drivers38);
      expect(sys.boot_web2500_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers38 = defalut;
      print(sys.boot_web2500_tower.drivers38);
      expect(sys.boot_web2500_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00405_element_check_00382 **********\n\n");
    });

    test('00406_element_check_00383', () async {
      print("\n********** テスト実行：00406_element_check_00383 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_tower.drivers39;
      print(sys.boot_web2500_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_tower.drivers39 = testData1s;
      print(sys.boot_web2500_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_tower.drivers39 = testData2s;
      print(sys.boot_web2500_tower.drivers39);
      expect(sys.boot_web2500_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_tower.drivers39 = defalut;
      print(sys.boot_web2500_tower.drivers39);
      expect(sys.boot_web2500_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00406_element_check_00383 **********\n\n");
    });

    test('00407_element_check_00384', () async {
      print("\n********** テスト実行：00407_element_check_00384 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers01;
      print(sys.boot_web2500_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers01 = testData1s;
      print(sys.boot_web2500_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers01 = testData2s;
      print(sys.boot_web2500_desktop.drivers01);
      expect(sys.boot_web2500_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers01 = defalut;
      print(sys.boot_web2500_desktop.drivers01);
      expect(sys.boot_web2500_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00407_element_check_00384 **********\n\n");
    });

    test('00408_element_check_00385', () async {
      print("\n********** テスト実行：00408_element_check_00385 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers02;
      print(sys.boot_web2500_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers02 = testData1s;
      print(sys.boot_web2500_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers02 = testData2s;
      print(sys.boot_web2500_desktop.drivers02);
      expect(sys.boot_web2500_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers02 = defalut;
      print(sys.boot_web2500_desktop.drivers02);
      expect(sys.boot_web2500_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00408_element_check_00385 **********\n\n");
    });

    test('00409_element_check_00386', () async {
      print("\n********** テスト実行：00409_element_check_00386 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers03;
      print(sys.boot_web2500_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers03 = testData1s;
      print(sys.boot_web2500_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers03 = testData2s;
      print(sys.boot_web2500_desktop.drivers03);
      expect(sys.boot_web2500_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers03 = defalut;
      print(sys.boot_web2500_desktop.drivers03);
      expect(sys.boot_web2500_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00409_element_check_00386 **********\n\n");
    });

    test('00410_element_check_00387', () async {
      print("\n********** テスト実行：00410_element_check_00387 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers04;
      print(sys.boot_web2500_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers04 = testData1s;
      print(sys.boot_web2500_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers04 = testData2s;
      print(sys.boot_web2500_desktop.drivers04);
      expect(sys.boot_web2500_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers04 = defalut;
      print(sys.boot_web2500_desktop.drivers04);
      expect(sys.boot_web2500_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00410_element_check_00387 **********\n\n");
    });

    test('00411_element_check_00388', () async {
      print("\n********** テスト実行：00411_element_check_00388 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers05;
      print(sys.boot_web2500_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers05 = testData1s;
      print(sys.boot_web2500_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers05 = testData2s;
      print(sys.boot_web2500_desktop.drivers05);
      expect(sys.boot_web2500_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers05 = defalut;
      print(sys.boot_web2500_desktop.drivers05);
      expect(sys.boot_web2500_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00411_element_check_00388 **********\n\n");
    });

    test('00412_element_check_00389', () async {
      print("\n********** テスト実行：00412_element_check_00389 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers06;
      print(sys.boot_web2500_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers06 = testData1s;
      print(sys.boot_web2500_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers06 = testData2s;
      print(sys.boot_web2500_desktop.drivers06);
      expect(sys.boot_web2500_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers06 = defalut;
      print(sys.boot_web2500_desktop.drivers06);
      expect(sys.boot_web2500_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00412_element_check_00389 **********\n\n");
    });

    test('00413_element_check_00390', () async {
      print("\n********** テスト実行：00413_element_check_00390 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers07;
      print(sys.boot_web2500_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers07 = testData1s;
      print(sys.boot_web2500_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers07 = testData2s;
      print(sys.boot_web2500_desktop.drivers07);
      expect(sys.boot_web2500_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers07 = defalut;
      print(sys.boot_web2500_desktop.drivers07);
      expect(sys.boot_web2500_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00413_element_check_00390 **********\n\n");
    });

    test('00414_element_check_00391', () async {
      print("\n********** テスト実行：00414_element_check_00391 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers08;
      print(sys.boot_web2500_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers08 = testData1s;
      print(sys.boot_web2500_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers08 = testData2s;
      print(sys.boot_web2500_desktop.drivers08);
      expect(sys.boot_web2500_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers08 = defalut;
      print(sys.boot_web2500_desktop.drivers08);
      expect(sys.boot_web2500_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00414_element_check_00391 **********\n\n");
    });

    test('00415_element_check_00392', () async {
      print("\n********** テスト実行：00415_element_check_00392 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers09;
      print(sys.boot_web2500_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers09 = testData1s;
      print(sys.boot_web2500_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers09 = testData2s;
      print(sys.boot_web2500_desktop.drivers09);
      expect(sys.boot_web2500_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers09 = defalut;
      print(sys.boot_web2500_desktop.drivers09);
      expect(sys.boot_web2500_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00415_element_check_00392 **********\n\n");
    });

    test('00416_element_check_00393', () async {
      print("\n********** テスト実行：00416_element_check_00393 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers10;
      print(sys.boot_web2500_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers10 = testData1s;
      print(sys.boot_web2500_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers10 = testData2s;
      print(sys.boot_web2500_desktop.drivers10);
      expect(sys.boot_web2500_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers10 = defalut;
      print(sys.boot_web2500_desktop.drivers10);
      expect(sys.boot_web2500_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00416_element_check_00393 **********\n\n");
    });

    test('00417_element_check_00394', () async {
      print("\n********** テスト実行：00417_element_check_00394 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers11;
      print(sys.boot_web2500_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers11 = testData1s;
      print(sys.boot_web2500_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers11 = testData2s;
      print(sys.boot_web2500_desktop.drivers11);
      expect(sys.boot_web2500_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers11 = defalut;
      print(sys.boot_web2500_desktop.drivers11);
      expect(sys.boot_web2500_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00417_element_check_00394 **********\n\n");
    });

    test('00418_element_check_00395', () async {
      print("\n********** テスト実行：00418_element_check_00395 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers12;
      print(sys.boot_web2500_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers12 = testData1s;
      print(sys.boot_web2500_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers12 = testData2s;
      print(sys.boot_web2500_desktop.drivers12);
      expect(sys.boot_web2500_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers12 = defalut;
      print(sys.boot_web2500_desktop.drivers12);
      expect(sys.boot_web2500_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00418_element_check_00395 **********\n\n");
    });

    test('00419_element_check_00396', () async {
      print("\n********** テスト実行：00419_element_check_00396 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers13;
      print(sys.boot_web2500_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers13 = testData1s;
      print(sys.boot_web2500_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers13 = testData2s;
      print(sys.boot_web2500_desktop.drivers13);
      expect(sys.boot_web2500_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers13 = defalut;
      print(sys.boot_web2500_desktop.drivers13);
      expect(sys.boot_web2500_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00419_element_check_00396 **********\n\n");
    });

    test('00420_element_check_00397', () async {
      print("\n********** テスト実行：00420_element_check_00397 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers14;
      print(sys.boot_web2500_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers14 = testData1s;
      print(sys.boot_web2500_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers14 = testData2s;
      print(sys.boot_web2500_desktop.drivers14);
      expect(sys.boot_web2500_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers14 = defalut;
      print(sys.boot_web2500_desktop.drivers14);
      expect(sys.boot_web2500_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00420_element_check_00397 **********\n\n");
    });

    test('00421_element_check_00398', () async {
      print("\n********** テスト実行：00421_element_check_00398 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers15;
      print(sys.boot_web2500_desktop.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers15 = testData1s;
      print(sys.boot_web2500_desktop.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers15 = testData2s;
      print(sys.boot_web2500_desktop.drivers15);
      expect(sys.boot_web2500_desktop.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers15 = defalut;
      print(sys.boot_web2500_desktop.drivers15);
      expect(sys.boot_web2500_desktop.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00421_element_check_00398 **********\n\n");
    });

    test('00422_element_check_00399', () async {
      print("\n********** テスト実行：00422_element_check_00399 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers16;
      print(sys.boot_web2500_desktop.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers16 = testData1s;
      print(sys.boot_web2500_desktop.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers16 = testData2s;
      print(sys.boot_web2500_desktop.drivers16);
      expect(sys.boot_web2500_desktop.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers16 = defalut;
      print(sys.boot_web2500_desktop.drivers16);
      expect(sys.boot_web2500_desktop.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00422_element_check_00399 **********\n\n");
    });

    test('00423_element_check_00400', () async {
      print("\n********** テスト実行：00423_element_check_00400 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers17;
      print(sys.boot_web2500_desktop.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers17 = testData1s;
      print(sys.boot_web2500_desktop.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers17 = testData2s;
      print(sys.boot_web2500_desktop.drivers17);
      expect(sys.boot_web2500_desktop.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers17 = defalut;
      print(sys.boot_web2500_desktop.drivers17);
      expect(sys.boot_web2500_desktop.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00423_element_check_00400 **********\n\n");
    });

    test('00424_element_check_00401', () async {
      print("\n********** テスト実行：00424_element_check_00401 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers18;
      print(sys.boot_web2500_desktop.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers18 = testData1s;
      print(sys.boot_web2500_desktop.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers18 = testData2s;
      print(sys.boot_web2500_desktop.drivers18);
      expect(sys.boot_web2500_desktop.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers18 = defalut;
      print(sys.boot_web2500_desktop.drivers18);
      expect(sys.boot_web2500_desktop.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00424_element_check_00401 **********\n\n");
    });

    test('00425_element_check_00402', () async {
      print("\n********** テスト実行：00425_element_check_00402 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers19;
      print(sys.boot_web2500_desktop.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers19 = testData1s;
      print(sys.boot_web2500_desktop.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers19 = testData2s;
      print(sys.boot_web2500_desktop.drivers19);
      expect(sys.boot_web2500_desktop.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers19 = defalut;
      print(sys.boot_web2500_desktop.drivers19);
      expect(sys.boot_web2500_desktop.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00425_element_check_00402 **********\n\n");
    });

    test('00426_element_check_00403', () async {
      print("\n********** テスト実行：00426_element_check_00403 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers20;
      print(sys.boot_web2500_desktop.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers20 = testData1s;
      print(sys.boot_web2500_desktop.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers20 = testData2s;
      print(sys.boot_web2500_desktop.drivers20);
      expect(sys.boot_web2500_desktop.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers20 = defalut;
      print(sys.boot_web2500_desktop.drivers20);
      expect(sys.boot_web2500_desktop.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00426_element_check_00403 **********\n\n");
    });

    test('00427_element_check_00404', () async {
      print("\n********** テスト実行：00427_element_check_00404 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers36;
      print(sys.boot_web2500_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers36 = testData1s;
      print(sys.boot_web2500_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers36 = testData2s;
      print(sys.boot_web2500_desktop.drivers36);
      expect(sys.boot_web2500_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers36 = defalut;
      print(sys.boot_web2500_desktop.drivers36);
      expect(sys.boot_web2500_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00427_element_check_00404 **********\n\n");
    });

    test('00428_element_check_00405', () async {
      print("\n********** テスト実行：00428_element_check_00405 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers37;
      print(sys.boot_web2500_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers37 = testData1s;
      print(sys.boot_web2500_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers37 = testData2s;
      print(sys.boot_web2500_desktop.drivers37);
      expect(sys.boot_web2500_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers37 = defalut;
      print(sys.boot_web2500_desktop.drivers37);
      expect(sys.boot_web2500_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00428_element_check_00405 **********\n\n");
    });

    test('00429_element_check_00406', () async {
      print("\n********** テスト実行：00429_element_check_00406 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers38;
      print(sys.boot_web2500_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers38 = testData1s;
      print(sys.boot_web2500_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers38 = testData2s;
      print(sys.boot_web2500_desktop.drivers38);
      expect(sys.boot_web2500_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers38 = defalut;
      print(sys.boot_web2500_desktop.drivers38);
      expect(sys.boot_web2500_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00429_element_check_00406 **********\n\n");
    });

    test('00430_element_check_00407', () async {
      print("\n********** テスト実行：00430_element_check_00407 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2500_desktop.drivers39;
      print(sys.boot_web2500_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2500_desktop.drivers39 = testData1s;
      print(sys.boot_web2500_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2500_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2500_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2500_desktop.drivers39 = testData2s;
      print(sys.boot_web2500_desktop.drivers39);
      expect(sys.boot_web2500_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2500_desktop.drivers39 = defalut;
      print(sys.boot_web2500_desktop.drivers39);
      expect(sys.boot_web2500_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2500_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00430_element_check_00407 **********\n\n");
    });

    test('00431_element_check_00408', () async {
      print("\n********** テスト実行：00431_element_check_00408 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers01;
      print(sys.boot_web2800_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers01 = testData1s;
      print(sys.boot_web2800_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers01 = testData2s;
      print(sys.boot_web2800_tower.drivers01);
      expect(sys.boot_web2800_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers01 = defalut;
      print(sys.boot_web2800_tower.drivers01);
      expect(sys.boot_web2800_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00431_element_check_00408 **********\n\n");
    });

    test('00432_element_check_00409', () async {
      print("\n********** テスト実行：00432_element_check_00409 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers02;
      print(sys.boot_web2800_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers02 = testData1s;
      print(sys.boot_web2800_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers02 = testData2s;
      print(sys.boot_web2800_tower.drivers02);
      expect(sys.boot_web2800_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers02 = defalut;
      print(sys.boot_web2800_tower.drivers02);
      expect(sys.boot_web2800_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00432_element_check_00409 **********\n\n");
    });

    test('00433_element_check_00410', () async {
      print("\n********** テスト実行：00433_element_check_00410 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers03;
      print(sys.boot_web2800_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers03 = testData1s;
      print(sys.boot_web2800_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers03 = testData2s;
      print(sys.boot_web2800_tower.drivers03);
      expect(sys.boot_web2800_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers03 = defalut;
      print(sys.boot_web2800_tower.drivers03);
      expect(sys.boot_web2800_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00433_element_check_00410 **********\n\n");
    });

    test('00434_element_check_00411', () async {
      print("\n********** テスト実行：00434_element_check_00411 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers04;
      print(sys.boot_web2800_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers04 = testData1s;
      print(sys.boot_web2800_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers04 = testData2s;
      print(sys.boot_web2800_tower.drivers04);
      expect(sys.boot_web2800_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers04 = defalut;
      print(sys.boot_web2800_tower.drivers04);
      expect(sys.boot_web2800_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00434_element_check_00411 **********\n\n");
    });

    test('00435_element_check_00412', () async {
      print("\n********** テスト実行：00435_element_check_00412 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers05;
      print(sys.boot_web2800_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers05 = testData1s;
      print(sys.boot_web2800_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers05 = testData2s;
      print(sys.boot_web2800_tower.drivers05);
      expect(sys.boot_web2800_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers05 = defalut;
      print(sys.boot_web2800_tower.drivers05);
      expect(sys.boot_web2800_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00435_element_check_00412 **********\n\n");
    });

    test('00436_element_check_00413', () async {
      print("\n********** テスト実行：00436_element_check_00413 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers06;
      print(sys.boot_web2800_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers06 = testData1s;
      print(sys.boot_web2800_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers06 = testData2s;
      print(sys.boot_web2800_tower.drivers06);
      expect(sys.boot_web2800_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers06 = defalut;
      print(sys.boot_web2800_tower.drivers06);
      expect(sys.boot_web2800_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00436_element_check_00413 **********\n\n");
    });

    test('00437_element_check_00414', () async {
      print("\n********** テスト実行：00437_element_check_00414 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers07;
      print(sys.boot_web2800_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers07 = testData1s;
      print(sys.boot_web2800_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers07 = testData2s;
      print(sys.boot_web2800_tower.drivers07);
      expect(sys.boot_web2800_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers07 = defalut;
      print(sys.boot_web2800_tower.drivers07);
      expect(sys.boot_web2800_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00437_element_check_00414 **********\n\n");
    });

    test('00438_element_check_00415', () async {
      print("\n********** テスト実行：00438_element_check_00415 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers08;
      print(sys.boot_web2800_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers08 = testData1s;
      print(sys.boot_web2800_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers08 = testData2s;
      print(sys.boot_web2800_tower.drivers08);
      expect(sys.boot_web2800_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers08 = defalut;
      print(sys.boot_web2800_tower.drivers08);
      expect(sys.boot_web2800_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00438_element_check_00415 **********\n\n");
    });

    test('00439_element_check_00416', () async {
      print("\n********** テスト実行：00439_element_check_00416 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers09;
      print(sys.boot_web2800_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers09 = testData1s;
      print(sys.boot_web2800_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers09 = testData2s;
      print(sys.boot_web2800_tower.drivers09);
      expect(sys.boot_web2800_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers09 = defalut;
      print(sys.boot_web2800_tower.drivers09);
      expect(sys.boot_web2800_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00439_element_check_00416 **********\n\n");
    });

    test('00440_element_check_00417', () async {
      print("\n********** テスト実行：00440_element_check_00417 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers10;
      print(sys.boot_web2800_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers10 = testData1s;
      print(sys.boot_web2800_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers10 = testData2s;
      print(sys.boot_web2800_tower.drivers10);
      expect(sys.boot_web2800_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers10 = defalut;
      print(sys.boot_web2800_tower.drivers10);
      expect(sys.boot_web2800_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00440_element_check_00417 **********\n\n");
    });

    test('00441_element_check_00418', () async {
      print("\n********** テスト実行：00441_element_check_00418 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers11;
      print(sys.boot_web2800_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers11 = testData1s;
      print(sys.boot_web2800_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers11 = testData2s;
      print(sys.boot_web2800_tower.drivers11);
      expect(sys.boot_web2800_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers11 = defalut;
      print(sys.boot_web2800_tower.drivers11);
      expect(sys.boot_web2800_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00441_element_check_00418 **********\n\n");
    });

    test('00442_element_check_00419', () async {
      print("\n********** テスト実行：00442_element_check_00419 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers12;
      print(sys.boot_web2800_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers12 = testData1s;
      print(sys.boot_web2800_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers12 = testData2s;
      print(sys.boot_web2800_tower.drivers12);
      expect(sys.boot_web2800_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers12 = defalut;
      print(sys.boot_web2800_tower.drivers12);
      expect(sys.boot_web2800_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00442_element_check_00419 **********\n\n");
    });

    test('00443_element_check_00420', () async {
      print("\n********** テスト実行：00443_element_check_00420 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers13;
      print(sys.boot_web2800_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers13 = testData1s;
      print(sys.boot_web2800_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers13 = testData2s;
      print(sys.boot_web2800_tower.drivers13);
      expect(sys.boot_web2800_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers13 = defalut;
      print(sys.boot_web2800_tower.drivers13);
      expect(sys.boot_web2800_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00443_element_check_00420 **********\n\n");
    });

    test('00444_element_check_00421', () async {
      print("\n********** テスト実行：00444_element_check_00421 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers14;
      print(sys.boot_web2800_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers14 = testData1s;
      print(sys.boot_web2800_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers14 = testData2s;
      print(sys.boot_web2800_tower.drivers14);
      expect(sys.boot_web2800_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers14 = defalut;
      print(sys.boot_web2800_tower.drivers14);
      expect(sys.boot_web2800_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00444_element_check_00421 **********\n\n");
    });

    test('00445_element_check_00422', () async {
      print("\n********** テスト実行：00445_element_check_00422 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers15;
      print(sys.boot_web2800_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers15 = testData1s;
      print(sys.boot_web2800_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers15 = testData2s;
      print(sys.boot_web2800_tower.drivers15);
      expect(sys.boot_web2800_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers15 = defalut;
      print(sys.boot_web2800_tower.drivers15);
      expect(sys.boot_web2800_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00445_element_check_00422 **********\n\n");
    });

    test('00446_element_check_00423', () async {
      print("\n********** テスト実行：00446_element_check_00423 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers16;
      print(sys.boot_web2800_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers16 = testData1s;
      print(sys.boot_web2800_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers16 = testData2s;
      print(sys.boot_web2800_tower.drivers16);
      expect(sys.boot_web2800_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers16 = defalut;
      print(sys.boot_web2800_tower.drivers16);
      expect(sys.boot_web2800_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00446_element_check_00423 **********\n\n");
    });

    test('00447_element_check_00424', () async {
      print("\n********** テスト実行：00447_element_check_00424 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers17;
      print(sys.boot_web2800_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers17 = testData1s;
      print(sys.boot_web2800_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers17 = testData2s;
      print(sys.boot_web2800_tower.drivers17);
      expect(sys.boot_web2800_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers17 = defalut;
      print(sys.boot_web2800_tower.drivers17);
      expect(sys.boot_web2800_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00447_element_check_00424 **********\n\n");
    });

    test('00448_element_check_00425', () async {
      print("\n********** テスト実行：00448_element_check_00425 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers18;
      print(sys.boot_web2800_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers18 = testData1s;
      print(sys.boot_web2800_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers18 = testData2s;
      print(sys.boot_web2800_tower.drivers18);
      expect(sys.boot_web2800_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers18 = defalut;
      print(sys.boot_web2800_tower.drivers18);
      expect(sys.boot_web2800_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00448_element_check_00425 **********\n\n");
    });

    test('00449_element_check_00426', () async {
      print("\n********** テスト実行：00449_element_check_00426 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers19;
      print(sys.boot_web2800_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers19 = testData1s;
      print(sys.boot_web2800_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers19 = testData2s;
      print(sys.boot_web2800_tower.drivers19);
      expect(sys.boot_web2800_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers19 = defalut;
      print(sys.boot_web2800_tower.drivers19);
      expect(sys.boot_web2800_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00449_element_check_00426 **********\n\n");
    });

    test('00450_element_check_00427', () async {
      print("\n********** テスト実行：00450_element_check_00427 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers20;
      print(sys.boot_web2800_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers20 = testData1s;
      print(sys.boot_web2800_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers20 = testData2s;
      print(sys.boot_web2800_tower.drivers20);
      expect(sys.boot_web2800_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers20 = defalut;
      print(sys.boot_web2800_tower.drivers20);
      expect(sys.boot_web2800_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00450_element_check_00427 **********\n\n");
    });

    test('00451_element_check_00428', () async {
      print("\n********** テスト実行：00451_element_check_00428 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers21;
      print(sys.boot_web2800_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers21 = testData1s;
      print(sys.boot_web2800_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers21 = testData2s;
      print(sys.boot_web2800_tower.drivers21);
      expect(sys.boot_web2800_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers21 = defalut;
      print(sys.boot_web2800_tower.drivers21);
      expect(sys.boot_web2800_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00451_element_check_00428 **********\n\n");
    });

    test('00452_element_check_00429', () async {
      print("\n********** テスト実行：00452_element_check_00429 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers22;
      print(sys.boot_web2800_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers22 = testData1s;
      print(sys.boot_web2800_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers22 = testData2s;
      print(sys.boot_web2800_tower.drivers22);
      expect(sys.boot_web2800_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers22 = defalut;
      print(sys.boot_web2800_tower.drivers22);
      expect(sys.boot_web2800_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00452_element_check_00429 **********\n\n");
    });

    test('00453_element_check_00430', () async {
      print("\n********** テスト実行：00453_element_check_00430 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers23;
      print(sys.boot_web2800_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers23 = testData1s;
      print(sys.boot_web2800_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers23 = testData2s;
      print(sys.boot_web2800_tower.drivers23);
      expect(sys.boot_web2800_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers23 = defalut;
      print(sys.boot_web2800_tower.drivers23);
      expect(sys.boot_web2800_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00453_element_check_00430 **********\n\n");
    });

    test('00454_element_check_00431', () async {
      print("\n********** テスト実行：00454_element_check_00431 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers24;
      print(sys.boot_web2800_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers24 = testData1s;
      print(sys.boot_web2800_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers24 = testData2s;
      print(sys.boot_web2800_tower.drivers24);
      expect(sys.boot_web2800_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers24 = defalut;
      print(sys.boot_web2800_tower.drivers24);
      expect(sys.boot_web2800_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00454_element_check_00431 **********\n\n");
    });

    test('00455_element_check_00432', () async {
      print("\n********** テスト実行：00455_element_check_00432 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers25;
      print(sys.boot_web2800_tower.drivers25);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers25 = testData1s;
      print(sys.boot_web2800_tower.drivers25);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers25 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers25 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers25 = testData2s;
      print(sys.boot_web2800_tower.drivers25);
      expect(sys.boot_web2800_tower.drivers25 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers25 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers25 = defalut;
      print(sys.boot_web2800_tower.drivers25);
      expect(sys.boot_web2800_tower.drivers25 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers25 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00455_element_check_00432 **********\n\n");
    });

    test('00456_element_check_00433', () async {
      print("\n********** テスト実行：00456_element_check_00433 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers26;
      print(sys.boot_web2800_tower.drivers26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers26 = testData1s;
      print(sys.boot_web2800_tower.drivers26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers26 = testData2s;
      print(sys.boot_web2800_tower.drivers26);
      expect(sys.boot_web2800_tower.drivers26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers26 = defalut;
      print(sys.boot_web2800_tower.drivers26);
      expect(sys.boot_web2800_tower.drivers26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00456_element_check_00433 **********\n\n");
    });

    test('00457_element_check_00434', () async {
      print("\n********** テスト実行：00457_element_check_00434 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers27;
      print(sys.boot_web2800_tower.drivers27);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers27 = testData1s;
      print(sys.boot_web2800_tower.drivers27);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers27 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers27 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers27 = testData2s;
      print(sys.boot_web2800_tower.drivers27);
      expect(sys.boot_web2800_tower.drivers27 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers27 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers27 = defalut;
      print(sys.boot_web2800_tower.drivers27);
      expect(sys.boot_web2800_tower.drivers27 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers27 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00457_element_check_00434 **********\n\n");
    });

    test('00458_element_check_00435', () async {
      print("\n********** テスト実行：00458_element_check_00435 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers28;
      print(sys.boot_web2800_tower.drivers28);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers28 = testData1s;
      print(sys.boot_web2800_tower.drivers28);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers28 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers28 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers28 = testData2s;
      print(sys.boot_web2800_tower.drivers28);
      expect(sys.boot_web2800_tower.drivers28 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers28 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers28 = defalut;
      print(sys.boot_web2800_tower.drivers28);
      expect(sys.boot_web2800_tower.drivers28 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers28 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00458_element_check_00435 **********\n\n");
    });

    test('00459_element_check_00436', () async {
      print("\n********** テスト実行：00459_element_check_00436 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers29;
      print(sys.boot_web2800_tower.drivers29);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers29 = testData1s;
      print(sys.boot_web2800_tower.drivers29);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers29 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers29 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers29 = testData2s;
      print(sys.boot_web2800_tower.drivers29);
      expect(sys.boot_web2800_tower.drivers29 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers29 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers29 = defalut;
      print(sys.boot_web2800_tower.drivers29);
      expect(sys.boot_web2800_tower.drivers29 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers29 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00459_element_check_00436 **********\n\n");
    });

    test('00460_element_check_00437', () async {
      print("\n********** テスト実行：00460_element_check_00437 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers30;
      print(sys.boot_web2800_tower.drivers30);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers30 = testData1s;
      print(sys.boot_web2800_tower.drivers30);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers30 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers30 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers30 = testData2s;
      print(sys.boot_web2800_tower.drivers30);
      expect(sys.boot_web2800_tower.drivers30 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers30 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers30 = defalut;
      print(sys.boot_web2800_tower.drivers30);
      expect(sys.boot_web2800_tower.drivers30 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers30 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00460_element_check_00437 **********\n\n");
    });

    test('00461_element_check_00438', () async {
      print("\n********** テスト実行：00461_element_check_00438 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers31;
      print(sys.boot_web2800_tower.drivers31);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers31 = testData1s;
      print(sys.boot_web2800_tower.drivers31);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers31 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers31 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers31 = testData2s;
      print(sys.boot_web2800_tower.drivers31);
      expect(sys.boot_web2800_tower.drivers31 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers31 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers31 = defalut;
      print(sys.boot_web2800_tower.drivers31);
      expect(sys.boot_web2800_tower.drivers31 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers31 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00461_element_check_00438 **********\n\n");
    });

    test('00462_element_check_00439', () async {
      print("\n********** テスト実行：00462_element_check_00439 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers32;
      print(sys.boot_web2800_tower.drivers32);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers32 = testData1s;
      print(sys.boot_web2800_tower.drivers32);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers32 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers32 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers32 = testData2s;
      print(sys.boot_web2800_tower.drivers32);
      expect(sys.boot_web2800_tower.drivers32 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers32 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers32 = defalut;
      print(sys.boot_web2800_tower.drivers32);
      expect(sys.boot_web2800_tower.drivers32 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers32 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00462_element_check_00439 **********\n\n");
    });

    test('00463_element_check_00440', () async {
      print("\n********** テスト実行：00463_element_check_00440 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers33;
      print(sys.boot_web2800_tower.drivers33);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers33 = testData1s;
      print(sys.boot_web2800_tower.drivers33);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers33 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers33 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers33 = testData2s;
      print(sys.boot_web2800_tower.drivers33);
      expect(sys.boot_web2800_tower.drivers33 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers33 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers33 = defalut;
      print(sys.boot_web2800_tower.drivers33);
      expect(sys.boot_web2800_tower.drivers33 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers33 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00463_element_check_00440 **********\n\n");
    });

    test('00464_element_check_00441', () async {
      print("\n********** テスト実行：00464_element_check_00441 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers34;
      print(sys.boot_web2800_tower.drivers34);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers34 = testData1s;
      print(sys.boot_web2800_tower.drivers34);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers34 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers34 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers34 = testData2s;
      print(sys.boot_web2800_tower.drivers34);
      expect(sys.boot_web2800_tower.drivers34 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers34 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers34 = defalut;
      print(sys.boot_web2800_tower.drivers34);
      expect(sys.boot_web2800_tower.drivers34 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers34 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00464_element_check_00441 **********\n\n");
    });

    test('00465_element_check_00442', () async {
      print("\n********** テスト実行：00465_element_check_00442 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers36;
      print(sys.boot_web2800_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers36 = testData1s;
      print(sys.boot_web2800_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers36 = testData2s;
      print(sys.boot_web2800_tower.drivers36);
      expect(sys.boot_web2800_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers36 = defalut;
      print(sys.boot_web2800_tower.drivers36);
      expect(sys.boot_web2800_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00465_element_check_00442 **********\n\n");
    });

    test('00466_element_check_00443', () async {
      print("\n********** テスト実行：00466_element_check_00443 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers37;
      print(sys.boot_web2800_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers37 = testData1s;
      print(sys.boot_web2800_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers37 = testData2s;
      print(sys.boot_web2800_tower.drivers37);
      expect(sys.boot_web2800_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers37 = defalut;
      print(sys.boot_web2800_tower.drivers37);
      expect(sys.boot_web2800_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00466_element_check_00443 **********\n\n");
    });

    test('00467_element_check_00444', () async {
      print("\n********** テスト実行：00467_element_check_00444 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers38;
      print(sys.boot_web2800_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers38 = testData1s;
      print(sys.boot_web2800_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers38 = testData2s;
      print(sys.boot_web2800_tower.drivers38);
      expect(sys.boot_web2800_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers38 = defalut;
      print(sys.boot_web2800_tower.drivers38);
      expect(sys.boot_web2800_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00467_element_check_00444 **********\n\n");
    });

    test('00468_element_check_00445', () async {
      print("\n********** テスト実行：00468_element_check_00445 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_tower.drivers39;
      print(sys.boot_web2800_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_tower.drivers39 = testData1s;
      print(sys.boot_web2800_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_tower.drivers39 = testData2s;
      print(sys.boot_web2800_tower.drivers39);
      expect(sys.boot_web2800_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_tower.drivers39 = defalut;
      print(sys.boot_web2800_tower.drivers39);
      expect(sys.boot_web2800_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00468_element_check_00445 **********\n\n");
    });

    test('00469_element_check_00446', () async {
      print("\n********** テスト実行：00469_element_check_00446 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers01;
      print(sys.boot_web2800_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers01 = testData1s;
      print(sys.boot_web2800_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers01 = testData2s;
      print(sys.boot_web2800_desktop.drivers01);
      expect(sys.boot_web2800_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers01 = defalut;
      print(sys.boot_web2800_desktop.drivers01);
      expect(sys.boot_web2800_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00469_element_check_00446 **********\n\n");
    });

    test('00470_element_check_00447', () async {
      print("\n********** テスト実行：00470_element_check_00447 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers02;
      print(sys.boot_web2800_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers02 = testData1s;
      print(sys.boot_web2800_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers02 = testData2s;
      print(sys.boot_web2800_desktop.drivers02);
      expect(sys.boot_web2800_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers02 = defalut;
      print(sys.boot_web2800_desktop.drivers02);
      expect(sys.boot_web2800_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00470_element_check_00447 **********\n\n");
    });

    test('00471_element_check_00448', () async {
      print("\n********** テスト実行：00471_element_check_00448 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers03;
      print(sys.boot_web2800_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers03 = testData1s;
      print(sys.boot_web2800_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers03 = testData2s;
      print(sys.boot_web2800_desktop.drivers03);
      expect(sys.boot_web2800_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers03 = defalut;
      print(sys.boot_web2800_desktop.drivers03);
      expect(sys.boot_web2800_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00471_element_check_00448 **********\n\n");
    });

    test('00472_element_check_00449', () async {
      print("\n********** テスト実行：00472_element_check_00449 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers04;
      print(sys.boot_web2800_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers04 = testData1s;
      print(sys.boot_web2800_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers04 = testData2s;
      print(sys.boot_web2800_desktop.drivers04);
      expect(sys.boot_web2800_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers04 = defalut;
      print(sys.boot_web2800_desktop.drivers04);
      expect(sys.boot_web2800_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00472_element_check_00449 **********\n\n");
    });

    test('00473_element_check_00450', () async {
      print("\n********** テスト実行：00473_element_check_00450 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers05;
      print(sys.boot_web2800_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers05 = testData1s;
      print(sys.boot_web2800_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers05 = testData2s;
      print(sys.boot_web2800_desktop.drivers05);
      expect(sys.boot_web2800_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers05 = defalut;
      print(sys.boot_web2800_desktop.drivers05);
      expect(sys.boot_web2800_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00473_element_check_00450 **********\n\n");
    });

    test('00474_element_check_00451', () async {
      print("\n********** テスト実行：00474_element_check_00451 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers06;
      print(sys.boot_web2800_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers06 = testData1s;
      print(sys.boot_web2800_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers06 = testData2s;
      print(sys.boot_web2800_desktop.drivers06);
      expect(sys.boot_web2800_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers06 = defalut;
      print(sys.boot_web2800_desktop.drivers06);
      expect(sys.boot_web2800_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00474_element_check_00451 **********\n\n");
    });

    test('00475_element_check_00452', () async {
      print("\n********** テスト実行：00475_element_check_00452 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers07;
      print(sys.boot_web2800_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers07 = testData1s;
      print(sys.boot_web2800_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers07 = testData2s;
      print(sys.boot_web2800_desktop.drivers07);
      expect(sys.boot_web2800_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers07 = defalut;
      print(sys.boot_web2800_desktop.drivers07);
      expect(sys.boot_web2800_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00475_element_check_00452 **********\n\n");
    });

    test('00476_element_check_00453', () async {
      print("\n********** テスト実行：00476_element_check_00453 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers08;
      print(sys.boot_web2800_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers08 = testData1s;
      print(sys.boot_web2800_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers08 = testData2s;
      print(sys.boot_web2800_desktop.drivers08);
      expect(sys.boot_web2800_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers08 = defalut;
      print(sys.boot_web2800_desktop.drivers08);
      expect(sys.boot_web2800_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00476_element_check_00453 **********\n\n");
    });

    test('00477_element_check_00454', () async {
      print("\n********** テスト実行：00477_element_check_00454 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers09;
      print(sys.boot_web2800_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers09 = testData1s;
      print(sys.boot_web2800_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers09 = testData2s;
      print(sys.boot_web2800_desktop.drivers09);
      expect(sys.boot_web2800_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers09 = defalut;
      print(sys.boot_web2800_desktop.drivers09);
      expect(sys.boot_web2800_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00477_element_check_00454 **********\n\n");
    });

    test('00478_element_check_00455', () async {
      print("\n********** テスト実行：00478_element_check_00455 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers10;
      print(sys.boot_web2800_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers10 = testData1s;
      print(sys.boot_web2800_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers10 = testData2s;
      print(sys.boot_web2800_desktop.drivers10);
      expect(sys.boot_web2800_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers10 = defalut;
      print(sys.boot_web2800_desktop.drivers10);
      expect(sys.boot_web2800_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00478_element_check_00455 **********\n\n");
    });

    test('00479_element_check_00456', () async {
      print("\n********** テスト実行：00479_element_check_00456 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers11;
      print(sys.boot_web2800_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers11 = testData1s;
      print(sys.boot_web2800_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers11 = testData2s;
      print(sys.boot_web2800_desktop.drivers11);
      expect(sys.boot_web2800_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers11 = defalut;
      print(sys.boot_web2800_desktop.drivers11);
      expect(sys.boot_web2800_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00479_element_check_00456 **********\n\n");
    });

    test('00480_element_check_00457', () async {
      print("\n********** テスト実行：00480_element_check_00457 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers12;
      print(sys.boot_web2800_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers12 = testData1s;
      print(sys.boot_web2800_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers12 = testData2s;
      print(sys.boot_web2800_desktop.drivers12);
      expect(sys.boot_web2800_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers12 = defalut;
      print(sys.boot_web2800_desktop.drivers12);
      expect(sys.boot_web2800_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00480_element_check_00457 **********\n\n");
    });

    test('00481_element_check_00458', () async {
      print("\n********** テスト実行：00481_element_check_00458 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers13;
      print(sys.boot_web2800_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers13 = testData1s;
      print(sys.boot_web2800_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers13 = testData2s;
      print(sys.boot_web2800_desktop.drivers13);
      expect(sys.boot_web2800_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers13 = defalut;
      print(sys.boot_web2800_desktop.drivers13);
      expect(sys.boot_web2800_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00481_element_check_00458 **********\n\n");
    });

    test('00482_element_check_00459', () async {
      print("\n********** テスト実行：00482_element_check_00459 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers14;
      print(sys.boot_web2800_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers14 = testData1s;
      print(sys.boot_web2800_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers14 = testData2s;
      print(sys.boot_web2800_desktop.drivers14);
      expect(sys.boot_web2800_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers14 = defalut;
      print(sys.boot_web2800_desktop.drivers14);
      expect(sys.boot_web2800_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00482_element_check_00459 **********\n\n");
    });

    test('00483_element_check_00460', () async {
      print("\n********** テスト実行：00483_element_check_00460 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers15;
      print(sys.boot_web2800_desktop.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers15 = testData1s;
      print(sys.boot_web2800_desktop.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers15 = testData2s;
      print(sys.boot_web2800_desktop.drivers15);
      expect(sys.boot_web2800_desktop.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers15 = defalut;
      print(sys.boot_web2800_desktop.drivers15);
      expect(sys.boot_web2800_desktop.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00483_element_check_00460 **********\n\n");
    });

    test('00484_element_check_00461', () async {
      print("\n********** テスト実行：00484_element_check_00461 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers16;
      print(sys.boot_web2800_desktop.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers16 = testData1s;
      print(sys.boot_web2800_desktop.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers16 = testData2s;
      print(sys.boot_web2800_desktop.drivers16);
      expect(sys.boot_web2800_desktop.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers16 = defalut;
      print(sys.boot_web2800_desktop.drivers16);
      expect(sys.boot_web2800_desktop.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00484_element_check_00461 **********\n\n");
    });

    test('00485_element_check_00462', () async {
      print("\n********** テスト実行：00485_element_check_00462 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers17;
      print(sys.boot_web2800_desktop.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers17 = testData1s;
      print(sys.boot_web2800_desktop.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers17 = testData2s;
      print(sys.boot_web2800_desktop.drivers17);
      expect(sys.boot_web2800_desktop.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers17 = defalut;
      print(sys.boot_web2800_desktop.drivers17);
      expect(sys.boot_web2800_desktop.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00485_element_check_00462 **********\n\n");
    });

    test('00486_element_check_00463', () async {
      print("\n********** テスト実行：00486_element_check_00463 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers18;
      print(sys.boot_web2800_desktop.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers18 = testData1s;
      print(sys.boot_web2800_desktop.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers18 = testData2s;
      print(sys.boot_web2800_desktop.drivers18);
      expect(sys.boot_web2800_desktop.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers18 = defalut;
      print(sys.boot_web2800_desktop.drivers18);
      expect(sys.boot_web2800_desktop.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00486_element_check_00463 **********\n\n");
    });

    test('00487_element_check_00464', () async {
      print("\n********** テスト実行：00487_element_check_00464 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers19;
      print(sys.boot_web2800_desktop.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers19 = testData1s;
      print(sys.boot_web2800_desktop.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers19 = testData2s;
      print(sys.boot_web2800_desktop.drivers19);
      expect(sys.boot_web2800_desktop.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers19 = defalut;
      print(sys.boot_web2800_desktop.drivers19);
      expect(sys.boot_web2800_desktop.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00487_element_check_00464 **********\n\n");
    });

    test('00488_element_check_00465', () async {
      print("\n********** テスト実行：00488_element_check_00465 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers20;
      print(sys.boot_web2800_desktop.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers20 = testData1s;
      print(sys.boot_web2800_desktop.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers20 = testData2s;
      print(sys.boot_web2800_desktop.drivers20);
      expect(sys.boot_web2800_desktop.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers20 = defalut;
      print(sys.boot_web2800_desktop.drivers20);
      expect(sys.boot_web2800_desktop.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00488_element_check_00465 **********\n\n");
    });

    test('00489_element_check_00466', () async {
      print("\n********** テスト実行：00489_element_check_00466 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers21;
      print(sys.boot_web2800_desktop.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers21 = testData1s;
      print(sys.boot_web2800_desktop.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers21 = testData2s;
      print(sys.boot_web2800_desktop.drivers21);
      expect(sys.boot_web2800_desktop.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers21 = defalut;
      print(sys.boot_web2800_desktop.drivers21);
      expect(sys.boot_web2800_desktop.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00489_element_check_00466 **********\n\n");
    });

    test('00490_element_check_00467', () async {
      print("\n********** テスト実行：00490_element_check_00467 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers22;
      print(sys.boot_web2800_desktop.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers22 = testData1s;
      print(sys.boot_web2800_desktop.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers22 = testData2s;
      print(sys.boot_web2800_desktop.drivers22);
      expect(sys.boot_web2800_desktop.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers22 = defalut;
      print(sys.boot_web2800_desktop.drivers22);
      expect(sys.boot_web2800_desktop.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00490_element_check_00467 **********\n\n");
    });

    test('00491_element_check_00468', () async {
      print("\n********** テスト実行：00491_element_check_00468 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers23;
      print(sys.boot_web2800_desktop.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers23 = testData1s;
      print(sys.boot_web2800_desktop.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers23 = testData2s;
      print(sys.boot_web2800_desktop.drivers23);
      expect(sys.boot_web2800_desktop.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers23 = defalut;
      print(sys.boot_web2800_desktop.drivers23);
      expect(sys.boot_web2800_desktop.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00491_element_check_00468 **********\n\n");
    });

    test('00492_element_check_00469', () async {
      print("\n********** テスト実行：00492_element_check_00469 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers24;
      print(sys.boot_web2800_desktop.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers24 = testData1s;
      print(sys.boot_web2800_desktop.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers24 = testData2s;
      print(sys.boot_web2800_desktop.drivers24);
      expect(sys.boot_web2800_desktop.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers24 = defalut;
      print(sys.boot_web2800_desktop.drivers24);
      expect(sys.boot_web2800_desktop.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00492_element_check_00469 **********\n\n");
    });

    test('00493_element_check_00470', () async {
      print("\n********** テスト実行：00493_element_check_00470 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers25;
      print(sys.boot_web2800_desktop.drivers25);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers25 = testData1s;
      print(sys.boot_web2800_desktop.drivers25);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers25 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers25 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers25 = testData2s;
      print(sys.boot_web2800_desktop.drivers25);
      expect(sys.boot_web2800_desktop.drivers25 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers25 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers25 = defalut;
      print(sys.boot_web2800_desktop.drivers25);
      expect(sys.boot_web2800_desktop.drivers25 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers25 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00493_element_check_00470 **********\n\n");
    });

    test('00494_element_check_00471', () async {
      print("\n********** テスト実行：00494_element_check_00471 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers26;
      print(sys.boot_web2800_desktop.drivers26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers26 = testData1s;
      print(sys.boot_web2800_desktop.drivers26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers26 = testData2s;
      print(sys.boot_web2800_desktop.drivers26);
      expect(sys.boot_web2800_desktop.drivers26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers26 = defalut;
      print(sys.boot_web2800_desktop.drivers26);
      expect(sys.boot_web2800_desktop.drivers26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00494_element_check_00471 **********\n\n");
    });

    test('00495_element_check_00472', () async {
      print("\n********** テスト実行：00495_element_check_00472 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers27;
      print(sys.boot_web2800_desktop.drivers27);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers27 = testData1s;
      print(sys.boot_web2800_desktop.drivers27);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers27 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers27 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers27 = testData2s;
      print(sys.boot_web2800_desktop.drivers27);
      expect(sys.boot_web2800_desktop.drivers27 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers27 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers27 = defalut;
      print(sys.boot_web2800_desktop.drivers27);
      expect(sys.boot_web2800_desktop.drivers27 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers27 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00495_element_check_00472 **********\n\n");
    });

    test('00496_element_check_00473', () async {
      print("\n********** テスト実行：00496_element_check_00473 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers28;
      print(sys.boot_web2800_desktop.drivers28);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers28 = testData1s;
      print(sys.boot_web2800_desktop.drivers28);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers28 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers28 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers28 = testData2s;
      print(sys.boot_web2800_desktop.drivers28);
      expect(sys.boot_web2800_desktop.drivers28 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers28 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers28 = defalut;
      print(sys.boot_web2800_desktop.drivers28);
      expect(sys.boot_web2800_desktop.drivers28 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers28 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00496_element_check_00473 **********\n\n");
    });

    test('00497_element_check_00474', () async {
      print("\n********** テスト実行：00497_element_check_00474 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers29;
      print(sys.boot_web2800_desktop.drivers29);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers29 = testData1s;
      print(sys.boot_web2800_desktop.drivers29);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers29 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers29 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers29 = testData2s;
      print(sys.boot_web2800_desktop.drivers29);
      expect(sys.boot_web2800_desktop.drivers29 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers29 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers29 = defalut;
      print(sys.boot_web2800_desktop.drivers29);
      expect(sys.boot_web2800_desktop.drivers29 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers29 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00497_element_check_00474 **********\n\n");
    });

    test('00498_element_check_00475', () async {
      print("\n********** テスト実行：00498_element_check_00475 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers30;
      print(sys.boot_web2800_desktop.drivers30);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers30 = testData1s;
      print(sys.boot_web2800_desktop.drivers30);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers30 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers30 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers30 = testData2s;
      print(sys.boot_web2800_desktop.drivers30);
      expect(sys.boot_web2800_desktop.drivers30 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers30 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers30 = defalut;
      print(sys.boot_web2800_desktop.drivers30);
      expect(sys.boot_web2800_desktop.drivers30 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers30 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00498_element_check_00475 **********\n\n");
    });

    test('00499_element_check_00476', () async {
      print("\n********** テスト実行：00499_element_check_00476 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers31;
      print(sys.boot_web2800_desktop.drivers31);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers31 = testData1s;
      print(sys.boot_web2800_desktop.drivers31);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers31 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers31 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers31 = testData2s;
      print(sys.boot_web2800_desktop.drivers31);
      expect(sys.boot_web2800_desktop.drivers31 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers31 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers31 = defalut;
      print(sys.boot_web2800_desktop.drivers31);
      expect(sys.boot_web2800_desktop.drivers31 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers31 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00499_element_check_00476 **********\n\n");
    });

    test('00500_element_check_00477', () async {
      print("\n********** テスト実行：00500_element_check_00477 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers32;
      print(sys.boot_web2800_desktop.drivers32);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers32 = testData1s;
      print(sys.boot_web2800_desktop.drivers32);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers32 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers32 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers32 = testData2s;
      print(sys.boot_web2800_desktop.drivers32);
      expect(sys.boot_web2800_desktop.drivers32 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers32 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers32 = defalut;
      print(sys.boot_web2800_desktop.drivers32);
      expect(sys.boot_web2800_desktop.drivers32 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers32 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00500_element_check_00477 **********\n\n");
    });

    test('00501_element_check_00478', () async {
      print("\n********** テスト実行：00501_element_check_00478 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers33;
      print(sys.boot_web2800_desktop.drivers33);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers33 = testData1s;
      print(sys.boot_web2800_desktop.drivers33);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers33 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers33 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers33 = testData2s;
      print(sys.boot_web2800_desktop.drivers33);
      expect(sys.boot_web2800_desktop.drivers33 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers33 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers33 = defalut;
      print(sys.boot_web2800_desktop.drivers33);
      expect(sys.boot_web2800_desktop.drivers33 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers33 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00501_element_check_00478 **********\n\n");
    });

    test('00502_element_check_00479', () async {
      print("\n********** テスト実行：00502_element_check_00479 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers34;
      print(sys.boot_web2800_desktop.drivers34);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers34 = testData1s;
      print(sys.boot_web2800_desktop.drivers34);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers34 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers34 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers34 = testData2s;
      print(sys.boot_web2800_desktop.drivers34);
      expect(sys.boot_web2800_desktop.drivers34 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers34 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers34 = defalut;
      print(sys.boot_web2800_desktop.drivers34);
      expect(sys.boot_web2800_desktop.drivers34 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers34 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00502_element_check_00479 **********\n\n");
    });

    test('00503_element_check_00480', () async {
      print("\n********** テスト実行：00503_element_check_00480 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers36;
      print(sys.boot_web2800_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers36 = testData1s;
      print(sys.boot_web2800_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers36 = testData2s;
      print(sys.boot_web2800_desktop.drivers36);
      expect(sys.boot_web2800_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers36 = defalut;
      print(sys.boot_web2800_desktop.drivers36);
      expect(sys.boot_web2800_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00503_element_check_00480 **********\n\n");
    });

    test('00504_element_check_00481', () async {
      print("\n********** テスト実行：00504_element_check_00481 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers37;
      print(sys.boot_web2800_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers37 = testData1s;
      print(sys.boot_web2800_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers37 = testData2s;
      print(sys.boot_web2800_desktop.drivers37);
      expect(sys.boot_web2800_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers37 = defalut;
      print(sys.boot_web2800_desktop.drivers37);
      expect(sys.boot_web2800_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00504_element_check_00481 **********\n\n");
    });

    test('00505_element_check_00482', () async {
      print("\n********** テスト実行：00505_element_check_00482 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers38;
      print(sys.boot_web2800_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers38 = testData1s;
      print(sys.boot_web2800_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers38 = testData2s;
      print(sys.boot_web2800_desktop.drivers38);
      expect(sys.boot_web2800_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers38 = defalut;
      print(sys.boot_web2800_desktop.drivers38);
      expect(sys.boot_web2800_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00505_element_check_00482 **********\n\n");
    });

    test('00506_element_check_00483', () async {
      print("\n********** テスト実行：00506_element_check_00483 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2800_desktop.drivers39;
      print(sys.boot_web2800_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2800_desktop.drivers39 = testData1s;
      print(sys.boot_web2800_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2800_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2800_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2800_desktop.drivers39 = testData2s;
      print(sys.boot_web2800_desktop.drivers39);
      expect(sys.boot_web2800_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2800_desktop.drivers39 = defalut;
      print(sys.boot_web2800_desktop.drivers39);
      expect(sys.boot_web2800_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2800_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00506_element_check_00483 **********\n\n");
    });

    test('00507_element_check_00484', () async {
      print("\n********** テスト実行：00507_element_check_00484 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers01;
      print(sys.boot_web2300_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers01 = testData1s;
      print(sys.boot_web2300_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers01 = testData2s;
      print(sys.boot_web2300_tower.drivers01);
      expect(sys.boot_web2300_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers01 = defalut;
      print(sys.boot_web2300_tower.drivers01);
      expect(sys.boot_web2300_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00507_element_check_00484 **********\n\n");
    });

    test('00508_element_check_00485', () async {
      print("\n********** テスト実行：00508_element_check_00485 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers02;
      print(sys.boot_web2300_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers02 = testData1s;
      print(sys.boot_web2300_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers02 = testData2s;
      print(sys.boot_web2300_tower.drivers02);
      expect(sys.boot_web2300_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers02 = defalut;
      print(sys.boot_web2300_tower.drivers02);
      expect(sys.boot_web2300_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00508_element_check_00485 **********\n\n");
    });

    test('00509_element_check_00486', () async {
      print("\n********** テスト実行：00509_element_check_00486 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers03;
      print(sys.boot_web2300_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers03 = testData1s;
      print(sys.boot_web2300_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers03 = testData2s;
      print(sys.boot_web2300_tower.drivers03);
      expect(sys.boot_web2300_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers03 = defalut;
      print(sys.boot_web2300_tower.drivers03);
      expect(sys.boot_web2300_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00509_element_check_00486 **********\n\n");
    });

    test('00510_element_check_00487', () async {
      print("\n********** テスト実行：00510_element_check_00487 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers04;
      print(sys.boot_web2300_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers04 = testData1s;
      print(sys.boot_web2300_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers04 = testData2s;
      print(sys.boot_web2300_tower.drivers04);
      expect(sys.boot_web2300_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers04 = defalut;
      print(sys.boot_web2300_tower.drivers04);
      expect(sys.boot_web2300_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00510_element_check_00487 **********\n\n");
    });

    test('00511_element_check_00488', () async {
      print("\n********** テスト実行：00511_element_check_00488 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers05;
      print(sys.boot_web2300_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers05 = testData1s;
      print(sys.boot_web2300_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers05 = testData2s;
      print(sys.boot_web2300_tower.drivers05);
      expect(sys.boot_web2300_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers05 = defalut;
      print(sys.boot_web2300_tower.drivers05);
      expect(sys.boot_web2300_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00511_element_check_00488 **********\n\n");
    });

    test('00512_element_check_00489', () async {
      print("\n********** テスト実行：00512_element_check_00489 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers06;
      print(sys.boot_web2300_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers06 = testData1s;
      print(sys.boot_web2300_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers06 = testData2s;
      print(sys.boot_web2300_tower.drivers06);
      expect(sys.boot_web2300_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers06 = defalut;
      print(sys.boot_web2300_tower.drivers06);
      expect(sys.boot_web2300_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00512_element_check_00489 **********\n\n");
    });

    test('00513_element_check_00490', () async {
      print("\n********** テスト実行：00513_element_check_00490 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers07;
      print(sys.boot_web2300_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers07 = testData1s;
      print(sys.boot_web2300_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers07 = testData2s;
      print(sys.boot_web2300_tower.drivers07);
      expect(sys.boot_web2300_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers07 = defalut;
      print(sys.boot_web2300_tower.drivers07);
      expect(sys.boot_web2300_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00513_element_check_00490 **********\n\n");
    });

    test('00514_element_check_00491', () async {
      print("\n********** テスト実行：00514_element_check_00491 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers08;
      print(sys.boot_web2300_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers08 = testData1s;
      print(sys.boot_web2300_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers08 = testData2s;
      print(sys.boot_web2300_tower.drivers08);
      expect(sys.boot_web2300_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers08 = defalut;
      print(sys.boot_web2300_tower.drivers08);
      expect(sys.boot_web2300_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00514_element_check_00491 **********\n\n");
    });

    test('00515_element_check_00492', () async {
      print("\n********** テスト実行：00515_element_check_00492 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers09;
      print(sys.boot_web2300_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers09 = testData1s;
      print(sys.boot_web2300_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers09 = testData2s;
      print(sys.boot_web2300_tower.drivers09);
      expect(sys.boot_web2300_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers09 = defalut;
      print(sys.boot_web2300_tower.drivers09);
      expect(sys.boot_web2300_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00515_element_check_00492 **********\n\n");
    });

    test('00516_element_check_00493', () async {
      print("\n********** テスト実行：00516_element_check_00493 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers10;
      print(sys.boot_web2300_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers10 = testData1s;
      print(sys.boot_web2300_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers10 = testData2s;
      print(sys.boot_web2300_tower.drivers10);
      expect(sys.boot_web2300_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers10 = defalut;
      print(sys.boot_web2300_tower.drivers10);
      expect(sys.boot_web2300_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00516_element_check_00493 **********\n\n");
    });

    test('00517_element_check_00494', () async {
      print("\n********** テスト実行：00517_element_check_00494 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers11;
      print(sys.boot_web2300_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers11 = testData1s;
      print(sys.boot_web2300_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers11 = testData2s;
      print(sys.boot_web2300_tower.drivers11);
      expect(sys.boot_web2300_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers11 = defalut;
      print(sys.boot_web2300_tower.drivers11);
      expect(sys.boot_web2300_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00517_element_check_00494 **********\n\n");
    });

    test('00518_element_check_00495', () async {
      print("\n********** テスト実行：00518_element_check_00495 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers12;
      print(sys.boot_web2300_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers12 = testData1s;
      print(sys.boot_web2300_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers12 = testData2s;
      print(sys.boot_web2300_tower.drivers12);
      expect(sys.boot_web2300_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers12 = defalut;
      print(sys.boot_web2300_tower.drivers12);
      expect(sys.boot_web2300_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00518_element_check_00495 **********\n\n");
    });

    test('00519_element_check_00496', () async {
      print("\n********** テスト実行：00519_element_check_00496 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers13;
      print(sys.boot_web2300_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers13 = testData1s;
      print(sys.boot_web2300_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers13 = testData2s;
      print(sys.boot_web2300_tower.drivers13);
      expect(sys.boot_web2300_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers13 = defalut;
      print(sys.boot_web2300_tower.drivers13);
      expect(sys.boot_web2300_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00519_element_check_00496 **********\n\n");
    });

    test('00520_element_check_00497', () async {
      print("\n********** テスト実行：00520_element_check_00497 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers14;
      print(sys.boot_web2300_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers14 = testData1s;
      print(sys.boot_web2300_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers14 = testData2s;
      print(sys.boot_web2300_tower.drivers14);
      expect(sys.boot_web2300_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers14 = defalut;
      print(sys.boot_web2300_tower.drivers14);
      expect(sys.boot_web2300_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00520_element_check_00497 **********\n\n");
    });

    test('00521_element_check_00498', () async {
      print("\n********** テスト実行：00521_element_check_00498 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers15;
      print(sys.boot_web2300_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers15 = testData1s;
      print(sys.boot_web2300_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers15 = testData2s;
      print(sys.boot_web2300_tower.drivers15);
      expect(sys.boot_web2300_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers15 = defalut;
      print(sys.boot_web2300_tower.drivers15);
      expect(sys.boot_web2300_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00521_element_check_00498 **********\n\n");
    });

    test('00522_element_check_00499', () async {
      print("\n********** テスト実行：00522_element_check_00499 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers16;
      print(sys.boot_web2300_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers16 = testData1s;
      print(sys.boot_web2300_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers16 = testData2s;
      print(sys.boot_web2300_tower.drivers16);
      expect(sys.boot_web2300_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers16 = defalut;
      print(sys.boot_web2300_tower.drivers16);
      expect(sys.boot_web2300_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00522_element_check_00499 **********\n\n");
    });

    test('00523_element_check_00500', () async {
      print("\n********** テスト実行：00523_element_check_00500 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers17;
      print(sys.boot_web2300_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers17 = testData1s;
      print(sys.boot_web2300_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers17 = testData2s;
      print(sys.boot_web2300_tower.drivers17);
      expect(sys.boot_web2300_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers17 = defalut;
      print(sys.boot_web2300_tower.drivers17);
      expect(sys.boot_web2300_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00523_element_check_00500 **********\n\n");
    });

    test('00524_element_check_00501', () async {
      print("\n********** テスト実行：00524_element_check_00501 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers18;
      print(sys.boot_web2300_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers18 = testData1s;
      print(sys.boot_web2300_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers18 = testData2s;
      print(sys.boot_web2300_tower.drivers18);
      expect(sys.boot_web2300_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers18 = defalut;
      print(sys.boot_web2300_tower.drivers18);
      expect(sys.boot_web2300_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00524_element_check_00501 **********\n\n");
    });

    test('00525_element_check_00502', () async {
      print("\n********** テスト実行：00525_element_check_00502 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers19;
      print(sys.boot_web2300_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers19 = testData1s;
      print(sys.boot_web2300_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers19 = testData2s;
      print(sys.boot_web2300_tower.drivers19);
      expect(sys.boot_web2300_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers19 = defalut;
      print(sys.boot_web2300_tower.drivers19);
      expect(sys.boot_web2300_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00525_element_check_00502 **********\n\n");
    });

    test('00526_element_check_00503', () async {
      print("\n********** テスト実行：00526_element_check_00503 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers20;
      print(sys.boot_web2300_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers20 = testData1s;
      print(sys.boot_web2300_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers20 = testData2s;
      print(sys.boot_web2300_tower.drivers20);
      expect(sys.boot_web2300_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers20 = defalut;
      print(sys.boot_web2300_tower.drivers20);
      expect(sys.boot_web2300_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00526_element_check_00503 **********\n\n");
    });

    test('00527_element_check_00504', () async {
      print("\n********** テスト実行：00527_element_check_00504 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers21;
      print(sys.boot_web2300_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers21 = testData1s;
      print(sys.boot_web2300_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers21 = testData2s;
      print(sys.boot_web2300_tower.drivers21);
      expect(sys.boot_web2300_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers21 = defalut;
      print(sys.boot_web2300_tower.drivers21);
      expect(sys.boot_web2300_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00527_element_check_00504 **********\n\n");
    });

    test('00528_element_check_00505', () async {
      print("\n********** テスト実行：00528_element_check_00505 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers22;
      print(sys.boot_web2300_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers22 = testData1s;
      print(sys.boot_web2300_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers22 = testData2s;
      print(sys.boot_web2300_tower.drivers22);
      expect(sys.boot_web2300_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers22 = defalut;
      print(sys.boot_web2300_tower.drivers22);
      expect(sys.boot_web2300_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00528_element_check_00505 **********\n\n");
    });

    test('00529_element_check_00506', () async {
      print("\n********** テスト実行：00529_element_check_00506 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers23;
      print(sys.boot_web2300_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers23 = testData1s;
      print(sys.boot_web2300_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers23 = testData2s;
      print(sys.boot_web2300_tower.drivers23);
      expect(sys.boot_web2300_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers23 = defalut;
      print(sys.boot_web2300_tower.drivers23);
      expect(sys.boot_web2300_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00529_element_check_00506 **********\n\n");
    });

    test('00530_element_check_00507', () async {
      print("\n********** テスト実行：00530_element_check_00507 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers24;
      print(sys.boot_web2300_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers24 = testData1s;
      print(sys.boot_web2300_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers24 = testData2s;
      print(sys.boot_web2300_tower.drivers24);
      expect(sys.boot_web2300_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers24 = defalut;
      print(sys.boot_web2300_tower.drivers24);
      expect(sys.boot_web2300_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00530_element_check_00507 **********\n\n");
    });

    test('00531_element_check_00508', () async {
      print("\n********** テスト実行：00531_element_check_00508 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers36;
      print(sys.boot_web2300_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers36 = testData1s;
      print(sys.boot_web2300_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers36 = testData2s;
      print(sys.boot_web2300_tower.drivers36);
      expect(sys.boot_web2300_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers36 = defalut;
      print(sys.boot_web2300_tower.drivers36);
      expect(sys.boot_web2300_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00531_element_check_00508 **********\n\n");
    });

    test('00532_element_check_00509', () async {
      print("\n********** テスト実行：00532_element_check_00509 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers37;
      print(sys.boot_web2300_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers37 = testData1s;
      print(sys.boot_web2300_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers37 = testData2s;
      print(sys.boot_web2300_tower.drivers37);
      expect(sys.boot_web2300_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers37 = defalut;
      print(sys.boot_web2300_tower.drivers37);
      expect(sys.boot_web2300_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00532_element_check_00509 **********\n\n");
    });

    test('00533_element_check_00510', () async {
      print("\n********** テスト実行：00533_element_check_00510 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers38;
      print(sys.boot_web2300_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers38 = testData1s;
      print(sys.boot_web2300_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers38 = testData2s;
      print(sys.boot_web2300_tower.drivers38);
      expect(sys.boot_web2300_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers38 = defalut;
      print(sys.boot_web2300_tower.drivers38);
      expect(sys.boot_web2300_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00533_element_check_00510 **********\n\n");
    });

    test('00534_element_check_00511', () async {
      print("\n********** テスト実行：00534_element_check_00511 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_tower.drivers39;
      print(sys.boot_web2300_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_tower.drivers39 = testData1s;
      print(sys.boot_web2300_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_tower.drivers39 = testData2s;
      print(sys.boot_web2300_tower.drivers39);
      expect(sys.boot_web2300_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_tower.drivers39 = defalut;
      print(sys.boot_web2300_tower.drivers39);
      expect(sys.boot_web2300_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00534_element_check_00511 **********\n\n");
    });

    test('00535_element_check_00512', () async {
      print("\n********** テスト実行：00535_element_check_00512 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers01;
      print(sys.boot_web2300_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers01 = testData1s;
      print(sys.boot_web2300_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers01 = testData2s;
      print(sys.boot_web2300_desktop.drivers01);
      expect(sys.boot_web2300_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers01 = defalut;
      print(sys.boot_web2300_desktop.drivers01);
      expect(sys.boot_web2300_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00535_element_check_00512 **********\n\n");
    });

    test('00536_element_check_00513', () async {
      print("\n********** テスト実行：00536_element_check_00513 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers02;
      print(sys.boot_web2300_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers02 = testData1s;
      print(sys.boot_web2300_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers02 = testData2s;
      print(sys.boot_web2300_desktop.drivers02);
      expect(sys.boot_web2300_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers02 = defalut;
      print(sys.boot_web2300_desktop.drivers02);
      expect(sys.boot_web2300_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00536_element_check_00513 **********\n\n");
    });

    test('00537_element_check_00514', () async {
      print("\n********** テスト実行：00537_element_check_00514 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers03;
      print(sys.boot_web2300_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers03 = testData1s;
      print(sys.boot_web2300_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers03 = testData2s;
      print(sys.boot_web2300_desktop.drivers03);
      expect(sys.boot_web2300_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers03 = defalut;
      print(sys.boot_web2300_desktop.drivers03);
      expect(sys.boot_web2300_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00537_element_check_00514 **********\n\n");
    });

    test('00538_element_check_00515', () async {
      print("\n********** テスト実行：00538_element_check_00515 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers04;
      print(sys.boot_web2300_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers04 = testData1s;
      print(sys.boot_web2300_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers04 = testData2s;
      print(sys.boot_web2300_desktop.drivers04);
      expect(sys.boot_web2300_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers04 = defalut;
      print(sys.boot_web2300_desktop.drivers04);
      expect(sys.boot_web2300_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00538_element_check_00515 **********\n\n");
    });

    test('00539_element_check_00516', () async {
      print("\n********** テスト実行：00539_element_check_00516 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers05;
      print(sys.boot_web2300_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers05 = testData1s;
      print(sys.boot_web2300_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers05 = testData2s;
      print(sys.boot_web2300_desktop.drivers05);
      expect(sys.boot_web2300_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers05 = defalut;
      print(sys.boot_web2300_desktop.drivers05);
      expect(sys.boot_web2300_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00539_element_check_00516 **********\n\n");
    });

    test('00540_element_check_00517', () async {
      print("\n********** テスト実行：00540_element_check_00517 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers06;
      print(sys.boot_web2300_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers06 = testData1s;
      print(sys.boot_web2300_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers06 = testData2s;
      print(sys.boot_web2300_desktop.drivers06);
      expect(sys.boot_web2300_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers06 = defalut;
      print(sys.boot_web2300_desktop.drivers06);
      expect(sys.boot_web2300_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00540_element_check_00517 **********\n\n");
    });

    test('00541_element_check_00518', () async {
      print("\n********** テスト実行：00541_element_check_00518 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers07;
      print(sys.boot_web2300_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers07 = testData1s;
      print(sys.boot_web2300_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers07 = testData2s;
      print(sys.boot_web2300_desktop.drivers07);
      expect(sys.boot_web2300_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers07 = defalut;
      print(sys.boot_web2300_desktop.drivers07);
      expect(sys.boot_web2300_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00541_element_check_00518 **********\n\n");
    });

    test('00542_element_check_00519', () async {
      print("\n********** テスト実行：00542_element_check_00519 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers08;
      print(sys.boot_web2300_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers08 = testData1s;
      print(sys.boot_web2300_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers08 = testData2s;
      print(sys.boot_web2300_desktop.drivers08);
      expect(sys.boot_web2300_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers08 = defalut;
      print(sys.boot_web2300_desktop.drivers08);
      expect(sys.boot_web2300_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00542_element_check_00519 **********\n\n");
    });

    test('00543_element_check_00520', () async {
      print("\n********** テスト実行：00543_element_check_00520 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers09;
      print(sys.boot_web2300_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers09 = testData1s;
      print(sys.boot_web2300_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers09 = testData2s;
      print(sys.boot_web2300_desktop.drivers09);
      expect(sys.boot_web2300_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers09 = defalut;
      print(sys.boot_web2300_desktop.drivers09);
      expect(sys.boot_web2300_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00543_element_check_00520 **********\n\n");
    });

    test('00544_element_check_00521', () async {
      print("\n********** テスト実行：00544_element_check_00521 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers10;
      print(sys.boot_web2300_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers10 = testData1s;
      print(sys.boot_web2300_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers10 = testData2s;
      print(sys.boot_web2300_desktop.drivers10);
      expect(sys.boot_web2300_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers10 = defalut;
      print(sys.boot_web2300_desktop.drivers10);
      expect(sys.boot_web2300_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00544_element_check_00521 **********\n\n");
    });

    test('00545_element_check_00522', () async {
      print("\n********** テスト実行：00545_element_check_00522 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers11;
      print(sys.boot_web2300_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers11 = testData1s;
      print(sys.boot_web2300_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers11 = testData2s;
      print(sys.boot_web2300_desktop.drivers11);
      expect(sys.boot_web2300_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers11 = defalut;
      print(sys.boot_web2300_desktop.drivers11);
      expect(sys.boot_web2300_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00545_element_check_00522 **********\n\n");
    });

    test('00546_element_check_00523', () async {
      print("\n********** テスト実行：00546_element_check_00523 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers12;
      print(sys.boot_web2300_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers12 = testData1s;
      print(sys.boot_web2300_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers12 = testData2s;
      print(sys.boot_web2300_desktop.drivers12);
      expect(sys.boot_web2300_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers12 = defalut;
      print(sys.boot_web2300_desktop.drivers12);
      expect(sys.boot_web2300_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00546_element_check_00523 **********\n\n");
    });

    test('00547_element_check_00524', () async {
      print("\n********** テスト実行：00547_element_check_00524 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers13;
      print(sys.boot_web2300_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers13 = testData1s;
      print(sys.boot_web2300_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers13 = testData2s;
      print(sys.boot_web2300_desktop.drivers13);
      expect(sys.boot_web2300_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers13 = defalut;
      print(sys.boot_web2300_desktop.drivers13);
      expect(sys.boot_web2300_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00547_element_check_00524 **********\n\n");
    });

    test('00548_element_check_00525', () async {
      print("\n********** テスト実行：00548_element_check_00525 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers14;
      print(sys.boot_web2300_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers14 = testData1s;
      print(sys.boot_web2300_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers14 = testData2s;
      print(sys.boot_web2300_desktop.drivers14);
      expect(sys.boot_web2300_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers14 = defalut;
      print(sys.boot_web2300_desktop.drivers14);
      expect(sys.boot_web2300_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00548_element_check_00525 **********\n\n");
    });

    test('00549_element_check_00526', () async {
      print("\n********** テスト実行：00549_element_check_00526 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers36;
      print(sys.boot_web2300_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers36 = testData1s;
      print(sys.boot_web2300_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers36 = testData2s;
      print(sys.boot_web2300_desktop.drivers36);
      expect(sys.boot_web2300_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers36 = defalut;
      print(sys.boot_web2300_desktop.drivers36);
      expect(sys.boot_web2300_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00549_element_check_00526 **********\n\n");
    });

    test('00550_element_check_00527', () async {
      print("\n********** テスト実行：00550_element_check_00527 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers37;
      print(sys.boot_web2300_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers37 = testData1s;
      print(sys.boot_web2300_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers37 = testData2s;
      print(sys.boot_web2300_desktop.drivers37);
      expect(sys.boot_web2300_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers37 = defalut;
      print(sys.boot_web2300_desktop.drivers37);
      expect(sys.boot_web2300_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00550_element_check_00527 **********\n\n");
    });

    test('00551_element_check_00528', () async {
      print("\n********** テスト実行：00551_element_check_00528 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers38;
      print(sys.boot_web2300_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers38 = testData1s;
      print(sys.boot_web2300_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers38 = testData2s;
      print(sys.boot_web2300_desktop.drivers38);
      expect(sys.boot_web2300_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers38 = defalut;
      print(sys.boot_web2300_desktop.drivers38);
      expect(sys.boot_web2300_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00551_element_check_00528 **********\n\n");
    });

    test('00552_element_check_00529', () async {
      print("\n********** テスト実行：00552_element_check_00529 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_web2300_desktop.drivers39;
      print(sys.boot_web2300_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_web2300_desktop.drivers39 = testData1s;
      print(sys.boot_web2300_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_web2300_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_web2300_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_web2300_desktop.drivers39 = testData2s;
      print(sys.boot_web2300_desktop.drivers39);
      expect(sys.boot_web2300_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_web2300_desktop.drivers39 = defalut;
      print(sys.boot_web2300_desktop.drivers39);
      expect(sys.boot_web2300_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_web2300_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00552_element_check_00529 **********\n\n");
    });

    test('00553_element_check_00530', () async {
      print("\n********** テスト実行：00553_element_check_00530 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers01;
      print(sys.boot_webplus_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers01 = testData1s;
      print(sys.boot_webplus_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers01 = testData2s;
      print(sys.boot_webplus_desktop.drivers01);
      expect(sys.boot_webplus_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers01 = defalut;
      print(sys.boot_webplus_desktop.drivers01);
      expect(sys.boot_webplus_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00553_element_check_00530 **********\n\n");
    });

    test('00554_element_check_00531', () async {
      print("\n********** テスト実行：00554_element_check_00531 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers02;
      print(sys.boot_webplus_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers02 = testData1s;
      print(sys.boot_webplus_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers02 = testData2s;
      print(sys.boot_webplus_desktop.drivers02);
      expect(sys.boot_webplus_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers02 = defalut;
      print(sys.boot_webplus_desktop.drivers02);
      expect(sys.boot_webplus_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00554_element_check_00531 **********\n\n");
    });

    test('00555_element_check_00532', () async {
      print("\n********** テスト実行：00555_element_check_00532 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers03;
      print(sys.boot_webplus_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers03 = testData1s;
      print(sys.boot_webplus_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers03 = testData2s;
      print(sys.boot_webplus_desktop.drivers03);
      expect(sys.boot_webplus_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers03 = defalut;
      print(sys.boot_webplus_desktop.drivers03);
      expect(sys.boot_webplus_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00555_element_check_00532 **********\n\n");
    });

    test('00556_element_check_00533', () async {
      print("\n********** テスト実行：00556_element_check_00533 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers04;
      print(sys.boot_webplus_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers04 = testData1s;
      print(sys.boot_webplus_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers04 = testData2s;
      print(sys.boot_webplus_desktop.drivers04);
      expect(sys.boot_webplus_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers04 = defalut;
      print(sys.boot_webplus_desktop.drivers04);
      expect(sys.boot_webplus_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00556_element_check_00533 **********\n\n");
    });

    test('00557_element_check_00534', () async {
      print("\n********** テスト実行：00557_element_check_00534 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers05;
      print(sys.boot_webplus_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers05 = testData1s;
      print(sys.boot_webplus_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers05 = testData2s;
      print(sys.boot_webplus_desktop.drivers05);
      expect(sys.boot_webplus_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers05 = defalut;
      print(sys.boot_webplus_desktop.drivers05);
      expect(sys.boot_webplus_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00557_element_check_00534 **********\n\n");
    });

    test('00558_element_check_00535', () async {
      print("\n********** テスト実行：00558_element_check_00535 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers06;
      print(sys.boot_webplus_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers06 = testData1s;
      print(sys.boot_webplus_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers06 = testData2s;
      print(sys.boot_webplus_desktop.drivers06);
      expect(sys.boot_webplus_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers06 = defalut;
      print(sys.boot_webplus_desktop.drivers06);
      expect(sys.boot_webplus_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00558_element_check_00535 **********\n\n");
    });

    test('00559_element_check_00536', () async {
      print("\n********** テスト実行：00559_element_check_00536 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers07;
      print(sys.boot_webplus_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers07 = testData1s;
      print(sys.boot_webplus_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers07 = testData2s;
      print(sys.boot_webplus_desktop.drivers07);
      expect(sys.boot_webplus_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers07 = defalut;
      print(sys.boot_webplus_desktop.drivers07);
      expect(sys.boot_webplus_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00559_element_check_00536 **********\n\n");
    });

    test('00560_element_check_00537', () async {
      print("\n********** テスト実行：00560_element_check_00537 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers08;
      print(sys.boot_webplus_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers08 = testData1s;
      print(sys.boot_webplus_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers08 = testData2s;
      print(sys.boot_webplus_desktop.drivers08);
      expect(sys.boot_webplus_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers08 = defalut;
      print(sys.boot_webplus_desktop.drivers08);
      expect(sys.boot_webplus_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00560_element_check_00537 **********\n\n");
    });

    test('00561_element_check_00538', () async {
      print("\n********** テスト実行：00561_element_check_00538 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers09;
      print(sys.boot_webplus_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers09 = testData1s;
      print(sys.boot_webplus_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers09 = testData2s;
      print(sys.boot_webplus_desktop.drivers09);
      expect(sys.boot_webplus_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers09 = defalut;
      print(sys.boot_webplus_desktop.drivers09);
      expect(sys.boot_webplus_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00561_element_check_00538 **********\n\n");
    });

    test('00562_element_check_00539', () async {
      print("\n********** テスト実行：00562_element_check_00539 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers10;
      print(sys.boot_webplus_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers10 = testData1s;
      print(sys.boot_webplus_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers10 = testData2s;
      print(sys.boot_webplus_desktop.drivers10);
      expect(sys.boot_webplus_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers10 = defalut;
      print(sys.boot_webplus_desktop.drivers10);
      expect(sys.boot_webplus_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00562_element_check_00539 **********\n\n");
    });

    test('00563_element_check_00540', () async {
      print("\n********** テスト実行：00563_element_check_00540 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers11;
      print(sys.boot_webplus_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers11 = testData1s;
      print(sys.boot_webplus_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers11 = testData2s;
      print(sys.boot_webplus_desktop.drivers11);
      expect(sys.boot_webplus_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers11 = defalut;
      print(sys.boot_webplus_desktop.drivers11);
      expect(sys.boot_webplus_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00563_element_check_00540 **********\n\n");
    });

    test('00564_element_check_00541', () async {
      print("\n********** テスト実行：00564_element_check_00541 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers12;
      print(sys.boot_webplus_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers12 = testData1s;
      print(sys.boot_webplus_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers12 = testData2s;
      print(sys.boot_webplus_desktop.drivers12);
      expect(sys.boot_webplus_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers12 = defalut;
      print(sys.boot_webplus_desktop.drivers12);
      expect(sys.boot_webplus_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00564_element_check_00541 **********\n\n");
    });

    test('00565_element_check_00542', () async {
      print("\n********** テスト実行：00565_element_check_00542 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers13;
      print(sys.boot_webplus_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers13 = testData1s;
      print(sys.boot_webplus_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers13 = testData2s;
      print(sys.boot_webplus_desktop.drivers13);
      expect(sys.boot_webplus_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers13 = defalut;
      print(sys.boot_webplus_desktop.drivers13);
      expect(sys.boot_webplus_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00565_element_check_00542 **********\n\n");
    });

    test('00566_element_check_00543', () async {
      print("\n********** テスト実行：00566_element_check_00543 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers14;
      print(sys.boot_webplus_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers14 = testData1s;
      print(sys.boot_webplus_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers14 = testData2s;
      print(sys.boot_webplus_desktop.drivers14);
      expect(sys.boot_webplus_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers14 = defalut;
      print(sys.boot_webplus_desktop.drivers14);
      expect(sys.boot_webplus_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00566_element_check_00543 **********\n\n");
    });

    test('00567_element_check_00544', () async {
      print("\n********** テスト実行：00567_element_check_00544 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers15;
      print(sys.boot_webplus_desktop.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers15 = testData1s;
      print(sys.boot_webplus_desktop.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers15 = testData2s;
      print(sys.boot_webplus_desktop.drivers15);
      expect(sys.boot_webplus_desktop.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers15 = defalut;
      print(sys.boot_webplus_desktop.drivers15);
      expect(sys.boot_webplus_desktop.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00567_element_check_00544 **********\n\n");
    });

    test('00568_element_check_00545', () async {
      print("\n********** テスト実行：00568_element_check_00545 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers16;
      print(sys.boot_webplus_desktop.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers16 = testData1s;
      print(sys.boot_webplus_desktop.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers16 = testData2s;
      print(sys.boot_webplus_desktop.drivers16);
      expect(sys.boot_webplus_desktop.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers16 = defalut;
      print(sys.boot_webplus_desktop.drivers16);
      expect(sys.boot_webplus_desktop.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00568_element_check_00545 **********\n\n");
    });

    test('00569_element_check_00546', () async {
      print("\n********** テスト実行：00569_element_check_00546 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers36;
      print(sys.boot_webplus_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers36 = testData1s;
      print(sys.boot_webplus_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers36 = testData2s;
      print(sys.boot_webplus_desktop.drivers36);
      expect(sys.boot_webplus_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers36 = defalut;
      print(sys.boot_webplus_desktop.drivers36);
      expect(sys.boot_webplus_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00569_element_check_00546 **********\n\n");
    });

    test('00570_element_check_00547', () async {
      print("\n********** テスト実行：00570_element_check_00547 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers37;
      print(sys.boot_webplus_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers37 = testData1s;
      print(sys.boot_webplus_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers37 = testData2s;
      print(sys.boot_webplus_desktop.drivers37);
      expect(sys.boot_webplus_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers37 = defalut;
      print(sys.boot_webplus_desktop.drivers37);
      expect(sys.boot_webplus_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00570_element_check_00547 **********\n\n");
    });

    test('00571_element_check_00548', () async {
      print("\n********** テスト実行：00571_element_check_00548 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers38;
      print(sys.boot_webplus_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers38 = testData1s;
      print(sys.boot_webplus_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers38 = testData2s;
      print(sys.boot_webplus_desktop.drivers38);
      expect(sys.boot_webplus_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers38 = defalut;
      print(sys.boot_webplus_desktop.drivers38);
      expect(sys.boot_webplus_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00571_element_check_00548 **********\n\n");
    });

    test('00572_element_check_00549', () async {
      print("\n********** テスト実行：00572_element_check_00549 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_webplus_desktop.drivers39;
      print(sys.boot_webplus_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_webplus_desktop.drivers39 = testData1s;
      print(sys.boot_webplus_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_webplus_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_webplus_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_webplus_desktop.drivers39 = testData2s;
      print(sys.boot_webplus_desktop.drivers39);
      expect(sys.boot_webplus_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_webplus_desktop.drivers39 = defalut;
      print(sys.boot_webplus_desktop.drivers39);
      expect(sys.boot_webplus_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_webplus_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00572_element_check_00549 **********\n\n");
    });

    test('00573_element_check_00550', () async {
      print("\n********** テスト実行：00573_element_check_00550 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers01;
      print(sys.boot_dual_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers01 = testData1s;
      print(sys.boot_dual_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers01 = testData2s;
      print(sys.boot_dual_tower.drivers01);
      expect(sys.boot_dual_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers01 = defalut;
      print(sys.boot_dual_tower.drivers01);
      expect(sys.boot_dual_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00573_element_check_00550 **********\n\n");
    });

    test('00574_element_check_00551', () async {
      print("\n********** テスト実行：00574_element_check_00551 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers02;
      print(sys.boot_dual_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers02 = testData1s;
      print(sys.boot_dual_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers02 = testData2s;
      print(sys.boot_dual_tower.drivers02);
      expect(sys.boot_dual_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers02 = defalut;
      print(sys.boot_dual_tower.drivers02);
      expect(sys.boot_dual_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00574_element_check_00551 **********\n\n");
    });

    test('00575_element_check_00552', () async {
      print("\n********** テスト実行：00575_element_check_00552 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers03;
      print(sys.boot_dual_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers03 = testData1s;
      print(sys.boot_dual_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers03 = testData2s;
      print(sys.boot_dual_tower.drivers03);
      expect(sys.boot_dual_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers03 = defalut;
      print(sys.boot_dual_tower.drivers03);
      expect(sys.boot_dual_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00575_element_check_00552 **********\n\n");
    });

    test('00576_element_check_00553', () async {
      print("\n********** テスト実行：00576_element_check_00553 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers04;
      print(sys.boot_dual_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers04 = testData1s;
      print(sys.boot_dual_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers04 = testData2s;
      print(sys.boot_dual_tower.drivers04);
      expect(sys.boot_dual_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers04 = defalut;
      print(sys.boot_dual_tower.drivers04);
      expect(sys.boot_dual_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00576_element_check_00553 **********\n\n");
    });

    test('00577_element_check_00554', () async {
      print("\n********** テスト実行：00577_element_check_00554 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers05;
      print(sys.boot_dual_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers05 = testData1s;
      print(sys.boot_dual_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers05 = testData2s;
      print(sys.boot_dual_tower.drivers05);
      expect(sys.boot_dual_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers05 = defalut;
      print(sys.boot_dual_tower.drivers05);
      expect(sys.boot_dual_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00577_element_check_00554 **********\n\n");
    });

    test('00578_element_check_00555', () async {
      print("\n********** テスト実行：00578_element_check_00555 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers06;
      print(sys.boot_dual_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers06 = testData1s;
      print(sys.boot_dual_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers06 = testData2s;
      print(sys.boot_dual_tower.drivers06);
      expect(sys.boot_dual_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers06 = defalut;
      print(sys.boot_dual_tower.drivers06);
      expect(sys.boot_dual_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00578_element_check_00555 **********\n\n");
    });

    test('00579_element_check_00556', () async {
      print("\n********** テスト実行：00579_element_check_00556 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers07;
      print(sys.boot_dual_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers07 = testData1s;
      print(sys.boot_dual_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers07 = testData2s;
      print(sys.boot_dual_tower.drivers07);
      expect(sys.boot_dual_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers07 = defalut;
      print(sys.boot_dual_tower.drivers07);
      expect(sys.boot_dual_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00579_element_check_00556 **********\n\n");
    });

    test('00580_element_check_00557', () async {
      print("\n********** テスト実行：00580_element_check_00557 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers08;
      print(sys.boot_dual_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers08 = testData1s;
      print(sys.boot_dual_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers08 = testData2s;
      print(sys.boot_dual_tower.drivers08);
      expect(sys.boot_dual_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers08 = defalut;
      print(sys.boot_dual_tower.drivers08);
      expect(sys.boot_dual_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00580_element_check_00557 **********\n\n");
    });

    test('00581_element_check_00558', () async {
      print("\n********** テスト実行：00581_element_check_00558 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers09;
      print(sys.boot_dual_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers09 = testData1s;
      print(sys.boot_dual_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers09 = testData2s;
      print(sys.boot_dual_tower.drivers09);
      expect(sys.boot_dual_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers09 = defalut;
      print(sys.boot_dual_tower.drivers09);
      expect(sys.boot_dual_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00581_element_check_00558 **********\n\n");
    });

    test('00582_element_check_00559', () async {
      print("\n********** テスト実行：00582_element_check_00559 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers10;
      print(sys.boot_dual_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers10 = testData1s;
      print(sys.boot_dual_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers10 = testData2s;
      print(sys.boot_dual_tower.drivers10);
      expect(sys.boot_dual_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers10 = defalut;
      print(sys.boot_dual_tower.drivers10);
      expect(sys.boot_dual_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00582_element_check_00559 **********\n\n");
    });

    test('00583_element_check_00560', () async {
      print("\n********** テスト実行：00583_element_check_00560 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers11;
      print(sys.boot_dual_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers11 = testData1s;
      print(sys.boot_dual_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers11 = testData2s;
      print(sys.boot_dual_tower.drivers11);
      expect(sys.boot_dual_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers11 = defalut;
      print(sys.boot_dual_tower.drivers11);
      expect(sys.boot_dual_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00583_element_check_00560 **********\n\n");
    });

    test('00584_element_check_00561', () async {
      print("\n********** テスト実行：00584_element_check_00561 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers12;
      print(sys.boot_dual_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers12 = testData1s;
      print(sys.boot_dual_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers12 = testData2s;
      print(sys.boot_dual_tower.drivers12);
      expect(sys.boot_dual_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers12 = defalut;
      print(sys.boot_dual_tower.drivers12);
      expect(sys.boot_dual_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00584_element_check_00561 **********\n\n");
    });

    test('00585_element_check_00562', () async {
      print("\n********** テスト実行：00585_element_check_00562 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers13;
      print(sys.boot_dual_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers13 = testData1s;
      print(sys.boot_dual_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers13 = testData2s;
      print(sys.boot_dual_tower.drivers13);
      expect(sys.boot_dual_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers13 = defalut;
      print(sys.boot_dual_tower.drivers13);
      expect(sys.boot_dual_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00585_element_check_00562 **********\n\n");
    });

    test('00586_element_check_00563', () async {
      print("\n********** テスト実行：00586_element_check_00563 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers14;
      print(sys.boot_dual_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers14 = testData1s;
      print(sys.boot_dual_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers14 = testData2s;
      print(sys.boot_dual_tower.drivers14);
      expect(sys.boot_dual_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers14 = defalut;
      print(sys.boot_dual_tower.drivers14);
      expect(sys.boot_dual_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00586_element_check_00563 **********\n\n");
    });

    test('00587_element_check_00564', () async {
      print("\n********** テスト実行：00587_element_check_00564 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers15;
      print(sys.boot_dual_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers15 = testData1s;
      print(sys.boot_dual_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers15 = testData2s;
      print(sys.boot_dual_tower.drivers15);
      expect(sys.boot_dual_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers15 = defalut;
      print(sys.boot_dual_tower.drivers15);
      expect(sys.boot_dual_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00587_element_check_00564 **********\n\n");
    });

    test('00588_element_check_00565', () async {
      print("\n********** テスト実行：00588_element_check_00565 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers16;
      print(sys.boot_dual_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers16 = testData1s;
      print(sys.boot_dual_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers16 = testData2s;
      print(sys.boot_dual_tower.drivers16);
      expect(sys.boot_dual_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers16 = defalut;
      print(sys.boot_dual_tower.drivers16);
      expect(sys.boot_dual_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00588_element_check_00565 **********\n\n");
    });

    test('00589_element_check_00566', () async {
      print("\n********** テスト実行：00589_element_check_00566 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers17;
      print(sys.boot_dual_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers17 = testData1s;
      print(sys.boot_dual_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers17 = testData2s;
      print(sys.boot_dual_tower.drivers17);
      expect(sys.boot_dual_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers17 = defalut;
      print(sys.boot_dual_tower.drivers17);
      expect(sys.boot_dual_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00589_element_check_00566 **********\n\n");
    });

    test('00590_element_check_00567', () async {
      print("\n********** テスト実行：00590_element_check_00567 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers18;
      print(sys.boot_dual_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers18 = testData1s;
      print(sys.boot_dual_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers18 = testData2s;
      print(sys.boot_dual_tower.drivers18);
      expect(sys.boot_dual_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers18 = defalut;
      print(sys.boot_dual_tower.drivers18);
      expect(sys.boot_dual_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00590_element_check_00567 **********\n\n");
    });

    test('00591_element_check_00568', () async {
      print("\n********** テスト実行：00591_element_check_00568 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers19;
      print(sys.boot_dual_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers19 = testData1s;
      print(sys.boot_dual_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers19 = testData2s;
      print(sys.boot_dual_tower.drivers19);
      expect(sys.boot_dual_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers19 = defalut;
      print(sys.boot_dual_tower.drivers19);
      expect(sys.boot_dual_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00591_element_check_00568 **********\n\n");
    });

    test('00592_element_check_00569', () async {
      print("\n********** テスト実行：00592_element_check_00569 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers20;
      print(sys.boot_dual_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers20 = testData1s;
      print(sys.boot_dual_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers20 = testData2s;
      print(sys.boot_dual_tower.drivers20);
      expect(sys.boot_dual_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers20 = defalut;
      print(sys.boot_dual_tower.drivers20);
      expect(sys.boot_dual_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00592_element_check_00569 **********\n\n");
    });

    test('00593_element_check_00570', () async {
      print("\n********** テスト実行：00593_element_check_00570 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers21;
      print(sys.boot_dual_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers21 = testData1s;
      print(sys.boot_dual_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers21 = testData2s;
      print(sys.boot_dual_tower.drivers21);
      expect(sys.boot_dual_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers21 = defalut;
      print(sys.boot_dual_tower.drivers21);
      expect(sys.boot_dual_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00593_element_check_00570 **********\n\n");
    });

    test('00594_element_check_00571', () async {
      print("\n********** テスト実行：00594_element_check_00571 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers22;
      print(sys.boot_dual_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers22 = testData1s;
      print(sys.boot_dual_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers22 = testData2s;
      print(sys.boot_dual_tower.drivers22);
      expect(sys.boot_dual_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers22 = defalut;
      print(sys.boot_dual_tower.drivers22);
      expect(sys.boot_dual_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00594_element_check_00571 **********\n\n");
    });

    test('00595_element_check_00572', () async {
      print("\n********** テスト実行：00595_element_check_00572 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers23;
      print(sys.boot_dual_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers23 = testData1s;
      print(sys.boot_dual_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers23 = testData2s;
      print(sys.boot_dual_tower.drivers23);
      expect(sys.boot_dual_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers23 = defalut;
      print(sys.boot_dual_tower.drivers23);
      expect(sys.boot_dual_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00595_element_check_00572 **********\n\n");
    });

    test('00596_element_check_00573', () async {
      print("\n********** テスト実行：00596_element_check_00573 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers24;
      print(sys.boot_dual_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers24 = testData1s;
      print(sys.boot_dual_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers24 = testData2s;
      print(sys.boot_dual_tower.drivers24);
      expect(sys.boot_dual_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers24 = defalut;
      print(sys.boot_dual_tower.drivers24);
      expect(sys.boot_dual_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00596_element_check_00573 **********\n\n");
    });

    test('00597_element_check_00574', () async {
      print("\n********** テスト実行：00597_element_check_00574 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers25;
      print(sys.boot_dual_tower.drivers25);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers25 = testData1s;
      print(sys.boot_dual_tower.drivers25);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers25 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers25 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers25 = testData2s;
      print(sys.boot_dual_tower.drivers25);
      expect(sys.boot_dual_tower.drivers25 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers25 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers25 = defalut;
      print(sys.boot_dual_tower.drivers25);
      expect(sys.boot_dual_tower.drivers25 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers25 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00597_element_check_00574 **********\n\n");
    });

    test('00598_element_check_00575', () async {
      print("\n********** テスト実行：00598_element_check_00575 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers26;
      print(sys.boot_dual_tower.drivers26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers26 = testData1s;
      print(sys.boot_dual_tower.drivers26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers26 = testData2s;
      print(sys.boot_dual_tower.drivers26);
      expect(sys.boot_dual_tower.drivers26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers26 = defalut;
      print(sys.boot_dual_tower.drivers26);
      expect(sys.boot_dual_tower.drivers26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00598_element_check_00575 **********\n\n");
    });

    test('00599_element_check_00576', () async {
      print("\n********** テスト実行：00599_element_check_00576 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers27;
      print(sys.boot_dual_tower.drivers27);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers27 = testData1s;
      print(sys.boot_dual_tower.drivers27);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers27 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers27 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers27 = testData2s;
      print(sys.boot_dual_tower.drivers27);
      expect(sys.boot_dual_tower.drivers27 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers27 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers27 = defalut;
      print(sys.boot_dual_tower.drivers27);
      expect(sys.boot_dual_tower.drivers27 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers27 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00599_element_check_00576 **********\n\n");
    });

    test('00600_element_check_00577', () async {
      print("\n********** テスト実行：00600_element_check_00577 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers28;
      print(sys.boot_dual_tower.drivers28);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers28 = testData1s;
      print(sys.boot_dual_tower.drivers28);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers28 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers28 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers28 = testData2s;
      print(sys.boot_dual_tower.drivers28);
      expect(sys.boot_dual_tower.drivers28 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers28 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers28 = defalut;
      print(sys.boot_dual_tower.drivers28);
      expect(sys.boot_dual_tower.drivers28 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers28 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00600_element_check_00577 **********\n\n");
    });

    test('00601_element_check_00578', () async {
      print("\n********** テスト実行：00601_element_check_00578 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers29;
      print(sys.boot_dual_tower.drivers29);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers29 = testData1s;
      print(sys.boot_dual_tower.drivers29);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers29 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers29 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers29 = testData2s;
      print(sys.boot_dual_tower.drivers29);
      expect(sys.boot_dual_tower.drivers29 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers29 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers29 = defalut;
      print(sys.boot_dual_tower.drivers29);
      expect(sys.boot_dual_tower.drivers29 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers29 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00601_element_check_00578 **********\n\n");
    });

    test('00602_element_check_00579', () async {
      print("\n********** テスト実行：00602_element_check_00579 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers30;
      print(sys.boot_dual_tower.drivers30);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers30 = testData1s;
      print(sys.boot_dual_tower.drivers30);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers30 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers30 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers30 = testData2s;
      print(sys.boot_dual_tower.drivers30);
      expect(sys.boot_dual_tower.drivers30 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers30 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers30 = defalut;
      print(sys.boot_dual_tower.drivers30);
      expect(sys.boot_dual_tower.drivers30 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers30 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00602_element_check_00579 **********\n\n");
    });

    test('00603_element_check_00580', () async {
      print("\n********** テスト実行：00603_element_check_00580 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers31;
      print(sys.boot_dual_tower.drivers31);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers31 = testData1s;
      print(sys.boot_dual_tower.drivers31);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers31 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers31 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers31 = testData2s;
      print(sys.boot_dual_tower.drivers31);
      expect(sys.boot_dual_tower.drivers31 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers31 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers31 = defalut;
      print(sys.boot_dual_tower.drivers31);
      expect(sys.boot_dual_tower.drivers31 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers31 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00603_element_check_00580 **********\n\n");
    });

    test('00604_element_check_00581', () async {
      print("\n********** テスト実行：00604_element_check_00581 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers32;
      print(sys.boot_dual_tower.drivers32);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers32 = testData1s;
      print(sys.boot_dual_tower.drivers32);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers32 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers32 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers32 = testData2s;
      print(sys.boot_dual_tower.drivers32);
      expect(sys.boot_dual_tower.drivers32 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers32 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers32 = defalut;
      print(sys.boot_dual_tower.drivers32);
      expect(sys.boot_dual_tower.drivers32 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers32 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00604_element_check_00581 **********\n\n");
    });

    test('00605_element_check_00582', () async {
      print("\n********** テスト実行：00605_element_check_00582 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers36;
      print(sys.boot_dual_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers36 = testData1s;
      print(sys.boot_dual_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers36 = testData2s;
      print(sys.boot_dual_tower.drivers36);
      expect(sys.boot_dual_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers36 = defalut;
      print(sys.boot_dual_tower.drivers36);
      expect(sys.boot_dual_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00605_element_check_00582 **********\n\n");
    });

    test('00606_element_check_00583', () async {
      print("\n********** テスト実行：00606_element_check_00583 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers37;
      print(sys.boot_dual_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers37 = testData1s;
      print(sys.boot_dual_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers37 = testData2s;
      print(sys.boot_dual_tower.drivers37);
      expect(sys.boot_dual_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers37 = defalut;
      print(sys.boot_dual_tower.drivers37);
      expect(sys.boot_dual_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00606_element_check_00583 **********\n\n");
    });

    test('00607_element_check_00584', () async {
      print("\n********** テスト実行：00607_element_check_00584 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers38;
      print(sys.boot_dual_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers38 = testData1s;
      print(sys.boot_dual_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers38 = testData2s;
      print(sys.boot_dual_tower.drivers38);
      expect(sys.boot_dual_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers38 = defalut;
      print(sys.boot_dual_tower.drivers38);
      expect(sys.boot_dual_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00607_element_check_00584 **********\n\n");
    });

    test('00608_element_check_00585', () async {
      print("\n********** テスト実行：00608_element_check_00585 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_tower.drivers39;
      print(sys.boot_dual_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_tower.drivers39 = testData1s;
      print(sys.boot_dual_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_tower.drivers39 = testData2s;
      print(sys.boot_dual_tower.drivers39);
      expect(sys.boot_dual_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_tower.drivers39 = defalut;
      print(sys.boot_dual_tower.drivers39);
      expect(sys.boot_dual_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00608_element_check_00585 **********\n\n");
    });

    test('00609_element_check_00586', () async {
      print("\n********** テスト実行：00609_element_check_00586 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers01;
      print(sys.boot_dual_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers01 = testData1s;
      print(sys.boot_dual_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers01 = testData2s;
      print(sys.boot_dual_desktop.drivers01);
      expect(sys.boot_dual_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers01 = defalut;
      print(sys.boot_dual_desktop.drivers01);
      expect(sys.boot_dual_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00609_element_check_00586 **********\n\n");
    });

    test('00610_element_check_00587', () async {
      print("\n********** テスト実行：00610_element_check_00587 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers02;
      print(sys.boot_dual_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers02 = testData1s;
      print(sys.boot_dual_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers02 = testData2s;
      print(sys.boot_dual_desktop.drivers02);
      expect(sys.boot_dual_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers02 = defalut;
      print(sys.boot_dual_desktop.drivers02);
      expect(sys.boot_dual_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00610_element_check_00587 **********\n\n");
    });

    test('00611_element_check_00588', () async {
      print("\n********** テスト実行：00611_element_check_00588 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers03;
      print(sys.boot_dual_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers03 = testData1s;
      print(sys.boot_dual_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers03 = testData2s;
      print(sys.boot_dual_desktop.drivers03);
      expect(sys.boot_dual_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers03 = defalut;
      print(sys.boot_dual_desktop.drivers03);
      expect(sys.boot_dual_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00611_element_check_00588 **********\n\n");
    });

    test('00612_element_check_00589', () async {
      print("\n********** テスト実行：00612_element_check_00589 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers04;
      print(sys.boot_dual_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers04 = testData1s;
      print(sys.boot_dual_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers04 = testData2s;
      print(sys.boot_dual_desktop.drivers04);
      expect(sys.boot_dual_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers04 = defalut;
      print(sys.boot_dual_desktop.drivers04);
      expect(sys.boot_dual_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00612_element_check_00589 **********\n\n");
    });

    test('00613_element_check_00590', () async {
      print("\n********** テスト実行：00613_element_check_00590 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers05;
      print(sys.boot_dual_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers05 = testData1s;
      print(sys.boot_dual_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers05 = testData2s;
      print(sys.boot_dual_desktop.drivers05);
      expect(sys.boot_dual_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers05 = defalut;
      print(sys.boot_dual_desktop.drivers05);
      expect(sys.boot_dual_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00613_element_check_00590 **********\n\n");
    });

    test('00614_element_check_00591', () async {
      print("\n********** テスト実行：00614_element_check_00591 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers06;
      print(sys.boot_dual_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers06 = testData1s;
      print(sys.boot_dual_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers06 = testData2s;
      print(sys.boot_dual_desktop.drivers06);
      expect(sys.boot_dual_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers06 = defalut;
      print(sys.boot_dual_desktop.drivers06);
      expect(sys.boot_dual_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00614_element_check_00591 **********\n\n");
    });

    test('00615_element_check_00592', () async {
      print("\n********** テスト実行：00615_element_check_00592 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers07;
      print(sys.boot_dual_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers07 = testData1s;
      print(sys.boot_dual_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers07 = testData2s;
      print(sys.boot_dual_desktop.drivers07);
      expect(sys.boot_dual_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers07 = defalut;
      print(sys.boot_dual_desktop.drivers07);
      expect(sys.boot_dual_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00615_element_check_00592 **********\n\n");
    });

    test('00616_element_check_00593', () async {
      print("\n********** テスト実行：00616_element_check_00593 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers08;
      print(sys.boot_dual_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers08 = testData1s;
      print(sys.boot_dual_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers08 = testData2s;
      print(sys.boot_dual_desktop.drivers08);
      expect(sys.boot_dual_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers08 = defalut;
      print(sys.boot_dual_desktop.drivers08);
      expect(sys.boot_dual_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00616_element_check_00593 **********\n\n");
    });

    test('00617_element_check_00594', () async {
      print("\n********** テスト実行：00617_element_check_00594 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers09;
      print(sys.boot_dual_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers09 = testData1s;
      print(sys.boot_dual_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers09 = testData2s;
      print(sys.boot_dual_desktop.drivers09);
      expect(sys.boot_dual_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers09 = defalut;
      print(sys.boot_dual_desktop.drivers09);
      expect(sys.boot_dual_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00617_element_check_00594 **********\n\n");
    });

    test('00618_element_check_00595', () async {
      print("\n********** テスト実行：00618_element_check_00595 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers10;
      print(sys.boot_dual_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers10 = testData1s;
      print(sys.boot_dual_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers10 = testData2s;
      print(sys.boot_dual_desktop.drivers10);
      expect(sys.boot_dual_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers10 = defalut;
      print(sys.boot_dual_desktop.drivers10);
      expect(sys.boot_dual_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00618_element_check_00595 **********\n\n");
    });

    test('00619_element_check_00596', () async {
      print("\n********** テスト実行：00619_element_check_00596 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers11;
      print(sys.boot_dual_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers11 = testData1s;
      print(sys.boot_dual_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers11 = testData2s;
      print(sys.boot_dual_desktop.drivers11);
      expect(sys.boot_dual_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers11 = defalut;
      print(sys.boot_dual_desktop.drivers11);
      expect(sys.boot_dual_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00619_element_check_00596 **********\n\n");
    });

    test('00620_element_check_00597', () async {
      print("\n********** テスト実行：00620_element_check_00597 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers12;
      print(sys.boot_dual_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers12 = testData1s;
      print(sys.boot_dual_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers12 = testData2s;
      print(sys.boot_dual_desktop.drivers12);
      expect(sys.boot_dual_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers12 = defalut;
      print(sys.boot_dual_desktop.drivers12);
      expect(sys.boot_dual_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00620_element_check_00597 **********\n\n");
    });

    test('00621_element_check_00598', () async {
      print("\n********** テスト実行：00621_element_check_00598 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers13;
      print(sys.boot_dual_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers13 = testData1s;
      print(sys.boot_dual_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers13 = testData2s;
      print(sys.boot_dual_desktop.drivers13);
      expect(sys.boot_dual_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers13 = defalut;
      print(sys.boot_dual_desktop.drivers13);
      expect(sys.boot_dual_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00621_element_check_00598 **********\n\n");
    });

    test('00622_element_check_00599', () async {
      print("\n********** テスト実行：00622_element_check_00599 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers14;
      print(sys.boot_dual_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers14 = testData1s;
      print(sys.boot_dual_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers14 = testData2s;
      print(sys.boot_dual_desktop.drivers14);
      expect(sys.boot_dual_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers14 = defalut;
      print(sys.boot_dual_desktop.drivers14);
      expect(sys.boot_dual_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00622_element_check_00599 **********\n\n");
    });

    test('00623_element_check_00600', () async {
      print("\n********** テスト実行：00623_element_check_00600 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers15;
      print(sys.boot_dual_desktop.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers15 = testData1s;
      print(sys.boot_dual_desktop.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers15 = testData2s;
      print(sys.boot_dual_desktop.drivers15);
      expect(sys.boot_dual_desktop.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers15 = defalut;
      print(sys.boot_dual_desktop.drivers15);
      expect(sys.boot_dual_desktop.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00623_element_check_00600 **********\n\n");
    });

    test('00624_element_check_00601', () async {
      print("\n********** テスト実行：00624_element_check_00601 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers16;
      print(sys.boot_dual_desktop.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers16 = testData1s;
      print(sys.boot_dual_desktop.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers16 = testData2s;
      print(sys.boot_dual_desktop.drivers16);
      expect(sys.boot_dual_desktop.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers16 = defalut;
      print(sys.boot_dual_desktop.drivers16);
      expect(sys.boot_dual_desktop.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00624_element_check_00601 **********\n\n");
    });

    test('00625_element_check_00602', () async {
      print("\n********** テスト実行：00625_element_check_00602 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers17;
      print(sys.boot_dual_desktop.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers17 = testData1s;
      print(sys.boot_dual_desktop.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers17 = testData2s;
      print(sys.boot_dual_desktop.drivers17);
      expect(sys.boot_dual_desktop.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers17 = defalut;
      print(sys.boot_dual_desktop.drivers17);
      expect(sys.boot_dual_desktop.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00625_element_check_00602 **********\n\n");
    });

    test('00626_element_check_00603', () async {
      print("\n********** テスト実行：00626_element_check_00603 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers18;
      print(sys.boot_dual_desktop.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers18 = testData1s;
      print(sys.boot_dual_desktop.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers18 = testData2s;
      print(sys.boot_dual_desktop.drivers18);
      expect(sys.boot_dual_desktop.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers18 = defalut;
      print(sys.boot_dual_desktop.drivers18);
      expect(sys.boot_dual_desktop.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00626_element_check_00603 **********\n\n");
    });

    test('00627_element_check_00604', () async {
      print("\n********** テスト実行：00627_element_check_00604 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers19;
      print(sys.boot_dual_desktop.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers19 = testData1s;
      print(sys.boot_dual_desktop.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers19 = testData2s;
      print(sys.boot_dual_desktop.drivers19);
      expect(sys.boot_dual_desktop.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers19 = defalut;
      print(sys.boot_dual_desktop.drivers19);
      expect(sys.boot_dual_desktop.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00627_element_check_00604 **********\n\n");
    });

    test('00628_element_check_00605', () async {
      print("\n********** テスト実行：00628_element_check_00605 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers20;
      print(sys.boot_dual_desktop.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers20 = testData1s;
      print(sys.boot_dual_desktop.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers20 = testData2s;
      print(sys.boot_dual_desktop.drivers20);
      expect(sys.boot_dual_desktop.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers20 = defalut;
      print(sys.boot_dual_desktop.drivers20);
      expect(sys.boot_dual_desktop.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00628_element_check_00605 **********\n\n");
    });

    test('00629_element_check_00606', () async {
      print("\n********** テスト実行：00629_element_check_00606 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers21;
      print(sys.boot_dual_desktop.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers21 = testData1s;
      print(sys.boot_dual_desktop.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers21 = testData2s;
      print(sys.boot_dual_desktop.drivers21);
      expect(sys.boot_dual_desktop.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers21 = defalut;
      print(sys.boot_dual_desktop.drivers21);
      expect(sys.boot_dual_desktop.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00629_element_check_00606 **********\n\n");
    });

    test('00630_element_check_00607', () async {
      print("\n********** テスト実行：00630_element_check_00607 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers22;
      print(sys.boot_dual_desktop.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers22 = testData1s;
      print(sys.boot_dual_desktop.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers22 = testData2s;
      print(sys.boot_dual_desktop.drivers22);
      expect(sys.boot_dual_desktop.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers22 = defalut;
      print(sys.boot_dual_desktop.drivers22);
      expect(sys.boot_dual_desktop.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00630_element_check_00607 **********\n\n");
    });

    test('00631_element_check_00608', () async {
      print("\n********** テスト実行：00631_element_check_00608 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers23;
      print(sys.boot_dual_desktop.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers23 = testData1s;
      print(sys.boot_dual_desktop.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers23 = testData2s;
      print(sys.boot_dual_desktop.drivers23);
      expect(sys.boot_dual_desktop.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers23 = defalut;
      print(sys.boot_dual_desktop.drivers23);
      expect(sys.boot_dual_desktop.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00631_element_check_00608 **********\n\n");
    });

    test('00632_element_check_00609', () async {
      print("\n********** テスト実行：00632_element_check_00609 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers24;
      print(sys.boot_dual_desktop.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers24 = testData1s;
      print(sys.boot_dual_desktop.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers24 = testData2s;
      print(sys.boot_dual_desktop.drivers24);
      expect(sys.boot_dual_desktop.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers24 = defalut;
      print(sys.boot_dual_desktop.drivers24);
      expect(sys.boot_dual_desktop.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00632_element_check_00609 **********\n\n");
    });

    test('00633_element_check_00610', () async {
      print("\n********** テスト実行：00633_element_check_00610 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers36;
      print(sys.boot_dual_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers36 = testData1s;
      print(sys.boot_dual_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers36 = testData2s;
      print(sys.boot_dual_desktop.drivers36);
      expect(sys.boot_dual_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers36 = defalut;
      print(sys.boot_dual_desktop.drivers36);
      expect(sys.boot_dual_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00633_element_check_00610 **********\n\n");
    });

    test('00634_element_check_00611', () async {
      print("\n********** テスト実行：00634_element_check_00611 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers37;
      print(sys.boot_dual_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers37 = testData1s;
      print(sys.boot_dual_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers37 = testData2s;
      print(sys.boot_dual_desktop.drivers37);
      expect(sys.boot_dual_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers37 = defalut;
      print(sys.boot_dual_desktop.drivers37);
      expect(sys.boot_dual_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00634_element_check_00611 **********\n\n");
    });

    test('00635_element_check_00612', () async {
      print("\n********** テスト実行：00635_element_check_00612 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers38;
      print(sys.boot_dual_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers38 = testData1s;
      print(sys.boot_dual_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers38 = testData2s;
      print(sys.boot_dual_desktop.drivers38);
      expect(sys.boot_dual_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers38 = defalut;
      print(sys.boot_dual_desktop.drivers38);
      expect(sys.boot_dual_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00635_element_check_00612 **********\n\n");
    });

    test('00636_element_check_00613', () async {
      print("\n********** テスト実行：00636_element_check_00613 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_dual_desktop.drivers39;
      print(sys.boot_dual_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_dual_desktop.drivers39 = testData1s;
      print(sys.boot_dual_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_dual_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_dual_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_dual_desktop.drivers39 = testData2s;
      print(sys.boot_dual_desktop.drivers39);
      expect(sys.boot_dual_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_dual_desktop.drivers39 = defalut;
      print(sys.boot_dual_desktop.drivers39);
      expect(sys.boot_dual_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_dual_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00636_element_check_00613 **********\n\n");
    });

    test('00637_element_check_00614', () async {
      print("\n********** テスト実行：00637_element_check_00614 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers01;
      print(sys.boot_jr.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers01 = testData1s;
      print(sys.boot_jr.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers01 = testData2s;
      print(sys.boot_jr.drivers01);
      expect(sys.boot_jr.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers01 = defalut;
      print(sys.boot_jr.drivers01);
      expect(sys.boot_jr.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00637_element_check_00614 **********\n\n");
    });

    test('00638_element_check_00615', () async {
      print("\n********** テスト実行：00638_element_check_00615 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers02;
      print(sys.boot_jr.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers02 = testData1s;
      print(sys.boot_jr.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers02 = testData2s;
      print(sys.boot_jr.drivers02);
      expect(sys.boot_jr.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers02 = defalut;
      print(sys.boot_jr.drivers02);
      expect(sys.boot_jr.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00638_element_check_00615 **********\n\n");
    });

    test('00639_element_check_00616', () async {
      print("\n********** テスト実行：00639_element_check_00616 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers03;
      print(sys.boot_jr.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers03 = testData1s;
      print(sys.boot_jr.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers03 = testData2s;
      print(sys.boot_jr.drivers03);
      expect(sys.boot_jr.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers03 = defalut;
      print(sys.boot_jr.drivers03);
      expect(sys.boot_jr.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00639_element_check_00616 **********\n\n");
    });

    test('00640_element_check_00617', () async {
      print("\n********** テスト実行：00640_element_check_00617 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers04;
      print(sys.boot_jr.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers04 = testData1s;
      print(sys.boot_jr.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers04 = testData2s;
      print(sys.boot_jr.drivers04);
      expect(sys.boot_jr.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers04 = defalut;
      print(sys.boot_jr.drivers04);
      expect(sys.boot_jr.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00640_element_check_00617 **********\n\n");
    });

    test('00641_element_check_00618', () async {
      print("\n********** テスト実行：00641_element_check_00618 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers05;
      print(sys.boot_jr.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers05 = testData1s;
      print(sys.boot_jr.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers05 = testData2s;
      print(sys.boot_jr.drivers05);
      expect(sys.boot_jr.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers05 = defalut;
      print(sys.boot_jr.drivers05);
      expect(sys.boot_jr.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00641_element_check_00618 **********\n\n");
    });

    test('00642_element_check_00619', () async {
      print("\n********** テスト実行：00642_element_check_00619 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers06;
      print(sys.boot_jr.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers06 = testData1s;
      print(sys.boot_jr.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers06 = testData2s;
      print(sys.boot_jr.drivers06);
      expect(sys.boot_jr.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers06 = defalut;
      print(sys.boot_jr.drivers06);
      expect(sys.boot_jr.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00642_element_check_00619 **********\n\n");
    });

    test('00643_element_check_00620', () async {
      print("\n********** テスト実行：00643_element_check_00620 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers07;
      print(sys.boot_jr.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers07 = testData1s;
      print(sys.boot_jr.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers07 = testData2s;
      print(sys.boot_jr.drivers07);
      expect(sys.boot_jr.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers07 = defalut;
      print(sys.boot_jr.drivers07);
      expect(sys.boot_jr.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00643_element_check_00620 **********\n\n");
    });

    test('00644_element_check_00621', () async {
      print("\n********** テスト実行：00644_element_check_00621 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers08;
      print(sys.boot_jr.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers08 = testData1s;
      print(sys.boot_jr.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers08 = testData2s;
      print(sys.boot_jr.drivers08);
      expect(sys.boot_jr.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers08 = defalut;
      print(sys.boot_jr.drivers08);
      expect(sys.boot_jr.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00644_element_check_00621 **********\n\n");
    });

    test('00645_element_check_00622', () async {
      print("\n********** テスト実行：00645_element_check_00622 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers09;
      print(sys.boot_jr.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers09 = testData1s;
      print(sys.boot_jr.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers09 = testData2s;
      print(sys.boot_jr.drivers09);
      expect(sys.boot_jr.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers09 = defalut;
      print(sys.boot_jr.drivers09);
      expect(sys.boot_jr.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00645_element_check_00622 **********\n\n");
    });

    test('00646_element_check_00623', () async {
      print("\n********** テスト実行：00646_element_check_00623 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers10;
      print(sys.boot_jr.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers10 = testData1s;
      print(sys.boot_jr.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers10 = testData2s;
      print(sys.boot_jr.drivers10);
      expect(sys.boot_jr.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers10 = defalut;
      print(sys.boot_jr.drivers10);
      expect(sys.boot_jr.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00646_element_check_00623 **********\n\n");
    });

    test('00647_element_check_00624', () async {
      print("\n********** テスト実行：00647_element_check_00624 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers11;
      print(sys.boot_jr.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers11 = testData1s;
      print(sys.boot_jr.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers11 = testData2s;
      print(sys.boot_jr.drivers11);
      expect(sys.boot_jr.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers11 = defalut;
      print(sys.boot_jr.drivers11);
      expect(sys.boot_jr.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00647_element_check_00624 **********\n\n");
    });

    test('00648_element_check_00625', () async {
      print("\n********** テスト実行：00648_element_check_00625 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers12;
      print(sys.boot_jr.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers12 = testData1s;
      print(sys.boot_jr.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers12 = testData2s;
      print(sys.boot_jr.drivers12);
      expect(sys.boot_jr.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers12 = defalut;
      print(sys.boot_jr.drivers12);
      expect(sys.boot_jr.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00648_element_check_00625 **********\n\n");
    });

    test('00649_element_check_00626', () async {
      print("\n********** テスト実行：00649_element_check_00626 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers13;
      print(sys.boot_jr.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers13 = testData1s;
      print(sys.boot_jr.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers13 = testData2s;
      print(sys.boot_jr.drivers13);
      expect(sys.boot_jr.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers13 = defalut;
      print(sys.boot_jr.drivers13);
      expect(sys.boot_jr.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00649_element_check_00626 **********\n\n");
    });

    test('00650_element_check_00627', () async {
      print("\n********** テスト実行：00650_element_check_00627 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers14;
      print(sys.boot_jr.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers14 = testData1s;
      print(sys.boot_jr.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers14 = testData2s;
      print(sys.boot_jr.drivers14);
      expect(sys.boot_jr.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers14 = defalut;
      print(sys.boot_jr.drivers14);
      expect(sys.boot_jr.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00650_element_check_00627 **********\n\n");
    });

    test('00651_element_check_00628', () async {
      print("\n********** テスト実行：00651_element_check_00628 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers15;
      print(sys.boot_jr.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers15 = testData1s;
      print(sys.boot_jr.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers15 = testData2s;
      print(sys.boot_jr.drivers15);
      expect(sys.boot_jr.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers15 = defalut;
      print(sys.boot_jr.drivers15);
      expect(sys.boot_jr.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00651_element_check_00628 **********\n\n");
    });

    test('00652_element_check_00629', () async {
      print("\n********** テスト実行：00652_element_check_00629 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers16;
      print(sys.boot_jr.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers16 = testData1s;
      print(sys.boot_jr.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers16 = testData2s;
      print(sys.boot_jr.drivers16);
      expect(sys.boot_jr.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers16 = defalut;
      print(sys.boot_jr.drivers16);
      expect(sys.boot_jr.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00652_element_check_00629 **********\n\n");
    });

    test('00653_element_check_00630', () async {
      print("\n********** テスト実行：00653_element_check_00630 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers17;
      print(sys.boot_jr.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers17 = testData1s;
      print(sys.boot_jr.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers17 = testData2s;
      print(sys.boot_jr.drivers17);
      expect(sys.boot_jr.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers17 = defalut;
      print(sys.boot_jr.drivers17);
      expect(sys.boot_jr.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00653_element_check_00630 **********\n\n");
    });

    test('00654_element_check_00631', () async {
      print("\n********** テスト実行：00654_element_check_00631 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers18;
      print(sys.boot_jr.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers18 = testData1s;
      print(sys.boot_jr.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers18 = testData2s;
      print(sys.boot_jr.drivers18);
      expect(sys.boot_jr.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers18 = defalut;
      print(sys.boot_jr.drivers18);
      expect(sys.boot_jr.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00654_element_check_00631 **********\n\n");
    });

    test('00655_element_check_00632', () async {
      print("\n********** テスト実行：00655_element_check_00632 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers19;
      print(sys.boot_jr.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers19 = testData1s;
      print(sys.boot_jr.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers19 = testData2s;
      print(sys.boot_jr.drivers19);
      expect(sys.boot_jr.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers19 = defalut;
      print(sys.boot_jr.drivers19);
      expect(sys.boot_jr.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00655_element_check_00632 **********\n\n");
    });

    test('00656_element_check_00633', () async {
      print("\n********** テスト実行：00656_element_check_00633 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers20;
      print(sys.boot_jr.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers20 = testData1s;
      print(sys.boot_jr.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers20 = testData2s;
      print(sys.boot_jr.drivers20);
      expect(sys.boot_jr.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers20 = defalut;
      print(sys.boot_jr.drivers20);
      expect(sys.boot_jr.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00656_element_check_00633 **********\n\n");
    });

    test('00657_element_check_00634', () async {
      print("\n********** テスト実行：00657_element_check_00634 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers21;
      print(sys.boot_jr.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers21 = testData1s;
      print(sys.boot_jr.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers21 = testData2s;
      print(sys.boot_jr.drivers21);
      expect(sys.boot_jr.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers21 = defalut;
      print(sys.boot_jr.drivers21);
      expect(sys.boot_jr.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00657_element_check_00634 **********\n\n");
    });

    test('00658_element_check_00635', () async {
      print("\n********** テスト実行：00658_element_check_00635 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers22;
      print(sys.boot_jr.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers22 = testData1s;
      print(sys.boot_jr.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers22 = testData2s;
      print(sys.boot_jr.drivers22);
      expect(sys.boot_jr.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers22 = defalut;
      print(sys.boot_jr.drivers22);
      expect(sys.boot_jr.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00658_element_check_00635 **********\n\n");
    });

    test('00659_element_check_00636', () async {
      print("\n********** テスト実行：00659_element_check_00636 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers36;
      print(sys.boot_jr.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers36 = testData1s;
      print(sys.boot_jr.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers36 = testData2s;
      print(sys.boot_jr.drivers36);
      expect(sys.boot_jr.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers36 = defalut;
      print(sys.boot_jr.drivers36);
      expect(sys.boot_jr.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00659_element_check_00636 **********\n\n");
    });

    test('00660_element_check_00637', () async {
      print("\n********** テスト実行：00660_element_check_00637 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers37;
      print(sys.boot_jr.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers37 = testData1s;
      print(sys.boot_jr.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers37 = testData2s;
      print(sys.boot_jr.drivers37);
      expect(sys.boot_jr.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers37 = defalut;
      print(sys.boot_jr.drivers37);
      expect(sys.boot_jr.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00660_element_check_00637 **********\n\n");
    });

    test('00661_element_check_00638', () async {
      print("\n********** テスト実行：00661_element_check_00638 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers38;
      print(sys.boot_jr.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers38 = testData1s;
      print(sys.boot_jr.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers38 = testData2s;
      print(sys.boot_jr.drivers38);
      expect(sys.boot_jr.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers38 = defalut;
      print(sys.boot_jr.drivers38);
      expect(sys.boot_jr.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00661_element_check_00638 **********\n\n");
    });

    test('00662_element_check_00639', () async {
      print("\n********** テスト実行：00662_element_check_00639 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr.drivers39;
      print(sys.boot_jr.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr.drivers39 = testData1s;
      print(sys.boot_jr.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr.drivers39 = testData2s;
      print(sys.boot_jr.drivers39);
      expect(sys.boot_jr.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr.drivers39 = defalut;
      print(sys.boot_jr.drivers39);
      expect(sys.boot_jr.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00662_element_check_00639 **********\n\n");
    });

    test('00663_element_check_00640', () async {
      print("\n********** テスト実行：00663_element_check_00640 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers01;
      print(sys.boot_jr_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers01 = testData1s;
      print(sys.boot_jr_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers01 = testData2s;
      print(sys.boot_jr_tower.drivers01);
      expect(sys.boot_jr_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers01 = defalut;
      print(sys.boot_jr_tower.drivers01);
      expect(sys.boot_jr_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00663_element_check_00640 **********\n\n");
    });

    test('00664_element_check_00641', () async {
      print("\n********** テスト実行：00664_element_check_00641 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers02;
      print(sys.boot_jr_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers02 = testData1s;
      print(sys.boot_jr_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers02 = testData2s;
      print(sys.boot_jr_tower.drivers02);
      expect(sys.boot_jr_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers02 = defalut;
      print(sys.boot_jr_tower.drivers02);
      expect(sys.boot_jr_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00664_element_check_00641 **********\n\n");
    });
  });
}

void allPropatyCheckInit(SysJsonFile test)
{
  expect(test.info.version, "");
  expect(test.info.comment, "");
  expect(test.type.dual, "");
  expect(test.type.webjr, "");
  expect(test.type.web2300, "");
  expect(test.type.webplus, "");
  expect(test.type.web2800, "");
  expect(test.type.web2350, "");
  expect(test.type.web2500, "");
  expect(test.type.webplus2, "");
  expect(test.type.tower, "");
  expect(test.type.mskind, "");
  expect(test.type.standalone, "");
  expect(test.type.membersystem, "");
  expect(test.type.memberpoint, "");
  expect(test.type.memberfsp, "");
  expect(test.type.creditsystem, "");
  expect(test.type.special_receipt, "");
  expect(test.type.disc_barcode, "");
  expect(test.type.iwaisystem, "");
  expect(test.type.self_gate, "");
  expect(test.type.vismacsystem, "");
  expect(test.type.sys_24hour, "");
  expect(test.type.hq_asp, "");
  expect(test.type.jasaitama_sys, "");
  expect(test.type.promsystem, "");
  expect(test.type.edysystem, "");
  expect(test.type.fresh_barcode, "");
  expect(test.type.sugi_sys, "");
  expect(test.type.hesokurisystem, "");
  expect(test.type.greenstamp_sys, "");
  expect(test.type.coopsystem, "");
  expect(test.type.pointcardsystem, "");
  expect(test.type.mobilesystem, "");
  expect(test.type.hq_other, "");
  expect(test.type.regconnectsystem, "");
  expect(test.type.clothes_barcode, "");
  expect(test.type.fjss, "");
  expect(test.type.mcsystem, "");
  expect(test.type.network_prn, "");
  expect(test.type.poppy_print, "");
  expect(test.type.tag_print, "");
  expect(test.type.taurus, "");
  expect(test.type.ntt_asp, "");
  expect(test.type.eat_in, "");
  expect(test.type.mobilesystem2, "");
  expect(test.type.magazine_barcode, "");
  expect(test.type.hq_other_real, "");
  expect(test.type.pw410system, "");
  expect(test.type.nsc_credit, "");
  expect(test.type.hq_prod, "");
  expect(test.type.felicasystem, "");
  expect(test.type.psp70system, "");
  expect(test.type.ntt_bcom, "");
  expect(test.type.catalinasystem, "");
  expect(test.type.prcchkr, "");
  expect(test.type.dishcalcsystem, "");
  expect(test.type.itf_barcode, "");
  expect(test.type.css_act, "");
  expect(test.type.cust_detail, "");
  expect(test.type.custrealsvr, "");
  expect(test.type.suica_cat, "");
  expect(test.type.yomocasystem, "");
  expect(test.type.smartplussystem, "");
  expect(test.type.duty, "");
  expect(test.type.ecoasystem, "");
  expect(test.type.iccardsystem, "");
  expect(test.type.sub_ticket, "");
  expect(test.type.quicpaysystem, "");
  expect(test.type.idsystem, "");
  expect(test.type.revival_receipt, "");
  expect(test.type.quick_self, "");
  expect(test.type.quick_self_chg, "");
  expect(test.type.assist_monitor, "");
  expect(test.type.mp1_print, "");
  expect(test.type.realitmsend, "");
  expect(test.type.rainbowcard, "");
  expect(test.type.gramx, "");
  expect(test.type.mm_abj, "");
  expect(test.type.cat_point, "");
  expect(test.type.tagrdwt, "");
  expect(test.type.department_store, "");
  expect(test.type.edyno_mbr, "");
  expect(test.type.fcf_card, "");
  expect(test.type.panamembersystem, "");
  expect(test.type.landisk, "");
  expect(test.type.pitapasystem, "");
  expect(test.type.tuocardsystem, "");
  expect(test.type.sallmtbar, "");
  expect(test.type.business_mode, "");
  expect(test.type.mcp200system, "");
  expect(test.type.spvtsystem, "");
  expect(test.type.remotesystem, "");
  expect(test.type.order_mode, "");
  expect(test.type.jrem_multisystem, "");
  expect(test.type.media_info, "");
  expect(test.type.gs1_barcode, "");
  expect(test.type.assortsystem, "");
  expect(test.type.center_server, "");
  expect(test.type.reservsystem, "");
  expect(test.type.drug_rev, "");
  expect(test.type.gincardsystem, "");
  expect(test.type.fclqpsystem, "");
  expect(test.type.fcledysystem, "");
  expect(test.type.caps_cafis, "");
  expect(test.type.fclidsystem, "");
  expect(test.type.ptcktissusystem, "");
  expect(test.type.abs_prepaid, "");
  expect(test.type.prod_item_autoset, "");
  expect(test.type.prod_itf14_barcode, "");
  expect(test.type.special_coupon, "");
  expect(test.type.bluechip_server, "");
  expect(test.type.hitachi_bluechip, "");
  expect(test.type.hq_other_cantevole, "");
  expect(test.type.qcashier_system, "");
  expect(test.type.receipt_qr_system, "");
  expect(test.type.visatouch_infox, "");
  expect(test.type.pbchg_system, "");
  expect(test.type.hc1_system, "");
  expect(test.type.caps_hc1_cafis, "");
  expect(test.type.remoteserver, "");
  expect(test.type.mrycardsystem, "");
  expect(test.type.sp_department, "");
  expect(test.type.decimalitmsend, "");
  expect(test.type.wiz_cnct, "");
  expect(test.type.absv31_rwt, "");
  expect(test.type.pluralqr_system, "");
  expect(test.type.netdoareserv, "");
  expect(test.type.selpluadj, "");
  expect(test.type.custreal_webser, "");
  expect(test.type.wiz_abj, "");
  expect(test.type.custreal_uid, "");
  expect(test.type.bdlitmsend, "");
  expect(test.type.custreal_netdoa, "");
  expect(test.type.ut_cnct, "");
  expect(test.type.caps_pqvic, "");
  expect(test.type.yamato_system, "");
  expect(test.type.caps_cafis_standard, "");
  expect(test.type.nttd_preca, "");
  expect(test.type.usbcam_cnct, "");
  expect(test.type.drugstore, "");
  expect(test.type.custreal_nec, "");
  expect(test.type.custreal_op, "");
  expect(test.type.dummy_crdt, "");
  expect(test.type.hc2_system, "");
  expect(test.type.price_sound, "");
  expect(test.type.dummy_preca, "");
  expect(test.type.monitored_system, "");
  expect(test.type.jmups_system, "");
  expect(test.type.ut1qpsystem, "");
  expect(test.type.ut1idsystem, "");
  expect(test.type.brain_system, "");
  expect(test.type.pfmpitapasystem, "");
  expect(test.type.pfmjricsystem, "");
  expect(test.type.chargeslip_system, "");
  expect(test.type.pfmjricchargesystem, "");
  expect(test.type.itemprc_reduction_coupon, "");
  expect(test.type.cat_jmups_system, "");
  expect(test.type.sqrc_ticket_system, "");
  expect(test.type.cct_connect_system, "");
  expect(test.type.cct_emoney_system, "");
  expect(test.type.tec_infox_jet_s_system, "");
  expect(test.type.prod_instore_zero_flg, "");
  expect(test.type.front_self_system, "");
  expect(test.type.trk_preca, "");
  expect(test.type.desktop_cashier_system, "");
  expect(test.type.suica_charge_system, "");
  expect(test.type.nimoca_point_system, "");
  expect(test.type.custreal_pointartist, "");
  expect(test.type.tb1_system, "");
  expect(test.type.tax_free_system, "");
  expect(test.type.repica_system, "");
  expect(test.type.caps_cardnet_system, "");
  expect(test.type.yumeca_system, "");
  expect(test.type.dummy_suica, "");
  expect(test.type.payment_mng, "");
  expect(test.type.custreal_tpoint, "");
  expect(test.type.mammy_system, "");
  expect(test.type.itemtyp_send, "");
  expect(test.type.yumeca_pol_system, "");
  expect(test.type.custreal_hps, "");
  expect(test.type.maruto_system, "");
  expect(test.type.hc3_system, "");
  expect(test.type.sm3_marui_system, "");
  expect(test.type.kitchen_print, "");
  expect(test.type.cogca_system, "");
  expect(test.type.bdl_multi_select_system, "");
  expect(test.type.sallmtbar26, "");
  expect(test.type.purchase_ticket_system, "");
  expect(test.type.custreal_uni_system, "");
  expect(test.type.ej_animation_system, "");
  expect(test.type.value_card_system, "");
  expect(test.type.sm4_comodi_system, "");
  expect(test.type.sm5_itoku_system, "");
  expect(test.type.cct_pointuse_system, "");
  expect(test.type.zhq_system, "");
  expect(test.type.rpoint_system, "");
  expect(test.type.vesca_system, "");
  expect(test.type.ajs_emoney_system, "");
  expect(test.type.sm16_taiyo_toyocho_system, "");
  expect(test.type.infox_detail_send_system, "");
  expect(test.type.self_medication_system, "");
  expect(test.type.sm20_maeda_system, "");
  expect(test.type.pana_waon_system, "");
  expect(test.type.onepay_system, "");
  expect(test.type.happyself_system, "");
  expect(test.type.happyself_smile_system, "");
  expect(test.type.linepay_system, "");
  expect(test.type.staff_release_system, "");
  expect(test.type.wiz_base_system, "");
  expect(test.type.pack_on_time_system, "");
  expect(test.type.shop_and_go_system, "");
  expect(test.type.staffid1_ymss_system, "");
  expect(test.type.sm33_nishizawa_system, "");
  expect(test.type.ds2_godai_system, "");
  expect(test.type.taxfree_passportinfo_system, "");
  expect(test.type.sm36_sanpraza_system, "");
  expect(test.type.cr50_system, "");
  expect(test.type.case_clothes_barcode_system, "");
  expect(test.type.custreal_dummy_system, "");
  expect(test.type.reason_select_std_system, "");
  expect(test.type.barcode_pay1_system, "");
  expect(test.type.custreal_ptactix, "");
  expect(test.type.cr3_sharp_system, "");
  expect(test.type.game_barcode_system, "");
  expect(test.type.cct_codepay_system, "");
  expect(test.type.ws_system, "");
  expect(test.type.custreal_pointinfinity, "");
  expect(test.type.toy_system, "");
  expect(test.type.canal_payment_service_system, "");
  expect(test.type.multi_vega_system, "");
  expect(test.type.dispensing_pharmacy_system, "");
  expect(test.type.sm41_bellejois_system, "");
  expect(test.type.sm42_kanesue_system, "");
  expect(test.type.dpoint_system, "");
  expect(test.type.public_barcode_pay_system, "");
  expect(test.type.ts_indiv_setting_system, "");
  expect(test.type.sm44_ja_tsuruoka_system, "");
  expect(test.type.stera_terminal_system, "");
  expect(test.type.repica_point_system, "");
  expect(test.type.sm45_ocean_system, "");
  expect(test.type.fujitsu_fip_codepay_system, "");
  expect(test.type.sm49_itochain_system, "");
  expect(test.type.taxfree_server_system, "");
  expect(test.type.employee_card_payment_system, "");
  expect(test.type.net_receipt_system, "");
  expect(test.type.public_barcode_pay2_system, "");
  expect(test.type.sm52_palette_system, "");
  expect(test.type.public_barcode_pay3_system, "");
  expect(test.type.svscls2_stlpdsc_system, "");
  expect(test.type.sm55_takayanagi_system, "");
  expect(test.type.mail_send_system, "");
  expect(test.type.netstars_codepay_system, "");
  expect(test.type.sm56_kobebussan_system, "");
  expect(test.type.hys1_seria_system, "");
  expect(test.type.liqr_taxfree_system, "");
  expect(test.type.custreal_gyomuca_system, "");
  expect(test.type.sm59_takaramc_system, "");
  expect(test.type.detail_noprn_system, "");
  expect(test.type.sm61_fujifilm_system, "");
  expect(test.type.department2_system, "");
  expect(test.type.custreal_crosspoint, "");
  expect(test.type.hc12_joyful_honda_system, "");
  expect(test.type.sm62_maruichi_system, "");
  expect(test.type.sm65_ryubo_system, "");
  expect(test.type.tomoIF_system, "");
  expect(test.type.sm66_fresta_system, "");
  expect(test.type.cosme1_istyle_system, "");
  expect(test.type.sm71_selection_system, "");
  expect(test.type.kitchen_print_recipt, "");
  expect(test.type.miyazaki_city_system, "");
  expect(test.type.public_barcode_pay4_system, "");
  expect(test.type.sp1_qr_read_system, "");
  expect(test.type.aibox_alignment_system, "");
  expect(test.type.cashonly_keyopt_system, "");
  expect(test.type.sm74_ozeki_system, "");
  expect(test.type.carparking_qr_system, "");
  expect(test.type.olc_system, "");
  expect(test.type.quiz_payment_system, "");
  expect(test.type.jets_lane_system, "");
  expect(test.type.rf1_hs_system, "");
  expect(test.dip_sw.subcpu1, "");
  expect(test.dip_sw.subcpu2, "");
  expect(test.boot_webplus2_desktop.drivers01, "");
  expect(test.boot_webplus2_desktop.drivers02, "");
  expect(test.boot_webplus2_desktop.drivers03, "");
  expect(test.boot_webplus2_desktop.drivers04, "");
  expect(test.boot_webplus2_desktop.drivers05, "");
  expect(test.boot_webplus2_desktop.drivers06, "");
  expect(test.boot_webplus2_desktop.drivers07, "");
  expect(test.boot_webplus2_desktop.drivers08, "");
  expect(test.boot_webplus2_desktop.drivers09, "");
  expect(test.boot_webplus2_desktop.drivers10, "");
  expect(test.boot_webplus2_desktop.drivers11, "");
  expect(test.boot_webplus2_desktop.drivers12, "");
  expect(test.boot_webplus2_desktop.drivers13, "");
  expect(test.boot_webplus2_desktop.drivers14, "");
  expect(test.boot_webplus2_desktop.drivers15, "");
  expect(test.boot_webplus2_desktop.drivers16, "");
  expect(test.boot_webplus2_desktop.drivers17, "");
  expect(test.boot_webplus2_desktop.drivers18, "");
  expect(test.boot_webplus2_desktop.drivers36, "");
  expect(test.boot_webplus2_desktop.drivers37, "");
  expect(test.boot_webplus2_desktop.drivers38, "");
  expect(test.boot_webplus2_desktop.drivers39, "");
  expect(test.boot_web2350_tower.drivers01, "");
  expect(test.boot_web2350_tower.drivers02, "");
  expect(test.boot_web2350_tower.drivers03, "");
  expect(test.boot_web2350_tower.drivers04, "");
  expect(test.boot_web2350_tower.drivers05, "");
  expect(test.boot_web2350_tower.drivers06, "");
  expect(test.boot_web2350_tower.drivers07, "");
  expect(test.boot_web2350_tower.drivers08, "");
  expect(test.boot_web2350_tower.drivers09, "");
  expect(test.boot_web2350_tower.drivers10, "");
  expect(test.boot_web2350_tower.drivers11, "");
  expect(test.boot_web2350_tower.drivers12, "");
  expect(test.boot_web2350_tower.drivers13, "");
  expect(test.boot_web2350_tower.drivers14, "");
  expect(test.boot_web2350_tower.drivers15, "");
  expect(test.boot_web2350_tower.drivers16, "");
  expect(test.boot_web2350_tower.drivers17, "");
  expect(test.boot_web2350_tower.drivers18, "");
  expect(test.boot_web2350_tower.drivers19, "");
  expect(test.boot_web2350_tower.drivers20, "");
  expect(test.boot_web2350_tower.drivers21, "");
  expect(test.boot_web2350_tower.drivers22, "");
  expect(test.boot_web2350_tower.drivers23, "");
  expect(test.boot_web2350_tower.drivers24, "");
  expect(test.boot_web2350_tower.drivers36, "");
  expect(test.boot_web2350_tower.drivers37, "");
  expect(test.boot_web2350_tower.drivers38, "");
  expect(test.boot_web2350_tower.drivers39, "");
  expect(test.boot_web2350_desktop.drivers01, "");
  expect(test.boot_web2350_desktop.drivers02, "");
  expect(test.boot_web2350_desktop.drivers03, "");
  expect(test.boot_web2350_desktop.drivers04, "");
  expect(test.boot_web2350_desktop.drivers05, "");
  expect(test.boot_web2350_desktop.drivers06, "");
  expect(test.boot_web2350_desktop.drivers07, "");
  expect(test.boot_web2350_desktop.drivers08, "");
  expect(test.boot_web2350_desktop.drivers09, "");
  expect(test.boot_web2350_desktop.drivers10, "");
  expect(test.boot_web2350_desktop.drivers11, "");
  expect(test.boot_web2350_desktop.drivers12, "");
  expect(test.boot_web2350_desktop.drivers13, "");
  expect(test.boot_web2350_desktop.drivers14, "");
  expect(test.boot_web2350_desktop.drivers36, "");
  expect(test.boot_web2350_desktop.drivers37, "");
  expect(test.boot_web2350_desktop.drivers38, "");
  expect(test.boot_web2350_desktop.drivers39, "");
  expect(test.boot_web2500_tower.drivers01, "");
  expect(test.boot_web2500_tower.drivers02, "");
  expect(test.boot_web2500_tower.drivers03, "");
  expect(test.boot_web2500_tower.drivers04, "");
  expect(test.boot_web2500_tower.drivers05, "");
  expect(test.boot_web2500_tower.drivers06, "");
  expect(test.boot_web2500_tower.drivers07, "");
  expect(test.boot_web2500_tower.drivers08, "");
  expect(test.boot_web2500_tower.drivers09, "");
  expect(test.boot_web2500_tower.drivers10, "");
  expect(test.boot_web2500_tower.drivers11, "");
  expect(test.boot_web2500_tower.drivers12, "");
  expect(test.boot_web2500_tower.drivers13, "");
  expect(test.boot_web2500_tower.drivers14, "");
  expect(test.boot_web2500_tower.drivers15, "");
  expect(test.boot_web2500_tower.drivers16, "");
  expect(test.boot_web2500_tower.drivers17, "");
  expect(test.boot_web2500_tower.drivers18, "");
  expect(test.boot_web2500_tower.drivers19, "");
  expect(test.boot_web2500_tower.drivers20, "");
  expect(test.boot_web2500_tower.drivers21, "");
  expect(test.boot_web2500_tower.drivers22, "");
  expect(test.boot_web2500_tower.drivers23, "");
  expect(test.boot_web2500_tower.drivers24, "");
  expect(test.boot_web2500_tower.drivers25, "");
  expect(test.boot_web2500_tower.drivers26, "");
  expect(test.boot_web2500_tower.drivers27, "");
  expect(test.boot_web2500_tower.drivers28, "");
  expect(test.boot_web2500_tower.drivers36, "");
  expect(test.boot_web2500_tower.drivers37, "");
  expect(test.boot_web2500_tower.drivers38, "");
  expect(test.boot_web2500_tower.drivers39, "");
  expect(test.boot_web2500_desktop.drivers01, "");
  expect(test.boot_web2500_desktop.drivers02, "");
  expect(test.boot_web2500_desktop.drivers03, "");
  expect(test.boot_web2500_desktop.drivers04, "");
  expect(test.boot_web2500_desktop.drivers05, "");
  expect(test.boot_web2500_desktop.drivers06, "");
  expect(test.boot_web2500_desktop.drivers07, "");
  expect(test.boot_web2500_desktop.drivers08, "");
  expect(test.boot_web2500_desktop.drivers09, "");
  expect(test.boot_web2500_desktop.drivers10, "");
  expect(test.boot_web2500_desktop.drivers11, "");
  expect(test.boot_web2500_desktop.drivers12, "");
  expect(test.boot_web2500_desktop.drivers13, "");
  expect(test.boot_web2500_desktop.drivers14, "");
  expect(test.boot_web2500_desktop.drivers15, "");
  expect(test.boot_web2500_desktop.drivers16, "");
  expect(test.boot_web2500_desktop.drivers17, "");
  expect(test.boot_web2500_desktop.drivers18, "");
  expect(test.boot_web2500_desktop.drivers19, "");
  expect(test.boot_web2500_desktop.drivers20, "");
  expect(test.boot_web2500_desktop.drivers36, "");
  expect(test.boot_web2500_desktop.drivers37, "");
  expect(test.boot_web2500_desktop.drivers38, "");
  expect(test.boot_web2500_desktop.drivers39, "");
  expect(test.boot_web2800_tower.drivers01, "");
  expect(test.boot_web2800_tower.drivers02, "");
  expect(test.boot_web2800_tower.drivers03, "");
  expect(test.boot_web2800_tower.drivers04, "");
  expect(test.boot_web2800_tower.drivers05, "");
  expect(test.boot_web2800_tower.drivers06, "");
  expect(test.boot_web2800_tower.drivers07, "");
  expect(test.boot_web2800_tower.drivers08, "");
  expect(test.boot_web2800_tower.drivers09, "");
  expect(test.boot_web2800_tower.drivers10, "");
  expect(test.boot_web2800_tower.drivers11, "");
  expect(test.boot_web2800_tower.drivers12, "");
  expect(test.boot_web2800_tower.drivers13, "");
  expect(test.boot_web2800_tower.drivers14, "");
  expect(test.boot_web2800_tower.drivers15, "");
  expect(test.boot_web2800_tower.drivers16, "");
  expect(test.boot_web2800_tower.drivers17, "");
  expect(test.boot_web2800_tower.drivers18, "");
  expect(test.boot_web2800_tower.drivers19, "");
  expect(test.boot_web2800_tower.drivers20, "");
  expect(test.boot_web2800_tower.drivers21, "");
  expect(test.boot_web2800_tower.drivers22, "");
  expect(test.boot_web2800_tower.drivers23, "");
  expect(test.boot_web2800_tower.drivers24, "");
  expect(test.boot_web2800_tower.drivers25, "");
  expect(test.boot_web2800_tower.drivers26, "");
  expect(test.boot_web2800_tower.drivers27, "");
  expect(test.boot_web2800_tower.drivers28, "");
  expect(test.boot_web2800_tower.drivers29, "");
  expect(test.boot_web2800_tower.drivers30, "");
  expect(test.boot_web2800_tower.drivers31, "");
  expect(test.boot_web2800_tower.drivers32, "");
  expect(test.boot_web2800_tower.drivers33, "");
  expect(test.boot_web2800_tower.drivers34, "");
  expect(test.boot_web2800_tower.drivers36, "");
  expect(test.boot_web2800_tower.drivers37, "");
  expect(test.boot_web2800_tower.drivers38, "");
  expect(test.boot_web2800_tower.drivers39, "");
  expect(test.boot_web2800_desktop.drivers01, "");
  expect(test.boot_web2800_desktop.drivers02, "");
  expect(test.boot_web2800_desktop.drivers03, "");
  expect(test.boot_web2800_desktop.drivers04, "");
  expect(test.boot_web2800_desktop.drivers05, "");
  expect(test.boot_web2800_desktop.drivers06, "");
  expect(test.boot_web2800_desktop.drivers07, "");
  expect(test.boot_web2800_desktop.drivers08, "");
  expect(test.boot_web2800_desktop.drivers09, "");
  expect(test.boot_web2800_desktop.drivers10, "");
  expect(test.boot_web2800_desktop.drivers11, "");
  expect(test.boot_web2800_desktop.drivers12, "");
  expect(test.boot_web2800_desktop.drivers13, "");
  expect(test.boot_web2800_desktop.drivers14, "");
  expect(test.boot_web2800_desktop.drivers15, "");
  expect(test.boot_web2800_desktop.drivers16, "");
  expect(test.boot_web2800_desktop.drivers17, "");
  expect(test.boot_web2800_desktop.drivers18, "");
  expect(test.boot_web2800_desktop.drivers19, "");
  expect(test.boot_web2800_desktop.drivers20, "");
  expect(test.boot_web2800_desktop.drivers21, "");
  expect(test.boot_web2800_desktop.drivers22, "");
  expect(test.boot_web2800_desktop.drivers23, "");
  expect(test.boot_web2800_desktop.drivers24, "");
  expect(test.boot_web2800_desktop.drivers25, "");
  expect(test.boot_web2800_desktop.drivers26, "");
  expect(test.boot_web2800_desktop.drivers27, "");
  expect(test.boot_web2800_desktop.drivers28, "");
  expect(test.boot_web2800_desktop.drivers29, "");
  expect(test.boot_web2800_desktop.drivers30, "");
  expect(test.boot_web2800_desktop.drivers31, "");
  expect(test.boot_web2800_desktop.drivers32, "");
  expect(test.boot_web2800_desktop.drivers33, "");
  expect(test.boot_web2800_desktop.drivers34, "");
  expect(test.boot_web2800_desktop.drivers36, "");
  expect(test.boot_web2800_desktop.drivers37, "");
  expect(test.boot_web2800_desktop.drivers38, "");
  expect(test.boot_web2800_desktop.drivers39, "");
  expect(test.boot_web2300_tower.drivers01, "");
  expect(test.boot_web2300_tower.drivers02, "");
  expect(test.boot_web2300_tower.drivers03, "");
  expect(test.boot_web2300_tower.drivers04, "");
  expect(test.boot_web2300_tower.drivers05, "");
  expect(test.boot_web2300_tower.drivers06, "");
  expect(test.boot_web2300_tower.drivers07, "");
  expect(test.boot_web2300_tower.drivers08, "");
  expect(test.boot_web2300_tower.drivers09, "");
  expect(test.boot_web2300_tower.drivers10, "");
  expect(test.boot_web2300_tower.drivers11, "");
  expect(test.boot_web2300_tower.drivers12, "");
  expect(test.boot_web2300_tower.drivers13, "");
  expect(test.boot_web2300_tower.drivers14, "");
  expect(test.boot_web2300_tower.drivers15, "");
  expect(test.boot_web2300_tower.drivers16, "");
  expect(test.boot_web2300_tower.drivers17, "");
  expect(test.boot_web2300_tower.drivers18, "");
  expect(test.boot_web2300_tower.drivers19, "");
  expect(test.boot_web2300_tower.drivers20, "");
  expect(test.boot_web2300_tower.drivers21, "");
  expect(test.boot_web2300_tower.drivers22, "");
  expect(test.boot_web2300_tower.drivers23, "");
  expect(test.boot_web2300_tower.drivers24, "");
  expect(test.boot_web2300_tower.drivers36, "");
  expect(test.boot_web2300_tower.drivers37, "");
  expect(test.boot_web2300_tower.drivers38, "");
  expect(test.boot_web2300_tower.drivers39, "");
  expect(test.boot_web2300_desktop.drivers01, "");
  expect(test.boot_web2300_desktop.drivers02, "");
  expect(test.boot_web2300_desktop.drivers03, "");
  expect(test.boot_web2300_desktop.drivers04, "");
  expect(test.boot_web2300_desktop.drivers05, "");
  expect(test.boot_web2300_desktop.drivers06, "");
  expect(test.boot_web2300_desktop.drivers07, "");
  expect(test.boot_web2300_desktop.drivers08, "");
  expect(test.boot_web2300_desktop.drivers09, "");
  expect(test.boot_web2300_desktop.drivers10, "");
  expect(test.boot_web2300_desktop.drivers11, "");
  expect(test.boot_web2300_desktop.drivers12, "");
  expect(test.boot_web2300_desktop.drivers13, "");
  expect(test.boot_web2300_desktop.drivers14, "");
  expect(test.boot_web2300_desktop.drivers36, "");
  expect(test.boot_web2300_desktop.drivers37, "");
  expect(test.boot_web2300_desktop.drivers38, "");
  expect(test.boot_web2300_desktop.drivers39, "");
  expect(test.boot_webplus_desktop.drivers01, "");
  expect(test.boot_webplus_desktop.drivers02, "");
  expect(test.boot_webplus_desktop.drivers03, "");
  expect(test.boot_webplus_desktop.drivers04, "");
  expect(test.boot_webplus_desktop.drivers05, "");
  expect(test.boot_webplus_desktop.drivers06, "");
  expect(test.boot_webplus_desktop.drivers07, "");
  expect(test.boot_webplus_desktop.drivers08, "");
  expect(test.boot_webplus_desktop.drivers09, "");
  expect(test.boot_webplus_desktop.drivers10, "");
  expect(test.boot_webplus_desktop.drivers11, "");
  expect(test.boot_webplus_desktop.drivers12, "");
  expect(test.boot_webplus_desktop.drivers13, "");
  expect(test.boot_webplus_desktop.drivers14, "");
  expect(test.boot_webplus_desktop.drivers15, "");
  expect(test.boot_webplus_desktop.drivers16, "");
  expect(test.boot_webplus_desktop.drivers36, "");
  expect(test.boot_webplus_desktop.drivers37, "");
  expect(test.boot_webplus_desktop.drivers38, "");
  expect(test.boot_webplus_desktop.drivers39, "");
  expect(test.boot_dual_tower.drivers01, "");
  expect(test.boot_dual_tower.drivers02, "");
  expect(test.boot_dual_tower.drivers03, "");
  expect(test.boot_dual_tower.drivers04, "");
  expect(test.boot_dual_tower.drivers05, "");
  expect(test.boot_dual_tower.drivers06, "");
  expect(test.boot_dual_tower.drivers07, "");
  expect(test.boot_dual_tower.drivers08, "");
  expect(test.boot_dual_tower.drivers09, "");
  expect(test.boot_dual_tower.drivers10, "");
  expect(test.boot_dual_tower.drivers11, "");
  expect(test.boot_dual_tower.drivers12, "");
  expect(test.boot_dual_tower.drivers13, "");
  expect(test.boot_dual_tower.drivers14, "");
  expect(test.boot_dual_tower.drivers15, "");
  expect(test.boot_dual_tower.drivers16, "");
  expect(test.boot_dual_tower.drivers17, "");
  expect(test.boot_dual_tower.drivers18, "");
  expect(test.boot_dual_tower.drivers19, "");
  expect(test.boot_dual_tower.drivers20, "");
  expect(test.boot_dual_tower.drivers21, "");
  expect(test.boot_dual_tower.drivers22, "");
  expect(test.boot_dual_tower.drivers23, "");
  expect(test.boot_dual_tower.drivers24, "");
  expect(test.boot_dual_tower.drivers25, "");
  expect(test.boot_dual_tower.drivers26, "");
  expect(test.boot_dual_tower.drivers27, "");
  expect(test.boot_dual_tower.drivers28, "");
  expect(test.boot_dual_tower.drivers29, "");
  expect(test.boot_dual_tower.drivers30, "");
  expect(test.boot_dual_tower.drivers31, "");
  expect(test.boot_dual_tower.drivers32, "");
  expect(test.boot_dual_tower.drivers36, "");
  expect(test.boot_dual_tower.drivers37, "");
  expect(test.boot_dual_tower.drivers38, "");
  expect(test.boot_dual_tower.drivers39, "");
  expect(test.boot_dual_desktop.drivers01, "");
  expect(test.boot_dual_desktop.drivers02, "");
  expect(test.boot_dual_desktop.drivers03, "");
  expect(test.boot_dual_desktop.drivers04, "");
  expect(test.boot_dual_desktop.drivers05, "");
  expect(test.boot_dual_desktop.drivers06, "");
  expect(test.boot_dual_desktop.drivers07, "");
  expect(test.boot_dual_desktop.drivers08, "");
  expect(test.boot_dual_desktop.drivers09, "");
  expect(test.boot_dual_desktop.drivers10, "");
  expect(test.boot_dual_desktop.drivers11, "");
  expect(test.boot_dual_desktop.drivers12, "");
  expect(test.boot_dual_desktop.drivers13, "");
  expect(test.boot_dual_desktop.drivers14, "");
  expect(test.boot_dual_desktop.drivers15, "");
  expect(test.boot_dual_desktop.drivers16, "");
  expect(test.boot_dual_desktop.drivers17, "");
  expect(test.boot_dual_desktop.drivers18, "");
  expect(test.boot_dual_desktop.drivers19, "");
  expect(test.boot_dual_desktop.drivers20, "");
  expect(test.boot_dual_desktop.drivers21, "");
  expect(test.boot_dual_desktop.drivers22, "");
  expect(test.boot_dual_desktop.drivers23, "");
  expect(test.boot_dual_desktop.drivers24, "");
  expect(test.boot_dual_desktop.drivers36, "");
  expect(test.boot_dual_desktop.drivers37, "");
  expect(test.boot_dual_desktop.drivers38, "");
  expect(test.boot_dual_desktop.drivers39, "");
  expect(test.boot_jr.drivers01, "");
  expect(test.boot_jr.drivers02, "");
  expect(test.boot_jr.drivers03, "");
  expect(test.boot_jr.drivers04, "");
  expect(test.boot_jr.drivers05, "");
  expect(test.boot_jr.drivers06, "");
  expect(test.boot_jr.drivers07, "");
  expect(test.boot_jr.drivers08, "");
  expect(test.boot_jr.drivers09, "");
  expect(test.boot_jr.drivers10, "");
  expect(test.boot_jr.drivers11, "");
  expect(test.boot_jr.drivers12, "");
  expect(test.boot_jr.drivers13, "");
  expect(test.boot_jr.drivers14, "");
  expect(test.boot_jr.drivers15, "");
  expect(test.boot_jr.drivers16, "");
  expect(test.boot_jr.drivers17, "");
  expect(test.boot_jr.drivers18, "");
  expect(test.boot_jr.drivers19, "");
  expect(test.boot_jr.drivers20, "");
  expect(test.boot_jr.drivers21, "");
  expect(test.boot_jr.drivers22, "");
  expect(test.boot_jr.drivers36, "");
  expect(test.boot_jr.drivers37, "");
  expect(test.boot_jr.drivers38, "");
  expect(test.boot_jr.drivers39, "");
  expect(test.boot_jr_tower.drivers01, "");
  expect(test.boot_jr_tower.drivers02, "");
  expect(test.boot_jr_tower.drivers03, "");
  expect(test.boot_jr_tower.drivers04, "");
  expect(test.boot_jr_tower.drivers05, "");
  expect(test.boot_jr_tower.drivers06, "");
  expect(test.boot_jr_tower.drivers07, "");
  expect(test.boot_jr_tower.drivers08, "");
  expect(test.boot_jr_tower.drivers09, "");
  expect(test.boot_jr_tower.drivers10, "");
  expect(test.boot_jr_tower.drivers11, "");
  expect(test.boot_jr_tower.drivers12, "");
  expect(test.boot_jr_tower.drivers13, "");
  expect(test.boot_jr_tower.drivers14, "");
  expect(test.boot_jr_tower.drivers15, "");
  expect(test.boot_jr_tower.drivers16, "");
  expect(test.boot_jr_tower.drivers17, "");
  expect(test.boot_jr_tower.drivers18, "");
  expect(test.boot_jr_tower.drivers19, "");
  expect(test.boot_jr_tower.drivers20, "");
  expect(test.boot_jr_tower.drivers21, "");
  expect(test.boot_jr_tower.drivers22, "");
  expect(test.boot_jr_tower.drivers23, "");
  expect(test.boot_jr_tower.drivers24, "");
  expect(test.boot_jr_tower.drivers25, "");
  expect(test.boot_jr_tower.drivers26, "");
  expect(test.boot_jr_tower.drivers27, "");
  expect(test.boot_jr_tower.drivers28, "");
  expect(test.boot_jr_tower.drivers36, "");
  expect(test.boot_jr_tower.drivers37, "");
  expect(test.boot_jr_tower.drivers38, "");
  expect(test.boot_jr_tower.drivers39, "");
  expect(test.boot_tower.drivers01, "");
  expect(test.boot_tower.drivers02, "");
  expect(test.boot_tower.drivers03, "");
  expect(test.boot_tower.drivers04, "");
  expect(test.boot_tower.drivers05, "");
  expect(test.boot_tower.drivers06, "");
  expect(test.boot_tower.drivers07, "");
  expect(test.boot_tower.drivers08, "");
  expect(test.boot_tower.drivers09, "");
  expect(test.boot_tower.drivers10, "");
  expect(test.boot_tower.drivers11, "");
  expect(test.boot_tower.drivers12, "");
  expect(test.boot_tower.drivers13, "");
  expect(test.boot_tower.drivers14, "");
  expect(test.boot_tower.drivers15, "");
  expect(test.boot_tower.drivers16, "");
  expect(test.boot_tower.drivers17, "");
  expect(test.boot_tower.drivers18, "");
  expect(test.boot_tower.drivers19, "");
  expect(test.boot_tower.drivers20, "");
  expect(test.boot_tower.drivers21, "");
  expect(test.boot_tower.drivers22, "");
  expect(test.boot_tower.drivers23, "");
  expect(test.boot_tower.drivers24, "");
  expect(test.boot_tower.drivers25, "");
  expect(test.boot_tower.drivers26, "");
  expect(test.boot_tower.drivers27, "");
  expect(test.boot_tower.drivers28, "");
  expect(test.boot_tower.drivers29, "");
  expect(test.boot_tower.drivers30, "");
  expect(test.boot_tower.drivers31, "");
  expect(test.boot_tower.drivers32, "");
  expect(test.boot_tower.drivers36, "");
  expect(test.boot_tower.drivers37, "");
  expect(test.boot_tower.drivers38, "");
  expect(test.boot_tower.drivers39, "");
  expect(test.boot_desktop.drivers01, "");
  expect(test.boot_desktop.drivers02, "");
  expect(test.boot_desktop.drivers03, "");
  expect(test.boot_desktop.drivers04, "");
  expect(test.boot_desktop.drivers05, "");
  expect(test.boot_desktop.drivers06, "");
  expect(test.boot_desktop.drivers07, "");
  expect(test.boot_desktop.drivers08, "");
  expect(test.boot_desktop.drivers09, "");
  expect(test.boot_desktop.drivers10, "");
  expect(test.boot_desktop.drivers11, "");
  expect(test.boot_desktop.drivers12, "");
  expect(test.boot_desktop.drivers13, "");
  expect(test.boot_desktop.drivers14, "");
  expect(test.boot_desktop.drivers15, "");
  expect(test.boot_desktop.drivers16, "");
  expect(test.boot_desktop.drivers17, "");
  expect(test.boot_desktop.drivers18, "");
  expect(test.boot_desktop.drivers19, "");
  expect(test.boot_desktop.drivers20, "");
  expect(test.boot_desktop.drivers21, "");
  expect(test.boot_desktop.drivers36, "");
  expect(test.boot_desktop.drivers37, "");
  expect(test.boot_desktop.drivers38, "");
  expect(test.boot_desktop.drivers39, "");
  expect(test.verup.verup, "");
  expect(test.verup.date, "");
  expect(test.verup.time, "");
  expect(test.verup.command, "");
  expect(test.verup.param, "");
  expect(test.speaker.keyvol1, 0);
  expect(test.speaker.keytone1, 0);
  expect(test.speaker.scanvol1, 0);
  expect(test.speaker.scantone1, 0);
  expect(test.speaker.keyvol2, 0);
  expect(test.speaker.keytone2, 0);
  expect(test.speaker.scanvol2, 0);
  expect(test.speaker.scantone2, 0);
  expect(test.lcdbright.lcdbright1, 0);
  expect(test.lcdbright.lcdbright2, 0);
  expect(test.logging.maxsize, 0);
  expect(test.logging.level, 0);
  expect(test.scanner.reschar, 0);
  expect(test.scanner.reschar_tower, 0);
  expect(test.scanner.reschar_add, 0);
  expect(test.subcpu1.entry, "");
  expect(test.subcpu1.priority, 0);
  expect(test.subcpu1.inifile, "");
  expect(test.spk1.entry, "");
  expect(test.spk1.priority, 0);
  expect(test.spk1.inifile, "");
  expect(test.wand1.entry, "");
  expect(test.wand1.priority, 0);
  expect(test.wand1.inifile, "");
  expect(test.wand2.entry, "");
  expect(test.wand2.priority, 0);
  expect(test.wand2.inifile, "");
  expect(test.lcdbrt1.entry, "");
  expect(test.lcdbrt1.priority, 0);
  expect(test.lcdbrt1.inifile, "");
  expect(test.lcdbrt2.entry, "");
  expect(test.lcdbrt2.priority, 0);
  expect(test.lcdbrt2.inifile, "");
  expect(test.fip1.entry, "");
  expect(test.fip1.priority, 0);
  expect(test.fip1.inifile, "");
  expect(test.mkey1.entry, "");
  expect(test.mkey1.priority, 0);
  expect(test.mkey1.inifile, "");
  expect(test.mkey2.entry, "");
  expect(test.mkey2.priority, 0);
  expect(test.mkey2.inifile, "");
  expect(test.lcd57.entry, "");
  expect(test.lcd57.priority, 0);
  expect(test.lcd57.inifile, "");
  expect(test.tkey1t.entry, "");
  expect(test.tkey1t.priority, 0);
  expect(test.tkey1t.inifile, "");
  expect(test.tkey1d.entry, "");
  expect(test.tkey1d.priority, 0);
  expect(test.tkey1d.inifile, "");
  expect(test.msr11.entry, "");
  expect(test.msr11.priority, 0);
  expect(test.msr11.inifile, "");
  expect(test.msr12.entry, "");
  expect(test.msr12.priority, 0);
  expect(test.msr12.inifile, "");
  expect(test.msr21.entry, "");
  expect(test.msr21.priority, 0);
  expect(test.msr21.inifile, "");
  expect(test.msr22.entry, "");
  expect(test.msr22.priority, 0);
  expect(test.msr22.inifile, "");
  expect(test.subcpu2.entry, "");
  expect(test.subcpu2.priority, 0);
  expect(test.subcpu2.inifile, "");
  expect(test.spk2.entry, "");
  expect(test.spk2.priority, 0);
  expect(test.spk2.inifile, "");
  expect(test.fip2.entry, "");
  expect(test.fip2.priority, 0);
  expect(test.fip2.inifile, "");
  expect(test.tkey2.entry, "");
  expect(test.tkey2.priority, 0);
  expect(test.tkey2.inifile, "");
  expect(test.tprt.entry, "");
  expect(test.tprt.priority, 0);
  expect(test.tprt.inifile, "");
  expect(test.pmouse1.entry, "");
  expect(test.pmouse1.priority, 0);
  expect(test.pmouse1.inifile, "");
  expect(test.pmouse2.entry, "");
  expect(test.pmouse2.priority, 0);
  expect(test.pmouse2.inifile, "");
  expect(test.sprt.entry, "");
  expect(test.sprt.priority, 0);
  expect(test.sprt.inifile, "");
  expect(test.mupdate.entry, "");
  expect(test.mupdate.priority, 0);
  expect(test.mupdate.inifile, "");
  expect(test.history.entry, "");
  expect(test.history.priority, 0);
  expect(test.history.inifile, "");
  expect(test.hist_csrv.entry, "");
  expect(test.hist_csrv.priority, 0);
  expect(test.hist_csrv.inifile, "");
  expect(test.tqrcd.entry, "");
  expect(test.tqrcd.priority, 0);
  expect(test.tqrcd.inifile, "");
  expect(test.hqftp.entry, "");
  expect(test.hqftp.priority, 0);
  expect(test.hqftp.inifile, "");
  expect(test.supdate.entry, "");
  expect(test.supdate.priority, 0);
  expect(test.supdate.inifile, "");
  expect(test.hqhist.entry, "");
  expect(test.hqhist.priority, 0);
  expect(test.hqhist.inifile, "");
  expect(test.hqprod.entry, "");
  expect(test.hqprod.priority, 0);
  expect(test.hqprod.inifile, "");
  expect(test.signp.entry, "");
  expect(test.signp.priority, 0);
  expect(test.signp.inifile, "");
  expect(test.detect.entry, "");
  expect(test.detect.priority, 0);
  expect(test.detect.inifile, "");
  expect(test.callsw.entry, "");
  expect(test.callsw.priority, 0);
  expect(test.callsw.inifile, "");
  expect(test.subcpu3.entry, "");
  expect(test.subcpu3.priority, 0);
  expect(test.subcpu3.inifile, "");
  expect(test.spk3.entry, "");
  expect(test.spk3.priority, 0);
  expect(test.spk3.inifile, "");
  expect(test.tkey3d.entry, "");
  expect(test.tkey3d.priority, 0);
  expect(test.tkey3d.inifile, "");
  expect(test.seg1.entry, "");
  expect(test.seg1.priority, 0);
  expect(test.seg1.inifile, "");
  expect(test.seg2.entry, "");
  expect(test.seg2.priority, 0);
  expect(test.seg2.inifile, "");
  expect(test.wand3.entry, "");
  expect(test.wand3.priority, 0);
  expect(test.wand3.inifile, "");
  expect(test.lcdbrt3.entry, "");
  expect(test.lcdbrt3.priority, 0);
  expect(test.lcdbrt3.inifile, "");
  expect(test.mkey3.entry, "");
  expect(test.mkey3.priority, 0);
  expect(test.mkey3.inifile, "");
  expect(test.msr31.entry, "");
  expect(test.msr31.priority, 0);
  expect(test.msr31.inifile, "");
  expect(test.msr32.entry, "");
  expect(test.msr32.priority, 0);
  expect(test.msr32.inifile, "");
  expect(test.pmouse3.entry, "");
  expect(test.pmouse3.priority, 0);
  expect(test.pmouse3.inifile, "");
  expect(test.schctrl.entry, "");
  expect(test.schctrl.priority, 0);
  expect(test.schctrl.inifile, "");
  expect(test.fip3.entry, "");
  expect(test.fip3.priority, 0);
  expect(test.fip3.inifile, "");
  expect(test.vfd57_3.entry, "");
  expect(test.vfd57_3.priority, 0);
  expect(test.vfd57_3.inifile, "");
  expect(test.tprtf.entry, "");
  expect(test.tprtf.priority, 0);
  expect(test.tprtf.inifile, "");
  expect(test.tprts.entry, "");
  expect(test.tprts.priority, 0);
  expect(test.tprts.inifile, "");
  expect(test.pmouse_plus_1.entry, "");
  expect(test.pmouse_plus_1.priority, 0);
  expect(test.pmouse_plus_1.inifile, "");
  expect(test.pmouse_plus_1.tower, 0);
  expect(test.pmouse_2300_1.entry, "");
  expect(test.pmouse_2300_1.priority, 0);
  expect(test.pmouse_2300_1.inifile, "");
  expect(test.pmouse_2300_1.tower, 0);
  expect(test.pmouse_2300_2.entry, "");
  expect(test.pmouse_2300_2.priority, 0);
  expect(test.pmouse_2300_2.inifile, "");
  expect(test.pmouse_2300_2.tower, 0);
  expect(test.fip_plus_1.entry, "");
  expect(test.fip_plus_1.priority, 0);
  expect(test.fip_plus_1.inifile, "");
  expect(test.fip_plus_1.tower, 0);
  expect(test.fip_2300_1.entry, "");
  expect(test.fip_2300_1.priority, 0);
  expect(test.fip_2300_1.inifile, "");
  expect(test.fip_2300_1.tower, 0);
  expect(test.fip_2300_2.entry, "");
  expect(test.fip_2300_2.priority, 0);
  expect(test.fip_2300_2.inifile, "");
  expect(test.fip_2300_2.tower, 0);
  expect(test.segd_plus_1.entry, "");
  expect(test.segd_plus_1.priority, 0);
  expect(test.segd_plus_1.inifile, "");
  expect(test.segd_2300_1.entry, "");
  expect(test.segd_2300_1.priority, 0);
  expect(test.segd_2300_1.inifile, "");
  expect(test.segd_2300_2.entry, "");
  expect(test.segd_2300_2.priority, 0);
  expect(test.segd_2300_2.inifile, "");
  expect(test.vfd57_plus_1.entry, "");
  expect(test.vfd57_plus_1.priority, 0);
  expect(test.vfd57_plus_1.inifile, "");
  expect(test.vfd57_2300_1.entry, "");
  expect(test.vfd57_2300_1.priority, 0);
  expect(test.vfd57_2300_1.inifile, "");
  expect(test.vfd57_2300_2.entry, "");
  expect(test.vfd57_2300_2.priority, 0);
  expect(test.vfd57_2300_2.inifile, "");
  expect(test.mkey_plus_1.entry, "");
  expect(test.mkey_plus_1.priority, 0);
  expect(test.mkey_plus_1.inifile, "");
  expect(test.mkey_plus_1.tower, 0);
  expect(test.mkey_2300_1.entry, "");
  expect(test.mkey_2300_1.priority, 0);
  expect(test.mkey_2300_1.inifile, "");
  expect(test.mkey_2300_1.tower, 0);
  expect(test.mkey_2300_2.entry, "");
  expect(test.mkey_2300_2.priority, 0);
  expect(test.mkey_2300_2.inifile, "");
  expect(test.mkey_2300_2.tower, 0);
  expect(test.scan_plus_1.entry, "");
  expect(test.scan_plus_1.priority, 0);
  expect(test.scan_plus_1.inifile, "");
  expect(test.scan_plus_1.tower, 0);
  expect(test.scan_plus_2.entry, "");
  expect(test.scan_plus_2.priority, 0);
  expect(test.scan_plus_2.inifile, "");
  expect(test.scan_plus_2.tower, 0);
  expect(test.scan_2300_1.entry, "");
  expect(test.scan_2300_1.priority, 0);
  expect(test.scan_2300_1.inifile, "");
  expect(test.scan_2300_1.tower, 0);
  expect(test.scan_2300_2.entry, "");
  expect(test.scan_2300_2.priority, 0);
  expect(test.scan_2300_2.inifile, "");
  expect(test.scan_2300_2.tower, 0);
  expect(test.msr_2300_1.entry, "");
  expect(test.msr_2300_1.priority, 0);
  expect(test.msr_2300_1.inifile, "");
  expect(test.msr_2300_1.tower, 0);
  expect(test.msr_2300_2.entry, "");
  expect(test.msr_2300_2.priority, 0);
  expect(test.msr_2300_2.inifile, "");
  expect(test.msr_2300_2.tower, 0);
  expect(test.mkey_2800_1.entry, "");
  expect(test.mkey_2800_1.priority, 0);
  expect(test.mkey_2800_1.inifile, "");
  expect(test.mkey_2800_1.tower, 0);
  expect(test.mkey_2800_2.entry, "");
  expect(test.mkey_2800_2.priority, 0);
  expect(test.mkey_2800_2.inifile, "");
  expect(test.mkey_2800_2.tower, 0);
  expect(test.pmouse_2800_1.entry, "");
  expect(test.pmouse_2800_1.priority, 0);
  expect(test.pmouse_2800_1.inifile, "");
  expect(test.pmouse_2800_1.inifile2, "");
  expect(test.pmouse_2800_1.tower, 0);
  expect(test.pmouse_2800_2.entry, "");
  expect(test.pmouse_2800_2.priority, 0);
  expect(test.pmouse_2800_2.inifile, "");
  expect(test.pmouse_2800_2.tower, 0);
  expect(test.pmouse_2800_3.entry, "");
  expect(test.pmouse_2800_3.priority, 0);
  expect(test.pmouse_2800_3.inifile, "");
  expect(test.pmouse_2800_3.inifile2, "");
  expect(test.pmouse_2800_3.inifile3, "");
  expect(test.pmouse_2800_3.tower, 0);
  expect(test.scan_2800_1.entry, "");
  expect(test.scan_2800_1.priority, 0);
  expect(test.scan_2800_1.inifile, "");
  expect(test.scan_2800_1.tower, 0);
  expect(test.scan_2800_2.entry, "");
  expect(test.scan_2800_2.priority, 0);
  expect(test.scan_2800_2.inifile, "");
  expect(test.scan_2800_2.tower, 0);
  expect(test.fip_2800_1.entry, "");
  expect(test.fip_2800_1.priority, 0);
  expect(test.fip_2800_1.inifile, "");
  expect(test.fip_2800_1.tower, 0);
  expect(test.fip_2800_2.entry, "");
  expect(test.fip_2800_2.priority, 0);
  expect(test.fip_2800_2.inifile, "");
  expect(test.fip_2800_2.tower, 0);
  expect(test.fip_2800_3.entry, "");
  expect(test.fip_2800_3.priority, 0);
  expect(test.fip_2800_3.inifile, "");
  expect(test.fip_2800_3.tower, 0);
  expect(test.drw_2800_1.entry, "");
  expect(test.drw_2800_1.priority, 0);
  expect(test.drw_2800_1.inifile, "");
  expect(test.drw_2800_1.tower, 0);
  expect(test.drw_2800_2.entry, "");
  expect(test.drw_2800_2.priority, 0);
  expect(test.drw_2800_2.inifile, "");
  expect(test.drw_2800_2.tower, 0);
  expect(test.tprtss.entry, "");
  expect(test.tprtss.priority, 0);
  expect(test.tprtss.inifile, "");
  expect(test.tprtss2.entry, "");
  expect(test.tprtss2.priority, 0);
  expect(test.tprtss2.inifile, "");
  expect(test.pmouse_2500_1.entry, "");
  expect(test.pmouse_2500_1.priority, 0);
  expect(test.pmouse_2500_1.inifile, "");
  expect(test.pmouse_2500_1.inifile2, "");
  expect(test.pmouse_2500_1.tower, 0);
  expect(test.pmouse_2500_2.entry, "");
  expect(test.pmouse_2500_2.priority, 0);
  expect(test.pmouse_2500_2.inifile, "");
  expect(test.pmouse_2500_2.tower, 0);
  expect(test.fip_2500_1.entry, "");
  expect(test.fip_2500_1.priority, 0);
  expect(test.fip_2500_1.inifile, "");
  expect(test.fip_2500_1.tower, 0);
  expect(test.fip_2500_2.entry, "");
  expect(test.fip_2500_2.priority, 0);
  expect(test.fip_2500_2.inifile, "");
  expect(test.fip_2500_2.tower, 0);
  expect(test.scan_2500_1.entry, "");
  expect(test.scan_2500_1.priority, 0);
  expect(test.scan_2500_1.inifile, "");
  expect(test.scan_2500_1.tower, 0);
  expect(test.scan_2500_2.entry, "");
  expect(test.scan_2500_2.priority, 0);
  expect(test.scan_2500_2.inifile, "");
  expect(test.scan_2500_2.tower, 0);
  expect(test.msr_2500_1.entry, "");
  expect(test.msr_2500_1.priority, 0);
  expect(test.msr_2500_1.inifile, "");
  expect(test.msr_2500_1.tower, 0);
  expect(test.msr_2500_2.entry, "");
  expect(test.msr_2500_2.priority, 0);
  expect(test.msr_2500_2.inifile, "");
  expect(test.msr_2500_2.tower, 0);
  expect(test.pmouse_2350_1.entry, "");
  expect(test.pmouse_2350_1.priority, 0);
  expect(test.pmouse_2350_1.inifile, "");
  expect(test.pmouse_2350_1.tower, 0);
  expect(test.pmouse_2350_2.entry, "");
  expect(test.pmouse_2350_2.priority, 0);
  expect(test.pmouse_2350_2.inifile, "");
  expect(test.pmouse_2350_2.tower, 0);
  expect(test.scan_2800ip_1.entry, "");
  expect(test.scan_2800ip_1.priority, 0);
  expect(test.scan_2800ip_1.inifile, "");
  expect(test.scan_2800ip_1.tower, 0);
  expect(test.scan_2800ip_2.entry, "");
  expect(test.scan_2800ip_2.priority, 0);
  expect(test.scan_2800ip_2.inifile, "");
  expect(test.scan_2800ip_2.tower, 0);
  expect(test.tprtim.entry, "");
  expect(test.tprtim.priority, 0);
  expect(test.tprtim.inifile, "");
  expect(test.fip_2800im_1.entry, "");
  expect(test.fip_2800im_1.priority, 0);
  expect(test.fip_2800im_1.inifile, "");
  expect(test.fip_2800im_1.tower, 0);
  expect(test.fip_2800im_2.entry, "");
  expect(test.fip_2800im_2.priority, 0);
  expect(test.fip_2800im_2.inifile, "");
  expect(test.fip_2800im_2.tower, 0);
  expect(test.fip_2800im_3.entry, "");
  expect(test.fip_2800im_3.priority, 0);
  expect(test.fip_2800im_3.inifile, "");
  expect(test.fip_2800im_3.tower, 0);
  expect(test.scan_2800im_1.entry, "");
  expect(test.scan_2800im_1.priority, 0);
  expect(test.scan_2800im_1.inifile, "");
  expect(test.scan_2800im_1.tower, 0);
  expect(test.scan_2800im_2.entry, "");
  expect(test.scan_2800im_2.priority, 0);
  expect(test.scan_2800im_2.inifile, "");
  expect(test.scan_2800im_2.tower, 0);
  expect(test.pmouse_plus2_1.entry, "");
  expect(test.pmouse_plus2_1.priority, 0);
  expect(test.pmouse_plus2_1.inifile, "");
  expect(test.pmouse_plus2_1.tower, 0);
  expect(test.fip_plus2_1.entry, "");
  expect(test.fip_plus2_1.priority, 0);
  expect(test.fip_plus2_1.inifile, "");
  expect(test.fip_plus2_1.tower, 0);
  expect(test.fip_plus2_2.entry, "");
  expect(test.fip_plus2_2.priority, 0);
  expect(test.fip_plus2_2.inifile, "");
  expect(test.fip_plus2_2.tower, 0);
  expect(test.fip_plus2_3.entry, "");
  expect(test.fip_plus2_3.priority, 0);
  expect(test.fip_plus2_3.inifile, "");
  expect(test.fip_plus2_3.tower, 0);
  expect(test.msr_plus2_1.entry, "");
  expect(test.msr_plus2_1.priority, 0);
  expect(test.msr_plus2_1.inifile, "");
  expect(test.msr_plus2_1.tower, 0);
  expect(test.scan_2800a3_1.entry, "");
  expect(test.scan_2800a3_1.priority, 0);
  expect(test.scan_2800a3_1.inifile, "");
  expect(test.scan_2800a3_1.tower, 0);
  expect(test.scan_2800i3_1.entry, "");
  expect(test.scan_2800i3_1.priority, 0);
  expect(test.scan_2800i3_1.inifile, "");
  expect(test.scan_2800i3_1.tower, 0);
  expect(test.msr_int_1.entry, "");
  expect(test.msr_int_1.priority, 0);
  expect(test.msr_int_1.inifile, "");
  expect(test.msr_int_1.tower, 0);
  expect(test.scan_2800g3_1.entry, "");
  expect(test.scan_2800g3_1.priority, 0);
  expect(test.scan_2800g3_1.inifile, "");
  expect(test.scan_2800g3_1.tower, 0);
  expect(test.pmouse_2800_4.entry, "");
  expect(test.pmouse_2800_4.priority, 0);
  expect(test.pmouse_2800_4.inifile, "");
  expect(test.pmouse_2800_4.inifile2, "");
  expect(test.pmouse_2800_4.tower, 0);
  expect(test.tprthp.entry, "");
  expect(test.tprthp.priority, 0);
  expect(test.tprthp.inifile, "");
  expect(test.sprocket.entry, "");
  expect(test.sprocket.priority, 0);
  expect(test.sprocket.inifile, "");
  expect(test.acr.entry, "");
  expect(test.acr.priority, 0);
  expect(test.acr.inifile, "");
  expect(test.acb.entry, "");
  expect(test.acb.priority, 0);
  expect(test.acb.inifile, "");
  expect(test.acb20.entry, "");
  expect(test.acb20.priority, 0);
  expect(test.acb20.inifile, "");
  expect(test.rewrite.entry, "");
  expect(test.rewrite.priority, 0);
  expect(test.rewrite.inifile, "");
  expect(test.vismac.entry, "");
  expect(test.vismac.priority, 0);
  expect(test.vismac.inifile, "");
  expect(test.gcat.entry, "");
  expect(test.gcat.priority, 0);
  expect(test.gcat.inifile, "");
  expect(test.debit.entry, "");
  expect(test.debit.priority, 0);
  expect(test.debit.inifile, "");
  expect(test.scale.entry, "");
  expect(test.scale.priority, 0);
  expect(test.scale.inifile, "");
  expect(test.orc.entry, "");
  expect(test.orc.priority, 0);
  expect(test.orc.inifile, "");
  expect(test.sg_scale1.entry, "");
  expect(test.sg_scale1.priority, 0);
  expect(test.sg_scale1.inifile, "");
  expect(test.sg_scale2.entry, "");
  expect(test.sg_scale2.priority, 0);
  expect(test.sg_scale2.inifile, "");
  expect(test.sm_scale1.entry, "");
  expect(test.sm_scale1.priority, 0);
  expect(test.sm_scale1.inifile, "");
  expect(test.sm_scale2.entry, "");
  expect(test.sm_scale2.priority, 0);
  expect(test.sm_scale2.inifile, "");
  expect(test.sip60.entry, "");
  expect(test.sip60.priority, 0);
  expect(test.sip60.inifile, "");
  expect(test.psp60.entry, "");
  expect(test.psp60.priority, 0);
  expect(test.psp60.inifile, "");
  expect(test.stpr.entry, "");
  expect(test.stpr.priority, 0);
  expect(test.stpr.inifile, "");
  expect(test.pana.entry, "");
  expect(test.pana.priority, 0);
  expect(test.pana.inifile, "");
  expect(test.gp.entry, "");
  expect(test.gp.priority, 0);
  expect(test.gp.inifile, "");
  expect(test.sm_scalesc.entry, "");
  expect(test.sm_scalesc.priority, 0);
  expect(test.sm_scalesc.inifile, "");
  expect(test.sm_scalesc_scl.entry, "");
  expect(test.sm_scalesc_scl.priority, 0);
  expect(test.sm_scalesc_scl.inifile, "");
  expect(test.sm_scalesc_signp.entry, "");
  expect(test.sm_scalesc_signp.priority, 0);
  expect(test.sm_scalesc_signp.inifile, "");
  expect(test.s2pr.entry, "");
  expect(test.s2pr.priority, 0);
  expect(test.s2pr.inifile, "");
  expect(test.acb50.entry, "");
  expect(test.acb50.priority, 0);
  expect(test.acb50.inifile, "");
  expect(test.pwrctrl.entry, "");
  expect(test.pwrctrl.priority, 0);
  expect(test.pwrctrl.inifile, "");
  expect(test.pw410.entry, "");
  expect(test.pw410.priority, 0);
  expect(test.pw410.inifile, "");
  expect(test.ccr.entry, "");
  expect(test.ccr.priority, 0);
  expect(test.ccr.inifile, "");
  expect(test.psp70.entry, "");
  expect(test.psp70.priority, 0);
  expect(test.psp70.inifile, "");
  expect(test.dish.entry, "");
  expect(test.dish.priority, 0);
  expect(test.dish.inifile, "");
  expect(test.aiv.entry, "");
  expect(test.aiv.priority, 0);
  expect(test.aiv.inifile, "");
  expect(test.ar_stts_01.entry, "");
  expect(test.ar_stts_01.priority, 0);
  expect(test.ar_stts_01.inifile, "");
  expect(test.gcat_cnct.entry, "");
  expect(test.gcat_cnct.priority, 0);
  expect(test.gcat_cnct.inifile, "");
  expect(test.yomoca.entry, "");
  expect(test.yomoca.priority, 0);
  expect(test.yomoca.inifile, "");
  expect(test.smtplus.entry, "");
  expect(test.smtplus.priority, 0);
  expect(test.smtplus.inifile, "");
  expect(test.suica.entry, "");
  expect(test.suica.priority, 0);
  expect(test.suica.inifile, "");
  expect(test.rfid.entry, "");
  expect(test.rfid.priority, 0);
  expect(test.rfid.inifile, "");
  expect(test.disht.entry, "");
  expect(test.disht.priority, 0);
  expect(test.disht.inifile, "");
  expect(test.mcp200.entry, "");
  expect(test.mcp200.priority, 0);
  expect(test.mcp200.inifile, "");
  expect(test.fcl.entry, "");
  expect(test.fcl.priority, 0);
  expect(test.fcl.inifile, "");
  expect(test.jrw_multi.entry, "");
  expect(test.jrw_multi.priority, 0);
  expect(test.jrw_multi.inifile, "");
  expect(test.ht2980.entry, "");
  expect(test.ht2980.priority, 0);
  expect(test.ht2980.inifile, "");
  expect(test.absv31.entry, "");
  expect(test.absv31.priority, 0);
  expect(test.absv31.inifile, "");
  expect(test.yamato.entry, "");
  expect(test.yamato.priority, 0);
  expect(test.yamato.inifile, "");
  expect(test.cct.entry, "");
  expect(test.cct.priority, 0);
  expect(test.cct.inifile, "");
  expect(test.castles.entry, "");
  expect(test.castles.priority, 0);
  expect(test.castles.inifile, "");
  expect(test.usbcam.entry, "");
  expect(test.usbcam.priority, 0);
  expect(test.usbcam.inifile, "");
  expect(test.masr.entry, "");
  expect(test.masr.priority, 0);
  expect(test.masr.inifile, "");
  expect(test.jmups.entry, "");
  expect(test.jmups.priority, 0);
  expect(test.jmups.inifile, "");
  expect(test.fal2.entry, "");
  expect(test.fal2.priority, 0);
  expect(test.fal2.inifile, "");
  expect(test.sqrc.entry, "");
  expect(test.sqrc.priority, 0);
  expect(test.sqrc.inifile, "");
  expect(test.tprtrp.entry, "");
  expect(test.tprtrp.priority, 0);
  expect(test.tprtrp.inifile, "");
  expect(test.tprtrp2.entry, "");
  expect(test.tprtrp2.priority, 0);
  expect(test.tprtrp2.inifile, "");
  expect(test.iccard.entry, "");
  expect(test.iccard.priority, 0);
  expect(test.iccard.inifile, "");
  expect(test.mst.entry, "");
  expect(test.mst.priority, 0);
  expect(test.mst.inifile, "");
  expect(test.scan_2800_3.entry, "");
  expect(test.scan_2800_3.priority, 0);
  expect(test.scan_2800_3.inifile, "");
  expect(test.scan_2800_3.tower, 0);
  expect(test.vega3000.entry, "");
  expect(test.vega3000.priority, 0);
  expect(test.vega3000.inifile, "");
  expect(test.powli.entry, "");
  expect(test.powli.priority, 0);
  expect(test.powli.inifile, "");
  expect(test.scan_2800_4.entry, "");
  expect(test.scan_2800_4.priority, 0);
  expect(test.scan_2800_4.inifile, "");
  expect(test.scan_2800_4.tower, 0);
  expect(test.psensor_1.entry, "");
  expect(test.psensor_1.priority, 0);
  expect(test.psensor_1.inifile, "");
  expect(test.apbf_1.entry, "");
  expect(test.apbf_1.priority, 0);
  expect(test.apbf_1.inifile, "");
  expect(test.scalerm.entry, "");
  expect(test.scalerm.priority, 0);
  expect(test.scalerm.inifile, "");
  expect(test.exc.entry, "");
  expect(test.exc.priority, 0);
  expect(test.exc.inifile, "");
  expect(test.pct.entry, "");
  expect(test.pct.priority, 0);
  expect(test.pct.inifile, "");
  expect(test.hitouch.entry, "");
  expect(test.hitouch.priority, 0);
  expect(test.hitouch.inifile, "");
  expect(test.ami.entry, "");
  expect(test.ami.priority, 0);
  expect(test.ami.inifile, "");
  expect(test.scale_sks.entry, "");
  expect(test.scale_sks.priority, 0);
  expect(test.scale_sks.inifile, "");
  expect(test.aibox.entry, "");
  expect(test.aibox.priority, 0);
  expect(test.aibox.inifile, "");
}

void allPropatyCheck(SysJsonFile test, bool firstItemCheck)
{
  if(firstItemCheck == true) {
    expect(test.info.version, "00.00.85");
  }
  expect(test.info.comment, "release version for fsiabc");
  expect(test.type.dual, "no");
  expect(test.type.webjr, "no");
  expect(test.type.web2300, "no");
  expect(test.type.webplus, "no");
  expect(test.type.web2800, "yes");
  expect(test.type.web2350, "no");
  expect(test.type.web2500, "no");
  expect(test.type.webplus2, "no");
  expect(test.type.tower, "no");
  expect(test.type.mskind, "m");
  expect(test.type.standalone, "no");
  expect(test.type.membersystem, "no");
  expect(test.type.memberpoint, "no");
  expect(test.type.memberfsp, "no");
  expect(test.type.creditsystem, "no");
  expect(test.type.special_receipt, "no");
  expect(test.type.disc_barcode, "no");
  expect(test.type.iwaisystem, "no");
  expect(test.type.self_gate, "no");
  expect(test.type.vismacsystem, "no");
  expect(test.type.sys_24hour, "no");
  expect(test.type.hq_asp, "no");
  expect(test.type.jasaitama_sys, "no");
  expect(test.type.promsystem, "no");
  expect(test.type.edysystem, "no");
  expect(test.type.fresh_barcode, "no");
  expect(test.type.sugi_sys, "no");
  expect(test.type.hesokurisystem, "no");
  expect(test.type.greenstamp_sys, "no");
  expect(test.type.coopsystem, "no");
  expect(test.type.pointcardsystem, "no");
  expect(test.type.mobilesystem, "no");
  expect(test.type.hq_other, "no");
  expect(test.type.regconnectsystem, "no");
  expect(test.type.clothes_barcode, "no");
  expect(test.type.fjss, "no");
  expect(test.type.mcsystem, "no");
  expect(test.type.network_prn, "no");
  expect(test.type.poppy_print, "no");
  expect(test.type.tag_print, "no");
  expect(test.type.taurus, "no");
  expect(test.type.ntt_asp, "no");
  expect(test.type.eat_in, "no");
  expect(test.type.mobilesystem2, "no");
  expect(test.type.magazine_barcode, "no");
  expect(test.type.hq_other_real, "no");
  expect(test.type.pw410system, "no");
  expect(test.type.nsc_credit, "no");
  expect(test.type.hq_prod, "no");
  expect(test.type.felicasystem, "no");
  expect(test.type.psp70system, "no");
  expect(test.type.ntt_bcom, "no");
  expect(test.type.catalinasystem, "no");
  expect(test.type.prcchkr, "no");
  expect(test.type.dishcalcsystem, "no");
  expect(test.type.itf_barcode, "no");
  expect(test.type.css_act, "no");
  expect(test.type.cust_detail, "no");
  expect(test.type.custrealsvr, "no");
  expect(test.type.suica_cat, "no");
  expect(test.type.yomocasystem, "no");
  expect(test.type.smartplussystem, "no");
  expect(test.type.duty, "no");
  expect(test.type.ecoasystem, "no");
  expect(test.type.iccardsystem, "no");
  expect(test.type.sub_ticket, "no");
  expect(test.type.quicpaysystem, "no");
  expect(test.type.idsystem, "no");
  expect(test.type.revival_receipt, "no");
  expect(test.type.quick_self, "no");
  expect(test.type.quick_self_chg, "no");
  expect(test.type.assist_monitor, "no");
  expect(test.type.mp1_print, "no");
  expect(test.type.realitmsend, "no");
  expect(test.type.rainbowcard, "no");
  expect(test.type.gramx, "no");
  expect(test.type.mm_abj, "no");
  expect(test.type.cat_point, "no");
  expect(test.type.tagrdwt, "no");
  expect(test.type.department_store, "no");
  expect(test.type.edyno_mbr, "no");
  expect(test.type.fcf_card, "no");
  expect(test.type.panamembersystem, "no");
  expect(test.type.landisk, "no");
  expect(test.type.pitapasystem, "no");
  expect(test.type.tuocardsystem, "no");
  expect(test.type.sallmtbar, "no");
  expect(test.type.business_mode, "no");
  expect(test.type.mcp200system, "no");
  expect(test.type.spvtsystem, "no");
  expect(test.type.remotesystem, "no");
  expect(test.type.order_mode, "no");
  expect(test.type.jrem_multisystem, "no");
  expect(test.type.media_info, "no");
  expect(test.type.gs1_barcode, "no");
  expect(test.type.assortsystem, "no");
  expect(test.type.center_server, "no");
  expect(test.type.reservsystem, "no");
  expect(test.type.drug_rev, "no");
  expect(test.type.gincardsystem, "no");
  expect(test.type.fclqpsystem, "no");
  expect(test.type.fcledysystem, "no");
  expect(test.type.caps_cafis, "no");
  expect(test.type.fclidsystem, "no");
  expect(test.type.ptcktissusystem, "no");
  expect(test.type.abs_prepaid, "no");
  expect(test.type.prod_item_autoset, "no");
  expect(test.type.prod_itf14_barcode, "no");
  expect(test.type.special_coupon, "no");
  expect(test.type.bluechip_server, "no");
  expect(test.type.hitachi_bluechip, "no");
  expect(test.type.hq_other_cantevole, "no");
  expect(test.type.qcashier_system, "no");
  expect(test.type.receipt_qr_system, "no");
  expect(test.type.visatouch_infox, "no");
  expect(test.type.pbchg_system, "no");
  expect(test.type.hc1_system, "no");
  expect(test.type.caps_hc1_cafis, "no");
  expect(test.type.remoteserver, "no");
  expect(test.type.mrycardsystem, "no");
  expect(test.type.sp_department, "no");
  expect(test.type.decimalitmsend, "no");
  expect(test.type.wiz_cnct, "no");
  expect(test.type.absv31_rwt, "no");
  expect(test.type.pluralqr_system, "no");
  expect(test.type.netdoareserv, "no");
  expect(test.type.selpluadj, "no");
  expect(test.type.custreal_webser, "no");
  expect(test.type.wiz_abj, "no");
  expect(test.type.custreal_uid, "no");
  expect(test.type.bdlitmsend, "no");
  expect(test.type.custreal_netdoa, "no");
  expect(test.type.ut_cnct, "no");
  expect(test.type.caps_pqvic, "no");
  expect(test.type.yamato_system, "no");
  expect(test.type.caps_cafis_standard, "no");
  expect(test.type.nttd_preca, "no");
  expect(test.type.usbcam_cnct, "no");
  expect(test.type.drugstore, "no");
  expect(test.type.custreal_nec, "no");
  expect(test.type.custreal_op, "no");
  expect(test.type.dummy_crdt, "no");
  expect(test.type.hc2_system, "no");
  expect(test.type.price_sound, "no");
  expect(test.type.dummy_preca, "no");
  expect(test.type.monitored_system, "no");
  expect(test.type.jmups_system, "no");
  expect(test.type.ut1qpsystem, "no");
  expect(test.type.ut1idsystem, "no");
  expect(test.type.brain_system, "no");
  expect(test.type.pfmpitapasystem, "no");
  expect(test.type.pfmjricsystem, "no");
  expect(test.type.chargeslip_system, "no");
  expect(test.type.pfmjricchargesystem, "no");
  expect(test.type.itemprc_reduction_coupon, "no");
  expect(test.type.cat_jmups_system, "no");
  expect(test.type.sqrc_ticket_system, "no");
  expect(test.type.cct_connect_system, "no");
  expect(test.type.cct_emoney_system, "no");
  expect(test.type.tec_infox_jet_s_system, "no");
  expect(test.type.prod_instore_zero_flg, "no");
  expect(test.type.front_self_system, "no");
  expect(test.type.trk_preca, "no");
  expect(test.type.desktop_cashier_system, "no");
  expect(test.type.suica_charge_system, "no");
  expect(test.type.nimoca_point_system, "no");
  expect(test.type.custreal_pointartist, "no");
  expect(test.type.tb1_system, "no");
  expect(test.type.tax_free_system, "no");
  expect(test.type.repica_system, "no");
  expect(test.type.caps_cardnet_system, "no");
  expect(test.type.yumeca_system, "no");
  expect(test.type.dummy_suica, "no");
  expect(test.type.payment_mng, "no");
  expect(test.type.custreal_tpoint, "no");
  expect(test.type.mammy_system, "no");
  expect(test.type.itemtyp_send, "no");
  expect(test.type.yumeca_pol_system, "no");
  expect(test.type.custreal_hps, "no");
  expect(test.type.maruto_system, "no");
  expect(test.type.hc3_system, "no");
  expect(test.type.sm3_marui_system, "no");
  expect(test.type.kitchen_print, "no");
  expect(test.type.cogca_system, "no");
  expect(test.type.bdl_multi_select_system, "no");
  expect(test.type.sallmtbar26, "no");
  expect(test.type.purchase_ticket_system, "no");
  expect(test.type.custreal_uni_system, "no");
  expect(test.type.ej_animation_system, "no");
  expect(test.type.value_card_system, "no");
  expect(test.type.sm4_comodi_system, "no");
  expect(test.type.sm5_itoku_system, "no");
  expect(test.type.cct_pointuse_system, "no");
  expect(test.type.zhq_system, "no");
  expect(test.type.rpoint_system, "no");
  expect(test.type.vesca_system, "no");
  expect(test.type.ajs_emoney_system, "no");
  expect(test.type.sm16_taiyo_toyocho_system, "no");
  expect(test.type.infox_detail_send_system, "no");
  expect(test.type.self_medication_system, "no");
  expect(test.type.sm20_maeda_system, "no");
  expect(test.type.pana_waon_system, "no");
  expect(test.type.onepay_system, "no");
  expect(test.type.happyself_system, "no");
  expect(test.type.happyself_smile_system, "no");
  expect(test.type.linepay_system, "no");
  expect(test.type.staff_release_system, "no");
  expect(test.type.wiz_base_system, "no");
  expect(test.type.pack_on_time_system, "no");
  expect(test.type.shop_and_go_system, "no");
  expect(test.type.staffid1_ymss_system, "no");
  expect(test.type.sm33_nishizawa_system, "no");
  expect(test.type.ds2_godai_system, "no");
  expect(test.type.taxfree_passportinfo_system, "no");
  expect(test.type.sm36_sanpraza_system, "no");
  expect(test.type.cr50_system, "no");
  expect(test.type.case_clothes_barcode_system, "no");
  expect(test.type.custreal_dummy_system, "no");
  expect(test.type.reason_select_std_system, "no");
  expect(test.type.barcode_pay1_system, "no");
  expect(test.type.custreal_ptactix, "no");
  expect(test.type.cr3_sharp_system, "no");
  expect(test.type.game_barcode_system, "no");
  expect(test.type.cct_codepay_system, "no");
  expect(test.type.ws_system, "no");
  expect(test.type.custreal_pointinfinity, "no");
  expect(test.type.toy_system, "no");
  expect(test.type.canal_payment_service_system, "no");
  expect(test.type.multi_vega_system, "no");
  expect(test.type.dispensing_pharmacy_system, "no");
  expect(test.type.sm41_bellejois_system, "no");
  expect(test.type.sm42_kanesue_system, "no");
  expect(test.type.dpoint_system, "no");
  expect(test.type.public_barcode_pay_system, "no");
  expect(test.type.ts_indiv_setting_system, "no");
  expect(test.type.sm44_ja_tsuruoka_system, "no");
  expect(test.type.stera_terminal_system, "no");
  expect(test.type.repica_point_system, "no");
  expect(test.type.sm45_ocean_system, "no");
  expect(test.type.fujitsu_fip_codepay_system, "no");
  expect(test.type.sm49_itochain_system, "no");
  expect(test.type.taxfree_server_system, "no");
  expect(test.type.employee_card_payment_system, "no");
  expect(test.type.net_receipt_system, "no");
  expect(test.type.public_barcode_pay2_system, "no");
  expect(test.type.sm52_palette_system, "no");
  expect(test.type.public_barcode_pay3_system, "no");
  expect(test.type.svscls2_stlpdsc_system, "no");
  expect(test.type.sm55_takayanagi_system, "no");
  expect(test.type.mail_send_system, "no");
  expect(test.type.netstars_codepay_system, "no");
  expect(test.type.sm56_kobebussan_system, "no");
  expect(test.type.hys1_seria_system, "no");
  expect(test.type.liqr_taxfree_system, "no");
  expect(test.type.custreal_gyomuca_system, "no");
  expect(test.type.sm59_takaramc_system, "no");
  expect(test.type.detail_noprn_system, "no");
  expect(test.type.sm61_fujifilm_system, "no");
  expect(test.type.department2_system, "no");
  expect(test.type.custreal_crosspoint, "no");
  expect(test.type.hc12_joyful_honda_system, "no");
  expect(test.type.sm62_maruichi_system, "no");
  expect(test.type.sm65_ryubo_system, "no");
  expect(test.type.tomoIF_system, "no");
  expect(test.type.sm66_fresta_system, "no");
  expect(test.type.cosme1_istyle_system, "no");
  expect(test.type.sm71_selection_system, "no");
  expect(test.type.kitchen_print_recipt, "no");
  expect(test.type.miyazaki_city_system, "no");
  expect(test.type.public_barcode_pay4_system, "no");
  expect(test.type.sp1_qr_read_system, "no");
  expect(test.type.aibox_alignment_system, "no");
  expect(test.type.cashonly_keyopt_system, "no");
  expect(test.type.sm74_ozeki_system, "no");
  expect(test.type.carparking_qr_system, "no");
  expect(test.type.olc_system, "no");
  expect(test.type.quiz_payment_system, "no");
  expect(test.type.jets_lane_system, "no");
  expect(test.type.rf1_hs_system, "no");
  expect(test.dip_sw.subcpu1, "");
  expect(test.dip_sw.subcpu2, "");
  expect(test.boot_webplus2_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_webplus2_desktop.drivers02, "pmouse_plus2_1");
  expect(test.boot_webplus2_desktop.drivers03, "fip_plus2_1");
  expect(test.boot_webplus2_desktop.drivers04, "mupdate");
  expect(test.boot_webplus2_desktop.drivers05, "history");
  expect(test.boot_webplus2_desktop.drivers06, "hqftp");
  expect(test.boot_webplus2_desktop.drivers07, "supdate");
  expect(test.boot_webplus2_desktop.drivers08, "hqhist");
  expect(test.boot_webplus2_desktop.drivers09, "schctrl");
  expect(test.boot_webplus2_desktop.drivers10, "hqprod");
  expect(test.boot_webplus2_desktop.drivers11, "tprtss");
  expect(test.boot_webplus2_desktop.drivers12, "msr_plus2_1");
  expect(test.boot_webplus2_desktop.drivers13, "fip_plus2_2");
  expect(test.boot_webplus2_desktop.drivers14, "fip_plus2_3");
  expect(test.boot_webplus2_desktop.drivers15, "hist_csrv");
  expect(test.boot_webplus2_desktop.drivers16, "tprtrp");
  expect(test.boot_webplus2_desktop.drivers17, "tprtrp2");
  expect(test.boot_webplus2_desktop.drivers18, "iccard");
  expect(test.boot_webplus2_desktop.drivers36, "");
  expect(test.boot_webplus2_desktop.drivers37, "");
  expect(test.boot_webplus2_desktop.drivers38, "");
  expect(test.boot_webplus2_desktop.drivers39, "");
  expect(test.boot_web2350_tower.drivers01, "mkey_2800_1");
  expect(test.boot_web2350_tower.drivers02, "mkey_2800_2");
  expect(test.boot_web2350_tower.drivers03, "pmouse_2350_1");
  expect(test.boot_web2350_tower.drivers04, "pmouse_2350_2");
  expect(test.boot_web2350_tower.drivers05, "mupdate");
  expect(test.boot_web2350_tower.drivers06, "history");
  expect(test.boot_web2350_tower.drivers07, "hqftp");
  expect(test.boot_web2350_tower.drivers08, "supdate");
  expect(test.boot_web2350_tower.drivers09, "hqhist");
  expect(test.boot_web2350_tower.drivers10, "schctrl");
  expect(test.boot_web2350_tower.drivers11, "hqprod");
  expect(test.boot_web2350_tower.drivers12, "fip_2500_1");
  expect(test.boot_web2350_tower.drivers13, "fip_2500_2");
  expect(test.boot_web2350_tower.drivers14, "tprts");
  expect(test.boot_web2350_tower.drivers15, "scan_2500_1");
  expect(test.boot_web2350_tower.drivers16, "scan_2500_2");
  expect(test.boot_web2350_tower.drivers17, "msr_2500_1");
  expect(test.boot_web2350_tower.drivers18, "msr_2500_2");
  expect(test.boot_web2350_tower.drivers19, "signp");
  expect(test.boot_web2350_tower.drivers20, "detect");
  expect(test.boot_web2350_tower.drivers21, "callsw");
  expect(test.boot_web2350_tower.drivers22, "sm_scalesc_scl");
  expect(test.boot_web2350_tower.drivers23, "sm_scalesc_signp");
  expect(test.boot_web2350_tower.drivers24, "hist_csrv");
  expect(test.boot_web2350_tower.drivers36, "");
  expect(test.boot_web2350_tower.drivers37, "");
  expect(test.boot_web2350_tower.drivers38, "");
  expect(test.boot_web2350_tower.drivers39, "");
  expect(test.boot_web2350_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_web2350_desktop.drivers02, "pmouse_2350_1");
  expect(test.boot_web2350_desktop.drivers03, "scan_2500_1");
  expect(test.boot_web2350_desktop.drivers04, "fip_2500_1");
  expect(test.boot_web2350_desktop.drivers05, "msr_2500_1");
  expect(test.boot_web2350_desktop.drivers06, "mupdate");
  expect(test.boot_web2350_desktop.drivers07, "history");
  expect(test.boot_web2350_desktop.drivers08, "hqftp");
  expect(test.boot_web2350_desktop.drivers09, "supdate");
  expect(test.boot_web2350_desktop.drivers10, "hqhist");
  expect(test.boot_web2350_desktop.drivers11, "schctrl");
  expect(test.boot_web2350_desktop.drivers12, "hqprod");
  expect(test.boot_web2350_desktop.drivers13, "tprts");
  expect(test.boot_web2350_desktop.drivers14, "hist_csrv");
  expect(test.boot_web2350_desktop.drivers36, "");
  expect(test.boot_web2350_desktop.drivers37, "");
  expect(test.boot_web2350_desktop.drivers38, "");
  expect(test.boot_web2350_desktop.drivers39, "");
  expect(test.boot_web2500_tower.drivers01, "mkey_2800_1");
  expect(test.boot_web2500_tower.drivers02, "mkey_2800_2");
  expect(test.boot_web2500_tower.drivers03, "pmouse_2500_1");
  expect(test.boot_web2500_tower.drivers04, "pmouse_2500_2");
  expect(test.boot_web2500_tower.drivers05, "mupdate");
  expect(test.boot_web2500_tower.drivers06, "history");
  expect(test.boot_web2500_tower.drivers07, "hqftp");
  expect(test.boot_web2500_tower.drivers08, "supdate");
  expect(test.boot_web2500_tower.drivers09, "hqhist");
  expect(test.boot_web2500_tower.drivers10, "schctrl");
  expect(test.boot_web2500_tower.drivers11, "hqprod");
  expect(test.boot_web2500_tower.drivers12, "fip_2500_1");
  expect(test.boot_web2500_tower.drivers13, "fip_2500_2");
  expect(test.boot_web2500_tower.drivers14, "tprts");
  expect(test.boot_web2500_tower.drivers15, "scan_2500_1");
  expect(test.boot_web2500_tower.drivers16, "scan_2500_2");
  expect(test.boot_web2500_tower.drivers17, "signp");
  expect(test.boot_web2500_tower.drivers18, "detect");
  expect(test.boot_web2500_tower.drivers19, "callsw");
  expect(test.boot_web2500_tower.drivers20, "sm_scalesc_scl");
  expect(test.boot_web2500_tower.drivers21, "sm_scalesc_signp");
  expect(test.boot_web2500_tower.drivers22, "hist_csrv");
  expect(test.boot_web2500_tower.drivers23, "drw_2800_1");
  expect(test.boot_web2500_tower.drivers24, "msr_2500_1");
  expect(test.boot_web2500_tower.drivers25, "msr_2500_2");
  expect(test.boot_web2500_tower.drivers26, "usbcam");
  expect(test.boot_web2500_tower.drivers27, "iccard");
  expect(test.boot_web2500_tower.drivers28, "tprtrp");
  expect(test.boot_web2500_tower.drivers36, "");
  expect(test.boot_web2500_tower.drivers37, "");
  expect(test.boot_web2500_tower.drivers38, "");
  expect(test.boot_web2500_tower.drivers39, "");
  expect(test.boot_web2500_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_web2500_desktop.drivers02, "pmouse_2500_1");
  expect(test.boot_web2500_desktop.drivers03, "scan_2500_1");
  expect(test.boot_web2500_desktop.drivers04, "fip_2500_1");
  expect(test.boot_web2500_desktop.drivers05, "mupdate");
  expect(test.boot_web2500_desktop.drivers06, "history");
  expect(test.boot_web2500_desktop.drivers07, "hqftp");
  expect(test.boot_web2500_desktop.drivers08, "supdate");
  expect(test.boot_web2500_desktop.drivers09, "hqhist");
  expect(test.boot_web2500_desktop.drivers10, "schctrl");
  expect(test.boot_web2500_desktop.drivers11, "hqprod");
  expect(test.boot_web2500_desktop.drivers12, "tprts");
  expect(test.boot_web2500_desktop.drivers13, "hist_csrv");
  expect(test.boot_web2500_desktop.drivers14, "drw_2800_1");
  expect(test.boot_web2500_desktop.drivers15, "msr_2500_1");
  expect(test.boot_web2500_desktop.drivers16, "usbcam");
  expect(test.boot_web2500_desktop.drivers17, "iccard");
  expect(test.boot_web2500_desktop.drivers18, "tprtrp");
  expect(test.boot_web2500_desktop.drivers19, "scalerm");
  expect(test.boot_web2500_desktop.drivers20, "hitouch");
  expect(test.boot_web2500_desktop.drivers36, "");
  expect(test.boot_web2500_desktop.drivers37, "");
  expect(test.boot_web2500_desktop.drivers38, "");
  expect(test.boot_web2500_desktop.drivers39, "");
  expect(test.boot_web2800_tower.drivers01, "mkey_2800_1");
  expect(test.boot_web2800_tower.drivers02, "mkey_2800_2");
  expect(test.boot_web2800_tower.drivers03, "pmouse_2800_1");
  expect(test.boot_web2800_tower.drivers04, "pmouse_2800_2");
  expect(test.boot_web2800_tower.drivers05, "scan_2800_1");
  expect(test.boot_web2800_tower.drivers06, "scan_2800_2");
  expect(test.boot_web2800_tower.drivers07, "fip_2800_1");
  expect(test.boot_web2800_tower.drivers08, "fip_2800_2");
  expect(test.boot_web2800_tower.drivers09, "drw_2800_1");
  expect(test.boot_web2800_tower.drivers10, "tprtss");
  expect(test.boot_web2800_tower.drivers11, "mupdate");
  expect(test.boot_web2800_tower.drivers12, "history");
  expect(test.boot_web2800_tower.drivers13, "hqftp");
  expect(test.boot_web2800_tower.drivers14, "supdate");
  expect(test.boot_web2800_tower.drivers15, "hqhist");
  expect(test.boot_web2800_tower.drivers16, "schctrl");
  expect(test.boot_web2800_tower.drivers17, "hqprod");
  expect(test.boot_web2800_tower.drivers18, "hist_csrv");
  expect(test.boot_web2800_tower.drivers19, "sm_scalesc_scl");
  expect(test.boot_web2800_tower.drivers20, "sm_scalesc_signp");
  expect(test.boot_web2800_tower.drivers21, "usbcam");
  expect(test.boot_web2800_tower.drivers22, "tprtss2");
  expect(test.boot_web2800_tower.drivers23, "sqrc");
  expect(test.boot_web2800_tower.drivers24, "pmouse_2800_3");
  expect(test.boot_web2800_tower.drivers25, "tprtrp");
  expect(test.boot_web2800_tower.drivers26, "tprtrp2");
  expect(test.boot_web2800_tower.drivers27, "iccard");
  expect(test.boot_web2800_tower.drivers28, "msr_int_1");
  expect(test.boot_web2800_tower.drivers29, "powli");
  expect(test.boot_web2800_tower.drivers30, "scan_2800_4");
  expect(test.boot_web2800_tower.drivers31, "apbf_1");
  expect(test.boot_web2800_tower.drivers32, "exc");
  expect(test.boot_web2800_tower.drivers33, "ami");
  expect(test.boot_web2800_tower.drivers34, "aibox");
  expect(test.boot_web2800_tower.drivers36, "");
  expect(test.boot_web2800_tower.drivers37, "");
  expect(test.boot_web2800_tower.drivers38, "");
  expect(test.boot_web2800_tower.drivers39, "");
  expect(test.boot_web2800_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_web2800_desktop.drivers02, "pmouse_2800_1");
  expect(test.boot_web2800_desktop.drivers03, "scan_2800_1");
  expect(test.boot_web2800_desktop.drivers04, "fip_2800_1");
  expect(test.boot_web2800_desktop.drivers05, "drw_2800_1");
  expect(test.boot_web2800_desktop.drivers06, "mupdate");
  expect(test.boot_web2800_desktop.drivers07, "history");
  expect(test.boot_web2800_desktop.drivers08, "hqftp");
  expect(test.boot_web2800_desktop.drivers09, "supdate");
  expect(test.boot_web2800_desktop.drivers10, "hqhist");
  expect(test.boot_web2800_desktop.drivers11, "schctrl");
  expect(test.boot_web2800_desktop.drivers12, "hqprod");
  expect(test.boot_web2800_desktop.drivers13, "tprtss");
  expect(test.boot_web2800_desktop.drivers14, "fip_2800_2");
  expect(test.boot_web2800_desktop.drivers15, "fip_2800_3");
  expect(test.boot_web2800_desktop.drivers16, "hist_csrv");
  expect(test.boot_web2800_desktop.drivers17, "sm_scalesc_scl");
  expect(test.boot_web2800_desktop.drivers18, "sm_scalesc_signp");
  expect(test.boot_web2800_desktop.drivers19, "usbcam");
  expect(test.boot_web2800_desktop.drivers20, "sqrc");
  expect(test.boot_web2800_desktop.drivers21, "pmouse_2800_3");
  expect(test.boot_web2800_desktop.drivers22, "tprtrp");
  expect(test.boot_web2800_desktop.drivers23, "tprtrp2");
  expect(test.boot_web2800_desktop.drivers24, "iccard");
  expect(test.boot_web2800_desktop.drivers25, "msr_plus2_1");
  expect(test.boot_web2800_desktop.drivers26, "scan_2800_3");
  expect(test.boot_web2800_desktop.drivers27, "powli");
  expect(test.boot_web2800_desktop.drivers28, "scan_2800_4");
  expect(test.boot_web2800_desktop.drivers29, "psensor_1");
  expect(test.boot_web2800_desktop.drivers30, "apbf_1");
  expect(test.boot_web2800_desktop.drivers31, "pmouse_2800_4");
  expect(test.boot_web2800_desktop.drivers32, "exc");
  expect(test.boot_web2800_desktop.drivers33, "ami");
  expect(test.boot_web2800_desktop.drivers34, "aibox");
  expect(test.boot_web2800_desktop.drivers36, "");
  expect(test.boot_web2800_desktop.drivers37, "");
  expect(test.boot_web2800_desktop.drivers38, "");
  expect(test.boot_web2800_desktop.drivers39, "");
  expect(test.boot_web2300_tower.drivers01, "pmouse_2300_2");
  expect(test.boot_web2300_tower.drivers02, "mkey_2300_1");
  expect(test.boot_web2300_tower.drivers03, "mkey_2300_2");
  expect(test.boot_web2300_tower.drivers04, "pmouse_2300_1");
  expect(test.boot_web2300_tower.drivers05, "mupdate");
  expect(test.boot_web2300_tower.drivers06, "history");
  expect(test.boot_web2300_tower.drivers07, "hqftp");
  expect(test.boot_web2300_tower.drivers08, "supdate");
  expect(test.boot_web2300_tower.drivers09, "hqhist");
  expect(test.boot_web2300_tower.drivers10, "schctrl");
  expect(test.boot_web2300_tower.drivers11, "hqprod");
  expect(test.boot_web2300_tower.drivers12, "fip_2300_1");
  expect(test.boot_web2300_tower.drivers13, "fip_2300_2");
  expect(test.boot_web2300_tower.drivers14, "tprts");
  expect(test.boot_web2300_tower.drivers15, "scan_2300_1");
  expect(test.boot_web2300_tower.drivers16, "scan_2300_2");
  expect(test.boot_web2300_tower.drivers17, "msr_2300_1");
  expect(test.boot_web2300_tower.drivers18, "msr_2300_2");
  expect(test.boot_web2300_tower.drivers19, "signp");
  expect(test.boot_web2300_tower.drivers20, "detect");
  expect(test.boot_web2300_tower.drivers21, "callsw");
  expect(test.boot_web2300_tower.drivers22, "sm_scalesc_scl");
  expect(test.boot_web2300_tower.drivers23, "sm_scalesc_signp");
  expect(test.boot_web2300_tower.drivers24, "hist_csrv");
  expect(test.boot_web2300_tower.drivers36, "");
  expect(test.boot_web2300_tower.drivers37, "");
  expect(test.boot_web2300_tower.drivers38, "");
  expect(test.boot_web2300_tower.drivers39, "");
  expect(test.boot_web2300_desktop.drivers01, "mkey_2300_1");
  expect(test.boot_web2300_desktop.drivers02, "pmouse_2300_1");
  expect(test.boot_web2300_desktop.drivers03, "scan_2300_1");
  expect(test.boot_web2300_desktop.drivers04, "fip_2300_1");
  expect(test.boot_web2300_desktop.drivers05, "msr_2300_1");
  expect(test.boot_web2300_desktop.drivers06, "mupdate");
  expect(test.boot_web2300_desktop.drivers07, "history");
  expect(test.boot_web2300_desktop.drivers08, "hqftp");
  expect(test.boot_web2300_desktop.drivers09, "supdate");
  expect(test.boot_web2300_desktop.drivers10, "hqhist");
  expect(test.boot_web2300_desktop.drivers11, "schctrl");
  expect(test.boot_web2300_desktop.drivers12, "hqprod");
  expect(test.boot_web2300_desktop.drivers13, "tprts");
  expect(test.boot_web2300_desktop.drivers14, "hist_csrv");
  expect(test.boot_web2300_desktop.drivers36, "");
  expect(test.boot_web2300_desktop.drivers37, "");
  expect(test.boot_web2300_desktop.drivers38, "");
  expect(test.boot_web2300_desktop.drivers39, "");
  expect(test.boot_webplus_desktop.drivers01, "mupdate");
  expect(test.boot_webplus_desktop.drivers02, "history");
  expect(test.boot_webplus_desktop.drivers03, "hqftp");
  expect(test.boot_webplus_desktop.drivers04, "supdate");
  expect(test.boot_webplus_desktop.drivers05, "hqhist");
  expect(test.boot_webplus_desktop.drivers06, "schctrl");
  expect(test.boot_webplus_desktop.drivers07, "hqprod");
  expect(test.boot_webplus_desktop.drivers08, "pmouse_plus_1");
  expect(test.boot_webplus_desktop.drivers09, "segd_plus_1");
  expect(test.boot_webplus_desktop.drivers10, "tprtf");
  expect(test.boot_webplus_desktop.drivers11, "mkey_plus_1");
  expect(test.boot_webplus_desktop.drivers12, "msr_2300_1");
  expect(test.boot_webplus_desktop.drivers13, "sm_scalesc_scl");
  expect(test.boot_webplus_desktop.drivers14, "sm_scalesc_signp");
  expect(test.boot_webplus_desktop.drivers15, "fip_plus_1");
  expect(test.boot_webplus_desktop.drivers16, "hist_csrv");
  expect(test.boot_webplus_desktop.drivers36, "");
  expect(test.boot_webplus_desktop.drivers37, "");
  expect(test.boot_webplus_desktop.drivers38, "scan_plus_1");
  expect(test.boot_webplus_desktop.drivers39, "");
  expect(test.boot_dual_tower.drivers01, "subcpu2");
  expect(test.boot_dual_tower.drivers02, "subcpu1");
  expect(test.boot_dual_tower.drivers03, "spk1");
  expect(test.boot_dual_tower.drivers04, "fip1");
  expect(test.boot_dual_tower.drivers05, "lcdbrt1");
  expect(test.boot_dual_tower.drivers06, "mkey1");
  expect(test.boot_dual_tower.drivers07, "wand1");
  expect(test.boot_dual_tower.drivers08, "msr11");
  expect(test.boot_dual_tower.drivers09, "msr12");
  expect(test.boot_dual_tower.drivers10, "tkey1d");
  expect(test.boot_dual_tower.drivers11, "spk2");
  expect(test.boot_dual_tower.drivers12, "fip2");
  expect(test.boot_dual_tower.drivers13, "lcdbrt2");
  expect(test.boot_dual_tower.drivers14, "wand2");
  expect(test.boot_dual_tower.drivers15, "tkey2");
  expect(test.boot_dual_tower.drivers16, "mkey2");
  expect(test.boot_dual_tower.drivers17, "tprt");
  expect(test.boot_dual_tower.drivers18, "pmouse2");
  expect(test.boot_dual_tower.drivers19, "pmouse1");
  expect(test.boot_dual_tower.drivers20, "mupdate");
  expect(test.boot_dual_tower.drivers21, "history");
  expect(test.boot_dual_tower.drivers22, "msr21");
  expect(test.boot_dual_tower.drivers23, "msr22");
  expect(test.boot_dual_tower.drivers24, "hqftp");
  expect(test.boot_dual_tower.drivers25, "supdate");
  expect(test.boot_dual_tower.drivers26, "hqhist");
  expect(test.boot_dual_tower.drivers27, "signp");
  expect(test.boot_dual_tower.drivers28, "detect");
  expect(test.boot_dual_tower.drivers29, "callsw");
  expect(test.boot_dual_tower.drivers30, "schctrl");
  expect(test.boot_dual_tower.drivers31, "hqprod");
  expect(test.boot_dual_tower.drivers32, "hist_csrv");
  expect(test.boot_dual_tower.drivers36, "");
  expect(test.boot_dual_tower.drivers37, "");
  expect(test.boot_dual_tower.drivers38, "");
  expect(test.boot_dual_tower.drivers39, "");
  expect(test.boot_dual_desktop.drivers01, "subcpu2");
  expect(test.boot_dual_desktop.drivers02, "subcpu1");
  expect(test.boot_dual_desktop.drivers03, "spk1");
  expect(test.boot_dual_desktop.drivers04, "spk2");
  expect(test.boot_dual_desktop.drivers05, "fip1");
  expect(test.boot_dual_desktop.drivers06, "lcdbrt1");
  expect(test.boot_dual_desktop.drivers07, "lcdbrt2");
  expect(test.boot_dual_desktop.drivers08, "mkey1");
  expect(test.boot_dual_desktop.drivers09, "wand1");
  expect(test.boot_dual_desktop.drivers10, "msr11");
  expect(test.boot_dual_desktop.drivers11, "msr12");
  expect(test.boot_dual_desktop.drivers12, "tkey1d");
  expect(test.boot_dual_desktop.drivers13, "tkey2");
  expect(test.boot_dual_desktop.drivers14, "tprt");
  expect(test.boot_dual_desktop.drivers15, "pmouse2");
  expect(test.boot_dual_desktop.drivers16, "pmouse1");
  expect(test.boot_dual_desktop.drivers17, "mupdate");
  expect(test.boot_dual_desktop.drivers18, "history");
  expect(test.boot_dual_desktop.drivers19, "hqftp");
  expect(test.boot_dual_desktop.drivers20, "supdate");
  expect(test.boot_dual_desktop.drivers21, "hqhist");
  expect(test.boot_dual_desktop.drivers22, "schctrl");
  expect(test.boot_dual_desktop.drivers23, "hqprod");
  expect(test.boot_dual_desktop.drivers24, "hist_csrv");
  expect(test.boot_dual_desktop.drivers36, "");
  expect(test.boot_dual_desktop.drivers37, "");
  expect(test.boot_dual_desktop.drivers38, "");
  expect(test.boot_dual_desktop.drivers39, "");
  expect(test.boot_jr.drivers01, "subcpu3");
  expect(test.boot_jr.drivers02, "spk3");
  expect(test.boot_jr.drivers03, "seg1");
  expect(test.boot_jr.drivers04, "lcdbrt3");
  expect(test.boot_jr.drivers05, "mkey3");
  expect(test.boot_jr.drivers06, "lcd57");
  expect(test.boot_jr.drivers07, "wand3");
  expect(test.boot_jr.drivers08, "msr31");
  expect(test.boot_jr.drivers09, "msr32");
  expect(test.boot_jr.drivers10, "tkey3d");
  expect(test.boot_jr.drivers11, "tprt");
  expect(test.boot_jr.drivers12, "pmouse3");
  expect(test.boot_jr.drivers13, "mupdate");
  expect(test.boot_jr.drivers14, "history");
  expect(test.boot_jr.drivers15, "hqftp");
  expect(test.boot_jr.drivers16, "supdate");
  expect(test.boot_jr.drivers17, "hqhist");
  expect(test.boot_jr.drivers18, "schctrl");
  expect(test.boot_jr.drivers19, "fip3");
  expect(test.boot_jr.drivers20, "hqprod");
  expect(test.boot_jr.drivers21, "vfd57_3");
  expect(test.boot_jr.drivers22, "hist_csrv");
  expect(test.boot_jr.drivers36, "");
  expect(test.boot_jr.drivers37, "");
  expect(test.boot_jr.drivers38, "");
  expect(test.boot_jr.drivers39, "");
  expect(test.boot_jr_tower.drivers01, "subcpu3");
  expect(test.boot_jr_tower.drivers02, "subcpu2");
  expect(test.boot_jr_tower.drivers03, "spk3");
  expect(test.boot_jr_tower.drivers04, "seg1");
  expect(test.boot_jr_tower.drivers05, "mkey3");
  expect(test.boot_jr_tower.drivers06, "wand3");
  expect(test.boot_jr_tower.drivers07, "msr31");
  expect(test.boot_jr_tower.drivers08, "msr32");
  expect(test.boot_jr_tower.drivers09, "spk2");
  expect(test.boot_jr_tower.drivers10, "seg2");
  expect(test.boot_jr_tower.drivers11, "lcdbrt2");
  expect(test.boot_jr_tower.drivers12, "mkey2");
  expect(test.boot_jr_tower.drivers13, "wand2");
  expect(test.boot_jr_tower.drivers14, "msr21");
  expect(test.boot_jr_tower.drivers15, "msr22");
  expect(test.boot_jr_tower.drivers16, "tkey2");
  expect(test.boot_jr_tower.drivers17, "tprt");
  expect(test.boot_jr_tower.drivers18, "pmouse2");
  expect(test.boot_jr_tower.drivers19, "mupdate");
  expect(test.boot_jr_tower.drivers20, "history");
  expect(test.boot_jr_tower.drivers21, "hqftp");
  expect(test.boot_jr_tower.drivers22, "supdate");
  expect(test.boot_jr_tower.drivers23, "hqhist");
  expect(test.boot_jr_tower.drivers24, "schctrl");
  expect(test.boot_jr_tower.drivers25, "fip2");
  expect(test.boot_jr_tower.drivers26, "fip3");
  expect(test.boot_jr_tower.drivers27, "hqprod");
  expect(test.boot_jr_tower.drivers28, "hist_csrv");
  expect(test.boot_jr_tower.drivers36, "");
  expect(test.boot_jr_tower.drivers37, "");
  expect(test.boot_jr_tower.drivers38, "");
  expect(test.boot_jr_tower.drivers39, "");
  expect(test.boot_tower.drivers01, "subcpu2");
  expect(test.boot_tower.drivers02, "subcpu1");
  expect(test.boot_tower.drivers03, "spk1");
  expect(test.boot_tower.drivers04, "fip1");
  expect(test.boot_tower.drivers05, "lcdbrt1");
  expect(test.boot_tower.drivers06, "mkey1");
  expect(test.boot_tower.drivers07, "lcd57");
  expect(test.boot_tower.drivers08, "wand1");
  expect(test.boot_tower.drivers09, "msr11");
  expect(test.boot_tower.drivers10, "msr12");
  expect(test.boot_tower.drivers11, "tkey1t");
  expect(test.boot_tower.drivers12, "spk2");
  expect(test.boot_tower.drivers13, "fip2");
  expect(test.boot_tower.drivers14, "lcdbrt2");
  expect(test.boot_tower.drivers15, "wand2");
  expect(test.boot_tower.drivers16, "tkey2");
  expect(test.boot_tower.drivers17, "mkey2");
  expect(test.boot_tower.drivers18, "tprt");
  expect(test.boot_tower.drivers19, "pmouse2");
  expect(test.boot_tower.drivers20, "mupdate");
  expect(test.boot_tower.drivers21, "history");
  expect(test.boot_tower.drivers22, "msr21");
  expect(test.boot_tower.drivers23, "msr22");
  expect(test.boot_tower.drivers24, "hqftp");
  expect(test.boot_tower.drivers25, "supdate");
  expect(test.boot_tower.drivers26, "hqhist");
  expect(test.boot_tower.drivers27, "signp");
  expect(test.boot_tower.drivers28, "detect");
  expect(test.boot_tower.drivers29, "callsw");
  expect(test.boot_tower.drivers30, "schctrl");
  expect(test.boot_tower.drivers31, "hqprod");
  expect(test.boot_tower.drivers32, "hist_csrv");
  expect(test.boot_tower.drivers36, "");
  expect(test.boot_tower.drivers37, "");
  expect(test.boot_tower.drivers38, "");
  expect(test.boot_tower.drivers39, "");
  expect(test.boot_desktop.drivers01, "subcpu2");
  expect(test.boot_desktop.drivers02, "subcpu1");
  expect(test.boot_desktop.drivers03, "spk1");
  expect(test.boot_desktop.drivers04, "fip1");
  expect(test.boot_desktop.drivers05, "lcdbrt1");
  expect(test.boot_desktop.drivers06, "mkey1");
  expect(test.boot_desktop.drivers07, "lcd57");
  expect(test.boot_desktop.drivers08, "wand1");
  expect(test.boot_desktop.drivers09, "msr11");
  expect(test.boot_desktop.drivers10, "msr12");
  expect(test.boot_desktop.drivers11, "tkey1d");
  expect(test.boot_desktop.drivers12, "tprt");
  expect(test.boot_desktop.drivers13, "pmouse1");
  expect(test.boot_desktop.drivers14, "mupdate");
  expect(test.boot_desktop.drivers15, "history");
  expect(test.boot_desktop.drivers16, "hqftp");
  expect(test.boot_desktop.drivers17, "supdate");
  expect(test.boot_desktop.drivers18, "hqhist");
  expect(test.boot_desktop.drivers19, "schctrl");
  expect(test.boot_desktop.drivers20, "hqprod");
  expect(test.boot_desktop.drivers21, "hist_csrv");
  expect(test.boot_desktop.drivers36, "");
  expect(test.boot_desktop.drivers37, "");
  expect(test.boot_desktop.drivers38, "");
  expect(test.boot_desktop.drivers39, "");
  expect(test.verup.verup, "no");
  expect(test.verup.date, "");
  expect(test.verup.time, "");
  expect(test.verup.command, "vup/xxxxx.cmd");
  expect(test.verup.param, "-Uvh --nodeps --force");
  expect(test.speaker.keyvol1, 7);
  expect(test.speaker.keytone1, 1);
  expect(test.speaker.scanvol1, 6);
  expect(test.speaker.scantone1, 6);
  expect(test.speaker.keyvol2, 7);
  expect(test.speaker.keytone2, 4);
  expect(test.speaker.scanvol2, 6);
  expect(test.speaker.scantone2, 6);
  expect(test.lcdbright.lcdbright1, 4);
  expect(test.lcdbright.lcdbright2, 2);
  expect(test.logging.maxsize, 10000);
  expect(test.logging.level, 5);
  expect(test.scanner.reschar, 0);
  expect(test.scanner.reschar_tower, 0);
  expect(test.scanner.reschar_add, 0);
  expect(test.subcpu1.entry, "tprdrv_scpu");
  expect(test.subcpu1.priority, 10);
  expect(test.subcpu1.inifile, "conf/subcpu1.json");
  expect(test.spk1.entry, "tprdrv_scpuspkd");
  expect(test.spk1.priority, 10);
  expect(test.spk1.inifile, "conf/speaker1.json");
  expect(test.wand1.entry, "tprdrv_scan");
  expect(test.wand1.priority, 10);
  expect(test.wand1.inifile, "conf/scanner1.json");
  expect(test.wand2.entry, "tprdrv_scan");
  expect(test.wand2.priority, 10);
  expect(test.wand2.inifile, "conf/scanner2.json");
  expect(test.lcdbrt1.entry, "tprdrv_scpulcdd");
  expect(test.lcdbrt1.priority, 10);
  expect(test.lcdbrt1.inifile, "conf/lcdbrt1.json");
  expect(test.lcdbrt2.entry, "tprdrv_scpulcdd");
  expect(test.lcdbrt2.priority, 10);
  expect(test.lcdbrt2.inifile, "conf/lcdbrt2.json");
  expect(test.fip1.entry, "tprdrv_scpufipd");
  expect(test.fip1.priority, 10);
  expect(test.fip1.inifile, "conf/fip1.json");
  expect(test.mkey1.entry, "tprdrv_mkey");
  expect(test.mkey1.priority, 10);
  expect(test.mkey1.inifile, "conf/mkey1.json");
  expect(test.mkey2.entry, "tprdrv_mkey");
  expect(test.mkey2.priority, 10);
  expect(test.mkey2.inifile, "conf/mkey2.json");
  expect(test.lcd57.entry, "tprdrv_lcd57");
  expect(test.lcd57.priority, 10);
  expect(test.lcd57.inifile, "conf/lcd57.json");
  expect(test.tkey1t.entry, "tprdrv_tkey");
  expect(test.tkey1t.priority, 10);
  expect(test.tkey1t.inifile, "conf/tkey1t.json");
  expect(test.tkey1d.entry, "tprdrv_tkey");
  expect(test.tkey1d.priority, 10);
  expect(test.tkey1d.inifile, "conf/tkey1d.json");
  expect(test.msr11.entry, "tprdrv_msr");
  expect(test.msr11.priority, 10);
  expect(test.msr11.inifile, "conf/msr1jis1.json");
  expect(test.msr12.entry, "tprdrv_msr");
  expect(test.msr12.priority, 10);
  expect(test.msr12.inifile, "conf/msr1jis2.json");
  expect(test.msr21.entry, "tprdrv_msr");
  expect(test.msr21.priority, 10);
  expect(test.msr21.inifile, "conf/msr2jis1.json");
  expect(test.msr22.entry, "tprdrv_msr");
  expect(test.msr22.priority, 10);
  expect(test.msr22.inifile, "conf/msr2jis2.json");
  expect(test.subcpu2.entry, "tprdrv_scpu");
  expect(test.subcpu2.priority, 10);
  expect(test.subcpu2.inifile, "conf/subcpu2.json");
  expect(test.spk2.entry, "tprdrv_scpuspkd");
  expect(test.spk2.priority, 10);
  expect(test.spk2.inifile, "conf/speaker2.json");
  expect(test.fip2.entry, "tprdrv_scpufipd");
  expect(test.fip2.priority, 10);
  expect(test.fip2.inifile, "conf/fip2.json");
  expect(test.tkey2.entry, "tprdrv_tkey");
  expect(test.tkey2.priority, 10);
  expect(test.tkey2.inifile, "conf/tkey2.json");
  expect(test.tprt.entry, "tprdrv_tprt");
  expect(test.tprt.priority, 10);
  expect(test.tprt.inifile, "conf/tprt.json");
  expect(test.pmouse1.entry, "tprdrv_pmouse");
  expect(test.pmouse1.priority, 10);
  expect(test.pmouse1.inifile, "conf/pmouse1.json");
  expect(test.pmouse2.entry, "tprdrv_pmouse");
  expect(test.pmouse2.priority, 10);
  expect(test.pmouse2.inifile, "conf/pmouse2.json");
  expect(test.sprt.entry, "tprdrv_sprt");
  expect(test.sprt.priority, 10);
  expect(test.sprt.inifile, "conf/sprt.json");
  expect(test.mupdate.entry, "mupdate");
  expect(test.mupdate.priority, 10);
  expect(test.mupdate.inifile, "conf/sprt.json");
  expect(test.history.entry, "history");
  expect(test.history.priority, 10);
  expect(test.history.inifile, "conf/sprt.json");
  expect(test.hist_csrv.entry, "hist_csrv");
  expect(test.hist_csrv.priority, 10);
  expect(test.hist_csrv.inifile, "conf/sprt.json");
  expect(test.tqrcd.entry, "tprdrv_tqrcd");
  expect(test.tqrcd.priority, 10);
  expect(test.tqrcd.inifile, "conf/tqrcd.json");
  expect(test.hqftp.entry, "hqftp");
  expect(test.hqftp.priority, 10);
  expect(test.hqftp.inifile, "conf/sprt.json");
  expect(test.supdate.entry, "supdate");
  expect(test.supdate.priority, 10);
  expect(test.supdate.inifile, "conf/sprt.json");
  expect(test.hqhist.entry, "hqhist");
  expect(test.hqhist.priority, 10);
  expect(test.hqhist.inifile, "conf/sprt.json");
  expect(test.hqprod.entry, "hqprod");
  expect(test.hqprod.priority, 10);
  expect(test.hqprod.inifile, "conf/sprt.json");
  expect(test.signp.entry, "tprdrv_signp");
  expect(test.signp.priority, 10);
  expect(test.signp.inifile, "conf/signp.json");
  expect(test.detect.entry, "tprdrv_detect");
  expect(test.detect.priority, 10);
  expect(test.detect.inifile, "conf/detect.json");
  expect(test.callsw.entry, "tprdrv_callsw");
  expect(test.callsw.priority, 10);
  expect(test.callsw.inifile, "conf/callsw.json");
  expect(test.subcpu3.entry, "tprdrv_scpu");
  expect(test.subcpu3.priority, 10);
  expect(test.subcpu3.inifile, "conf/subcpu3.json");
  expect(test.spk3.entry, "tprdrv_scpuspkd");
  expect(test.spk3.priority, 10);
  expect(test.spk3.inifile, "conf/speaker3.json");
  expect(test.tkey3d.entry, "tprdrv_tkey");
  expect(test.tkey3d.priority, 10);
  expect(test.tkey3d.inifile, "conf/tkey3d.json");
  expect(test.seg1.entry, "tprdrv_segment");
  expect(test.seg1.priority, 10);
  expect(test.seg1.inifile, "conf/seg1.json");
  expect(test.seg2.entry, "tprdrv_segment");
  expect(test.seg2.priority, 10);
  expect(test.seg2.inifile, "conf/seg2.json");
  expect(test.wand3.entry, "tprdrv_scan");
  expect(test.wand3.priority, 10);
  expect(test.wand3.inifile, "conf/scanner3.json");
  expect(test.lcdbrt3.entry, "tprdrv_scpulcdd");
  expect(test.lcdbrt3.priority, 10);
  expect(test.lcdbrt3.inifile, "conf/lcdbrt3.json");
  expect(test.mkey3.entry, "tprdrv_mkey");
  expect(test.mkey3.priority, 10);
  expect(test.mkey3.inifile, "conf/mkey3.json");
  expect(test.msr31.entry, "tprdrv_msr");
  expect(test.msr31.priority, 10);
  expect(test.msr31.inifile, "conf/msr3jis1.json");
  expect(test.msr32.entry, "tprdrv_msr");
  expect(test.msr32.priority, 10);
  expect(test.msr32.inifile, "conf/msr3jis2.json");
  expect(test.pmouse3.entry, "tprdrv_pmouse");
  expect(test.pmouse3.priority, 10);
  expect(test.pmouse3.inifile, "conf/pmouse3.json");
  expect(test.schctrl.entry, "schctrl");
  expect(test.schctrl.priority, 10);
  expect(test.schctrl.inifile, "conf/sprt.json");
  expect(test.fip3.entry, "tprdrv_scpufipd");
  expect(test.fip3.priority, 10);
  expect(test.fip3.inifile, "conf/fip3.json");
  expect(test.vfd57_3.entry, "tprdrv_scpu57vfd");
  expect(test.vfd57_3.priority, 10);
  expect(test.vfd57_3.inifile, "conf/vfd57_3.json");
  expect(test.tprtf.entry, "tprdrv_tprtf");
  expect(test.tprtf.priority, 10);
  expect(test.tprtf.inifile, "conf/tprtf.json");
  expect(test.tprts.entry, "tprdrv_tprts");
  expect(test.tprts.priority, 10);
  expect(test.tprts.inifile, "conf/tprts.json");
  expect(test.pmouse_plus_1.entry, "tprdrv_pmouse_plus");
  expect(test.pmouse_plus_1.priority, 10);
  expect(test.pmouse_plus_1.inifile, "conf/pmouse_plus_1.json");
  expect(test.pmouse_plus_1.tower, 0);
  expect(test.pmouse_2300_1.entry, "tprdrv_pmouse_plus");
  expect(test.pmouse_2300_1.priority, 10);
  expect(test.pmouse_2300_1.inifile, "conf/pmouse_2300_1.json");
  expect(test.pmouse_2300_1.tower, 0);
  expect(test.pmouse_2300_2.entry, "tprdrv_pmouse_plus");
  expect(test.pmouse_2300_2.priority, 10);
  expect(test.pmouse_2300_2.inifile, "conf/pmouse_2300_2.json");
  expect(test.pmouse_2300_2.tower, 1);
  expect(test.fip_plus_1.entry, "tprdrv_fip_plus");
  expect(test.fip_plus_1.priority, 10);
  expect(test.fip_plus_1.inifile, "conf/fip_plus_1.json");
  expect(test.fip_plus_1.tower, 0);
  expect(test.fip_2300_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2300_1.priority, 10);
  expect(test.fip_2300_1.inifile, "conf/fip_2300_1.json");
  expect(test.fip_2300_1.tower, 0);
  expect(test.fip_2300_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2300_2.priority, 10);
  expect(test.fip_2300_2.inifile, "conf/fip_2300_2.json");
  expect(test.fip_2300_2.tower, 1);
  expect(test.segd_plus_1.entry, "tprdrv_segd_plus");
  expect(test.segd_plus_1.priority, 10);
  expect(test.segd_plus_1.inifile, "conf/segd_plus_1.json");
  expect(test.segd_2300_1.entry, "tprdrv_segd_plus");
  expect(test.segd_2300_1.priority, 10);
  expect(test.segd_2300_1.inifile, "conf/segd_2300_1.json");
  expect(test.segd_2300_2.entry, "tprdrv_segd_plus");
  expect(test.segd_2300_2.priority, 10);
  expect(test.segd_2300_2.inifile, "conf/segd_2300_2.json");
  expect(test.vfd57_plus_1.entry, "tprdrv_vfd57_plus");
  expect(test.vfd57_plus_1.priority, 10);
  expect(test.vfd57_plus_1.inifile, "conf/vfd57_plus_1.json");
  expect(test.vfd57_2300_1.entry, "tprdrv_vfd57_plus");
  expect(test.vfd57_2300_1.priority, 10);
  expect(test.vfd57_2300_1.inifile, "conf/vfd57_2300_1.json");
  expect(test.vfd57_2300_2.entry, "tprdrv_vfd57_plus");
  expect(test.vfd57_2300_2.priority, 10);
  expect(test.vfd57_2300_2.inifile, "conf/vfd57_2300_2.json");
  expect(test.mkey_plus_1.entry, "tprdrv_mkey_plus");
  expect(test.mkey_plus_1.priority, 10);
  expect(test.mkey_plus_1.inifile, "conf/mkey_plus_1.json");
  expect(test.mkey_plus_1.tower, 0);
  expect(test.mkey_2300_1.entry, "tprdrv_mkey_plus");
  expect(test.mkey_2300_1.priority, 10);
  expect(test.mkey_2300_1.inifile, "conf/mkey_2300_1.json");
  expect(test.mkey_2300_1.tower, 0);
  expect(test.mkey_2300_2.entry, "tprdrv_mkey_plus");
  expect(test.mkey_2300_2.priority, 10);
  expect(test.mkey_2300_2.inifile, "conf/mkey_2300_2.json");
  expect(test.mkey_2300_2.tower, 1);
  expect(test.scan_plus_1.entry, "tprdrv_scan_plus");
  expect(test.scan_plus_1.priority, 10);
  expect(test.scan_plus_1.inifile, "conf/scan_plus_1.json");
  expect(test.scan_plus_1.tower, 0);
  expect(test.scan_plus_2.entry, "tprdrv_scan_plus");
  expect(test.scan_plus_2.priority, 10);
  expect(test.scan_plus_2.inifile, "conf/scan_plus_2.json");
  expect(test.scan_plus_2.tower, 0);
  expect(test.scan_2300_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2300_1.priority, 10);
  expect(test.scan_2300_1.inifile, "conf/scan_2300_1.json");
  expect(test.scan_2300_1.tower, 0);
  expect(test.scan_2300_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2300_2.priority, 10);
  expect(test.scan_2300_2.inifile, "conf/scan_2300_2.json");
  expect(test.scan_2300_2.tower, 1);
  expect(test.msr_2300_1.entry, "tprdrv_msr_2300");
  expect(test.msr_2300_1.priority, 10);
  expect(test.msr_2300_1.inifile, "conf/msr_2300_1.json");
  expect(test.msr_2300_1.tower, 0);
  expect(test.msr_2300_2.entry, "tprdrv_msr_2300");
  expect(test.msr_2300_2.priority, 10);
  expect(test.msr_2300_2.inifile, "conf/msr_2300_2.json");
  expect(test.msr_2300_2.tower, 1);
  expect(test.mkey_2800_1.entry, "tprdrv_mkey_2800");
  expect(test.mkey_2800_1.priority, 10);
  expect(test.mkey_2800_1.inifile, "conf/mkey_2800_1.json");
  expect(test.mkey_2800_1.tower, 0);
  expect(test.mkey_2800_2.entry, "tprdrv_mkey_2800");
  expect(test.mkey_2800_2.priority, 10);
  expect(test.mkey_2800_2.inifile, "conf/mkey_2800_2.json");
  expect(test.mkey_2800_2.tower, 1);
  expect(test.pmouse_2800_1.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_1.priority, 10);
  expect(test.pmouse_2800_1.inifile, "conf/pmouse_2800_1.json");
  expect(test.pmouse_2800_1.inifile2, "conf/pmouse_2800_5.json");
  expect(test.pmouse_2800_1.tower, 0);
  expect(test.pmouse_2800_2.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_2.priority, 10);
  expect(test.pmouse_2800_2.inifile, "conf/pmouse_2800_2.json");
  expect(test.pmouse_2800_2.tower, 1);
  expect(test.pmouse_2800_3.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_3.priority, 10);
  expect(test.pmouse_2800_3.inifile, "conf/pmouse_2800_3.json");
  expect(test.pmouse_2800_3.inifile2, "conf/pmouse_2800_4.json");
  expect(test.pmouse_2800_3.inifile3, "conf/pmouse_2800_5.json");
  expect(test.pmouse_2800_3.tower, 2);
  expect(test.scan_2800_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_1.priority, 10);
  expect(test.scan_2800_1.inifile, "conf/scan_2800_1.json");
  expect(test.scan_2800_1.tower, 0);
  expect(test.scan_2800_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_2.priority, 10);
  expect(test.scan_2800_2.inifile, "conf/scan_2800_2.json");
  expect(test.scan_2800_2.tower, 1);
  expect(test.fip_2800_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2800_1.priority, 10);
  expect(test.fip_2800_1.inifile, "conf/fip_2800_1.json");
  expect(test.fip_2800_1.tower, 0);
  expect(test.fip_2800_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2800_2.priority, 10);
  expect(test.fip_2800_2.inifile, "conf/fip_2800_2.json");
  expect(test.fip_2800_2.tower, 1);
  expect(test.fip_2800_3.entry, "tprdrv_fip_plus");
  expect(test.fip_2800_3.priority, 10);
  expect(test.fip_2800_3.inifile, "conf/fip_2800_3.json");
  expect(test.fip_2800_3.tower, 1);
  expect(test.drw_2800_1.entry, "tprdrv_drw_2800");
  expect(test.drw_2800_1.priority, 10);
  expect(test.drw_2800_1.inifile, "conf/drw_2800_1.json");
  expect(test.drw_2800_1.tower, 0);
  expect(test.drw_2800_2.entry, "tprdrv_drw_2800");
  expect(test.drw_2800_2.priority, 10);
  expect(test.drw_2800_2.inifile, "conf/drw_2800_2.json");
  expect(test.drw_2800_2.tower, 1);
  expect(test.tprtss.entry, "tprdrv_tprtss");
  expect(test.tprtss.priority, 10);
  expect(test.tprtss.inifile, "conf/tprtss.json");
  expect(test.tprtss2.entry, "tprdrv_tprtss");
  expect(test.tprtss2.priority, 10);
  expect(test.tprtss2.inifile, "conf/tprtss.json");
  expect(test.pmouse_2500_1.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2500_1.priority, 10);
  expect(test.pmouse_2500_1.inifile, "conf/pmouse_2500_1.json");
  expect(test.pmouse_2500_1.inifile2, "conf/pmouse_5900_1.json");
  expect(test.pmouse_2500_1.tower, 0);
  expect(test.pmouse_2500_2.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2500_2.priority, 10);
  expect(test.pmouse_2500_2.inifile, "conf/pmouse_2500_2.json");
  expect(test.pmouse_2500_2.tower, 1);
  expect(test.fip_2500_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2500_1.priority, 10);
  expect(test.fip_2500_1.inifile, "conf/fip_2500_1.json");
  expect(test.fip_2500_1.tower, 0);
  expect(test.fip_2500_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2500_2.priority, 10);
  expect(test.fip_2500_2.inifile, "conf/fip_2500_2.json");
  expect(test.fip_2500_2.tower, 1);
  expect(test.scan_2500_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2500_1.priority, 10);
  expect(test.scan_2500_1.inifile, "conf/scan_2500_1.json");
  expect(test.scan_2500_1.tower, 0);
  expect(test.scan_2500_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2500_2.priority, 10);
  expect(test.scan_2500_2.inifile, "conf/scan_2500_2.json");
  expect(test.scan_2500_2.tower, 1);
  expect(test.msr_2500_1.entry, "tprdrv_msr_2300");
  expect(test.msr_2500_1.priority, 10);
  expect(test.msr_2500_1.inifile, "conf/msr_2500_1.json");
  expect(test.msr_2500_1.tower, 0);
  expect(test.msr_2500_2.entry, "tprdrv_msr_2300");
  expect(test.msr_2500_2.priority, 10);
  expect(test.msr_2500_2.inifile, "conf/msr_2500_2.json");
  expect(test.msr_2500_2.tower, 1);
  expect(test.pmouse_2350_1.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2350_1.priority, 10);
  expect(test.pmouse_2350_1.inifile, "conf/pmouse_2350_1.json");
  expect(test.pmouse_2350_1.tower, 0);
  expect(test.pmouse_2350_2.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2350_2.priority, 10);
  expect(test.pmouse_2350_2.inifile, "conf/pmouse_2350_2.json");
  expect(test.pmouse_2350_2.tower, 1);
  expect(test.scan_2800ip_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800ip_1.priority, 10);
  expect(test.scan_2800ip_1.inifile, "conf/scan_2800ip_1.json");
  expect(test.scan_2800ip_1.tower, 0);
  expect(test.scan_2800ip_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2800ip_2.priority, 10);
  expect(test.scan_2800ip_2.inifile, "conf/scan_2800ip_2.json");
  expect(test.scan_2800ip_2.tower, 1);
  expect(test.tprtim.entry, "tprdrv_tprtim");
  expect(test.tprtim.priority, 10);
  expect(test.tprtim.inifile, "conf/tprtim.json");
  expect(test.fip_2800im_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2800im_1.priority, 10);
  expect(test.fip_2800im_1.inifile, "conf/fip_2800im_1.json");
  expect(test.fip_2800im_1.tower, 0);
  expect(test.fip_2800im_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2800im_2.priority, 10);
  expect(test.fip_2800im_2.inifile, "conf/fip_2800im_2.json");
  expect(test.fip_2800im_2.tower, 1);
  expect(test.fip_2800im_3.entry, "tprdrv_fip_plus");
  expect(test.fip_2800im_3.priority, 10);
  expect(test.fip_2800im_3.inifile, "conf/fip_2800im_3.json");
  expect(test.fip_2800im_3.tower, 1);
  expect(test.scan_2800im_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800im_1.priority, 10);
  expect(test.scan_2800im_1.inifile, "conf/scan_2800im_1.json");
  expect(test.scan_2800im_1.tower, 0);
  expect(test.scan_2800im_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2800im_2.priority, 10);
  expect(test.scan_2800im_2.inifile, "conf/scan_2800im_2.json");
  expect(test.scan_2800im_2.tower, 1);
  expect(test.pmouse_plus2_1.entry, "tprdrv_pmouse_plus2");
  expect(test.pmouse_plus2_1.priority, 10);
  expect(test.pmouse_plus2_1.inifile, "conf/pmouse_plus2_1.json");
  expect(test.pmouse_plus2_1.tower, 0);
  expect(test.fip_plus2_1.entry, "tprdrv_fip_plus");
  expect(test.fip_plus2_1.priority, 10);
  expect(test.fip_plus2_1.inifile, "conf/fip_plus2_1.json");
  expect(test.fip_plus2_1.tower, 0);
  expect(test.fip_plus2_2.entry, "tprdrv_fip_plus");
  expect(test.fip_plus2_2.priority, 10);
  expect(test.fip_plus2_2.inifile, "conf/fip_2800im_2.json");
  expect(test.fip_plus2_2.tower, 1);
  expect(test.fip_plus2_3.entry, "tprdrv_fip_plus");
  expect(test.fip_plus2_3.priority, 10);
  expect(test.fip_plus2_3.inifile, "conf/fip_2800im_3.json");
  expect(test.fip_plus2_3.tower, 1);
  expect(test.msr_plus2_1.entry, "tprdrv_msr_2300");
  expect(test.msr_plus2_1.priority, 10);
  expect(test.msr_plus2_1.inifile, "conf/msr_2500_1.json");
  expect(test.msr_plus2_1.tower, 0);
  expect(test.scan_2800a3_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800a3_1.priority, 10);
  expect(test.scan_2800a3_1.inifile, "conf/scan_2800a3_1.json");
  expect(test.scan_2800a3_1.tower, 0);
  expect(test.scan_2800i3_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800i3_1.priority, 10);
  expect(test.scan_2800i3_1.inifile, "conf/scan_2800i3_1.json");
  expect(test.scan_2800i3_1.tower, 0);
  expect(test.msr_int_1.entry, "tprdrv_msr_int");
  expect(test.msr_int_1.priority, 10);
  expect(test.msr_int_1.inifile, "conf/msr_int_1.json");
  expect(test.msr_int_1.tower, 0);
  expect(test.scan_2800g3_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800g3_1.priority, 10);
  expect(test.scan_2800g3_1.inifile, "conf/scan_2800g3_1.json");
  expect(test.scan_2800g3_1.tower, 0);
  expect(test.pmouse_2800_4.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_4.priority, 10);
  expect(test.pmouse_2800_4.inifile, "conf/pmouse_2800_6.json");
  expect(test.pmouse_2800_4.inifile2, "conf/pmouse_2800_7.json");
  expect(test.pmouse_2800_4.tower, 3);
  expect(test.tprthp.entry, "tprdrv_tprthp");
  expect(test.tprthp.priority, 10);
  expect(test.tprthp.inifile, "conf/tprthp.json");
  expect(test.sprocket.entry, "");
  expect(test.sprocket.priority, 10);
  expect(test.sprocket.inifile, "conf/sprocket_prn.json");
  expect(test.acr.entry, "tprdrv_changer");
  expect(test.acr.priority, 10);
  expect(test.acr.inifile, "conf/acr.json");
  expect(test.acb.entry, "tprdrv_changer");
  expect(test.acb.priority, 10);
  expect(test.acb.inifile, "conf/acb.json");
  expect(test.acb20.entry, "tprdrv_changer");
  expect(test.acb20.priority, 10);
  expect(test.acb20.inifile, "conf/acb20.json");
  expect(test.rewrite.entry, "tprdrv_tqrcd");
  expect(test.rewrite.priority, 10);
  expect(test.rewrite.inifile, "conf/rewrite_card.json");
  expect(test.vismac.entry, "tprdrv_vismac");
  expect(test.vismac.priority, 10);
  expect(test.vismac.inifile, "conf/vismac.json");
  expect(test.gcat.entry, "tprdrv_gcat");
  expect(test.gcat.priority, 10);
  expect(test.gcat.inifile, "conf/pana_gcat.json");
  expect(test.debit.entry, "tprdrv_debit");
  expect(test.debit.priority, 10);
  expect(test.debit.inifile, "conf/j_debit.json");
  expect(test.scale.entry, "tprdrv_scale");
  expect(test.scale.priority, 10);
  expect(test.scale.inifile, "conf/scale.json");
  expect(test.orc.entry, "tprdrv_orc");
  expect(test.orc.priority, 10);
  expect(test.orc.inifile, "conf/orc.json");
  expect(test.sg_scale1.entry, "tprdrv_sgscl");
  expect(test.sg_scale1.priority, 10);
  expect(test.sg_scale1.inifile, "conf/sg_scale1.json");
  expect(test.sg_scale2.entry, "tprdrv_sgscl");
  expect(test.sg_scale2.priority, 10);
  expect(test.sg_scale2.inifile, "conf/sg_scale2.json");
  expect(test.sm_scale1.entry, "tprdrv_smscl");
  expect(test.sm_scale1.priority, 10);
  expect(test.sm_scale1.inifile, "conf/sm_scale1.json");
  expect(test.sm_scale2.entry, "tprdrv_smscl");
  expect(test.sm_scale2.priority, 10);
  expect(test.sm_scale2.inifile, "conf/sm_scale2.json");
  expect(test.sip60.entry, "tprdrv_sip60");
  expect(test.sip60.priority, 10);
  expect(test.sip60.inifile, "conf/sip60.json");
  expect(test.psp60.entry, "tprdrv_psp60");
  expect(test.psp60.priority, 10);
  expect(test.psp60.inifile, "conf/psp60.json");
  expect(test.stpr.entry, "tprdrv_stpr");
  expect(test.stpr.priority, 10);
  expect(test.stpr.inifile, "conf/stpr.json");
  expect(test.pana.entry, "tprdrv_pana");
  expect(test.pana.priority, 10);
  expect(test.pana.inifile, "conf/pana.json");
  expect(test.gp.entry, "tprdrv_gp");
  expect(test.gp.priority, 10);
  expect(test.gp.inifile, "conf/gp.json");
  expect(test.sm_scalesc.entry, "tprdrv_smsclsc");
  expect(test.sm_scalesc.priority, 10);
  expect(test.sm_scalesc.inifile, "conf/sm_scalesc.json");
  expect(test.sm_scalesc_scl.entry, "tprdrv_smsclsc");
  expect(test.sm_scalesc_scl.priority, 10);
  expect(test.sm_scalesc_scl.inifile, "conf/sm_scalesc_scl.json");
  expect(test.sm_scalesc_signp.entry, "tprdrv_smsclsc");
  expect(test.sm_scalesc_signp.priority, 10);
  expect(test.sm_scalesc_signp.inifile, "conf/sm_scalesc_signp.json");
  expect(test.s2pr.entry, "tprdrv_stpr");
  expect(test.s2pr.priority, 10);
  expect(test.s2pr.inifile, "conf/s2pr.json");
  expect(test.acb50.entry, "tprdrv_changer");
  expect(test.acb50.priority, 10);
  expect(test.acb50.inifile, "conf/acb50.json");
  expect(test.pwrctrl.entry, "tprdrv_pwrctrl");
  expect(test.pwrctrl.priority, 10);
  expect(test.pwrctrl.inifile, "conf/pwrctrl.json");
  expect(test.pw410.entry, "tprdrv_pw410");
  expect(test.pw410.priority, 10);
  expect(test.pw410.inifile, "conf/pw410.json");
  expect(test.ccr.entry, "tprdrv_ccr");
  expect(test.ccr.priority, 10);
  expect(test.ccr.inifile, "conf/ccr.json");
  expect(test.psp70.entry, "tprdrv_psp60");
  expect(test.psp70.priority, 10);
  expect(test.psp70.inifile, "conf/psp70.json");
  expect(test.dish.entry, "tprdrv_dish");
  expect(test.dish.priority, 10);
  expect(test.dish.inifile, "conf/dish.json");
  expect(test.aiv.entry, "tprdrv_aiv");
  expect(test.aiv.priority, 10);
  expect(test.aiv.inifile, "conf/aiv.json");
  expect(test.ar_stts_01.entry, "tprdrv_arstts");
  expect(test.ar_stts_01.priority, 10);
  expect(test.ar_stts_01.inifile, "conf/ar_stts_01.json");
  expect(test.gcat_cnct.entry, "tprdrv_gcat");
  expect(test.gcat_cnct.priority, 10);
  expect(test.gcat_cnct.inifile, "conf/gcat_cnct.json");
  expect(test.yomoca.entry, "tprdrv_yomoca");
  expect(test.yomoca.priority, 10);
  expect(test.yomoca.inifile, "conf/yomoca.json");
  expect(test.smtplus.entry, "tprdrv_smtplus");
  expect(test.smtplus.priority, 10);
  expect(test.smtplus.inifile, "conf/smtplus.json");
  expect(test.suica.entry, "tprdrv_suica");
  expect(test.suica.priority, 10);
  expect(test.suica.inifile, "conf/suica_cnct.json");
  expect(test.rfid.entry, "tprdrv_rfid");
  expect(test.rfid.priority, 10);
  expect(test.rfid.inifile, "conf/rfid.json");
  expect(test.disht.entry, "tprdrv_disht");
  expect(test.disht.priority, 10);
  expect(test.disht.inifile, "conf/disht.json");
  expect(test.mcp200.entry, "tprdrv_mcp200");
  expect(test.mcp200.priority, 10);
  expect(test.mcp200.inifile, "conf/mcp200.json");
  expect(test.fcl.entry, "tprdrv_fcl");
  expect(test.fcl.priority, 10);
  expect(test.fcl.inifile, "conf/fcl.json");
  expect(test.jrw_multi.entry, "");
  expect(test.jrw_multi.priority, 10);
  expect(test.jrw_multi.inifile, "conf/jrw_multi.json");
  expect(test.ht2980.entry, "tprdrv_smtplus");
  expect(test.ht2980.priority, 10);
  expect(test.ht2980.inifile, "conf/ht2980.json");
  expect(test.absv31.entry, "tprdrv_absv31");
  expect(test.absv31.priority, 10);
  expect(test.absv31.inifile, "conf/absv31.json");
  expect(test.yamato.entry, "tprdrv_yamato");
  expect(test.yamato.priority, 10);
  expect(test.yamato.inifile, "conf/yamato.json");
  expect(test.cct.entry, "tprdrv_cct");
  expect(test.cct.priority, 10);
  expect(test.cct.inifile, "conf/cct.json");
  expect(test.castles.entry, "tprdrv_cct");
  expect(test.castles.priority, 10);
  expect(test.castles.inifile, "conf/cct.json");
  expect(test.usbcam.entry, "tprdrv_usbcam");
  expect(test.usbcam.priority, 10);
  expect(test.usbcam.inifile, "conf/usbcam.json");
  expect(test.masr.entry, "tprdrv_masr");
  expect(test.masr.priority, 10);
  expect(test.masr.inifile, "conf/masr.json");
  expect(test.jmups.entry, "tprdrv_jmups");
  expect(test.jmups.priority, 10);
  expect(test.jmups.inifile, "conf/jmups.json");
  expect(test.fal2.entry, "tprdrv_changer_fal2");
  expect(test.fal2.priority, 10);
  expect(test.fal2.inifile, "conf/fal2.json");
  expect(test.sqrc.entry, "tprdrv_sqrc");
  expect(test.sqrc.priority, 10);
  expect(test.sqrc.inifile, "conf/sqrc_spec.json");
  expect(test.tprtrp.entry, "tprdrv_tprtrp");
  expect(test.tprtrp.priority, 10);
  expect(test.tprtrp.inifile, "conf/tprtrp.json");
  expect(test.tprtrp2.entry, "tprdrv_tprtrp");
  expect(test.tprtrp2.priority, 10);
  expect(test.tprtrp2.inifile, "conf/tprtrp.json");
  expect(test.iccard.entry, "tprdrv_iccard");
  expect(test.iccard.priority, 10);
  expect(test.iccard.inifile, "conf/iccard.json");
  expect(test.mst.entry, "tprdrv_mst");
  expect(test.mst.priority, 10);
  expect(test.mst.inifile, "conf/mst.json");
  expect(test.scan_2800_3.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_3.priority, 10);
  expect(test.scan_2800_3.inifile, "conf/scan_2800_3.json");
  expect(test.scan_2800_3.tower, 2);
  expect(test.vega3000.entry, "");
  expect(test.vega3000.priority, 10);
  expect(test.vega3000.inifile, "conf/vega3000.json");
  expect(test.powli.entry, "tprdrv_powli");
  expect(test.powli.priority, 10);
  expect(test.powli.inifile, "conf/powli.json");
  expect(test.scan_2800_4.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_4.priority, 10);
  expect(test.scan_2800_4.inifile, "conf/scan_2800_4.json");
  expect(test.scan_2800_4.tower, 3);
  expect(test.psensor_1.entry, "tprdrv_psensor");
  expect(test.psensor_1.priority, 10);
  expect(test.psensor_1.inifile, "conf/psensor_1.json");
  expect(test.apbf_1.entry, "tprdrv_apbf");
  expect(test.apbf_1.priority, 10);
  expect(test.apbf_1.inifile, "conf/apbf_1.json");
  expect(test.scalerm.entry, "tprdrv_scalerm");
  expect(test.scalerm.priority, 10);
  expect(test.scalerm.inifile, "conf/scalerm.json");
  expect(test.exc.entry, "tprdrv_exc");
  expect(test.exc.priority, 10);
  expect(test.exc.inifile, "");
  expect(test.pct.entry, "");
  expect(test.pct.priority, 10);
  expect(test.pct.inifile, "conf/pct.json");
  expect(test.hitouch.entry, "tprdrv_hitouch");
  expect(test.hitouch.priority, 10);
  expect(test.hitouch.inifile, "conf/hitouch.json");
  expect(test.ami.entry, "tprdrv_ami");
  expect(test.ami.priority, 10);
  expect(test.ami.inifile, "");
  expect(test.scale_sks.entry, "tprdrv_scale_sks");
  expect(test.scale_sks.priority, 10);
  expect(test.scale_sks.inifile, "conf/scale_sks.json");
  expect(test.aibox.entry, "tprdrv_aibox");
  expect(test.aibox.priority, 10);
  expect(test.aibox.inifile, "");
}

