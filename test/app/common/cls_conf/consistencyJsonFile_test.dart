/*
 * (C)2023 TERAOKA SEIKO Co., Ltd./株式会社寺岡精工
 * CONFIDENTIAL/社外秘
 * 無断開示・無断複製禁止
 */
 
import 'package:flutter_pos/app/common/environment.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/cupertino.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';
import 'package:path/path.dart';
import 'dart:io';
import 'unitTestParts.dart';

import '../../../../lib/app/common/cls_conf/configJsonFile.dart';
import '../../../../lib/app/common/cls_conf/consistencyJsonFile.dart';

late ConsistencyJsonFile consistency;

void main(){
  consistencyJsonFile_test();
}

void consistencyJsonFile_test()
{
  TestWidgetsFlutterBinding.ensureInitialized();
  const String confPath = "conf/";
  const String testDir = "test_assets";
  const String fileName = "consistency.json";
  const String section = "version";
  const String key = "title";
  const defaultData = "バージョン";
  const testData1  =  987654321;    // テストデータ1
  const testData1s = "987654321";
  const testData2  =  192834675;    // テストデータ2
  const testData2s = "192834675";
  const testData3  =  129834765;    // テストデータ3
  const testData3s = "129834765";

  group('ConsistencyJsonFile',()
  {
    setUp(() async{
      PathProviderPlatform.instance = MockPathProviderPlatform();
      // 当該JSONファイルをデフォルトに戻す。
      await ConsistencyJsonFile().setDefault();
    });

    // 各テストの事後処理
    tearDown(() async{
      // 当該JSONファイルをデフォルトに戻す。
      await ConsistencyJsonFile().setDefault();
    });

    // ********************************************************
    // テスト00001 : load
    // 前提：アプリ用フォルダに対象JSONファイルが存在しないこと。
    // 試験手順：loadを実行する。
    // 期待結果：①assets/confにある対象JSONファイルがアプリ用フォルダに作成されること。
    // 　　　　　②対象JSONファイルの各プロパティ値を読み込んでいること。
    // ********************************************************
    test('00001_load_01', () async {
      print("\n********** テスト実行：00001_load_01 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // 前提状態構築
      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == true) {
        fileBefore.deleteSync();
      }
      // ⓪：事前状態確認（対象JSONファイルが存在しないこと。）
      expect(fileBefore.exists() == false, false);

      await consistency.load();

      final File fileAfter = File(jsonPath);
      // ①-1：load実行により対象JSONファイルが作成されていること。
      expect(fileAfter.existsSync(), true);

      // ②：対象JSONファイルの各プロパティ値を読み込んでいること。
      allPropatyCheck(consistency,true);

      print("********** テスト終了：00001_load_01 **********\n\n");
    });

    // ********************************************************
    // テスト00002 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：loadを実行する。
    // 期待結果：アプリ用フォルダの対象JSONファイルの各プロパティ値を読み込んでいること。
    // ********************************************************
    test("00002_load_02", () async {
      print("\n********** テスト実行：00002_load_02 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == false) {
        consistency.setDefault();
        debugPrint("setDefault実行");
      }
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      await consistency.load();

      // 対象JSONファイルの各プロパティ値を読み込んでいること。
      // 00001実行後で、デフォルト値前提
      allPropatyCheck(consistency,true);

      print("********** テスト終了：00002_load_02 **********\n\n");
    });

    // ********************************************************
    // テスト00003 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②任意のプロパティの値を変更する。
    // 　　　　　③loadを実行する。
    // 期待結果：当該プロパティ値の変更が取り消されること。
    // ********************************************************
    test('00003_load_03', () async {
      print("\n********** テスト実行：00003_load_03 **********");
      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①：loadを実行する。
      await consistency.load();

      // ②任意のプロパティの値を変更する。
      final prefixData = consistency.version.title;
      consistency.version.title = testData1s;
      expect(consistency.version.title == testData1s, true);

      // ③loadを実行する。
      //   当該プロパティ値の変更が取り消されること。
      await consistency.load();
      expect(consistency.version.title != testData1s, true);
      expect(consistency.version.title == prefixData, true);

      print("********** テスト終了：00003_load_03 **********\n\n");
    });

    // ********************************************************
    // テスト00004 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②任意のプロパティの値を変更する。
    // 　　　　　③loadを実行する。
    // 期待結果：当該プロパティ値の変更が取り消されること。
    // ********************************************************
    test('00004_load_04', () async {
      print("\n********** テスト実行：00004_load_04 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②任意のプロパティの値を変更する。
      final prefixData = consistency.version.title;
      consistency.version.title = testData1s;
      expect(consistency.version.title, testData1s);

      // ③saveを実行する。
      await consistency.save();

      // ④loadを実行する。
      await consistency.load();

      expect(consistency.version.title != prefixData, true);
      expect(consistency.version.title == testData1s, true);
      allPropatyCheck(consistency,false);

      print("********** テスト終了：00004_load_04 **********\n\n");
    });

    // ********************************************************
    // テスト00005 : save
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②saveを実行する。
    // 期待結果：アプリ用フォルダにある対象JSONファイルの内容に変化がないこと。
    // ********************************************************
    test('00005_save_01', () async {
      print("\n********** テスト実行：00005_save_01 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      // ① loadを実行する。
      await consistency.load();

      // save実行前のJSONファイルを保存する。
      final String jsonBefor = await fileBefore.readAsString();

      // ② saveを実行する。
      await consistency.save();

      final File fileAfter = File(jsonPath);
      expect(fileAfter.existsSync(), true);

      // アプリ用フォルダにある対象JSONファイルの内容に変化がないこと。
      final String jsonAfter = await fileAfter.readAsString();
      expect(jsonBefor.replaceAll("\r\n", "\n") == jsonAfter.replaceAll("\r\n", "\n"), true);

      print("********** テスト終了：00201_save_01 **********\n\n");
    });

    // ********************************************************
    // テスト00006 : save
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    // 期待結果：アプリ用フォルダにある対象JSONファイルの当該プロパティの値が
    //         変更した値に変更されていること。
    // ********************************************************
    test('00006_save_02', () async {
      print("\n********** テスト実行：00006_save_02 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      // ① loadを実行する。
      await consistency.load();

      // save実行前のJSONファイルを保存する。
      final String jsonBefor = await fileBefore.readAsString();
      expect(consistency.version.title, defaultData);

      // ②任意のプロパティの値を変更する。
      final prefixData = consistency.version.title;
      consistency.version.title = testData1s;

      // ③ saveを実行する。
      await consistency.save();

      final File fileAfter1 = File(jsonPath);
      expect(fileAfter1.existsSync(), true);

      // アプリ用フォルダにある対象JSONファイルの内容に変化ががあること。
      // 手順②で変更した内容になっていること。
      final String jsonAfter1 = await fileAfter1.readAsString();
      expect(jsonBefor.replaceAll("\r\n", "\n") != jsonAfter1.replaceAll("\r\n", "\n"), true);
      expect(testData1s != prefixData, true);
      expect(consistency.version.title, testData1s);

      // ④ loadを実行する。
      await consistency.load();

      // アプリ用フォルダにある対象JSONファイルの内容が同じであること。
      // 手順②で変更した内容であること。
      final String jsonAfter2 = await fileAfter1.readAsString();
      expect(jsonAfter1.replaceAll("\r\n", "\n") == jsonAfter2.replaceAll("\r\n", "\n"), true);

      expect(consistency.version.title == testData1s, true);
      allPropatyCheck(consistency,false);

      print("********** テスト終了：00006_save_02 **********\n\n");
    });

    // ********************************************************
    // テスト00007 : setDefault
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    //         アプリ用フォルダに対象JSONファイルが存在し、任意の編集を施すこと。
    // 試験手順：①アプリ用フォルダにある対象JSONファイルを削除する。
    //         ②setDefaultを実行する。
    // 期待結果：手順②実行後、assets/confにある対象JSONファイルが
    //         アプリ用フォルダに作成されること。
    // ********************************************************
    test('00007_setDefault_01', () async {
      print("\n********** テスト実行：00007_setDefault_01 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①アプリ用フォルダにある対象JSONファイルを削除する。
      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == true) {
        fileBefore.deleteSync();
      }
      expect(fileBefore.existsSync() , false);

      // ②setDefaultを実行する。
      await consistency.setDefault();
      expect(fileBefore.existsSync() , true);
      allPropatyCheck(consistency,true);

      print("********** テスト終了：00007_setDefault_01 **********\n\n");
    });

    // ********************************************************
    // テスト00008 : setDefault
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    //         アプリ用フォルダに対象JSONファイルが存在し、任意の編集を施すこと。
    // 試験手順：①任意のプロパティの値を変更し、saveを実行する。
    //         ②setDefaultを実行する。
    // 期待結果：手順②実行後、assets/confにある対象JSONファイルの内容で上書きされること。
    //         （変更が取り消されていること）
    // ********************************************************
    test('00008_setDefault_02', () async {
      print("\n********** テスト実行：00008_setDefault_02 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②任意のプロパティの値を変更する。
      consistency.version.title = testData1s;
      expect(consistency.version.title, testData1s);

      // ③saveを実行する。
      await consistency.save();
      expect(consistency.version.title, testData1s);

      // ④loadを実行する。
      await consistency.setDefault();

      // （デフォルト値と同じであること。）
      allPropatyCheck(consistency,true);

      print("********** テスト終了：00008_setDefault_02 **********\n\n");
    });

    // ********************************************************
    // テスト00009 : セクション/キー名称による設定（setValueWithName）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
    //         ②loadを実行する。
    // 期待結果：手順②実行後、手順①で設定したプロパティ変更後の内容で
    //         プロパティ値が設定されていること。
    // ********************************************************
    test('00009_setValueWithName_01', () async {
      print("\n********** テスト実行：00009_setValueWithName_01 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      await consistency.setValueWithName(section, key, testData1s);

      // ②loadを実行する。
      await consistency.load();

      // 手順②実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(consistency.version.title == testData1s, true);

      print("********** テスト終了：00009_setValueWithName_01 **********\n\n");
    });

    test('00010_setValueWithName_02', () async {
      print("\n********** テスト実行：00010_setValueWithName_02 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      final value = await consistency.setValueWithName("test_section", key, testData1s);


      // 手順実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(value.result, false);
      expect(value.cause == json_result.element_not_found, true);

      print("********** テスト終了：00010_setValueWithName_02 **********\n\n");
    });

    test('00011_setValueWithName_03', () async {
      print("\n********** テスト実行：00011_setValueWithName_03 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      final value = await consistency.setValueWithName(section, "test_key", testData1s);

      // 手順①実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(value.result, false);
      expect(value.cause == json_result.element_not_found, true);

      print("********** テスト終了：00011_setValueWithName_03 **********\n\n");
    });

    // ********************************************************
    // テスト00010 : セクション/キー名称による取得（getValueWithName）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティを変更する。
    //         ③saveを実行する。
    //         ④①で指定したプロパティに相当するセクション名、キー名にて
    //           getValueWithNameを実行する。
    // 期待結果：手順④で設定した値が手順②で設定した値と一致すること。
    // ********************************************************
    test('00012_getValueWithName_01', () async {
      print("\n********** テスト実行：00012_getValueWithName_01********** ");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②任意のプロパティを変更する。
      consistency.version.title = testData1s;

      // ③saveを実行する。
      await consistency.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await consistency.getValueWithName(section, key);
      //print(testData.toString() + " == " + verify.value.toString());
      expect(testData1s == verify.value, true);

      print("********** テスト終了：00012_getValueWithName_01**********\n\n");
    });

    test('00013_getValueWithName_02', () async {
      print("\n********** テスト実行：00013_getValueWithName_02********** ");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②任意のプロパティを変更する。
      consistency.version.title = testData1s;

      // ③saveを実行する。
      await consistency.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await consistency.getValueWithName("test_section", key);
      //print(testData.toString() + " == " + verify.value.toString());

      expect(verify.result, false);
      expect(verify.cause == json_result.element_not_found, true);

      print("********** テスト終了：00013_getValueWithName_02**********\n\n");
    });

    test('00014_getValueWithName_03', () async {
      print("\n********** テスト実行：00014_getValueWithName_03********** ");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②任意のプロパティを変更する。
      consistency.version.title = testData1s;

      // ③saveを実行する。
      await consistency.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await consistency.getValueWithName(section, "test_key");
      //print(testData.toString() + " == " + verify.value.toString());

      expect(verify.result, false);
      expect(verify.cause == json_result.element_not_found, true);

      print("********** テスト終了：00014_getValueWithName_03**********\n\n");
    });

    // ********************************************************
    // テスト00015 : 任意フォルダ設定（_setAbsolutePath）
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティ値を変更し、テスト用フォルダにJSONのコピーを作成する。
    //         ②setDefaultを実行する。
    //         ③テスト用フォルダのパスを引数としてsetAbsolutePathを実行する。
    //         ④loadを実行する。
    // 期待結果：手順④実行後、プロパティ変更後の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00015:_setAbsolutePath_01', () async {
      print("\n********** テスト実行：00015_setAbsolutePath_01 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①任意のフォルダのパスを引数としてsetAbsolutePathを実行する。
      final appDir = Directory(EnvironmentData.TPRX_HOME);
      JsonPath().absolutePath = join(appDir.path, testDir);

      // ②loadを実行する。
      await consistency.load();

      // 手順②実行後に①で指定したパスに/assets/conf/当該JSONファイルが作成されていること。
      final String jsonPath = join(appDir.path, testDir, confPath, fileName);
      //print("存在確認先：" + jsonPath);
      final File file = File(jsonPath);
      expect(file.existsSync() == true , true);

      // ③任意のプロパティ値を変更する。
      consistency.version.title = testData1s;
      expect(consistency.version.title, testData1s);

      // ④saveを実行する。
      await consistency.save();

      // 手順④実行後、プロパティ変更後の内容でプロパティ値が設定されていること。
      expect(consistency.version.title, testData1s);
      
      // アプリフォルダのパスを元に戻しておく（このテストだけの後処理）。
      JsonPath().absolutePath = join(appDir.path);

      print("********** テスト終了：00015_setAbsolutePath_01 **********\n\n");
    });

    // ********************************************************
    // テスト00016 : ファイル復元（_restoreJson：バックアップ作成中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    //         ④バックアップファイルを作成し、破損状態とする。
    //         ⑤loadを実行する。
    // 期待結果：手順③実行後、プロパティ変更前の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00016_restoreJson_01', () async {
      print("\n********** テスト実行：00016_restoreJson_01 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ②Jsonファイルの任意のプロパティの値を変更する。
      // ④バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern1, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern1);

      // ⑤loadを実行する。
      await consistency.load();

      // 手順⑤実行後、手順②で変更した内容でプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      expect(consistency.version.title == testData1s, true);

      print("********** テスト終了：00016_restoreJson_01 **********\n\n");
    });

    // ********************************************************
    // テスト00017 : ファイル復元（_restoreJson：バックアップ作成直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    //         ④バックアップファイルを作成する。
    //         ⑤loadを実行する。
    // 期待結果：手順③実行後、プロパティ変更前の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('0017_restoreJson_02', () async {
      print("\n********** テスト実行：00017_restoreJson_02 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ②任意のプロパティの値を変更する。
      // ④バックアップファイルを作成する。
      await makeTestData(confPath, fileName, testFunc.makePattern2, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern2);

      // ⑤loadを実行する。
      await consistency.load();

      // 手順⑤実行後、手順②で変更した内容でプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      expect(consistency.version.title == testData2s, true);

      print("********** テスト終了：00017_restoreJson_02 **********\n\n");
    });

    // ********************************************************
    // テスト00018 : ファイル復元（_restoreJson：JSON更新中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成する。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00018_restoreJson_03', () async {
      print("\n********** テスト実行：00018_restoreJson_03 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern3, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern3);

      // ③loadを実行する。
      await consistency.load();

      // 手順③実行後、①の内容ででプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      expect(consistency.version.title == testData1s, true);

      print("********** テスト終了：00018_restoreJson_03 **********\n\n");
    });

    // ********************************************************
    // テスト00019 : ファイル復元（_restoreJson：JSON作成直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成する。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新する。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、②の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00019_restoreJson_04', () async {
      print("\n********** テスト実行：00019_restoreJson_04 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern4, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern4);

      // ③loadを実行する。
      await consistency.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      expect(consistency.version.title == testData2s, true);

      print("********** テスト終了：00019_restoreJson_04 **********\n\n");
    });

    // ********************************************************
    // テスト00020 : ファイル復元（_restoreJson：バックアップ削除中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更した内容でJSONファイルを更新する。
    //         ②バックアップファイルを作成し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00020_restoreJson_05', () async {
      print("\n********** テスト実行：00020_restoreJson_05 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern5, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern5);

      // ③loadを実行する。
      await consistency.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      expect(consistency.version.title == testData1s, true);

      print("********** テスト終了：00020_restoreJson_05 **********\n\n");
    });

    // ********************************************************
    // テスト00021 : ファイル復元（_restoreJson：バックアップ削除直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更する。
    //         ②①の内容でJSONファイルを更新する。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00021_restoreJson_06', () async {
      print("\n********** テスト実行：00021_restoreJson_06 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern6, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern6);

      // ③loadを実行する。
      await consistency.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      expect(consistency.version.title == testData1s, true);

      print("********** テスト終了：00021_restoreJson_06 **********\n\n");
    });

    // ********************************************************
    // テスト00022 : ファイル復元（_restoreJson：バックアップとJSON共に破損：バックアップが新しい日付）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ②バックアップファイルを作成し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：デフォルトの内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00022_restoreJson_07', () async {
      print("\n********** テスト実行：00022_restoreJson_07 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      // ②バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern7, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern7);

      // ③loadを実行する。
      await consistency.load();

      // デフォルトの内容でプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      allPropatyCheck(consistency,true);

      print("********** テスト終了：00022_restoreJson_07 **********\n\n");
    });

    // ********************************************************
    // テスト00023 : ファイル復元（_restoreJson：バックアップとJSON共に破損：JSONが新しい日付）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成し、破損状態とする。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：デフォルトの内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00023_restoreJson_08', () async {
      print("\n********** テスト実行：00023_restoreJson_08 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      // ②バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern8, section, key, testData1s, testData2s);
      await getTestDate(confPath, fileName, testFunc.getPattern8);

      // ③loadを実行する。
      await consistency.load();

      // デフォルトの内容でプロパティ値が設定されていること。
      print("check:" + consistency.version.title.toString());
      allPropatyCheck(consistency,true);

      print("********** テスト終了：00023_restoreJson_08 **********\n\n");
    });

    // ********************************************************
    // テスト00024 ～ : 要素取得・設定
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    //         実行前にsetConfigを実行すること。
    // 試験手順：①loadを実行する。
    //         ②指定したプロパティの初期値を取得する。
    //         ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
    //         ④saveを実行後、loadを実行する。
    //         ⑤同じプロパティを読み込み、データに変化がないことを確認する。
    //         ⑥③～⑤を異なるテストデータで実施する。
    //         ⑦③～⑤を手順①で取得した初期値で実施する。
    //         ⑧全てのプロパティが初期値になっていることを確認する。
    // 期待結果：全プロパティ値を取得、設定できること。（１要素、1テストで実施する）
    // ********************************************************
     test('00024_element_check_00001', () async {
      print("\n********** テスト実行：00024_element_check_00001 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.title;
      print(consistency.version.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.title = testData1s;
      print(consistency.version.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.title = testData2s;
      print(consistency.version.title);
      expect(consistency.version.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.title = defalut;
      print(consistency.version.title);
      expect(consistency.version.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00024_element_check_00001 **********\n\n");
    });

    test('00025_element_check_00002', () async {
      print("\n********** テスト実行：00025_element_check_00002 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.obj;
      print(consistency.version.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.obj = testData1;
      print(consistency.version.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.obj = testData2;
      print(consistency.version.obj);
      expect(consistency.version.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.obj = defalut;
      print(consistency.version.obj);
      expect(consistency.version.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00025_element_check_00002 **********\n\n");
    });

    test('00026_element_check_00003', () async {
      print("\n********** テスト実行：00026_element_check_00003 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.condi;
      print(consistency.version.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.condi = testData1;
      print(consistency.version.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.condi = testData2;
      print(consistency.version.condi);
      expect(consistency.version.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.condi = defalut;
      print(consistency.version.condi);
      expect(consistency.version.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00026_element_check_00003 **********\n\n");
    });

    test('00027_element_check_00004', () async {
      print("\n********** テスト実行：00027_element_check_00004 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.typ;
      print(consistency.version.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.typ = testData1;
      print(consistency.version.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.typ = testData2;
      print(consistency.version.typ);
      expect(consistency.version.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.typ = defalut;
      print(consistency.version.typ);
      expect(consistency.version.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00027_element_check_00004 **********\n\n");
    });

    test('00028_element_check_00005', () async {
      print("\n********** テスト実行：00028_element_check_00005 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.ini_typ;
      print(consistency.version.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.ini_typ = testData1;
      print(consistency.version.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.ini_typ = testData2;
      print(consistency.version.ini_typ);
      expect(consistency.version.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.ini_typ = defalut;
      print(consistency.version.ini_typ);
      expect(consistency.version.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00028_element_check_00005 **********\n\n");
    });

    test('00029_element_check_00006', () async {
      print("\n********** テスト実行：00029_element_check_00006 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.file;
      print(consistency.version.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.file = testData1s;
      print(consistency.version.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.file = testData2s;
      print(consistency.version.file);
      expect(consistency.version.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.file = defalut;
      print(consistency.version.file);
      expect(consistency.version.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00029_element_check_00006 **********\n\n");
    });

    test('00030_element_check_00007', () async {
      print("\n********** テスト実行：00030_element_check_00007 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.section;
      print(consistency.version.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.section = testData1s;
      print(consistency.version.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.section = testData2s;
      print(consistency.version.section);
      expect(consistency.version.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.section = defalut;
      print(consistency.version.section);
      expect(consistency.version.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00030_element_check_00007 **********\n\n");
    });

    test('00031_element_check_00008', () async {
      print("\n********** テスト実行：00031_element_check_00008 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.version.keyword;
      print(consistency.version.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.version.keyword = testData1s;
      print(consistency.version.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.version.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.version.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.version.keyword = testData2s;
      print(consistency.version.keyword);
      expect(consistency.version.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.version.keyword = defalut;
      print(consistency.version.keyword);
      expect(consistency.version.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.version.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00031_element_check_00008 **********\n\n");
    });

    test('00032_element_check_00009', () async {
      print("\n********** テスト実行：00032_element_check_00009 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.macno_check.title;
      print(consistency.macno_check.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.macno_check.title = testData1s;
      print(consistency.macno_check.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.macno_check.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.macno_check.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.macno_check.title = testData2s;
      print(consistency.macno_check.title);
      expect(consistency.macno_check.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.macno_check.title = defalut;
      print(consistency.macno_check.title);
      expect(consistency.macno_check.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00032_element_check_00009 **********\n\n");
    });

    test('00033_element_check_00010', () async {
      print("\n********** テスト実行：00033_element_check_00010 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.macno_check.obj;
      print(consistency.macno_check.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.macno_check.obj = testData1;
      print(consistency.macno_check.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.macno_check.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.macno_check.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.macno_check.obj = testData2;
      print(consistency.macno_check.obj);
      expect(consistency.macno_check.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.macno_check.obj = defalut;
      print(consistency.macno_check.obj);
      expect(consistency.macno_check.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00033_element_check_00010 **********\n\n");
    });

    test('00034_element_check_00011', () async {
      print("\n********** テスト実行：00034_element_check_00011 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.macno_check.condi;
      print(consistency.macno_check.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.macno_check.condi = testData1;
      print(consistency.macno_check.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.macno_check.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.macno_check.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.macno_check.condi = testData2;
      print(consistency.macno_check.condi);
      expect(consistency.macno_check.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.macno_check.condi = defalut;
      print(consistency.macno_check.condi);
      expect(consistency.macno_check.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00034_element_check_00011 **********\n\n");
    });

    test('00035_element_check_00012', () async {
      print("\n********** テスト実行：00035_element_check_00012 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.macno_check.typ;
      print(consistency.macno_check.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.macno_check.typ = testData1;
      print(consistency.macno_check.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.macno_check.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.macno_check.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.macno_check.typ = testData2;
      print(consistency.macno_check.typ);
      expect(consistency.macno_check.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.macno_check.typ = defalut;
      print(consistency.macno_check.typ);
      expect(consistency.macno_check.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.macno_check.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00035_element_check_00012 **********\n\n");
    });

    test('00036_element_check_00013', () async {
      print("\n********** テスト実行：00036_element_check_00013 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.title;
      print(consistency.stre_cd.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.title = testData1s;
      print(consistency.stre_cd.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.title = testData2s;
      print(consistency.stre_cd.title);
      expect(consistency.stre_cd.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.title = defalut;
      print(consistency.stre_cd.title);
      expect(consistency.stre_cd.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00036_element_check_00013 **********\n\n");
    });

    test('00037_element_check_00014', () async {
      print("\n********** テスト実行：00037_element_check_00014 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.obj;
      print(consistency.stre_cd.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.obj = testData1;
      print(consistency.stre_cd.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.obj = testData2;
      print(consistency.stre_cd.obj);
      expect(consistency.stre_cd.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.obj = defalut;
      print(consistency.stre_cd.obj);
      expect(consistency.stre_cd.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00037_element_check_00014 **********\n\n");
    });

    test('00038_element_check_00015', () async {
      print("\n********** テスト実行：00038_element_check_00015 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.condi;
      print(consistency.stre_cd.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.condi = testData1;
      print(consistency.stre_cd.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.condi = testData2;
      print(consistency.stre_cd.condi);
      expect(consistency.stre_cd.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.condi = defalut;
      print(consistency.stre_cd.condi);
      expect(consistency.stre_cd.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00038_element_check_00015 **********\n\n");
    });

    test('00039_element_check_00016', () async {
      print("\n********** テスト実行：00039_element_check_00016 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.typ;
      print(consistency.stre_cd.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.typ = testData1;
      print(consistency.stre_cd.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.typ = testData2;
      print(consistency.stre_cd.typ);
      expect(consistency.stre_cd.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.typ = defalut;
      print(consistency.stre_cd.typ);
      expect(consistency.stre_cd.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00039_element_check_00016 **********\n\n");
    });

    test('00040_element_check_00017', () async {
      print("\n********** テスト実行：00040_element_check_00017 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.ini_typ;
      print(consistency.stre_cd.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.ini_typ = testData1;
      print(consistency.stre_cd.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.ini_typ = testData2;
      print(consistency.stre_cd.ini_typ);
      expect(consistency.stre_cd.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.ini_typ = defalut;
      print(consistency.stre_cd.ini_typ);
      expect(consistency.stre_cd.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00040_element_check_00017 **********\n\n");
    });

    test('00041_element_check_00018', () async {
      print("\n********** テスト実行：00041_element_check_00018 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.file;
      print(consistency.stre_cd.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.file = testData1s;
      print(consistency.stre_cd.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.file = testData2s;
      print(consistency.stre_cd.file);
      expect(consistency.stre_cd.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.file = defalut;
      print(consistency.stre_cd.file);
      expect(consistency.stre_cd.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00041_element_check_00018 **********\n\n");
    });

    test('00042_element_check_00019', () async {
      print("\n********** テスト実行：00042_element_check_00019 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.section;
      print(consistency.stre_cd.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.section = testData1s;
      print(consistency.stre_cd.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.section = testData2s;
      print(consistency.stre_cd.section);
      expect(consistency.stre_cd.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.section = defalut;
      print(consistency.stre_cd.section);
      expect(consistency.stre_cd.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00042_element_check_00019 **********\n\n");
    });

    test('00043_element_check_00020', () async {
      print("\n********** テスト実行：00043_element_check_00020 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.stre_cd.keyword;
      print(consistency.stre_cd.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.stre_cd.keyword = testData1s;
      print(consistency.stre_cd.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.stre_cd.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.stre_cd.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.stre_cd.keyword = testData2s;
      print(consistency.stre_cd.keyword);
      expect(consistency.stre_cd.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.stre_cd.keyword = defalut;
      print(consistency.stre_cd.keyword);
      expect(consistency.stre_cd.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.stre_cd.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00043_element_check_00020 **********\n\n");
    });

    test('00044_element_check_00021', () async {
      print("\n********** テスト実行：00044_element_check_00021 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.title;
      print(consistency.ms_onoff.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.title = testData1s;
      print(consistency.ms_onoff.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.title = testData2s;
      print(consistency.ms_onoff.title);
      expect(consistency.ms_onoff.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.title = defalut;
      print(consistency.ms_onoff.title);
      expect(consistency.ms_onoff.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00044_element_check_00021 **********\n\n");
    });

    test('00045_element_check_00022', () async {
      print("\n********** テスト実行：00045_element_check_00022 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.obj;
      print(consistency.ms_onoff.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.obj = testData1;
      print(consistency.ms_onoff.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.obj = testData2;
      print(consistency.ms_onoff.obj);
      expect(consistency.ms_onoff.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.obj = defalut;
      print(consistency.ms_onoff.obj);
      expect(consistency.ms_onoff.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00045_element_check_00022 **********\n\n");
    });

    test('00046_element_check_00023', () async {
      print("\n********** テスト実行：00046_element_check_00023 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.condi;
      print(consistency.ms_onoff.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.condi = testData1;
      print(consistency.ms_onoff.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.condi = testData2;
      print(consistency.ms_onoff.condi);
      expect(consistency.ms_onoff.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.condi = defalut;
      print(consistency.ms_onoff.condi);
      expect(consistency.ms_onoff.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00046_element_check_00023 **********\n\n");
    });

    test('00047_element_check_00024', () async {
      print("\n********** テスト実行：00047_element_check_00024 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.typ;
      print(consistency.ms_onoff.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.typ = testData1;
      print(consistency.ms_onoff.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.typ = testData2;
      print(consistency.ms_onoff.typ);
      expect(consistency.ms_onoff.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.typ = defalut;
      print(consistency.ms_onoff.typ);
      expect(consistency.ms_onoff.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00047_element_check_00024 **********\n\n");
    });

    test('00048_element_check_00025', () async {
      print("\n********** テスト実行：00048_element_check_00025 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.ini_typ;
      print(consistency.ms_onoff.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.ini_typ = testData1;
      print(consistency.ms_onoff.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.ini_typ = testData2;
      print(consistency.ms_onoff.ini_typ);
      expect(consistency.ms_onoff.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.ini_typ = defalut;
      print(consistency.ms_onoff.ini_typ);
      expect(consistency.ms_onoff.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00048_element_check_00025 **********\n\n");
    });

    test('00049_element_check_00026', () async {
      print("\n********** テスト実行：00049_element_check_00026 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.file;
      print(consistency.ms_onoff.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.file = testData1s;
      print(consistency.ms_onoff.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.file = testData2s;
      print(consistency.ms_onoff.file);
      expect(consistency.ms_onoff.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.file = defalut;
      print(consistency.ms_onoff.file);
      expect(consistency.ms_onoff.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00049_element_check_00026 **********\n\n");
    });

    test('00050_element_check_00027', () async {
      print("\n********** テスト実行：00050_element_check_00027 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.section;
      print(consistency.ms_onoff.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.section = testData1s;
      print(consistency.ms_onoff.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.section = testData2s;
      print(consistency.ms_onoff.section);
      expect(consistency.ms_onoff.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.section = defalut;
      print(consistency.ms_onoff.section);
      expect(consistency.ms_onoff.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00050_element_check_00027 **********\n\n");
    });

    test('00051_element_check_00028', () async {
      print("\n********** テスト実行：00051_element_check_00028 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ms_onoff.keyword;
      print(consistency.ms_onoff.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ms_onoff.keyword = testData1s;
      print(consistency.ms_onoff.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ms_onoff.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ms_onoff.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ms_onoff.keyword = testData2s;
      print(consistency.ms_onoff.keyword);
      expect(consistency.ms_onoff.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ms_onoff.keyword = defalut;
      print(consistency.ms_onoff.keyword);
      expect(consistency.ms_onoff.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ms_onoff.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00051_element_check_00028 **********\n\n");
    });

    test('00052_element_check_00029', () async {
      print("\n********** テスト実行：00052_element_check_00029 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.title;
      print(consistency.mac_info_timeserver.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.title = testData1s;
      print(consistency.mac_info_timeserver.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.title = testData2s;
      print(consistency.mac_info_timeserver.title);
      expect(consistency.mac_info_timeserver.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.title = defalut;
      print(consistency.mac_info_timeserver.title);
      expect(consistency.mac_info_timeserver.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00052_element_check_00029 **********\n\n");
    });

    test('00053_element_check_00030', () async {
      print("\n********** テスト実行：00053_element_check_00030 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.obj;
      print(consistency.mac_info_timeserver.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.obj = testData1;
      print(consistency.mac_info_timeserver.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.obj = testData2;
      print(consistency.mac_info_timeserver.obj);
      expect(consistency.mac_info_timeserver.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.obj = defalut;
      print(consistency.mac_info_timeserver.obj);
      expect(consistency.mac_info_timeserver.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00053_element_check_00030 **********\n\n");
    });

    test('00054_element_check_00031', () async {
      print("\n********** テスト実行：00054_element_check_00031 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.condi;
      print(consistency.mac_info_timeserver.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.condi = testData1;
      print(consistency.mac_info_timeserver.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.condi = testData2;
      print(consistency.mac_info_timeserver.condi);
      expect(consistency.mac_info_timeserver.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.condi = defalut;
      print(consistency.mac_info_timeserver.condi);
      expect(consistency.mac_info_timeserver.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00054_element_check_00031 **********\n\n");
    });

    test('00055_element_check_00032', () async {
      print("\n********** テスト実行：00055_element_check_00032 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.typ;
      print(consistency.mac_info_timeserver.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.typ = testData1;
      print(consistency.mac_info_timeserver.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.typ = testData2;
      print(consistency.mac_info_timeserver.typ);
      expect(consistency.mac_info_timeserver.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.typ = defalut;
      print(consistency.mac_info_timeserver.typ);
      expect(consistency.mac_info_timeserver.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00055_element_check_00032 **********\n\n");
    });

    test('00056_element_check_00033', () async {
      print("\n********** テスト実行：00056_element_check_00033 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.ini_typ;
      print(consistency.mac_info_timeserver.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.ini_typ = testData1;
      print(consistency.mac_info_timeserver.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.ini_typ = testData2;
      print(consistency.mac_info_timeserver.ini_typ);
      expect(consistency.mac_info_timeserver.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.ini_typ = defalut;
      print(consistency.mac_info_timeserver.ini_typ);
      expect(consistency.mac_info_timeserver.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00056_element_check_00033 **********\n\n");
    });

    test('00057_element_check_00034', () async {
      print("\n********** テスト実行：00057_element_check_00034 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.file;
      print(consistency.mac_info_timeserver.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.file = testData1s;
      print(consistency.mac_info_timeserver.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.file = testData2s;
      print(consistency.mac_info_timeserver.file);
      expect(consistency.mac_info_timeserver.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.file = defalut;
      print(consistency.mac_info_timeserver.file);
      expect(consistency.mac_info_timeserver.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00057_element_check_00034 **********\n\n");
    });

    test('00058_element_check_00035', () async {
      print("\n********** テスト実行：00058_element_check_00035 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.section;
      print(consistency.mac_info_timeserver.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.section = testData1s;
      print(consistency.mac_info_timeserver.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.section = testData2s;
      print(consistency.mac_info_timeserver.section);
      expect(consistency.mac_info_timeserver.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.section = defalut;
      print(consistency.mac_info_timeserver.section);
      expect(consistency.mac_info_timeserver.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00058_element_check_00035 **********\n\n");
    });

    test('00059_element_check_00036', () async {
      print("\n********** テスト実行：00059_element_check_00036 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mac_info_timeserver.keyword;
      print(consistency.mac_info_timeserver.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mac_info_timeserver.keyword = testData1s;
      print(consistency.mac_info_timeserver.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mac_info_timeserver.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mac_info_timeserver.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mac_info_timeserver.keyword = testData2s;
      print(consistency.mac_info_timeserver.keyword);
      expect(consistency.mac_info_timeserver.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mac_info_timeserver.keyword = defalut;
      print(consistency.mac_info_timeserver.keyword);
      expect(consistency.mac_info_timeserver.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mac_info_timeserver.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00059_element_check_00036 **********\n\n");
    });

    test('00060_element_check_00037', () async {
      print("\n********** テスト実行：00060_element_check_00037 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.title;
      print(consistency.ts_ver_mrg.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.title = testData1s;
      print(consistency.ts_ver_mrg.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.title = testData2s;
      print(consistency.ts_ver_mrg.title);
      expect(consistency.ts_ver_mrg.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.title = defalut;
      print(consistency.ts_ver_mrg.title);
      expect(consistency.ts_ver_mrg.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00060_element_check_00037 **********\n\n");
    });

    test('00061_element_check_00038', () async {
      print("\n********** テスト実行：00061_element_check_00038 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.obj;
      print(consistency.ts_ver_mrg.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.obj = testData1;
      print(consistency.ts_ver_mrg.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.obj = testData2;
      print(consistency.ts_ver_mrg.obj);
      expect(consistency.ts_ver_mrg.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.obj = defalut;
      print(consistency.ts_ver_mrg.obj);
      expect(consistency.ts_ver_mrg.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00061_element_check_00038 **********\n\n");
    });

    test('00062_element_check_00039', () async {
      print("\n********** テスト実行：00062_element_check_00039 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.condi;
      print(consistency.ts_ver_mrg.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.condi = testData1;
      print(consistency.ts_ver_mrg.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.condi = testData2;
      print(consistency.ts_ver_mrg.condi);
      expect(consistency.ts_ver_mrg.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.condi = defalut;
      print(consistency.ts_ver_mrg.condi);
      expect(consistency.ts_ver_mrg.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00062_element_check_00039 **********\n\n");
    });

    test('00063_element_check_00040', () async {
      print("\n********** テスト実行：00063_element_check_00040 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.typ;
      print(consistency.ts_ver_mrg.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.typ = testData1;
      print(consistency.ts_ver_mrg.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.typ = testData2;
      print(consistency.ts_ver_mrg.typ);
      expect(consistency.ts_ver_mrg.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.typ = defalut;
      print(consistency.ts_ver_mrg.typ);
      expect(consistency.ts_ver_mrg.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00063_element_check_00040 **********\n\n");
    });

    test('00064_element_check_00041', () async {
      print("\n********** テスト実行：00064_element_check_00041 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.ini_typ;
      print(consistency.ts_ver_mrg.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.ini_typ = testData1;
      print(consistency.ts_ver_mrg.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.ini_typ = testData2;
      print(consistency.ts_ver_mrg.ini_typ);
      expect(consistency.ts_ver_mrg.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.ini_typ = defalut;
      print(consistency.ts_ver_mrg.ini_typ);
      expect(consistency.ts_ver_mrg.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00064_element_check_00041 **********\n\n");
    });

    test('00065_element_check_00042', () async {
      print("\n********** テスト実行：00065_element_check_00042 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.file;
      print(consistency.ts_ver_mrg.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.file = testData1s;
      print(consistency.ts_ver_mrg.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.file = testData2s;
      print(consistency.ts_ver_mrg.file);
      expect(consistency.ts_ver_mrg.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.file = defalut;
      print(consistency.ts_ver_mrg.file);
      expect(consistency.ts_ver_mrg.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00065_element_check_00042 **********\n\n");
    });

    test('00066_element_check_00043', () async {
      print("\n********** テスト実行：00066_element_check_00043 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.section;
      print(consistency.ts_ver_mrg.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.section = testData1s;
      print(consistency.ts_ver_mrg.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.section = testData2s;
      print(consistency.ts_ver_mrg.section);
      expect(consistency.ts_ver_mrg.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.section = defalut;
      print(consistency.ts_ver_mrg.section);
      expect(consistency.ts_ver_mrg.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00066_element_check_00043 **********\n\n");
    });

    test('00067_element_check_00044', () async {
      print("\n********** テスト実行：00067_element_check_00044 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts_ver_mrg.keyword;
      print(consistency.ts_ver_mrg.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts_ver_mrg.keyword = testData1s;
      print(consistency.ts_ver_mrg.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts_ver_mrg.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts_ver_mrg.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts_ver_mrg.keyword = testData2s;
      print(consistency.ts_ver_mrg.keyword);
      expect(consistency.ts_ver_mrg.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts_ver_mrg.keyword = defalut;
      print(consistency.ts_ver_mrg.keyword);
      expect(consistency.ts_ver_mrg.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts_ver_mrg.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00067_element_check_00044 **********\n\n");
    });

    test('00068_element_check_00045', () async {
      print("\n********** テスト実行：00068_element_check_00045 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.title;
      print(consistency.psc_scn_cmd_desktop.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.title = testData1s;
      print(consistency.psc_scn_cmd_desktop.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.title = testData2s;
      print(consistency.psc_scn_cmd_desktop.title);
      expect(consistency.psc_scn_cmd_desktop.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.title = defalut;
      print(consistency.psc_scn_cmd_desktop.title);
      expect(consistency.psc_scn_cmd_desktop.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00068_element_check_00045 **********\n\n");
    });

    test('00069_element_check_00046', () async {
      print("\n********** テスト実行：00069_element_check_00046 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.obj;
      print(consistency.psc_scn_cmd_desktop.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.obj = testData1;
      print(consistency.psc_scn_cmd_desktop.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.obj = testData2;
      print(consistency.psc_scn_cmd_desktop.obj);
      expect(consistency.psc_scn_cmd_desktop.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.obj = defalut;
      print(consistency.psc_scn_cmd_desktop.obj);
      expect(consistency.psc_scn_cmd_desktop.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00069_element_check_00046 **********\n\n");
    });

    test('00070_element_check_00047', () async {
      print("\n********** テスト実行：00070_element_check_00047 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.condi;
      print(consistency.psc_scn_cmd_desktop.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.condi = testData1;
      print(consistency.psc_scn_cmd_desktop.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.condi = testData2;
      print(consistency.psc_scn_cmd_desktop.condi);
      expect(consistency.psc_scn_cmd_desktop.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.condi = defalut;
      print(consistency.psc_scn_cmd_desktop.condi);
      expect(consistency.psc_scn_cmd_desktop.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00070_element_check_00047 **********\n\n");
    });

    test('00071_element_check_00048', () async {
      print("\n********** テスト実行：00071_element_check_00048 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.typ;
      print(consistency.psc_scn_cmd_desktop.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.typ = testData1;
      print(consistency.psc_scn_cmd_desktop.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.typ = testData2;
      print(consistency.psc_scn_cmd_desktop.typ);
      expect(consistency.psc_scn_cmd_desktop.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.typ = defalut;
      print(consistency.psc_scn_cmd_desktop.typ);
      expect(consistency.psc_scn_cmd_desktop.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00071_element_check_00048 **********\n\n");
    });

    test('00072_element_check_00049', () async {
      print("\n********** テスト実行：00072_element_check_00049 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.ini_typ;
      print(consistency.psc_scn_cmd_desktop.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.ini_typ = testData1;
      print(consistency.psc_scn_cmd_desktop.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.ini_typ = testData2;
      print(consistency.psc_scn_cmd_desktop.ini_typ);
      expect(consistency.psc_scn_cmd_desktop.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.ini_typ = defalut;
      print(consistency.psc_scn_cmd_desktop.ini_typ);
      expect(consistency.psc_scn_cmd_desktop.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00072_element_check_00049 **********\n\n");
    });

    test('00073_element_check_00050', () async {
      print("\n********** テスト実行：00073_element_check_00050 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.file;
      print(consistency.psc_scn_cmd_desktop.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.file = testData1s;
      print(consistency.psc_scn_cmd_desktop.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.file = testData2s;
      print(consistency.psc_scn_cmd_desktop.file);
      expect(consistency.psc_scn_cmd_desktop.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.file = defalut;
      print(consistency.psc_scn_cmd_desktop.file);
      expect(consistency.psc_scn_cmd_desktop.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00073_element_check_00050 **********\n\n");
    });

    test('00074_element_check_00051', () async {
      print("\n********** テスト実行：00074_element_check_00051 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.section;
      print(consistency.psc_scn_cmd_desktop.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.section = testData1s;
      print(consistency.psc_scn_cmd_desktop.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.section = testData2s;
      print(consistency.psc_scn_cmd_desktop.section);
      expect(consistency.psc_scn_cmd_desktop.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.section = defalut;
      print(consistency.psc_scn_cmd_desktop.section);
      expect(consistency.psc_scn_cmd_desktop.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00074_element_check_00051 **********\n\n");
    });

    test('00075_element_check_00052', () async {
      print("\n********** テスト実行：00075_element_check_00052 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_desktop.keyword;
      print(consistency.psc_scn_cmd_desktop.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_desktop.keyword = testData1s;
      print(consistency.psc_scn_cmd_desktop.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_desktop.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_desktop.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_desktop.keyword = testData2s;
      print(consistency.psc_scn_cmd_desktop.keyword);
      expect(consistency.psc_scn_cmd_desktop.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_desktop.keyword = defalut;
      print(consistency.psc_scn_cmd_desktop.keyword);
      expect(consistency.psc_scn_cmd_desktop.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_desktop.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00075_element_check_00052 **********\n\n");
    });

    test('00076_element_check_00053', () async {
      print("\n********** テスト実行：00076_element_check_00053 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.title;
      print(consistency.psc_scn_cmd_tower.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.title = testData1s;
      print(consistency.psc_scn_cmd_tower.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.title = testData2s;
      print(consistency.psc_scn_cmd_tower.title);
      expect(consistency.psc_scn_cmd_tower.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.title = defalut;
      print(consistency.psc_scn_cmd_tower.title);
      expect(consistency.psc_scn_cmd_tower.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00076_element_check_00053 **********\n\n");
    });

    test('00077_element_check_00054', () async {
      print("\n********** テスト実行：00077_element_check_00054 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.obj;
      print(consistency.psc_scn_cmd_tower.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.obj = testData1;
      print(consistency.psc_scn_cmd_tower.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.obj = testData2;
      print(consistency.psc_scn_cmd_tower.obj);
      expect(consistency.psc_scn_cmd_tower.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.obj = defalut;
      print(consistency.psc_scn_cmd_tower.obj);
      expect(consistency.psc_scn_cmd_tower.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00077_element_check_00054 **********\n\n");
    });

    test('00078_element_check_00055', () async {
      print("\n********** テスト実行：00078_element_check_00055 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.condi;
      print(consistency.psc_scn_cmd_tower.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.condi = testData1;
      print(consistency.psc_scn_cmd_tower.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.condi = testData2;
      print(consistency.psc_scn_cmd_tower.condi);
      expect(consistency.psc_scn_cmd_tower.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.condi = defalut;
      print(consistency.psc_scn_cmd_tower.condi);
      expect(consistency.psc_scn_cmd_tower.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00078_element_check_00055 **********\n\n");
    });

    test('00079_element_check_00056', () async {
      print("\n********** テスト実行：00079_element_check_00056 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.typ;
      print(consistency.psc_scn_cmd_tower.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.typ = testData1;
      print(consistency.psc_scn_cmd_tower.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.typ = testData2;
      print(consistency.psc_scn_cmd_tower.typ);
      expect(consistency.psc_scn_cmd_tower.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.typ = defalut;
      print(consistency.psc_scn_cmd_tower.typ);
      expect(consistency.psc_scn_cmd_tower.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00079_element_check_00056 **********\n\n");
    });

    test('00080_element_check_00057', () async {
      print("\n********** テスト実行：00080_element_check_00057 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.ini_typ;
      print(consistency.psc_scn_cmd_tower.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.ini_typ = testData1;
      print(consistency.psc_scn_cmd_tower.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.ini_typ = testData2;
      print(consistency.psc_scn_cmd_tower.ini_typ);
      expect(consistency.psc_scn_cmd_tower.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.ini_typ = defalut;
      print(consistency.psc_scn_cmd_tower.ini_typ);
      expect(consistency.psc_scn_cmd_tower.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00080_element_check_00057 **********\n\n");
    });

    test('00081_element_check_00058', () async {
      print("\n********** テスト実行：00081_element_check_00058 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.file;
      print(consistency.psc_scn_cmd_tower.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.file = testData1s;
      print(consistency.psc_scn_cmd_tower.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.file = testData2s;
      print(consistency.psc_scn_cmd_tower.file);
      expect(consistency.psc_scn_cmd_tower.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.file = defalut;
      print(consistency.psc_scn_cmd_tower.file);
      expect(consistency.psc_scn_cmd_tower.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00081_element_check_00058 **********\n\n");
    });

    test('00082_element_check_00059', () async {
      print("\n********** テスト実行：00082_element_check_00059 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.section;
      print(consistency.psc_scn_cmd_tower.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.section = testData1s;
      print(consistency.psc_scn_cmd_tower.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.section = testData2s;
      print(consistency.psc_scn_cmd_tower.section);
      expect(consistency.psc_scn_cmd_tower.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.section = defalut;
      print(consistency.psc_scn_cmd_tower.section);
      expect(consistency.psc_scn_cmd_tower.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00082_element_check_00059 **********\n\n");
    });

    test('00083_element_check_00060', () async {
      print("\n********** テスト実行：00083_element_check_00060 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.psc_scn_cmd_tower.keyword;
      print(consistency.psc_scn_cmd_tower.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.psc_scn_cmd_tower.keyword = testData1s;
      print(consistency.psc_scn_cmd_tower.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.psc_scn_cmd_tower.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.psc_scn_cmd_tower.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.psc_scn_cmd_tower.keyword = testData2s;
      print(consistency.psc_scn_cmd_tower.keyword);
      expect(consistency.psc_scn_cmd_tower.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.psc_scn_cmd_tower.keyword = defalut;
      print(consistency.psc_scn_cmd_tower.keyword);
      expect(consistency.psc_scn_cmd_tower.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.psc_scn_cmd_tower.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00083_element_check_00060 **********\n\n");
    });

    test('00084_element_check_00061', () async {
      print("\n********** テスト実行：00084_element_check_00061 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.title;
      print(consistency.scan_dp_snd_desktop.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.title = testData1s;
      print(consistency.scan_dp_snd_desktop.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.title = testData2s;
      print(consistency.scan_dp_snd_desktop.title);
      expect(consistency.scan_dp_snd_desktop.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.title = defalut;
      print(consistency.scan_dp_snd_desktop.title);
      expect(consistency.scan_dp_snd_desktop.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00084_element_check_00061 **********\n\n");
    });

    test('00085_element_check_00062', () async {
      print("\n********** テスト実行：00085_element_check_00062 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.obj;
      print(consistency.scan_dp_snd_desktop.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.obj = testData1;
      print(consistency.scan_dp_snd_desktop.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.obj = testData2;
      print(consistency.scan_dp_snd_desktop.obj);
      expect(consistency.scan_dp_snd_desktop.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.obj = defalut;
      print(consistency.scan_dp_snd_desktop.obj);
      expect(consistency.scan_dp_snd_desktop.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00085_element_check_00062 **********\n\n");
    });

    test('00086_element_check_00063', () async {
      print("\n********** テスト実行：00086_element_check_00063 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.condi;
      print(consistency.scan_dp_snd_desktop.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.condi = testData1;
      print(consistency.scan_dp_snd_desktop.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.condi = testData2;
      print(consistency.scan_dp_snd_desktop.condi);
      expect(consistency.scan_dp_snd_desktop.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.condi = defalut;
      print(consistency.scan_dp_snd_desktop.condi);
      expect(consistency.scan_dp_snd_desktop.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00086_element_check_00063 **********\n\n");
    });

    test('00087_element_check_00064', () async {
      print("\n********** テスト実行：00087_element_check_00064 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.typ;
      print(consistency.scan_dp_snd_desktop.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.typ = testData1;
      print(consistency.scan_dp_snd_desktop.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.typ = testData2;
      print(consistency.scan_dp_snd_desktop.typ);
      expect(consistency.scan_dp_snd_desktop.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.typ = defalut;
      print(consistency.scan_dp_snd_desktop.typ);
      expect(consistency.scan_dp_snd_desktop.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00087_element_check_00064 **********\n\n");
    });

    test('00088_element_check_00065', () async {
      print("\n********** テスト実行：00088_element_check_00065 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.ini_typ;
      print(consistency.scan_dp_snd_desktop.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.ini_typ = testData1;
      print(consistency.scan_dp_snd_desktop.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.ini_typ = testData2;
      print(consistency.scan_dp_snd_desktop.ini_typ);
      expect(consistency.scan_dp_snd_desktop.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.ini_typ = defalut;
      print(consistency.scan_dp_snd_desktop.ini_typ);
      expect(consistency.scan_dp_snd_desktop.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00088_element_check_00065 **********\n\n");
    });

    test('00089_element_check_00066', () async {
      print("\n********** テスト実行：00089_element_check_00066 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.file;
      print(consistency.scan_dp_snd_desktop.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.file = testData1s;
      print(consistency.scan_dp_snd_desktop.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.file = testData2s;
      print(consistency.scan_dp_snd_desktop.file);
      expect(consistency.scan_dp_snd_desktop.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.file = defalut;
      print(consistency.scan_dp_snd_desktop.file);
      expect(consistency.scan_dp_snd_desktop.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00089_element_check_00066 **********\n\n");
    });

    test('00090_element_check_00067', () async {
      print("\n********** テスト実行：00090_element_check_00067 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.section;
      print(consistency.scan_dp_snd_desktop.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.section = testData1s;
      print(consistency.scan_dp_snd_desktop.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.section = testData2s;
      print(consistency.scan_dp_snd_desktop.section);
      expect(consistency.scan_dp_snd_desktop.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.section = defalut;
      print(consistency.scan_dp_snd_desktop.section);
      expect(consistency.scan_dp_snd_desktop.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00090_element_check_00067 **********\n\n");
    });

    test('00091_element_check_00068', () async {
      print("\n********** テスト実行：00091_element_check_00068 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_desktop.keyword;
      print(consistency.scan_dp_snd_desktop.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_desktop.keyword = testData1s;
      print(consistency.scan_dp_snd_desktop.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_desktop.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_desktop.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_desktop.keyword = testData2s;
      print(consistency.scan_dp_snd_desktop.keyword);
      expect(consistency.scan_dp_snd_desktop.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_desktop.keyword = defalut;
      print(consistency.scan_dp_snd_desktop.keyword);
      expect(consistency.scan_dp_snd_desktop.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_desktop.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00091_element_check_00068 **********\n\n");
    });

    test('00092_element_check_00069', () async {
      print("\n********** テスト実行：00092_element_check_00069 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.title;
      print(consistency.scan_dp_snd_tower.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.title = testData1s;
      print(consistency.scan_dp_snd_tower.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.title = testData2s;
      print(consistency.scan_dp_snd_tower.title);
      expect(consistency.scan_dp_snd_tower.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.title = defalut;
      print(consistency.scan_dp_snd_tower.title);
      expect(consistency.scan_dp_snd_tower.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00092_element_check_00069 **********\n\n");
    });

    test('00093_element_check_00070', () async {
      print("\n********** テスト実行：00093_element_check_00070 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.obj;
      print(consistency.scan_dp_snd_tower.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.obj = testData1;
      print(consistency.scan_dp_snd_tower.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.obj = testData2;
      print(consistency.scan_dp_snd_tower.obj);
      expect(consistency.scan_dp_snd_tower.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.obj = defalut;
      print(consistency.scan_dp_snd_tower.obj);
      expect(consistency.scan_dp_snd_tower.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00093_element_check_00070 **********\n\n");
    });

    test('00094_element_check_00071', () async {
      print("\n********** テスト実行：00094_element_check_00071 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.condi;
      print(consistency.scan_dp_snd_tower.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.condi = testData1;
      print(consistency.scan_dp_snd_tower.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.condi = testData2;
      print(consistency.scan_dp_snd_tower.condi);
      expect(consistency.scan_dp_snd_tower.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.condi = defalut;
      print(consistency.scan_dp_snd_tower.condi);
      expect(consistency.scan_dp_snd_tower.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00094_element_check_00071 **********\n\n");
    });

    test('00095_element_check_00072', () async {
      print("\n********** テスト実行：00095_element_check_00072 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.typ;
      print(consistency.scan_dp_snd_tower.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.typ = testData1;
      print(consistency.scan_dp_snd_tower.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.typ = testData2;
      print(consistency.scan_dp_snd_tower.typ);
      expect(consistency.scan_dp_snd_tower.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.typ = defalut;
      print(consistency.scan_dp_snd_tower.typ);
      expect(consistency.scan_dp_snd_tower.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00095_element_check_00072 **********\n\n");
    });

    test('00096_element_check_00073', () async {
      print("\n********** テスト実行：00096_element_check_00073 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.ini_typ;
      print(consistency.scan_dp_snd_tower.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.ini_typ = testData1;
      print(consistency.scan_dp_snd_tower.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.ini_typ = testData2;
      print(consistency.scan_dp_snd_tower.ini_typ);
      expect(consistency.scan_dp_snd_tower.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.ini_typ = defalut;
      print(consistency.scan_dp_snd_tower.ini_typ);
      expect(consistency.scan_dp_snd_tower.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00096_element_check_00073 **********\n\n");
    });

    test('00097_element_check_00074', () async {
      print("\n********** テスト実行：00097_element_check_00074 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.file;
      print(consistency.scan_dp_snd_tower.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.file = testData1s;
      print(consistency.scan_dp_snd_tower.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.file = testData2s;
      print(consistency.scan_dp_snd_tower.file);
      expect(consistency.scan_dp_snd_tower.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.file = defalut;
      print(consistency.scan_dp_snd_tower.file);
      expect(consistency.scan_dp_snd_tower.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00097_element_check_00074 **********\n\n");
    });

    test('00098_element_check_00075', () async {
      print("\n********** テスト実行：00098_element_check_00075 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.section;
      print(consistency.scan_dp_snd_tower.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.section = testData1s;
      print(consistency.scan_dp_snd_tower.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.section = testData2s;
      print(consistency.scan_dp_snd_tower.section);
      expect(consistency.scan_dp_snd_tower.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.section = defalut;
      print(consistency.scan_dp_snd_tower.section);
      expect(consistency.scan_dp_snd_tower.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00098_element_check_00075 **********\n\n");
    });

    test('00099_element_check_00076', () async {
      print("\n********** テスト実行：00099_element_check_00076 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.scan_dp_snd_tower.keyword;
      print(consistency.scan_dp_snd_tower.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.scan_dp_snd_tower.keyword = testData1s;
      print(consistency.scan_dp_snd_tower.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.scan_dp_snd_tower.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.scan_dp_snd_tower.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.scan_dp_snd_tower.keyword = testData2s;
      print(consistency.scan_dp_snd_tower.keyword);
      expect(consistency.scan_dp_snd_tower.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.scan_dp_snd_tower.keyword = defalut;
      print(consistency.scan_dp_snd_tower.keyword);
      expect(consistency.scan_dp_snd_tower.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.scan_dp_snd_tower.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00099_element_check_00076 **********\n\n");
    });

    test('00100_element_check_00077', () async {
      print("\n********** テスト実行：00100_element_check_00077 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.title;
      print(consistency.eat_in_start_end_check.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.title = testData1s;
      print(consistency.eat_in_start_end_check.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.title = testData2s;
      print(consistency.eat_in_start_end_check.title);
      expect(consistency.eat_in_start_end_check.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.title = defalut;
      print(consistency.eat_in_start_end_check.title);
      expect(consistency.eat_in_start_end_check.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00100_element_check_00077 **********\n\n");
    });

    test('00101_element_check_00078', () async {
      print("\n********** テスト実行：00101_element_check_00078 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.obj;
      print(consistency.eat_in_start_end_check.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.obj = testData1;
      print(consistency.eat_in_start_end_check.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.obj = testData2;
      print(consistency.eat_in_start_end_check.obj);
      expect(consistency.eat_in_start_end_check.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.obj = defalut;
      print(consistency.eat_in_start_end_check.obj);
      expect(consistency.eat_in_start_end_check.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00101_element_check_00078 **********\n\n");
    });

    test('00102_element_check_00079', () async {
      print("\n********** テスト実行：00102_element_check_00079 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.condi;
      print(consistency.eat_in_start_end_check.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.condi = testData1;
      print(consistency.eat_in_start_end_check.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.condi = testData2;
      print(consistency.eat_in_start_end_check.condi);
      expect(consistency.eat_in_start_end_check.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.condi = defalut;
      print(consistency.eat_in_start_end_check.condi);
      expect(consistency.eat_in_start_end_check.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00102_element_check_00079 **********\n\n");
    });

    test('00103_element_check_00080', () async {
      print("\n********** テスト実行：00103_element_check_00080 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.condi1_typ;
      print(consistency.eat_in_start_end_check.condi1_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.condi1_typ = testData1;
      print(consistency.eat_in_start_end_check.condi1_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.condi1_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.condi1_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.condi1_typ = testData2;
      print(consistency.eat_in_start_end_check.condi1_typ);
      expect(consistency.eat_in_start_end_check.condi1_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi1_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.condi1_typ = defalut;
      print(consistency.eat_in_start_end_check.condi1_typ);
      expect(consistency.eat_in_start_end_check.condi1_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi1_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00103_element_check_00080 **********\n\n");
    });

    test('00104_element_check_00081', () async {
      print("\n********** テスト実行：00104_element_check_00081 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.condi1_key;
      print(consistency.eat_in_start_end_check.condi1_key);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.condi1_key = testData1s;
      print(consistency.eat_in_start_end_check.condi1_key);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.condi1_key == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.condi1_key == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.condi1_key = testData2s;
      print(consistency.eat_in_start_end_check.condi1_key);
      expect(consistency.eat_in_start_end_check.condi1_key == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi1_key == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.condi1_key = defalut;
      print(consistency.eat_in_start_end_check.condi1_key);
      expect(consistency.eat_in_start_end_check.condi1_key == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi1_key == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00104_element_check_00081 **********\n\n");
    });

    test('00105_element_check_00082', () async {
      print("\n********** テスト実行：00105_element_check_00082 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.condi1_judge;
      print(consistency.eat_in_start_end_check.condi1_judge);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.condi1_judge = testData1;
      print(consistency.eat_in_start_end_check.condi1_judge);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.condi1_judge == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.condi1_judge == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.condi1_judge = testData2;
      print(consistency.eat_in_start_end_check.condi1_judge);
      expect(consistency.eat_in_start_end_check.condi1_judge == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi1_judge == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.condi1_judge = defalut;
      print(consistency.eat_in_start_end_check.condi1_judge);
      expect(consistency.eat_in_start_end_check.condi1_judge == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.condi1_judge == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00105_element_check_00082 **********\n\n");
    });

    test('00106_element_check_00083', () async {
      print("\n********** テスト実行：00106_element_check_00083 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.typ;
      print(consistency.eat_in_start_end_check.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.typ = testData1;
      print(consistency.eat_in_start_end_check.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.typ = testData2;
      print(consistency.eat_in_start_end_check.typ);
      expect(consistency.eat_in_start_end_check.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.typ = defalut;
      print(consistency.eat_in_start_end_check.typ);
      expect(consistency.eat_in_start_end_check.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00106_element_check_00083 **********\n\n");
    });

    test('00107_element_check_00084', () async {
      print("\n********** テスト実行：00107_element_check_00084 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.st_file;
      print(consistency.eat_in_start_end_check.st_file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.st_file = testData1s;
      print(consistency.eat_in_start_end_check.st_file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.st_file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.st_file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.st_file = testData2s;
      print(consistency.eat_in_start_end_check.st_file);
      expect(consistency.eat_in_start_end_check.st_file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.st_file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.st_file = defalut;
      print(consistency.eat_in_start_end_check.st_file);
      expect(consistency.eat_in_start_end_check.st_file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.st_file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00107_element_check_00084 **********\n\n");
    });

    test('00108_element_check_00085', () async {
      print("\n********** テスト実行：00108_element_check_00085 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.st_sect;
      print(consistency.eat_in_start_end_check.st_sect);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.st_sect = testData1s;
      print(consistency.eat_in_start_end_check.st_sect);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.st_sect == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.st_sect == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.st_sect = testData2s;
      print(consistency.eat_in_start_end_check.st_sect);
      expect(consistency.eat_in_start_end_check.st_sect == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.st_sect == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.st_sect = defalut;
      print(consistency.eat_in_start_end_check.st_sect);
      expect(consistency.eat_in_start_end_check.st_sect == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.st_sect == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00108_element_check_00085 **********\n\n");
    });

    test('00109_element_check_00086', () async {
      print("\n********** テスト実行：00109_element_check_00086 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.st_key;
      print(consistency.eat_in_start_end_check.st_key);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.st_key = testData1s;
      print(consistency.eat_in_start_end_check.st_key);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.st_key == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.st_key == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.st_key = testData2s;
      print(consistency.eat_in_start_end_check.st_key);
      expect(consistency.eat_in_start_end_check.st_key == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.st_key == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.st_key = defalut;
      print(consistency.eat_in_start_end_check.st_key);
      expect(consistency.eat_in_start_end_check.st_key == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.st_key == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00109_element_check_00086 **********\n\n");
    });

    test('00110_element_check_00087', () async {
      print("\n********** テスト実行：00110_element_check_00087 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.end_file;
      print(consistency.eat_in_start_end_check.end_file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.end_file = testData1s;
      print(consistency.eat_in_start_end_check.end_file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.end_file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.end_file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.end_file = testData2s;
      print(consistency.eat_in_start_end_check.end_file);
      expect(consistency.eat_in_start_end_check.end_file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.end_file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.end_file = defalut;
      print(consistency.eat_in_start_end_check.end_file);
      expect(consistency.eat_in_start_end_check.end_file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.end_file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00110_element_check_00087 **********\n\n");
    });

    test('00111_element_check_00088', () async {
      print("\n********** テスト実行：00111_element_check_00088 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.end_sect;
      print(consistency.eat_in_start_end_check.end_sect);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.end_sect = testData1s;
      print(consistency.eat_in_start_end_check.end_sect);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.end_sect == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.end_sect == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.end_sect = testData2s;
      print(consistency.eat_in_start_end_check.end_sect);
      expect(consistency.eat_in_start_end_check.end_sect == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.end_sect == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.end_sect = defalut;
      print(consistency.eat_in_start_end_check.end_sect);
      expect(consistency.eat_in_start_end_check.end_sect == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.end_sect == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00111_element_check_00088 **********\n\n");
    });

    test('00112_element_check_00089', () async {
      print("\n********** テスト実行：00112_element_check_00089 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.eat_in_start_end_check.end_key;
      print(consistency.eat_in_start_end_check.end_key);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.eat_in_start_end_check.end_key = testData1s;
      print(consistency.eat_in_start_end_check.end_key);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.eat_in_start_end_check.end_key == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.eat_in_start_end_check.end_key == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.eat_in_start_end_check.end_key = testData2s;
      print(consistency.eat_in_start_end_check.end_key);
      expect(consistency.eat_in_start_end_check.end_key == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.end_key == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.eat_in_start_end_check.end_key = defalut;
      print(consistency.eat_in_start_end_check.end_key);
      expect(consistency.eat_in_start_end_check.end_key == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.eat_in_start_end_check.end_key == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00112_element_check_00089 **********\n\n");
    });

    test('00113_element_check_00090', () async {
      print("\n********** テスト実行：00113_element_check_00090 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.title;
      print(consistency.catalinapr_cnct.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.title = testData1s;
      print(consistency.catalinapr_cnct.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.title = testData2s;
      print(consistency.catalinapr_cnct.title);
      expect(consistency.catalinapr_cnct.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.title = defalut;
      print(consistency.catalinapr_cnct.title);
      expect(consistency.catalinapr_cnct.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00113_element_check_00090 **********\n\n");
    });

    test('00114_element_check_00091', () async {
      print("\n********** テスト実行：00114_element_check_00091 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.obj;
      print(consistency.catalinapr_cnct.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.obj = testData1;
      print(consistency.catalinapr_cnct.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.obj = testData2;
      print(consistency.catalinapr_cnct.obj);
      expect(consistency.catalinapr_cnct.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.obj = defalut;
      print(consistency.catalinapr_cnct.obj);
      expect(consistency.catalinapr_cnct.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00114_element_check_00091 **********\n\n");
    });

    test('00115_element_check_00092', () async {
      print("\n********** テスト実行：00115_element_check_00092 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.condi;
      print(consistency.catalinapr_cnct.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.condi = testData1;
      print(consistency.catalinapr_cnct.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.condi = testData2;
      print(consistency.catalinapr_cnct.condi);
      expect(consistency.catalinapr_cnct.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.condi = defalut;
      print(consistency.catalinapr_cnct.condi);
      expect(consistency.catalinapr_cnct.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00115_element_check_00092 **********\n\n");
    });

    test('00116_element_check_00093', () async {
      print("\n********** テスト実行：00116_element_check_00093 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.condi1_typ;
      print(consistency.catalinapr_cnct.condi1_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.condi1_typ = testData1;
      print(consistency.catalinapr_cnct.condi1_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.condi1_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.condi1_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.condi1_typ = testData2;
      print(consistency.catalinapr_cnct.condi1_typ);
      expect(consistency.catalinapr_cnct.condi1_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi1_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.condi1_typ = defalut;
      print(consistency.catalinapr_cnct.condi1_typ);
      expect(consistency.catalinapr_cnct.condi1_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi1_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00116_element_check_00093 **********\n\n");
    });

    test('00117_element_check_00094', () async {
      print("\n********** テスト実行：00117_element_check_00094 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.condi1_key;
      print(consistency.catalinapr_cnct.condi1_key);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.condi1_key = testData1s;
      print(consistency.catalinapr_cnct.condi1_key);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.condi1_key == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.condi1_key == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.condi1_key = testData2s;
      print(consistency.catalinapr_cnct.condi1_key);
      expect(consistency.catalinapr_cnct.condi1_key == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi1_key == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.condi1_key = defalut;
      print(consistency.catalinapr_cnct.condi1_key);
      expect(consistency.catalinapr_cnct.condi1_key == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi1_key == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00117_element_check_00094 **********\n\n");
    });

    test('00118_element_check_00095', () async {
      print("\n********** テスト実行：00118_element_check_00095 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.condi1_judge;
      print(consistency.catalinapr_cnct.condi1_judge);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.condi1_judge = testData1;
      print(consistency.catalinapr_cnct.condi1_judge);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.condi1_judge == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.condi1_judge == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.condi1_judge = testData2;
      print(consistency.catalinapr_cnct.condi1_judge);
      expect(consistency.catalinapr_cnct.condi1_judge == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi1_judge == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.condi1_judge = defalut;
      print(consistency.catalinapr_cnct.condi1_judge);
      expect(consistency.catalinapr_cnct.condi1_judge == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.condi1_judge == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00118_element_check_00095 **********\n\n");
    });

    test('00119_element_check_00096', () async {
      print("\n********** テスト実行：00119_element_check_00096 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.typ;
      print(consistency.catalinapr_cnct.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.typ = testData1;
      print(consistency.catalinapr_cnct.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.typ = testData2;
      print(consistency.catalinapr_cnct.typ);
      expect(consistency.catalinapr_cnct.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.typ = defalut;
      print(consistency.catalinapr_cnct.typ);
      expect(consistency.catalinapr_cnct.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00119_element_check_00096 **********\n\n");
    });

    test('00120_element_check_00097', () async {
      print("\n********** テスト実行：00120_element_check_00097 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.ini_typ;
      print(consistency.catalinapr_cnct.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.ini_typ = testData1;
      print(consistency.catalinapr_cnct.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.ini_typ = testData2;
      print(consistency.catalinapr_cnct.ini_typ);
      expect(consistency.catalinapr_cnct.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.ini_typ = defalut;
      print(consistency.catalinapr_cnct.ini_typ);
      expect(consistency.catalinapr_cnct.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00120_element_check_00097 **********\n\n");
    });

    test('00121_element_check_00098', () async {
      print("\n********** テスト実行：00121_element_check_00098 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.file;
      print(consistency.catalinapr_cnct.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.file = testData1s;
      print(consistency.catalinapr_cnct.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.file = testData2s;
      print(consistency.catalinapr_cnct.file);
      expect(consistency.catalinapr_cnct.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.file = defalut;
      print(consistency.catalinapr_cnct.file);
      expect(consistency.catalinapr_cnct.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00121_element_check_00098 **********\n\n");
    });

    test('00122_element_check_00099', () async {
      print("\n********** テスト実行：00122_element_check_00099 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.section;
      print(consistency.catalinapr_cnct.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.section = testData1s;
      print(consistency.catalinapr_cnct.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.section = testData2s;
      print(consistency.catalinapr_cnct.section);
      expect(consistency.catalinapr_cnct.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.section = defalut;
      print(consistency.catalinapr_cnct.section);
      expect(consistency.catalinapr_cnct.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00122_element_check_00099 **********\n\n");
    });

    test('00123_element_check_00100', () async {
      print("\n********** テスト実行：00123_element_check_00100 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.catalinapr_cnct.keyword;
      print(consistency.catalinapr_cnct.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.catalinapr_cnct.keyword = testData1s;
      print(consistency.catalinapr_cnct.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.catalinapr_cnct.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.catalinapr_cnct.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.catalinapr_cnct.keyword = testData2s;
      print(consistency.catalinapr_cnct.keyword);
      expect(consistency.catalinapr_cnct.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.catalinapr_cnct.keyword = defalut;
      print(consistency.catalinapr_cnct.keyword);
      expect(consistency.catalinapr_cnct.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.catalinapr_cnct.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00123_element_check_00100 **********\n\n");
    });

    test('00124_element_check_00101', () async {
      print("\n********** テスト実行：00124_element_check_00101 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.title;
      print(consistency.custrealsvr_cnct.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.title = testData1s;
      print(consistency.custrealsvr_cnct.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.title = testData2s;
      print(consistency.custrealsvr_cnct.title);
      expect(consistency.custrealsvr_cnct.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.title = defalut;
      print(consistency.custrealsvr_cnct.title);
      expect(consistency.custrealsvr_cnct.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00124_element_check_00101 **********\n\n");
    });

    test('00125_element_check_00102', () async {
      print("\n********** テスト実行：00125_element_check_00102 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.obj;
      print(consistency.custrealsvr_cnct.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.obj = testData1;
      print(consistency.custrealsvr_cnct.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.obj = testData2;
      print(consistency.custrealsvr_cnct.obj);
      expect(consistency.custrealsvr_cnct.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.obj = defalut;
      print(consistency.custrealsvr_cnct.obj);
      expect(consistency.custrealsvr_cnct.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00125_element_check_00102 **********\n\n");
    });

    test('00126_element_check_00103', () async {
      print("\n********** テスト実行：00126_element_check_00103 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.condi;
      print(consistency.custrealsvr_cnct.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.condi = testData1;
      print(consistency.custrealsvr_cnct.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.condi = testData2;
      print(consistency.custrealsvr_cnct.condi);
      expect(consistency.custrealsvr_cnct.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.condi = defalut;
      print(consistency.custrealsvr_cnct.condi);
      expect(consistency.custrealsvr_cnct.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00126_element_check_00103 **********\n\n");
    });

    test('00127_element_check_00104', () async {
      print("\n********** テスト実行：00127_element_check_00104 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.typ;
      print(consistency.custrealsvr_cnct.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.typ = testData1;
      print(consistency.custrealsvr_cnct.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.typ = testData2;
      print(consistency.custrealsvr_cnct.typ);
      expect(consistency.custrealsvr_cnct.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.typ = defalut;
      print(consistency.custrealsvr_cnct.typ);
      expect(consistency.custrealsvr_cnct.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00127_element_check_00104 **********\n\n");
    });

    test('00128_element_check_00105', () async {
      print("\n********** テスト実行：00128_element_check_00105 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.ini_typ;
      print(consistency.custrealsvr_cnct.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.ini_typ = testData1;
      print(consistency.custrealsvr_cnct.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.ini_typ = testData2;
      print(consistency.custrealsvr_cnct.ini_typ);
      expect(consistency.custrealsvr_cnct.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.ini_typ = defalut;
      print(consistency.custrealsvr_cnct.ini_typ);
      expect(consistency.custrealsvr_cnct.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00128_element_check_00105 **********\n\n");
    });

    test('00129_element_check_00106', () async {
      print("\n********** テスト実行：00129_element_check_00106 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.file;
      print(consistency.custrealsvr_cnct.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.file = testData1s;
      print(consistency.custrealsvr_cnct.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.file = testData2s;
      print(consistency.custrealsvr_cnct.file);
      expect(consistency.custrealsvr_cnct.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.file = defalut;
      print(consistency.custrealsvr_cnct.file);
      expect(consistency.custrealsvr_cnct.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00129_element_check_00106 **********\n\n");
    });

    test('00130_element_check_00107', () async {
      print("\n********** テスト実行：00130_element_check_00107 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.section;
      print(consistency.custrealsvr_cnct.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.section = testData1s;
      print(consistency.custrealsvr_cnct.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.section = testData2s;
      print(consistency.custrealsvr_cnct.section);
      expect(consistency.custrealsvr_cnct.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.section = defalut;
      print(consistency.custrealsvr_cnct.section);
      expect(consistency.custrealsvr_cnct.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00130_element_check_00107 **********\n\n");
    });

    test('00131_element_check_00108', () async {
      print("\n********** テスト実行：00131_element_check_00108 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_cnct.keyword;
      print(consistency.custrealsvr_cnct.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_cnct.keyword = testData1s;
      print(consistency.custrealsvr_cnct.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_cnct.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_cnct.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_cnct.keyword = testData2s;
      print(consistency.custrealsvr_cnct.keyword);
      expect(consistency.custrealsvr_cnct.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_cnct.keyword = defalut;
      print(consistency.custrealsvr_cnct.keyword);
      expect(consistency.custrealsvr_cnct.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_cnct.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00131_element_check_00108 **********\n\n");
    });

    test('00132_element_check_00109', () async {
      print("\n********** テスト実行：00132_element_check_00109 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.title;
      print(consistency.netmask.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.title = testData1s;
      print(consistency.netmask.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.title = testData2s;
      print(consistency.netmask.title);
      expect(consistency.netmask.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.title = defalut;
      print(consistency.netmask.title);
      expect(consistency.netmask.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00132_element_check_00109 **********\n\n");
    });

    test('00133_element_check_00110', () async {
      print("\n********** テスト実行：00133_element_check_00110 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.obj;
      print(consistency.netmask.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.obj = testData1;
      print(consistency.netmask.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.obj = testData2;
      print(consistency.netmask.obj);
      expect(consistency.netmask.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.obj = defalut;
      print(consistency.netmask.obj);
      expect(consistency.netmask.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00133_element_check_00110 **********\n\n");
    });

    test('00134_element_check_00111', () async {
      print("\n********** テスト実行：00134_element_check_00111 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.condi;
      print(consistency.netmask.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.condi = testData1;
      print(consistency.netmask.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.condi = testData2;
      print(consistency.netmask.condi);
      expect(consistency.netmask.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.condi = defalut;
      print(consistency.netmask.condi);
      expect(consistency.netmask.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00134_element_check_00111 **********\n\n");
    });

    test('00135_element_check_00112', () async {
      print("\n********** テスト実行：00135_element_check_00112 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.typ;
      print(consistency.netmask.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.typ = testData1;
      print(consistency.netmask.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.typ = testData2;
      print(consistency.netmask.typ);
      expect(consistency.netmask.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.typ = defalut;
      print(consistency.netmask.typ);
      expect(consistency.netmask.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00135_element_check_00112 **********\n\n");
    });

    test('00136_element_check_00113', () async {
      print("\n********** テスト実行：00136_element_check_00113 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.keyword_typ;
      print(consistency.netmask.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.keyword_typ = testData1;
      print(consistency.netmask.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.keyword_typ = testData2;
      print(consistency.netmask.keyword_typ);
      expect(consistency.netmask.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.keyword_typ = defalut;
      print(consistency.netmask.keyword_typ);
      expect(consistency.netmask.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00136_element_check_00113 **********\n\n");
    });

    test('00137_element_check_00114', () async {
      print("\n********** テスト実行：00137_element_check_00114 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.file;
      print(consistency.netmask.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.file = testData1s;
      print(consistency.netmask.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.file = testData2s;
      print(consistency.netmask.file);
      expect(consistency.netmask.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.file = defalut;
      print(consistency.netmask.file);
      expect(consistency.netmask.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00137_element_check_00114 **********\n\n");
    });

    test('00138_element_check_00115', () async {
      print("\n********** テスト実行：00138_element_check_00115 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.netmask.keyword;
      print(consistency.netmask.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.netmask.keyword = testData1s;
      print(consistency.netmask.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.netmask.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.netmask.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.netmask.keyword = testData2s;
      print(consistency.netmask.keyword);
      expect(consistency.netmask.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.netmask.keyword = defalut;
      print(consistency.netmask.keyword);
      expect(consistency.netmask.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.netmask.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00138_element_check_00115 **********\n\n");
    });

    test('00139_element_check_00116', () async {
      print("\n********** テスト実行：00139_element_check_00116 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.title;
      print(consistency.gateway.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.title = testData1s;
      print(consistency.gateway.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.title = testData2s;
      print(consistency.gateway.title);
      expect(consistency.gateway.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.title = defalut;
      print(consistency.gateway.title);
      expect(consistency.gateway.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00139_element_check_00116 **********\n\n");
    });

    test('00140_element_check_00117', () async {
      print("\n********** テスト実行：00140_element_check_00117 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.obj;
      print(consistency.gateway.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.obj = testData1;
      print(consistency.gateway.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.obj = testData2;
      print(consistency.gateway.obj);
      expect(consistency.gateway.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.obj = defalut;
      print(consistency.gateway.obj);
      expect(consistency.gateway.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00140_element_check_00117 **********\n\n");
    });

    test('00141_element_check_00118', () async {
      print("\n********** テスト実行：00141_element_check_00118 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.condi;
      print(consistency.gateway.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.condi = testData1;
      print(consistency.gateway.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.condi = testData2;
      print(consistency.gateway.condi);
      expect(consistency.gateway.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.condi = defalut;
      print(consistency.gateway.condi);
      expect(consistency.gateway.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00141_element_check_00118 **********\n\n");
    });

    test('00142_element_check_00119', () async {
      print("\n********** テスト実行：00142_element_check_00119 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.typ;
      print(consistency.gateway.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.typ = testData1;
      print(consistency.gateway.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.typ = testData2;
      print(consistency.gateway.typ);
      expect(consistency.gateway.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.typ = defalut;
      print(consistency.gateway.typ);
      expect(consistency.gateway.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00142_element_check_00119 **********\n\n");
    });

    test('00143_element_check_00120', () async {
      print("\n********** テスト実行：00143_element_check_00120 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.keyword_typ;
      print(consistency.gateway.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.keyword_typ = testData1;
      print(consistency.gateway.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.keyword_typ = testData2;
      print(consistency.gateway.keyword_typ);
      expect(consistency.gateway.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.keyword_typ = defalut;
      print(consistency.gateway.keyword_typ);
      expect(consistency.gateway.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00143_element_check_00120 **********\n\n");
    });

    test('00144_element_check_00121', () async {
      print("\n********** テスト実行：00144_element_check_00121 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.file;
      print(consistency.gateway.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.file = testData1s;
      print(consistency.gateway.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.file = testData2s;
      print(consistency.gateway.file);
      expect(consistency.gateway.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.file = defalut;
      print(consistency.gateway.file);
      expect(consistency.gateway.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00144_element_check_00121 **********\n\n");
    });

    test('00145_element_check_00122', () async {
      print("\n********** テスト実行：00145_element_check_00122 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.gateway.keyword;
      print(consistency.gateway.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.gateway.keyword = testData1s;
      print(consistency.gateway.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.gateway.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.gateway.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.gateway.keyword = testData2s;
      print(consistency.gateway.keyword);
      expect(consistency.gateway.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.gateway.keyword = defalut;
      print(consistency.gateway.keyword);
      expect(consistency.gateway.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.gateway.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00145_element_check_00122 **********\n\n");
    });

    test('00146_element_check_00123', () async {
      print("\n********** テスト実行：00146_element_check_00123 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.title;
      print(consistency.ts2100.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.title = testData1s;
      print(consistency.ts2100.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.title = testData2s;
      print(consistency.ts2100.title);
      expect(consistency.ts2100.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.title = defalut;
      print(consistency.ts2100.title);
      expect(consistency.ts2100.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00146_element_check_00123 **********\n\n");
    });

    test('00147_element_check_00124', () async {
      print("\n********** テスト実行：00147_element_check_00124 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.obj;
      print(consistency.ts2100.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.obj = testData1;
      print(consistency.ts2100.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.obj = testData2;
      print(consistency.ts2100.obj);
      expect(consistency.ts2100.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.obj = defalut;
      print(consistency.ts2100.obj);
      expect(consistency.ts2100.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00147_element_check_00124 **********\n\n");
    });

    test('00148_element_check_00125', () async {
      print("\n********** テスト実行：00148_element_check_00125 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.condi;
      print(consistency.ts2100.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.condi = testData1;
      print(consistency.ts2100.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.condi = testData2;
      print(consistency.ts2100.condi);
      expect(consistency.ts2100.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.condi = defalut;
      print(consistency.ts2100.condi);
      expect(consistency.ts2100.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00148_element_check_00125 **********\n\n");
    });

    test('00149_element_check_00126', () async {
      print("\n********** テスト実行：00149_element_check_00126 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.typ;
      print(consistency.ts2100.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.typ = testData1;
      print(consistency.ts2100.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.typ = testData2;
      print(consistency.ts2100.typ);
      expect(consistency.ts2100.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.typ = defalut;
      print(consistency.ts2100.typ);
      expect(consistency.ts2100.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00149_element_check_00126 **********\n\n");
    });

    test('00150_element_check_00127', () async {
      print("\n********** テスト実行：00150_element_check_00127 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.keyword_typ;
      print(consistency.ts2100.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.keyword_typ = testData1;
      print(consistency.ts2100.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.keyword_typ = testData2;
      print(consistency.ts2100.keyword_typ);
      expect(consistency.ts2100.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.keyword_typ = defalut;
      print(consistency.ts2100.keyword_typ);
      expect(consistency.ts2100.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00150_element_check_00127 **********\n\n");
    });

    test('00151_element_check_00128', () async {
      print("\n********** テスト実行：00151_element_check_00128 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.file;
      print(consistency.ts2100.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.file = testData1s;
      print(consistency.ts2100.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.file = testData2s;
      print(consistency.ts2100.file);
      expect(consistency.ts2100.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.file = defalut;
      print(consistency.ts2100.file);
      expect(consistency.ts2100.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00151_element_check_00128 **********\n\n");
    });

    test('00152_element_check_00129', () async {
      print("\n********** テスト実行：00152_element_check_00129 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts2100.keyword;
      print(consistency.ts2100.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts2100.keyword = testData1s;
      print(consistency.ts2100.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts2100.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts2100.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts2100.keyword = testData2s;
      print(consistency.ts2100.keyword);
      expect(consistency.ts2100.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts2100.keyword = defalut;
      print(consistency.ts2100.keyword);
      expect(consistency.ts2100.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts2100.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00152_element_check_00129 **********\n\n");
    });

    test('00153_element_check_00130', () async {
      print("\n********** テスト実行：00153_element_check_00130 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.title;
      print(consistency.ts21db.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.title = testData1s;
      print(consistency.ts21db.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.title = testData2s;
      print(consistency.ts21db.title);
      expect(consistency.ts21db.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.title = defalut;
      print(consistency.ts21db.title);
      expect(consistency.ts21db.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00153_element_check_00130 **********\n\n");
    });

    test('00154_element_check_00131', () async {
      print("\n********** テスト実行：00154_element_check_00131 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.obj;
      print(consistency.ts21db.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.obj = testData1;
      print(consistency.ts21db.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.obj = testData2;
      print(consistency.ts21db.obj);
      expect(consistency.ts21db.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.obj = defalut;
      print(consistency.ts21db.obj);
      expect(consistency.ts21db.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00154_element_check_00131 **********\n\n");
    });

    test('00155_element_check_00132', () async {
      print("\n********** テスト実行：00155_element_check_00132 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.condi;
      print(consistency.ts21db.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.condi = testData1;
      print(consistency.ts21db.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.condi = testData2;
      print(consistency.ts21db.condi);
      expect(consistency.ts21db.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.condi = defalut;
      print(consistency.ts21db.condi);
      expect(consistency.ts21db.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00155_element_check_00132 **********\n\n");
    });

    test('00156_element_check_00133', () async {
      print("\n********** テスト実行：00156_element_check_00133 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.typ;
      print(consistency.ts21db.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.typ = testData1;
      print(consistency.ts21db.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.typ = testData2;
      print(consistency.ts21db.typ);
      expect(consistency.ts21db.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.typ = defalut;
      print(consistency.ts21db.typ);
      expect(consistency.ts21db.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00156_element_check_00133 **********\n\n");
    });

    test('00157_element_check_00134', () async {
      print("\n********** テスト実行：00157_element_check_00134 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.keyword_typ;
      print(consistency.ts21db.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.keyword_typ = testData1;
      print(consistency.ts21db.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.keyword_typ = testData2;
      print(consistency.ts21db.keyword_typ);
      expect(consistency.ts21db.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.keyword_typ = defalut;
      print(consistency.ts21db.keyword_typ);
      expect(consistency.ts21db.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00157_element_check_00134 **********\n\n");
    });

    test('00158_element_check_00135', () async {
      print("\n********** テスト実行：00158_element_check_00135 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.file;
      print(consistency.ts21db.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.file = testData1s;
      print(consistency.ts21db.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.file = testData2s;
      print(consistency.ts21db.file);
      expect(consistency.ts21db.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.file = defalut;
      print(consistency.ts21db.file);
      expect(consistency.ts21db.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00158_element_check_00135 **********\n\n");
    });

    test('00159_element_check_00136', () async {
      print("\n********** テスト実行：00159_element_check_00136 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ts21db.keyword;
      print(consistency.ts21db.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ts21db.keyword = testData1s;
      print(consistency.ts21db.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ts21db.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ts21db.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ts21db.keyword = testData2s;
      print(consistency.ts21db.keyword);
      expect(consistency.ts21db.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ts21db.keyword = defalut;
      print(consistency.ts21db.keyword);
      expect(consistency.ts21db.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ts21db.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00159_element_check_00136 **********\n\n");
    });

    test('00160_element_check_00137', () async {
      print("\n********** テスト実行：00160_element_check_00137 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.title;
      print(consistency.subsrx.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.title = testData1s;
      print(consistency.subsrx.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.title = testData2s;
      print(consistency.subsrx.title);
      expect(consistency.subsrx.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.title = defalut;
      print(consistency.subsrx.title);
      expect(consistency.subsrx.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00160_element_check_00137 **********\n\n");
    });

    test('00161_element_check_00138', () async {
      print("\n********** テスト実行：00161_element_check_00138 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.obj;
      print(consistency.subsrx.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.obj = testData1;
      print(consistency.subsrx.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.obj = testData2;
      print(consistency.subsrx.obj);
      expect(consistency.subsrx.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.obj = defalut;
      print(consistency.subsrx.obj);
      expect(consistency.subsrx.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00161_element_check_00138 **********\n\n");
    });

    test('00162_element_check_00139', () async {
      print("\n********** テスト実行：00162_element_check_00139 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.condi;
      print(consistency.subsrx.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.condi = testData1;
      print(consistency.subsrx.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.condi = testData2;
      print(consistency.subsrx.condi);
      expect(consistency.subsrx.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.condi = defalut;
      print(consistency.subsrx.condi);
      expect(consistency.subsrx.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00162_element_check_00139 **********\n\n");
    });

    test('00163_element_check_00140', () async {
      print("\n********** テスト実行：00163_element_check_00140 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.typ;
      print(consistency.subsrx.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.typ = testData1;
      print(consistency.subsrx.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.typ = testData2;
      print(consistency.subsrx.typ);
      expect(consistency.subsrx.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.typ = defalut;
      print(consistency.subsrx.typ);
      expect(consistency.subsrx.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00163_element_check_00140 **********\n\n");
    });

    test('00164_element_check_00141', () async {
      print("\n********** テスト実行：00164_element_check_00141 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.keyword_typ;
      print(consistency.subsrx.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.keyword_typ = testData1;
      print(consistency.subsrx.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.keyword_typ = testData2;
      print(consistency.subsrx.keyword_typ);
      expect(consistency.subsrx.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.keyword_typ = defalut;
      print(consistency.subsrx.keyword_typ);
      expect(consistency.subsrx.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00164_element_check_00141 **********\n\n");
    });

    test('00165_element_check_00142', () async {
      print("\n********** テスト実行：00165_element_check_00142 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.file;
      print(consistency.subsrx.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.file = testData1s;
      print(consistency.subsrx.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.file = testData2s;
      print(consistency.subsrx.file);
      expect(consistency.subsrx.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.file = defalut;
      print(consistency.subsrx.file);
      expect(consistency.subsrx.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00165_element_check_00142 **********\n\n");
    });

    test('00166_element_check_00143', () async {
      print("\n********** テスト実行：00166_element_check_00143 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.subsrx.keyword;
      print(consistency.subsrx.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.subsrx.keyword = testData1s;
      print(consistency.subsrx.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.subsrx.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.subsrx.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.subsrx.keyword = testData2s;
      print(consistency.subsrx.keyword);
      expect(consistency.subsrx.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.subsrx.keyword = defalut;
      print(consistency.subsrx.keyword);
      expect(consistency.subsrx.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.subsrx.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00166_element_check_00143 **********\n\n");
    });

    test('00167_element_check_00144', () async {
      print("\n********** テスト実行：00167_element_check_00144 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.title;
      print(consistency.compc.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.title = testData1s;
      print(consistency.compc.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.title = testData2s;
      print(consistency.compc.title);
      expect(consistency.compc.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.title = defalut;
      print(consistency.compc.title);
      expect(consistency.compc.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00167_element_check_00144 **********\n\n");
    });

    test('00168_element_check_00145', () async {
      print("\n********** テスト実行：00168_element_check_00145 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.obj;
      print(consistency.compc.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.obj = testData1;
      print(consistency.compc.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.obj = testData2;
      print(consistency.compc.obj);
      expect(consistency.compc.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.obj = defalut;
      print(consistency.compc.obj);
      expect(consistency.compc.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00168_element_check_00145 **********\n\n");
    });

    test('00169_element_check_00146', () async {
      print("\n********** テスト実行：00169_element_check_00146 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.condi;
      print(consistency.compc.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.condi = testData1;
      print(consistency.compc.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.condi = testData2;
      print(consistency.compc.condi);
      expect(consistency.compc.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.condi = defalut;
      print(consistency.compc.condi);
      expect(consistency.compc.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00169_element_check_00146 **********\n\n");
    });

    test('00170_element_check_00147', () async {
      print("\n********** テスト実行：00170_element_check_00147 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.typ;
      print(consistency.compc.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.typ = testData1;
      print(consistency.compc.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.typ = testData2;
      print(consistency.compc.typ);
      expect(consistency.compc.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.typ = defalut;
      print(consistency.compc.typ);
      expect(consistency.compc.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00170_element_check_00147 **********\n\n");
    });

    test('00171_element_check_00148', () async {
      print("\n********** テスト実行：00171_element_check_00148 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.keyword_typ;
      print(consistency.compc.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.keyword_typ = testData1;
      print(consistency.compc.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.keyword_typ = testData2;
      print(consistency.compc.keyword_typ);
      expect(consistency.compc.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.keyword_typ = defalut;
      print(consistency.compc.keyword_typ);
      expect(consistency.compc.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00171_element_check_00148 **********\n\n");
    });

    test('00172_element_check_00149', () async {
      print("\n********** テスト実行：00172_element_check_00149 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.file;
      print(consistency.compc.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.file = testData1s;
      print(consistency.compc.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.file = testData2s;
      print(consistency.compc.file);
      expect(consistency.compc.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.file = defalut;
      print(consistency.compc.file);
      expect(consistency.compc.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00172_element_check_00149 **********\n\n");
    });

    test('00173_element_check_00150', () async {
      print("\n********** テスト実行：00173_element_check_00150 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.compc.keyword;
      print(consistency.compc.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.compc.keyword = testData1s;
      print(consistency.compc.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.compc.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.compc.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.compc.keyword = testData2s;
      print(consistency.compc.keyword);
      expect(consistency.compc.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.compc.keyword = defalut;
      print(consistency.compc.keyword);
      expect(consistency.compc.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.compc.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00173_element_check_00150 **********\n\n");
    });

    test('00174_element_check_00151', () async {
      print("\n********** テスト実行：00174_element_check_00151 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.title;
      print(consistency.sims2100.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.title = testData1s;
      print(consistency.sims2100.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.title = testData2s;
      print(consistency.sims2100.title);
      expect(consistency.sims2100.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.title = defalut;
      print(consistency.sims2100.title);
      expect(consistency.sims2100.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00174_element_check_00151 **********\n\n");
    });

    test('00175_element_check_00152', () async {
      print("\n********** テスト実行：00175_element_check_00152 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.obj;
      print(consistency.sims2100.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.obj = testData1;
      print(consistency.sims2100.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.obj = testData2;
      print(consistency.sims2100.obj);
      expect(consistency.sims2100.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.obj = defalut;
      print(consistency.sims2100.obj);
      expect(consistency.sims2100.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00175_element_check_00152 **********\n\n");
    });

    test('00176_element_check_00153', () async {
      print("\n********** テスト実行：00176_element_check_00153 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.condi;
      print(consistency.sims2100.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.condi = testData1;
      print(consistency.sims2100.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.condi = testData2;
      print(consistency.sims2100.condi);
      expect(consistency.sims2100.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.condi = defalut;
      print(consistency.sims2100.condi);
      expect(consistency.sims2100.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00176_element_check_00153 **********\n\n");
    });

    test('00177_element_check_00154', () async {
      print("\n********** テスト実行：00177_element_check_00154 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.typ;
      print(consistency.sims2100.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.typ = testData1;
      print(consistency.sims2100.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.typ = testData2;
      print(consistency.sims2100.typ);
      expect(consistency.sims2100.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.typ = defalut;
      print(consistency.sims2100.typ);
      expect(consistency.sims2100.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00177_element_check_00154 **********\n\n");
    });

    test('00178_element_check_00155', () async {
      print("\n********** テスト実行：00178_element_check_00155 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.keyword_typ;
      print(consistency.sims2100.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.keyword_typ = testData1;
      print(consistency.sims2100.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.keyword_typ = testData2;
      print(consistency.sims2100.keyword_typ);
      expect(consistency.sims2100.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.keyword_typ = defalut;
      print(consistency.sims2100.keyword_typ);
      expect(consistency.sims2100.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00178_element_check_00155 **********\n\n");
    });

    test('00179_element_check_00156', () async {
      print("\n********** テスト実行：00179_element_check_00156 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.file;
      print(consistency.sims2100.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.file = testData1s;
      print(consistency.sims2100.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.file = testData2s;
      print(consistency.sims2100.file);
      expect(consistency.sims2100.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.file = defalut;
      print(consistency.sims2100.file);
      expect(consistency.sims2100.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00179_element_check_00156 **********\n\n");
    });

    test('00180_element_check_00157', () async {
      print("\n********** テスト実行：00180_element_check_00157 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sims2100.keyword;
      print(consistency.sims2100.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sims2100.keyword = testData1s;
      print(consistency.sims2100.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sims2100.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sims2100.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sims2100.keyword = testData2s;
      print(consistency.sims2100.keyword);
      expect(consistency.sims2100.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sims2100.keyword = defalut;
      print(consistency.sims2100.keyword);
      expect(consistency.sims2100.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sims2100.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00180_element_check_00157 **********\n\n");
    });

    test('00181_element_check_00158', () async {
      print("\n********** テスト実行：00181_element_check_00158 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.title;
      print(consistency.sc_adr.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.title = testData1s;
      print(consistency.sc_adr.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.title = testData2s;
      print(consistency.sc_adr.title);
      expect(consistency.sc_adr.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.title = defalut;
      print(consistency.sc_adr.title);
      expect(consistency.sc_adr.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00181_element_check_00158 **********\n\n");
    });

    test('00182_element_check_00159', () async {
      print("\n********** テスト実行：00182_element_check_00159 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.obj;
      print(consistency.sc_adr.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.obj = testData1;
      print(consistency.sc_adr.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.obj = testData2;
      print(consistency.sc_adr.obj);
      expect(consistency.sc_adr.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.obj = defalut;
      print(consistency.sc_adr.obj);
      expect(consistency.sc_adr.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00182_element_check_00159 **********\n\n");
    });

    test('00183_element_check_00160', () async {
      print("\n********** テスト実行：00183_element_check_00160 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.condi;
      print(consistency.sc_adr.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.condi = testData1;
      print(consistency.sc_adr.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.condi = testData2;
      print(consistency.sc_adr.condi);
      expect(consistency.sc_adr.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.condi = defalut;
      print(consistency.sc_adr.condi);
      expect(consistency.sc_adr.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00183_element_check_00160 **********\n\n");
    });

    test('00184_element_check_00161', () async {
      print("\n********** テスト実行：00184_element_check_00161 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.typ;
      print(consistency.sc_adr.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.typ = testData1;
      print(consistency.sc_adr.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.typ = testData2;
      print(consistency.sc_adr.typ);
      expect(consistency.sc_adr.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.typ = defalut;
      print(consistency.sc_adr.typ);
      expect(consistency.sc_adr.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00184_element_check_00161 **********\n\n");
    });

    test('00185_element_check_00162', () async {
      print("\n********** テスト実行：00185_element_check_00162 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.ini_typ;
      print(consistency.sc_adr.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.ini_typ = testData1;
      print(consistency.sc_adr.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.ini_typ = testData2;
      print(consistency.sc_adr.ini_typ);
      expect(consistency.sc_adr.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.ini_typ = defalut;
      print(consistency.sc_adr.ini_typ);
      expect(consistency.sc_adr.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00185_element_check_00162 **********\n\n");
    });

    test('00186_element_check_00163', () async {
      print("\n********** テスト実行：00186_element_check_00163 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.file;
      print(consistency.sc_adr.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.file = testData1s;
      print(consistency.sc_adr.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.file = testData2s;
      print(consistency.sc_adr.file);
      expect(consistency.sc_adr.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.file = defalut;
      print(consistency.sc_adr.file);
      expect(consistency.sc_adr.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00186_element_check_00163 **********\n\n");
    });

    test('00187_element_check_00164', () async {
      print("\n********** テスト実行：00187_element_check_00164 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.section;
      print(consistency.sc_adr.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.section = testData1s;
      print(consistency.sc_adr.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.section = testData2s;
      print(consistency.sc_adr.section);
      expect(consistency.sc_adr.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.section = defalut;
      print(consistency.sc_adr.section);
      expect(consistency.sc_adr.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00187_element_check_00164 **********\n\n");
    });

    test('00188_element_check_00165', () async {
      print("\n********** テスト実行：00188_element_check_00165 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_adr.keyword;
      print(consistency.sc_adr.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_adr.keyword = testData1s;
      print(consistency.sc_adr.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_adr.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_adr.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_adr.keyword = testData2s;
      print(consistency.sc_adr.keyword);
      expect(consistency.sc_adr.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_adr.keyword = defalut;
      print(consistency.sc_adr.keyword);
      expect(consistency.sc_adr.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_adr.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00188_element_check_00165 **********\n\n");
    });

    test('00189_element_check_00166', () async {
      print("\n********** テスト実行：00189_element_check_00166 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.title;
      print(consistency.sc_port.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.title = testData1s;
      print(consistency.sc_port.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.title = testData2s;
      print(consistency.sc_port.title);
      expect(consistency.sc_port.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.title = defalut;
      print(consistency.sc_port.title);
      expect(consistency.sc_port.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00189_element_check_00166 **********\n\n");
    });

    test('00190_element_check_00167', () async {
      print("\n********** テスト実行：00190_element_check_00167 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.obj;
      print(consistency.sc_port.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.obj = testData1;
      print(consistency.sc_port.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.obj = testData2;
      print(consistency.sc_port.obj);
      expect(consistency.sc_port.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.obj = defalut;
      print(consistency.sc_port.obj);
      expect(consistency.sc_port.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00190_element_check_00167 **********\n\n");
    });

    test('00191_element_check_00168', () async {
      print("\n********** テスト実行：00191_element_check_00168 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.condi;
      print(consistency.sc_port.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.condi = testData1;
      print(consistency.sc_port.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.condi = testData2;
      print(consistency.sc_port.condi);
      expect(consistency.sc_port.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.condi = defalut;
      print(consistency.sc_port.condi);
      expect(consistency.sc_port.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00191_element_check_00168 **********\n\n");
    });

    test('00192_element_check_00169', () async {
      print("\n********** テスト実行：00192_element_check_00169 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.typ;
      print(consistency.sc_port.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.typ = testData1;
      print(consistency.sc_port.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.typ = testData2;
      print(consistency.sc_port.typ);
      expect(consistency.sc_port.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.typ = defalut;
      print(consistency.sc_port.typ);
      expect(consistency.sc_port.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00192_element_check_00169 **********\n\n");
    });

    test('00193_element_check_00170', () async {
      print("\n********** テスト実行：00193_element_check_00170 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.ini_typ;
      print(consistency.sc_port.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.ini_typ = testData1;
      print(consistency.sc_port.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.ini_typ = testData2;
      print(consistency.sc_port.ini_typ);
      expect(consistency.sc_port.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.ini_typ = defalut;
      print(consistency.sc_port.ini_typ);
      expect(consistency.sc_port.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00193_element_check_00170 **********\n\n");
    });

    test('00194_element_check_00171', () async {
      print("\n********** テスト実行：00194_element_check_00171 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.file;
      print(consistency.sc_port.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.file = testData1s;
      print(consistency.sc_port.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.file = testData2s;
      print(consistency.sc_port.file);
      expect(consistency.sc_port.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.file = defalut;
      print(consistency.sc_port.file);
      expect(consistency.sc_port.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00194_element_check_00171 **********\n\n");
    });

    test('00195_element_check_00172', () async {
      print("\n********** テスト実行：00195_element_check_00172 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.section;
      print(consistency.sc_port.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.section = testData1s;
      print(consistency.sc_port.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.section = testData2s;
      print(consistency.sc_port.section);
      expect(consistency.sc_port.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.section = defalut;
      print(consistency.sc_port.section);
      expect(consistency.sc_port.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00195_element_check_00172 **********\n\n");
    });

    test('00196_element_check_00173', () async {
      print("\n********** テスト実行：00196_element_check_00173 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_port.keyword;
      print(consistency.sc_port.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_port.keyword = testData1s;
      print(consistency.sc_port.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_port.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_port.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_port.keyword = testData2s;
      print(consistency.sc_port.keyword);
      expect(consistency.sc_port.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_port.keyword = defalut;
      print(consistency.sc_port.keyword);
      expect(consistency.sc_port.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_port.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00196_element_check_00173 **********\n\n");
    });

    test('00197_element_check_00174', () async {
      print("\n********** テスト実行：00197_element_check_00174 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.title;
      print(consistency.manage.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.title = testData1s;
      print(consistency.manage.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.title = testData2s;
      print(consistency.manage.title);
      expect(consistency.manage.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.title = defalut;
      print(consistency.manage.title);
      expect(consistency.manage.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00197_element_check_00174 **********\n\n");
    });

    test('00198_element_check_00175', () async {
      print("\n********** テスト実行：00198_element_check_00175 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.obj;
      print(consistency.manage.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.obj = testData1;
      print(consistency.manage.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.obj = testData2;
      print(consistency.manage.obj);
      expect(consistency.manage.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.obj = defalut;
      print(consistency.manage.obj);
      expect(consistency.manage.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00198_element_check_00175 **********\n\n");
    });

    test('00199_element_check_00176', () async {
      print("\n********** テスト実行：00199_element_check_00176 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.condi;
      print(consistency.manage.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.condi = testData1;
      print(consistency.manage.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.condi = testData2;
      print(consistency.manage.condi);
      expect(consistency.manage.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.condi = defalut;
      print(consistency.manage.condi);
      expect(consistency.manage.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00199_element_check_00176 **********\n\n");
    });

    test('00200_element_check_00177', () async {
      print("\n********** テスト実行：00200_element_check_00177 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.typ;
      print(consistency.manage.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.typ = testData1;
      print(consistency.manage.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.typ = testData2;
      print(consistency.manage.typ);
      expect(consistency.manage.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.typ = defalut;
      print(consistency.manage.typ);
      expect(consistency.manage.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00200_element_check_00177 **********\n\n");
    });

    test('00201_element_check_00178', () async {
      print("\n********** テスト実行：00201_element_check_00178 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.keyword_typ;
      print(consistency.manage.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.keyword_typ = testData1;
      print(consistency.manage.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.keyword_typ = testData2;
      print(consistency.manage.keyword_typ);
      expect(consistency.manage.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.keyword_typ = defalut;
      print(consistency.manage.keyword_typ);
      expect(consistency.manage.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00201_element_check_00178 **********\n\n");
    });

    test('00202_element_check_00179', () async {
      print("\n********** テスト実行：00202_element_check_00179 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.file;
      print(consistency.manage.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.file = testData1s;
      print(consistency.manage.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.file = testData2s;
      print(consistency.manage.file);
      expect(consistency.manage.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.file = defalut;
      print(consistency.manage.file);
      expect(consistency.manage.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00202_element_check_00179 **********\n\n");
    });

    test('00203_element_check_00180', () async {
      print("\n********** テスト実行：00203_element_check_00180 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.manage.keyword;
      print(consistency.manage.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.manage.keyword = testData1s;
      print(consistency.manage.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.manage.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.manage.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.manage.keyword = testData2s;
      print(consistency.manage.keyword);
      expect(consistency.manage.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.manage.keyword = defalut;
      print(consistency.manage.keyword);
      expect(consistency.manage.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.manage.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00203_element_check_00180 **********\n\n");
    });

    test('00204_element_check_00181', () async {
      print("\n********** テスト実行：00204_element_check_00181 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.title;
      print(consistency.comport.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.title = testData1s;
      print(consistency.comport.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.title = testData2s;
      print(consistency.comport.title);
      expect(consistency.comport.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.title = defalut;
      print(consistency.comport.title);
      expect(consistency.comport.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00204_element_check_00181 **********\n\n");
    });

    test('00205_element_check_00182', () async {
      print("\n********** テスト実行：00205_element_check_00182 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.obj;
      print(consistency.comport.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.obj = testData1;
      print(consistency.comport.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.obj = testData2;
      print(consistency.comport.obj);
      expect(consistency.comport.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.obj = defalut;
      print(consistency.comport.obj);
      expect(consistency.comport.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00205_element_check_00182 **********\n\n");
    });

    test('00206_element_check_00183', () async {
      print("\n********** テスト実行：00206_element_check_00183 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.condi;
      print(consistency.comport.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.condi = testData1;
      print(consistency.comport.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.condi = testData2;
      print(consistency.comport.condi);
      expect(consistency.comport.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.condi = defalut;
      print(consistency.comport.condi);
      expect(consistency.comport.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00206_element_check_00183 **********\n\n");
    });

    test('00207_element_check_00184', () async {
      print("\n********** テスト実行：00207_element_check_00184 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.typ;
      print(consistency.comport.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.typ = testData1;
      print(consistency.comport.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.typ = testData2;
      print(consistency.comport.typ);
      expect(consistency.comport.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.typ = defalut;
      print(consistency.comport.typ);
      expect(consistency.comport.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00207_element_check_00184 **********\n\n");
    });

    test('00208_element_check_00185', () async {
      print("\n********** テスト実行：00208_element_check_00185 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.keyword_typ;
      print(consistency.comport.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.keyword_typ = testData1;
      print(consistency.comport.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.keyword_typ = testData2;
      print(consistency.comport.keyword_typ);
      expect(consistency.comport.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.keyword_typ = defalut;
      print(consistency.comport.keyword_typ);
      expect(consistency.comport.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00208_element_check_00185 **********\n\n");
    });

    test('00209_element_check_00186', () async {
      print("\n********** テスト実行：00209_element_check_00186 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.file;
      print(consistency.comport.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.file = testData1s;
      print(consistency.comport.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.file = testData2s;
      print(consistency.comport.file);
      expect(consistency.comport.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.file = defalut;
      print(consistency.comport.file);
      expect(consistency.comport.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00209_element_check_00186 **********\n\n");
    });

    test('00210_element_check_00187', () async {
      print("\n********** テスト実行：00210_element_check_00187 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.comport.keyword;
      print(consistency.comport.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.comport.keyword = testData1s;
      print(consistency.comport.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.comport.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.comport.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.comport.keyword = testData2s;
      print(consistency.comport.keyword);
      expect(consistency.comport.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.comport.keyword = defalut;
      print(consistency.comport.keyword);
      expect(consistency.comport.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.comport.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00210_element_check_00187 **********\n\n");
    });

    test('00211_element_check_00188', () async {
      print("\n********** テスト実行：00211_element_check_00188 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.title;
      print(consistency.custserver.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.title = testData1s;
      print(consistency.custserver.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.title = testData2s;
      print(consistency.custserver.title);
      expect(consistency.custserver.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.title = defalut;
      print(consistency.custserver.title);
      expect(consistency.custserver.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00211_element_check_00188 **********\n\n");
    });

    test('00212_element_check_00189', () async {
      print("\n********** テスト実行：00212_element_check_00189 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.obj;
      print(consistency.custserver.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.obj = testData1;
      print(consistency.custserver.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.obj = testData2;
      print(consistency.custserver.obj);
      expect(consistency.custserver.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.obj = defalut;
      print(consistency.custserver.obj);
      expect(consistency.custserver.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00212_element_check_00189 **********\n\n");
    });

    test('00213_element_check_00190', () async {
      print("\n********** テスト実行：00213_element_check_00190 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.condi;
      print(consistency.custserver.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.condi = testData1;
      print(consistency.custserver.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.condi = testData2;
      print(consistency.custserver.condi);
      expect(consistency.custserver.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.condi = defalut;
      print(consistency.custserver.condi);
      expect(consistency.custserver.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00213_element_check_00190 **********\n\n");
    });

    test('00214_element_check_00191', () async {
      print("\n********** テスト実行：00214_element_check_00191 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.typ;
      print(consistency.custserver.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.typ = testData1;
      print(consistency.custserver.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.typ = testData2;
      print(consistency.custserver.typ);
      expect(consistency.custserver.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.typ = defalut;
      print(consistency.custserver.typ);
      expect(consistency.custserver.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00214_element_check_00191 **********\n\n");
    });

    test('00215_element_check_00192', () async {
      print("\n********** テスト実行：00215_element_check_00192 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.keyword_typ;
      print(consistency.custserver.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.keyword_typ = testData1;
      print(consistency.custserver.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.keyword_typ = testData2;
      print(consistency.custserver.keyword_typ);
      expect(consistency.custserver.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.keyword_typ = defalut;
      print(consistency.custserver.keyword_typ);
      expect(consistency.custserver.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00215_element_check_00192 **********\n\n");
    });

    test('00216_element_check_00193', () async {
      print("\n********** テスト実行：00216_element_check_00193 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.file;
      print(consistency.custserver.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.file = testData1s;
      print(consistency.custserver.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.file = testData2s;
      print(consistency.custserver.file);
      expect(consistency.custserver.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.file = defalut;
      print(consistency.custserver.file);
      expect(consistency.custserver.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00216_element_check_00193 **********\n\n");
    });

    test('00217_element_check_00194', () async {
      print("\n********** テスト実行：00217_element_check_00194 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver.keyword;
      print(consistency.custserver.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver.keyword = testData1s;
      print(consistency.custserver.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver.keyword = testData2s;
      print(consistency.custserver.keyword);
      expect(consistency.custserver.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver.keyword = defalut;
      print(consistency.custserver.keyword);
      expect(consistency.custserver.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00217_element_check_00194 **********\n\n");
    });

    test('00218_element_check_00195', () async {
      print("\n********** テスト実行：00218_element_check_00195 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.title;
      print(consistency.custsvrport.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.title = testData1s;
      print(consistency.custsvrport.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.title = testData2s;
      print(consistency.custsvrport.title);
      expect(consistency.custsvrport.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.title = defalut;
      print(consistency.custsvrport.title);
      expect(consistency.custsvrport.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00218_element_check_00195 **********\n\n");
    });

    test('00219_element_check_00196', () async {
      print("\n********** テスト実行：00219_element_check_00196 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.obj;
      print(consistency.custsvrport.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.obj = testData1;
      print(consistency.custsvrport.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.obj = testData2;
      print(consistency.custsvrport.obj);
      expect(consistency.custsvrport.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.obj = defalut;
      print(consistency.custsvrport.obj);
      expect(consistency.custsvrport.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00219_element_check_00196 **********\n\n");
    });

    test('00220_element_check_00197', () async {
      print("\n********** テスト実行：00220_element_check_00197 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.condi;
      print(consistency.custsvrport.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.condi = testData1;
      print(consistency.custsvrport.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.condi = testData2;
      print(consistency.custsvrport.condi);
      expect(consistency.custsvrport.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.condi = defalut;
      print(consistency.custsvrport.condi);
      expect(consistency.custsvrport.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00220_element_check_00197 **********\n\n");
    });

    test('00221_element_check_00198', () async {
      print("\n********** テスト実行：00221_element_check_00198 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.typ;
      print(consistency.custsvrport.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.typ = testData1;
      print(consistency.custsvrport.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.typ = testData2;
      print(consistency.custsvrport.typ);
      expect(consistency.custsvrport.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.typ = defalut;
      print(consistency.custsvrport.typ);
      expect(consistency.custsvrport.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00221_element_check_00198 **********\n\n");
    });

    test('00222_element_check_00199', () async {
      print("\n********** テスト実行：00222_element_check_00199 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.keyword_typ;
      print(consistency.custsvrport.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.keyword_typ = testData1;
      print(consistency.custsvrport.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.keyword_typ = testData2;
      print(consistency.custsvrport.keyword_typ);
      expect(consistency.custsvrport.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.keyword_typ = defalut;
      print(consistency.custsvrport.keyword_typ);
      expect(consistency.custsvrport.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00222_element_check_00199 **********\n\n");
    });

    test('00223_element_check_00200', () async {
      print("\n********** テスト実行：00223_element_check_00200 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.file;
      print(consistency.custsvrport.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.file = testData1s;
      print(consistency.custsvrport.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.file = testData2s;
      print(consistency.custsvrport.file);
      expect(consistency.custsvrport.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.file = defalut;
      print(consistency.custsvrport.file);
      expect(consistency.custsvrport.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00223_element_check_00200 **********\n\n");
    });

    test('00224_element_check_00201', () async {
      print("\n********** テスト実行：00224_element_check_00201 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custsvrport.keyword;
      print(consistency.custsvrport.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custsvrport.keyword = testData1s;
      print(consistency.custsvrport.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custsvrport.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custsvrport.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custsvrport.keyword = testData2s;
      print(consistency.custsvrport.keyword);
      expect(consistency.custsvrport.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custsvrport.keyword = defalut;
      print(consistency.custsvrport.keyword);
      expect(consistency.custsvrport.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custsvrport.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00224_element_check_00201 **********\n\n");
    });

    test('00225_element_check_00202', () async {
      print("\n********** テスト実行：00225_element_check_00202 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.title;
      print(consistency.custrealsvr_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.title = testData1s;
      print(consistency.custrealsvr_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.title = testData2s;
      print(consistency.custrealsvr_timeout.title);
      expect(consistency.custrealsvr_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.title = defalut;
      print(consistency.custrealsvr_timeout.title);
      expect(consistency.custrealsvr_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00225_element_check_00202 **********\n\n");
    });

    test('00226_element_check_00203', () async {
      print("\n********** テスト実行：00226_element_check_00203 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.obj;
      print(consistency.custrealsvr_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.obj = testData1;
      print(consistency.custrealsvr_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.obj = testData2;
      print(consistency.custrealsvr_timeout.obj);
      expect(consistency.custrealsvr_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.obj = defalut;
      print(consistency.custrealsvr_timeout.obj);
      expect(consistency.custrealsvr_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00226_element_check_00203 **********\n\n");
    });

    test('00227_element_check_00204', () async {
      print("\n********** テスト実行：00227_element_check_00204 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.condi;
      print(consistency.custrealsvr_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.condi = testData1;
      print(consistency.custrealsvr_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.condi = testData2;
      print(consistency.custrealsvr_timeout.condi);
      expect(consistency.custrealsvr_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.condi = defalut;
      print(consistency.custrealsvr_timeout.condi);
      expect(consistency.custrealsvr_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00227_element_check_00204 **********\n\n");
    });

    test('00228_element_check_00205', () async {
      print("\n********** テスト実行：00228_element_check_00205 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.typ;
      print(consistency.custrealsvr_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.typ = testData1;
      print(consistency.custrealsvr_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.typ = testData2;
      print(consistency.custrealsvr_timeout.typ);
      expect(consistency.custrealsvr_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.typ = defalut;
      print(consistency.custrealsvr_timeout.typ);
      expect(consistency.custrealsvr_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00228_element_check_00205 **********\n\n");
    });

    test('00229_element_check_00206', () async {
      print("\n********** テスト実行：00229_element_check_00206 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.ini_typ;
      print(consistency.custrealsvr_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.ini_typ = testData1;
      print(consistency.custrealsvr_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.ini_typ = testData2;
      print(consistency.custrealsvr_timeout.ini_typ);
      expect(consistency.custrealsvr_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.ini_typ = defalut;
      print(consistency.custrealsvr_timeout.ini_typ);
      expect(consistency.custrealsvr_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00229_element_check_00206 **********\n\n");
    });

    test('00230_element_check_00207', () async {
      print("\n********** テスト実行：00230_element_check_00207 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.file;
      print(consistency.custrealsvr_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.file = testData1s;
      print(consistency.custrealsvr_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.file = testData2s;
      print(consistency.custrealsvr_timeout.file);
      expect(consistency.custrealsvr_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.file = defalut;
      print(consistency.custrealsvr_timeout.file);
      expect(consistency.custrealsvr_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00230_element_check_00207 **********\n\n");
    });

    test('00231_element_check_00208', () async {
      print("\n********** テスト実行：00231_element_check_00208 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.section;
      print(consistency.custrealsvr_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.section = testData1s;
      print(consistency.custrealsvr_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.section = testData2s;
      print(consistency.custrealsvr_timeout.section);
      expect(consistency.custrealsvr_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.section = defalut;
      print(consistency.custrealsvr_timeout.section);
      expect(consistency.custrealsvr_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00231_element_check_00208 **********\n\n");
    });

    test('00232_element_check_00209', () async {
      print("\n********** テスト実行：00232_element_check_00209 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custrealsvr_timeout.keyword;
      print(consistency.custrealsvr_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custrealsvr_timeout.keyword = testData1s;
      print(consistency.custrealsvr_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custrealsvr_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custrealsvr_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custrealsvr_timeout.keyword = testData2s;
      print(consistency.custrealsvr_timeout.keyword);
      expect(consistency.custrealsvr_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custrealsvr_timeout.keyword = defalut;
      print(consistency.custrealsvr_timeout.keyword);
      expect(consistency.custrealsvr_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custrealsvr_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00232_element_check_00209 **********\n\n");
    });

    test('00233_element_check_00210', () async {
      print("\n********** テスト実行：00233_element_check_00210 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.title;
      print(consistency.mente_port.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.title = testData1s;
      print(consistency.mente_port.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.title = testData2s;
      print(consistency.mente_port.title);
      expect(consistency.mente_port.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.title = defalut;
      print(consistency.mente_port.title);
      expect(consistency.mente_port.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00233_element_check_00210 **********\n\n");
    });

    test('00234_element_check_00211', () async {
      print("\n********** テスト実行：00234_element_check_00211 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.obj;
      print(consistency.mente_port.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.obj = testData1;
      print(consistency.mente_port.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.obj = testData2;
      print(consistency.mente_port.obj);
      expect(consistency.mente_port.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.obj = defalut;
      print(consistency.mente_port.obj);
      expect(consistency.mente_port.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00234_element_check_00211 **********\n\n");
    });

    test('00235_element_check_00212', () async {
      print("\n********** テスト実行：00235_element_check_00212 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.condi;
      print(consistency.mente_port.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.condi = testData1;
      print(consistency.mente_port.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.condi = testData2;
      print(consistency.mente_port.condi);
      expect(consistency.mente_port.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.condi = defalut;
      print(consistency.mente_port.condi);
      expect(consistency.mente_port.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00235_element_check_00212 **********\n\n");
    });

    test('00236_element_check_00213', () async {
      print("\n********** テスト実行：00236_element_check_00213 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.typ;
      print(consistency.mente_port.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.typ = testData1;
      print(consistency.mente_port.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.typ = testData2;
      print(consistency.mente_port.typ);
      expect(consistency.mente_port.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.typ = defalut;
      print(consistency.mente_port.typ);
      expect(consistency.mente_port.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00236_element_check_00213 **********\n\n");
    });

    test('00237_element_check_00214', () async {
      print("\n********** テスト実行：00237_element_check_00214 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.ini_typ;
      print(consistency.mente_port.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.ini_typ = testData1;
      print(consistency.mente_port.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.ini_typ = testData2;
      print(consistency.mente_port.ini_typ);
      expect(consistency.mente_port.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.ini_typ = defalut;
      print(consistency.mente_port.ini_typ);
      expect(consistency.mente_port.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00237_element_check_00214 **********\n\n");
    });

    test('00238_element_check_00215', () async {
      print("\n********** テスト実行：00238_element_check_00215 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.file;
      print(consistency.mente_port.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.file = testData1s;
      print(consistency.mente_port.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.file = testData2s;
      print(consistency.mente_port.file);
      expect(consistency.mente_port.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.file = defalut;
      print(consistency.mente_port.file);
      expect(consistency.mente_port.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00238_element_check_00215 **********\n\n");
    });

    test('00239_element_check_00216', () async {
      print("\n********** テスト実行：00239_element_check_00216 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.section;
      print(consistency.mente_port.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.section = testData1s;
      print(consistency.mente_port.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.section = testData2s;
      print(consistency.mente_port.section);
      expect(consistency.mente_port.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.section = defalut;
      print(consistency.mente_port.section);
      expect(consistency.mente_port.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00239_element_check_00216 **********\n\n");
    });

    test('00240_element_check_00217', () async {
      print("\n********** テスト実行：00240_element_check_00217 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.mente_port.keyword;
      print(consistency.mente_port.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.mente_port.keyword = testData1s;
      print(consistency.mente_port.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.mente_port.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.mente_port.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.mente_port.keyword = testData2s;
      print(consistency.mente_port.keyword);
      expect(consistency.mente_port.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.mente_port.keyword = defalut;
      print(consistency.mente_port.keyword);
      expect(consistency.mente_port.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.mente_port.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00240_element_check_00217 **********\n\n");
    });

    test('00241_element_check_00218', () async {
      print("\n********** テスト実行：00241_element_check_00218 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.title;
      print(consistency.sc_mente_port.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.title = testData1s;
      print(consistency.sc_mente_port.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.title = testData2s;
      print(consistency.sc_mente_port.title);
      expect(consistency.sc_mente_port.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.title = defalut;
      print(consistency.sc_mente_port.title);
      expect(consistency.sc_mente_port.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00241_element_check_00218 **********\n\n");
    });

    test('00242_element_check_00219', () async {
      print("\n********** テスト実行：00242_element_check_00219 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.obj;
      print(consistency.sc_mente_port.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.obj = testData1;
      print(consistency.sc_mente_port.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.obj = testData2;
      print(consistency.sc_mente_port.obj);
      expect(consistency.sc_mente_port.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.obj = defalut;
      print(consistency.sc_mente_port.obj);
      expect(consistency.sc_mente_port.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00242_element_check_00219 **********\n\n");
    });

    test('00243_element_check_00220', () async {
      print("\n********** テスト実行：00243_element_check_00220 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.condi;
      print(consistency.sc_mente_port.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.condi = testData1;
      print(consistency.sc_mente_port.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.condi = testData2;
      print(consistency.sc_mente_port.condi);
      expect(consistency.sc_mente_port.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.condi = defalut;
      print(consistency.sc_mente_port.condi);
      expect(consistency.sc_mente_port.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00243_element_check_00220 **********\n\n");
    });

    test('00244_element_check_00221', () async {
      print("\n********** テスト実行：00244_element_check_00221 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.typ;
      print(consistency.sc_mente_port.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.typ = testData1;
      print(consistency.sc_mente_port.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.typ = testData2;
      print(consistency.sc_mente_port.typ);
      expect(consistency.sc_mente_port.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.typ = defalut;
      print(consistency.sc_mente_port.typ);
      expect(consistency.sc_mente_port.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00244_element_check_00221 **********\n\n");
    });

    test('00245_element_check_00222', () async {
      print("\n********** テスト実行：00245_element_check_00222 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.ini_typ;
      print(consistency.sc_mente_port.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.ini_typ = testData1;
      print(consistency.sc_mente_port.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.ini_typ = testData2;
      print(consistency.sc_mente_port.ini_typ);
      expect(consistency.sc_mente_port.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.ini_typ = defalut;
      print(consistency.sc_mente_port.ini_typ);
      expect(consistency.sc_mente_port.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00245_element_check_00222 **********\n\n");
    });

    test('00246_element_check_00223', () async {
      print("\n********** テスト実行：00246_element_check_00223 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.file;
      print(consistency.sc_mente_port.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.file = testData1s;
      print(consistency.sc_mente_port.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.file = testData2s;
      print(consistency.sc_mente_port.file);
      expect(consistency.sc_mente_port.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.file = defalut;
      print(consistency.sc_mente_port.file);
      expect(consistency.sc_mente_port.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00246_element_check_00223 **********\n\n");
    });

    test('00247_element_check_00224', () async {
      print("\n********** テスト実行：00247_element_check_00224 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.section;
      print(consistency.sc_mente_port.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.section = testData1s;
      print(consistency.sc_mente_port.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.section = testData2s;
      print(consistency.sc_mente_port.section);
      expect(consistency.sc_mente_port.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.section = defalut;
      print(consistency.sc_mente_port.section);
      expect(consistency.sc_mente_port.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00247_element_check_00224 **********\n\n");
    });

    test('00248_element_check_00225', () async {
      print("\n********** テスト実行：00248_element_check_00225 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.sc_mente_port.keyword;
      print(consistency.sc_mente_port.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.sc_mente_port.keyword = testData1s;
      print(consistency.sc_mente_port.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.sc_mente_port.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.sc_mente_port.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.sc_mente_port.keyword = testData2s;
      print(consistency.sc_mente_port.keyword);
      expect(consistency.sc_mente_port.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.sc_mente_port.keyword = defalut;
      print(consistency.sc_mente_port.keyword);
      expect(consistency.sc_mente_port.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.sc_mente_port.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00248_element_check_00225 **********\n\n");
    });

    test('00249_element_check_00226', () async {
      print("\n********** テスト実行：00249_element_check_00226 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.title;
      print(consistency.dns.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.title = testData1s;
      print(consistency.dns.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.title = testData2s;
      print(consistency.dns.title);
      expect(consistency.dns.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.title = defalut;
      print(consistency.dns.title);
      expect(consistency.dns.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00249_element_check_00226 **********\n\n");
    });

    test('00250_element_check_00227', () async {
      print("\n********** テスト実行：00250_element_check_00227 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.obj;
      print(consistency.dns.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.obj = testData1;
      print(consistency.dns.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.obj = testData2;
      print(consistency.dns.obj);
      expect(consistency.dns.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.obj = defalut;
      print(consistency.dns.obj);
      expect(consistency.dns.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00250_element_check_00227 **********\n\n");
    });

    test('00251_element_check_00228', () async {
      print("\n********** テスト実行：00251_element_check_00228 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.condi;
      print(consistency.dns.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.condi = testData1;
      print(consistency.dns.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.condi = testData2;
      print(consistency.dns.condi);
      expect(consistency.dns.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.condi = defalut;
      print(consistency.dns.condi);
      expect(consistency.dns.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00251_element_check_00228 **********\n\n");
    });

    test('00252_element_check_00229', () async {
      print("\n********** テスト実行：00252_element_check_00229 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.condi1_typ;
      print(consistency.dns.condi1_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.condi1_typ = testData1;
      print(consistency.dns.condi1_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.condi1_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.condi1_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.condi1_typ = testData2;
      print(consistency.dns.condi1_typ);
      expect(consistency.dns.condi1_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi1_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.condi1_typ = defalut;
      print(consistency.dns.condi1_typ);
      expect(consistency.dns.condi1_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi1_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00252_element_check_00229 **********\n\n");
    });

    test('00253_element_check_00230', () async {
      print("\n********** テスト実行：00253_element_check_00230 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.condi1_key;
      print(consistency.dns.condi1_key);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.condi1_key = testData1s;
      print(consistency.dns.condi1_key);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.condi1_key == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.condi1_key == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.condi1_key = testData2s;
      print(consistency.dns.condi1_key);
      expect(consistency.dns.condi1_key == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi1_key == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.condi1_key = defalut;
      print(consistency.dns.condi1_key);
      expect(consistency.dns.condi1_key == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi1_key == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00253_element_check_00230 **********\n\n");
    });

    test('00254_element_check_00231', () async {
      print("\n********** テスト実行：00254_element_check_00231 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.condi1_judge;
      print(consistency.dns.condi1_judge);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.condi1_judge = testData1;
      print(consistency.dns.condi1_judge);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.condi1_judge == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.condi1_judge == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.condi1_judge = testData2;
      print(consistency.dns.condi1_judge);
      expect(consistency.dns.condi1_judge == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi1_judge == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.condi1_judge = defalut;
      print(consistency.dns.condi1_judge);
      expect(consistency.dns.condi1_judge == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.condi1_judge == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00254_element_check_00231 **********\n\n");
    });

    test('00255_element_check_00232', () async {
      print("\n********** テスト実行：00255_element_check_00232 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.typ;
      print(consistency.dns.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.typ = testData1;
      print(consistency.dns.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.typ = testData2;
      print(consistency.dns.typ);
      expect(consistency.dns.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.typ = defalut;
      print(consistency.dns.typ);
      expect(consistency.dns.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00255_element_check_00232 **********\n\n");
    });

    test('00256_element_check_00233', () async {
      print("\n********** テスト実行：00256_element_check_00233 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.file;
      print(consistency.dns.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.file = testData1s;
      print(consistency.dns.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.file = testData2s;
      print(consistency.dns.file);
      expect(consistency.dns.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.file = defalut;
      print(consistency.dns.file);
      expect(consistency.dns.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00256_element_check_00233 **********\n\n");
    });

    test('00257_element_check_00234', () async {
      print("\n********** テスト実行：00257_element_check_00234 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.dns.keyword;
      print(consistency.dns.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.dns.keyword = testData1s;
      print(consistency.dns.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.dns.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.dns.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.dns.keyword = testData2s;
      print(consistency.dns.keyword);
      expect(consistency.dns.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.dns.keyword = defalut;
      print(consistency.dns.keyword);
      expect(consistency.dns.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.dns.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00257_element_check_00234 **********\n\n");
    });

    test('00258_element_check_00235', () async {
      print("\n********** テスト実行：00258_element_check_00235 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.title;
      print(consistency.timeserver.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.title = testData1s;
      print(consistency.timeserver.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.title = testData2s;
      print(consistency.timeserver.title);
      expect(consistency.timeserver.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.title = defalut;
      print(consistency.timeserver.title);
      expect(consistency.timeserver.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00258_element_check_00235 **********\n\n");
    });

    test('00259_element_check_00236', () async {
      print("\n********** テスト実行：00259_element_check_00236 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.obj;
      print(consistency.timeserver.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.obj = testData1;
      print(consistency.timeserver.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.obj = testData2;
      print(consistency.timeserver.obj);
      expect(consistency.timeserver.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.obj = defalut;
      print(consistency.timeserver.obj);
      expect(consistency.timeserver.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00259_element_check_00236 **********\n\n");
    });

    test('00260_element_check_00237', () async {
      print("\n********** テスト実行：00260_element_check_00237 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.condi;
      print(consistency.timeserver.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.condi = testData1;
      print(consistency.timeserver.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.condi = testData2;
      print(consistency.timeserver.condi);
      expect(consistency.timeserver.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.condi = defalut;
      print(consistency.timeserver.condi);
      expect(consistency.timeserver.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00260_element_check_00237 **********\n\n");
    });

    test('00261_element_check_00238', () async {
      print("\n********** テスト実行：00261_element_check_00238 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.typ;
      print(consistency.timeserver.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.typ = testData1;
      print(consistency.timeserver.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.typ = testData2;
      print(consistency.timeserver.typ);
      expect(consistency.timeserver.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.typ = defalut;
      print(consistency.timeserver.typ);
      expect(consistency.timeserver.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00261_element_check_00238 **********\n\n");
    });

    test('00262_element_check_00239', () async {
      print("\n********** テスト実行：00262_element_check_00239 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.keyword_typ;
      print(consistency.timeserver.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.keyword_typ = testData1;
      print(consistency.timeserver.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.keyword_typ = testData2;
      print(consistency.timeserver.keyword_typ);
      expect(consistency.timeserver.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.keyword_typ = defalut;
      print(consistency.timeserver.keyword_typ);
      expect(consistency.timeserver.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00262_element_check_00239 **********\n\n");
    });

    test('00263_element_check_00240', () async {
      print("\n********** テスト実行：00263_element_check_00240 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.file;
      print(consistency.timeserver.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.file = testData1s;
      print(consistency.timeserver.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.file = testData2s;
      print(consistency.timeserver.file);
      expect(consistency.timeserver.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.file = defalut;
      print(consistency.timeserver.file);
      expect(consistency.timeserver.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00263_element_check_00240 **********\n\n");
    });

    test('00264_element_check_00241', () async {
      print("\n********** テスト実行：00264_element_check_00241 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.timeserver.keyword;
      print(consistency.timeserver.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.timeserver.keyword = testData1s;
      print(consistency.timeserver.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.timeserver.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.timeserver.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.timeserver.keyword = testData2s;
      print(consistency.timeserver.keyword);
      expect(consistency.timeserver.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.timeserver.keyword = defalut;
      print(consistency.timeserver.keyword);
      expect(consistency.timeserver.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.timeserver.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00264_element_check_00241 **********\n\n");
    });

    test('00265_element_check_00242', () async {
      print("\n********** テスト実行：00265_element_check_00242 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.title;
      print(consistency.centerserver_mst.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.title = testData1s;
      print(consistency.centerserver_mst.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.title = testData2s;
      print(consistency.centerserver_mst.title);
      expect(consistency.centerserver_mst.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.title = defalut;
      print(consistency.centerserver_mst.title);
      expect(consistency.centerserver_mst.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00265_element_check_00242 **********\n\n");
    });

    test('00266_element_check_00243', () async {
      print("\n********** テスト実行：00266_element_check_00243 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.obj;
      print(consistency.centerserver_mst.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.obj = testData1;
      print(consistency.centerserver_mst.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.obj = testData2;
      print(consistency.centerserver_mst.obj);
      expect(consistency.centerserver_mst.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.obj = defalut;
      print(consistency.centerserver_mst.obj);
      expect(consistency.centerserver_mst.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00266_element_check_00243 **********\n\n");
    });

    test('00267_element_check_00244', () async {
      print("\n********** テスト実行：00267_element_check_00244 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.condi;
      print(consistency.centerserver_mst.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.condi = testData1;
      print(consistency.centerserver_mst.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.condi = testData2;
      print(consistency.centerserver_mst.condi);
      expect(consistency.centerserver_mst.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.condi = defalut;
      print(consistency.centerserver_mst.condi);
      expect(consistency.centerserver_mst.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00267_element_check_00244 **********\n\n");
    });

    test('00268_element_check_00245', () async {
      print("\n********** テスト実行：00268_element_check_00245 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.typ;
      print(consistency.centerserver_mst.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.typ = testData1;
      print(consistency.centerserver_mst.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.typ = testData2;
      print(consistency.centerserver_mst.typ);
      expect(consistency.centerserver_mst.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.typ = defalut;
      print(consistency.centerserver_mst.typ);
      expect(consistency.centerserver_mst.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00268_element_check_00245 **********\n\n");
    });

    test('00269_element_check_00246', () async {
      print("\n********** テスト実行：00269_element_check_00246 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.keyword_typ;
      print(consistency.centerserver_mst.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.keyword_typ = testData1;
      print(consistency.centerserver_mst.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.keyword_typ = testData2;
      print(consistency.centerserver_mst.keyword_typ);
      expect(consistency.centerserver_mst.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.keyword_typ = defalut;
      print(consistency.centerserver_mst.keyword_typ);
      expect(consistency.centerserver_mst.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00269_element_check_00246 **********\n\n");
    });

    test('00270_element_check_00247', () async {
      print("\n********** テスト実行：00270_element_check_00247 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.file;
      print(consistency.centerserver_mst.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.file = testData1s;
      print(consistency.centerserver_mst.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.file = testData2s;
      print(consistency.centerserver_mst.file);
      expect(consistency.centerserver_mst.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.file = defalut;
      print(consistency.centerserver_mst.file);
      expect(consistency.centerserver_mst.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00270_element_check_00247 **********\n\n");
    });

    test('00271_element_check_00248', () async {
      print("\n********** テスト実行：00271_element_check_00248 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_mst.keyword;
      print(consistency.centerserver_mst.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_mst.keyword = testData1s;
      print(consistency.centerserver_mst.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_mst.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_mst.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_mst.keyword = testData2s;
      print(consistency.centerserver_mst.keyword);
      expect(consistency.centerserver_mst.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_mst.keyword = defalut;
      print(consistency.centerserver_mst.keyword);
      expect(consistency.centerserver_mst.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_mst.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00271_element_check_00248 **********\n\n");
    });

    test('00272_element_check_00249', () async {
      print("\n********** テスト実行：00272_element_check_00249 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.title;
      print(consistency.centerserver_trn.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.title = testData1s;
      print(consistency.centerserver_trn.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.title = testData2s;
      print(consistency.centerserver_trn.title);
      expect(consistency.centerserver_trn.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.title = defalut;
      print(consistency.centerserver_trn.title);
      expect(consistency.centerserver_trn.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00272_element_check_00249 **********\n\n");
    });

    test('00273_element_check_00250', () async {
      print("\n********** テスト実行：00273_element_check_00250 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.obj;
      print(consistency.centerserver_trn.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.obj = testData1;
      print(consistency.centerserver_trn.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.obj = testData2;
      print(consistency.centerserver_trn.obj);
      expect(consistency.centerserver_trn.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.obj = defalut;
      print(consistency.centerserver_trn.obj);
      expect(consistency.centerserver_trn.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00273_element_check_00250 **********\n\n");
    });

    test('00274_element_check_00251', () async {
      print("\n********** テスト実行：00274_element_check_00251 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.condi;
      print(consistency.centerserver_trn.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.condi = testData1;
      print(consistency.centerserver_trn.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.condi = testData2;
      print(consistency.centerserver_trn.condi);
      expect(consistency.centerserver_trn.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.condi = defalut;
      print(consistency.centerserver_trn.condi);
      expect(consistency.centerserver_trn.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00274_element_check_00251 **********\n\n");
    });

    test('00275_element_check_00252', () async {
      print("\n********** テスト実行：00275_element_check_00252 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.typ;
      print(consistency.centerserver_trn.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.typ = testData1;
      print(consistency.centerserver_trn.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.typ = testData2;
      print(consistency.centerserver_trn.typ);
      expect(consistency.centerserver_trn.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.typ = defalut;
      print(consistency.centerserver_trn.typ);
      expect(consistency.centerserver_trn.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00275_element_check_00252 **********\n\n");
    });

    test('00276_element_check_00253', () async {
      print("\n********** テスト実行：00276_element_check_00253 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.keyword_typ;
      print(consistency.centerserver_trn.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.keyword_typ = testData1;
      print(consistency.centerserver_trn.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.keyword_typ = testData2;
      print(consistency.centerserver_trn.keyword_typ);
      expect(consistency.centerserver_trn.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.keyword_typ = defalut;
      print(consistency.centerserver_trn.keyword_typ);
      expect(consistency.centerserver_trn.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00276_element_check_00253 **********\n\n");
    });

    test('00277_element_check_00254', () async {
      print("\n********** テスト実行：00277_element_check_00254 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.file;
      print(consistency.centerserver_trn.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.file = testData1s;
      print(consistency.centerserver_trn.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.file = testData2s;
      print(consistency.centerserver_trn.file);
      expect(consistency.centerserver_trn.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.file = defalut;
      print(consistency.centerserver_trn.file);
      expect(consistency.centerserver_trn.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00277_element_check_00254 **********\n\n");
    });

    test('00278_element_check_00255', () async {
      print("\n********** テスト実行：00278_element_check_00255 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.centerserver_trn.keyword;
      print(consistency.centerserver_trn.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.centerserver_trn.keyword = testData1s;
      print(consistency.centerserver_trn.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.centerserver_trn.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.centerserver_trn.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.centerserver_trn.keyword = testData2s;
      print(consistency.centerserver_trn.keyword);
      expect(consistency.centerserver_trn.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.centerserver_trn.keyword = defalut;
      print(consistency.centerserver_trn.keyword);
      expect(consistency.centerserver_trn.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.centerserver_trn.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00278_element_check_00255 **********\n\n");
    });

    test('00279_element_check_00256', () async {
      print("\n********** テスト実行：00279_element_check_00256 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.title;
      print(consistency.custserver2.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.title = testData1s;
      print(consistency.custserver2.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.title = testData2s;
      print(consistency.custserver2.title);
      expect(consistency.custserver2.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.title = defalut;
      print(consistency.custserver2.title);
      expect(consistency.custserver2.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00279_element_check_00256 **********\n\n");
    });

    test('00280_element_check_00257', () async {
      print("\n********** テスト実行：00280_element_check_00257 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.obj;
      print(consistency.custserver2.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.obj = testData1;
      print(consistency.custserver2.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.obj = testData2;
      print(consistency.custserver2.obj);
      expect(consistency.custserver2.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.obj = defalut;
      print(consistency.custserver2.obj);
      expect(consistency.custserver2.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00280_element_check_00257 **********\n\n");
    });

    test('00281_element_check_00258', () async {
      print("\n********** テスト実行：00281_element_check_00258 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.condi;
      print(consistency.custserver2.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.condi = testData1;
      print(consistency.custserver2.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.condi = testData2;
      print(consistency.custserver2.condi);
      expect(consistency.custserver2.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.condi = defalut;
      print(consistency.custserver2.condi);
      expect(consistency.custserver2.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00281_element_check_00258 **********\n\n");
    });

    test('00282_element_check_00259', () async {
      print("\n********** テスト実行：00282_element_check_00259 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.typ;
      print(consistency.custserver2.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.typ = testData1;
      print(consistency.custserver2.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.typ = testData2;
      print(consistency.custserver2.typ);
      expect(consistency.custserver2.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.typ = defalut;
      print(consistency.custserver2.typ);
      expect(consistency.custserver2.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00282_element_check_00259 **********\n\n");
    });

    test('00283_element_check_00260', () async {
      print("\n********** テスト実行：00283_element_check_00260 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.keyword_typ;
      print(consistency.custserver2.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.keyword_typ = testData1;
      print(consistency.custserver2.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.keyword_typ = testData2;
      print(consistency.custserver2.keyword_typ);
      expect(consistency.custserver2.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.keyword_typ = defalut;
      print(consistency.custserver2.keyword_typ);
      expect(consistency.custserver2.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00283_element_check_00260 **********\n\n");
    });

    test('00284_element_check_00261', () async {
      print("\n********** テスト実行：00284_element_check_00261 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.file;
      print(consistency.custserver2.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.file = testData1s;
      print(consistency.custserver2.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.file = testData2s;
      print(consistency.custserver2.file);
      expect(consistency.custserver2.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.file = defalut;
      print(consistency.custserver2.file);
      expect(consistency.custserver2.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00284_element_check_00261 **********\n\n");
    });

    test('00285_element_check_00262', () async {
      print("\n********** テスト実行：00285_element_check_00262 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.custserver2.keyword;
      print(consistency.custserver2.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.custserver2.keyword = testData1s;
      print(consistency.custserver2.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.custserver2.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.custserver2.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.custserver2.keyword = testData2s;
      print(consistency.custserver2.keyword);
      expect(consistency.custserver2.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.custserver2.keyword = defalut;
      print(consistency.custserver2.keyword);
      expect(consistency.custserver2.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.custserver2.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00285_element_check_00262 **********\n\n");
    });

    test('00286_element_check_00263', () async {
      print("\n********** テスト実行：00286_element_check_00263 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.title;
      print(consistency.hbtime.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.title = testData1s;
      print(consistency.hbtime.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.title = testData2s;
      print(consistency.hbtime.title);
      expect(consistency.hbtime.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.title = defalut;
      print(consistency.hbtime.title);
      expect(consistency.hbtime.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00286_element_check_00263 **********\n\n");
    });

    test('00287_element_check_00264', () async {
      print("\n********** テスト実行：00287_element_check_00264 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.obj;
      print(consistency.hbtime.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.obj = testData1;
      print(consistency.hbtime.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.obj = testData2;
      print(consistency.hbtime.obj);
      expect(consistency.hbtime.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.obj = defalut;
      print(consistency.hbtime.obj);
      expect(consistency.hbtime.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00287_element_check_00264 **********\n\n");
    });

    test('00288_element_check_00265', () async {
      print("\n********** テスト実行：00288_element_check_00265 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.condi;
      print(consistency.hbtime.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.condi = testData1;
      print(consistency.hbtime.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.condi = testData2;
      print(consistency.hbtime.condi);
      expect(consistency.hbtime.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.condi = defalut;
      print(consistency.hbtime.condi);
      expect(consistency.hbtime.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00288_element_check_00265 **********\n\n");
    });

    test('00289_element_check_00266', () async {
      print("\n********** テスト実行：00289_element_check_00266 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.typ;
      print(consistency.hbtime.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.typ = testData1;
      print(consistency.hbtime.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.typ = testData2;
      print(consistency.hbtime.typ);
      expect(consistency.hbtime.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.typ = defalut;
      print(consistency.hbtime.typ);
      expect(consistency.hbtime.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00289_element_check_00266 **********\n\n");
    });

    test('00290_element_check_00267', () async {
      print("\n********** テスト実行：00290_element_check_00267 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.ini_typ;
      print(consistency.hbtime.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.ini_typ = testData1;
      print(consistency.hbtime.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.ini_typ = testData2;
      print(consistency.hbtime.ini_typ);
      expect(consistency.hbtime.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.ini_typ = defalut;
      print(consistency.hbtime.ini_typ);
      expect(consistency.hbtime.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00290_element_check_00267 **********\n\n");
    });

    test('00291_element_check_00268', () async {
      print("\n********** テスト実行：00291_element_check_00268 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.file;
      print(consistency.hbtime.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.file = testData1s;
      print(consistency.hbtime.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.file = testData2s;
      print(consistency.hbtime.file);
      expect(consistency.hbtime.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.file = defalut;
      print(consistency.hbtime.file);
      expect(consistency.hbtime.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00291_element_check_00268 **********\n\n");
    });

    test('00292_element_check_00269', () async {
      print("\n********** テスト実行：00292_element_check_00269 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.section;
      print(consistency.hbtime.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.section = testData1s;
      print(consistency.hbtime.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.section = testData2s;
      print(consistency.hbtime.section);
      expect(consistency.hbtime.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.section = defalut;
      print(consistency.hbtime.section);
      expect(consistency.hbtime.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00292_element_check_00269 **********\n\n");
    });

    test('00293_element_check_00270', () async {
      print("\n********** テスト実行：00293_element_check_00270 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hbtime.keyword;
      print(consistency.hbtime.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hbtime.keyword = testData1s;
      print(consistency.hbtime.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hbtime.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hbtime.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hbtime.keyword = testData2s;
      print(consistency.hbtime.keyword);
      expect(consistency.hbtime.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hbtime.keyword = defalut;
      print(consistency.hbtime.keyword);
      expect(consistency.hbtime.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hbtime.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00293_element_check_00270 **********\n\n");
    });

    test('00294_element_check_00271', () async {
      print("\n********** テスト実行：00294_element_check_00271 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.title;
      print(consistency.offlinetime.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.title = testData1s;
      print(consistency.offlinetime.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.title = testData2s;
      print(consistency.offlinetime.title);
      expect(consistency.offlinetime.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.title = defalut;
      print(consistency.offlinetime.title);
      expect(consistency.offlinetime.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00294_element_check_00271 **********\n\n");
    });

    test('00295_element_check_00272', () async {
      print("\n********** テスト実行：00295_element_check_00272 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.obj;
      print(consistency.offlinetime.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.obj = testData1;
      print(consistency.offlinetime.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.obj = testData2;
      print(consistency.offlinetime.obj);
      expect(consistency.offlinetime.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.obj = defalut;
      print(consistency.offlinetime.obj);
      expect(consistency.offlinetime.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00295_element_check_00272 **********\n\n");
    });

    test('00296_element_check_00273', () async {
      print("\n********** テスト実行：00296_element_check_00273 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.condi;
      print(consistency.offlinetime.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.condi = testData1;
      print(consistency.offlinetime.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.condi = testData2;
      print(consistency.offlinetime.condi);
      expect(consistency.offlinetime.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.condi = defalut;
      print(consistency.offlinetime.condi);
      expect(consistency.offlinetime.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00296_element_check_00273 **********\n\n");
    });

    test('00297_element_check_00274', () async {
      print("\n********** テスト実行：00297_element_check_00274 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.typ;
      print(consistency.offlinetime.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.typ = testData1;
      print(consistency.offlinetime.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.typ = testData2;
      print(consistency.offlinetime.typ);
      expect(consistency.offlinetime.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.typ = defalut;
      print(consistency.offlinetime.typ);
      expect(consistency.offlinetime.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00297_element_check_00274 **********\n\n");
    });

    test('00298_element_check_00275', () async {
      print("\n********** テスト実行：00298_element_check_00275 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.ini_typ;
      print(consistency.offlinetime.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.ini_typ = testData1;
      print(consistency.offlinetime.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.ini_typ = testData2;
      print(consistency.offlinetime.ini_typ);
      expect(consistency.offlinetime.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.ini_typ = defalut;
      print(consistency.offlinetime.ini_typ);
      expect(consistency.offlinetime.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00298_element_check_00275 **********\n\n");
    });

    test('00299_element_check_00276', () async {
      print("\n********** テスト実行：00299_element_check_00276 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.file;
      print(consistency.offlinetime.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.file = testData1s;
      print(consistency.offlinetime.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.file = testData2s;
      print(consistency.offlinetime.file);
      expect(consistency.offlinetime.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.file = defalut;
      print(consistency.offlinetime.file);
      expect(consistency.offlinetime.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00299_element_check_00276 **********\n\n");
    });

    test('00300_element_check_00277', () async {
      print("\n********** テスト実行：00300_element_check_00277 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.section;
      print(consistency.offlinetime.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.section = testData1s;
      print(consistency.offlinetime.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.section = testData2s;
      print(consistency.offlinetime.section);
      expect(consistency.offlinetime.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.section = defalut;
      print(consistency.offlinetime.section);
      expect(consistency.offlinetime.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00300_element_check_00277 **********\n\n");
    });

    test('00301_element_check_00278', () async {
      print("\n********** テスト実行：00301_element_check_00278 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.offlinetime.keyword;
      print(consistency.offlinetime.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.offlinetime.keyword = testData1s;
      print(consistency.offlinetime.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.offlinetime.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.offlinetime.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.offlinetime.keyword = testData2s;
      print(consistency.offlinetime.keyword);
      expect(consistency.offlinetime.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.offlinetime.keyword = defalut;
      print(consistency.offlinetime.keyword);
      expect(consistency.offlinetime.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.offlinetime.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00301_element_check_00278 **********\n\n");
    });

    test('00302_element_check_00279', () async {
      print("\n********** テスト実行：00302_element_check_00279 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.title;
      print(consistency.spqc.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.title = testData1s;
      print(consistency.spqc.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.title = testData2s;
      print(consistency.spqc.title);
      expect(consistency.spqc.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.title = defalut;
      print(consistency.spqc.title);
      expect(consistency.spqc.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00302_element_check_00279 **********\n\n");
    });

    test('00303_element_check_00280', () async {
      print("\n********** テスト実行：00303_element_check_00280 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.obj;
      print(consistency.spqc.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.obj = testData1;
      print(consistency.spqc.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.obj = testData2;
      print(consistency.spqc.obj);
      expect(consistency.spqc.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.obj = defalut;
      print(consistency.spqc.obj);
      expect(consistency.spqc.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00303_element_check_00280 **********\n\n");
    });

    test('00304_element_check_00281', () async {
      print("\n********** テスト実行：00304_element_check_00281 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.condi;
      print(consistency.spqc.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.condi = testData1;
      print(consistency.spqc.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.condi = testData2;
      print(consistency.spqc.condi);
      expect(consistency.spqc.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.condi = defalut;
      print(consistency.spqc.condi);
      expect(consistency.spqc.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00304_element_check_00281 **********\n\n");
    });

    test('00305_element_check_00282', () async {
      print("\n********** テスト実行：00305_element_check_00282 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.typ;
      print(consistency.spqc.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.typ = testData1;
      print(consistency.spqc.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.typ = testData2;
      print(consistency.spqc.typ);
      expect(consistency.spqc.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.typ = defalut;
      print(consistency.spqc.typ);
      expect(consistency.spqc.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00305_element_check_00282 **********\n\n");
    });

    test('00306_element_check_00283', () async {
      print("\n********** テスト実行：00306_element_check_00283 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.keyword_typ;
      print(consistency.spqc.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.keyword_typ = testData1;
      print(consistency.spqc.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.keyword_typ = testData2;
      print(consistency.spqc.keyword_typ);
      expect(consistency.spqc.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.keyword_typ = defalut;
      print(consistency.spqc.keyword_typ);
      expect(consistency.spqc.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00306_element_check_00283 **********\n\n");
    });

    test('00307_element_check_00284', () async {
      print("\n********** テスト実行：00307_element_check_00284 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.file;
      print(consistency.spqc.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.file = testData1s;
      print(consistency.spqc.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.file = testData2s;
      print(consistency.spqc.file);
      expect(consistency.spqc.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.file = defalut;
      print(consistency.spqc.file);
      expect(consistency.spqc.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00307_element_check_00284 **********\n\n");
    });

    test('00308_element_check_00285', () async {
      print("\n********** テスト実行：00308_element_check_00285 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc.keyword;
      print(consistency.spqc.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc.keyword = testData1s;
      print(consistency.spqc.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc.keyword = testData2s;
      print(consistency.spqc.keyword);
      expect(consistency.spqc.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc.keyword = defalut;
      print(consistency.spqc.keyword);
      expect(consistency.spqc.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00308_element_check_00285 **********\n\n");
    });

    test('00309_element_check_00286', () async {
      print("\n********** テスト実行：00309_element_check_00286 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.title;
      print(consistency.spqcport.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.title = testData1s;
      print(consistency.spqcport.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.title = testData2s;
      print(consistency.spqcport.title);
      expect(consistency.spqcport.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.title = defalut;
      print(consistency.spqcport.title);
      expect(consistency.spqcport.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00309_element_check_00286 **********\n\n");
    });

    test('00310_element_check_00287', () async {
      print("\n********** テスト実行：00310_element_check_00287 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.obj;
      print(consistency.spqcport.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.obj = testData1;
      print(consistency.spqcport.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.obj = testData2;
      print(consistency.spqcport.obj);
      expect(consistency.spqcport.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.obj = defalut;
      print(consistency.spqcport.obj);
      expect(consistency.spqcport.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00310_element_check_00287 **********\n\n");
    });

    test('00311_element_check_00288', () async {
      print("\n********** テスト実行：00311_element_check_00288 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.condi;
      print(consistency.spqcport.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.condi = testData1;
      print(consistency.spqcport.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.condi = testData2;
      print(consistency.spqcport.condi);
      expect(consistency.spqcport.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.condi = defalut;
      print(consistency.spqcport.condi);
      expect(consistency.spqcport.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00311_element_check_00288 **********\n\n");
    });

    test('00312_element_check_00289', () async {
      print("\n********** テスト実行：00312_element_check_00289 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.typ;
      print(consistency.spqcport.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.typ = testData1;
      print(consistency.spqcport.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.typ = testData2;
      print(consistency.spqcport.typ);
      expect(consistency.spqcport.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.typ = defalut;
      print(consistency.spqcport.typ);
      expect(consistency.spqcport.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00312_element_check_00289 **********\n\n");
    });

    test('00313_element_check_00290', () async {
      print("\n********** テスト実行：00313_element_check_00290 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.keyword_typ;
      print(consistency.spqcport.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.keyword_typ = testData1;
      print(consistency.spqcport.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.keyword_typ = testData2;
      print(consistency.spqcport.keyword_typ);
      expect(consistency.spqcport.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.keyword_typ = defalut;
      print(consistency.spqcport.keyword_typ);
      expect(consistency.spqcport.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00313_element_check_00290 **********\n\n");
    });

    test('00314_element_check_00291', () async {
      print("\n********** テスト実行：00314_element_check_00291 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.file;
      print(consistency.spqcport.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.file = testData1s;
      print(consistency.spqcport.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.file = testData2s;
      print(consistency.spqcport.file);
      expect(consistency.spqcport.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.file = defalut;
      print(consistency.spqcport.file);
      expect(consistency.spqcport.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00314_element_check_00291 **********\n\n");
    });

    test('00315_element_check_00292', () async {
      print("\n********** テスト実行：00315_element_check_00292 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqcport.keyword;
      print(consistency.spqcport.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqcport.keyword = testData1s;
      print(consistency.spqcport.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqcport.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqcport.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqcport.keyword = testData2s;
      print(consistency.spqcport.keyword);
      expect(consistency.spqcport.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqcport.keyword = defalut;
      print(consistency.spqcport.keyword);
      expect(consistency.spqcport.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqcport.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00315_element_check_00292 **********\n\n");
    });

    test('00316_element_check_00293', () async {
      print("\n********** テスト実行：00316_element_check_00293 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.title;
      print(consistency.wiz_port.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.title = testData1s;
      print(consistency.wiz_port.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.title = testData2s;
      print(consistency.wiz_port.title);
      expect(consistency.wiz_port.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.title = defalut;
      print(consistency.wiz_port.title);
      expect(consistency.wiz_port.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00316_element_check_00293 **********\n\n");
    });

    test('00317_element_check_00294', () async {
      print("\n********** テスト実行：00317_element_check_00294 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.obj;
      print(consistency.wiz_port.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.obj = testData1;
      print(consistency.wiz_port.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.obj = testData2;
      print(consistency.wiz_port.obj);
      expect(consistency.wiz_port.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.obj = defalut;
      print(consistency.wiz_port.obj);
      expect(consistency.wiz_port.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00317_element_check_00294 **********\n\n");
    });

    test('00318_element_check_00295', () async {
      print("\n********** テスト実行：00318_element_check_00295 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.condi;
      print(consistency.wiz_port.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.condi = testData1;
      print(consistency.wiz_port.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.condi = testData2;
      print(consistency.wiz_port.condi);
      expect(consistency.wiz_port.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.condi = defalut;
      print(consistency.wiz_port.condi);
      expect(consistency.wiz_port.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00318_element_check_00295 **********\n\n");
    });

    test('00319_element_check_00296', () async {
      print("\n********** テスト実行：00319_element_check_00296 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.typ;
      print(consistency.wiz_port.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.typ = testData1;
      print(consistency.wiz_port.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.typ = testData2;
      print(consistency.wiz_port.typ);
      expect(consistency.wiz_port.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.typ = defalut;
      print(consistency.wiz_port.typ);
      expect(consistency.wiz_port.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00319_element_check_00296 **********\n\n");
    });

    test('00320_element_check_00297', () async {
      print("\n********** テスト実行：00320_element_check_00297 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.keyword_typ;
      print(consistency.wiz_port.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.keyword_typ = testData1;
      print(consistency.wiz_port.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.keyword_typ = testData2;
      print(consistency.wiz_port.keyword_typ);
      expect(consistency.wiz_port.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.keyword_typ = defalut;
      print(consistency.wiz_port.keyword_typ);
      expect(consistency.wiz_port.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00320_element_check_00297 **********\n\n");
    });

    test('00321_element_check_00298', () async {
      print("\n********** テスト実行：00321_element_check_00298 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.file;
      print(consistency.wiz_port.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.file = testData1s;
      print(consistency.wiz_port.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.file = testData2s;
      print(consistency.wiz_port.file);
      expect(consistency.wiz_port.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.file = defalut;
      print(consistency.wiz_port.file);
      expect(consistency.wiz_port.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00321_element_check_00298 **********\n\n");
    });

    test('00322_element_check_00299', () async {
      print("\n********** テスト実行：00322_element_check_00299 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.wiz_port.keyword;
      print(consistency.wiz_port.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.wiz_port.keyword = testData1s;
      print(consistency.wiz_port.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.wiz_port.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.wiz_port.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.wiz_port.keyword = testData2s;
      print(consistency.wiz_port.keyword);
      expect(consistency.wiz_port.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.wiz_port.keyword = defalut;
      print(consistency.wiz_port.keyword);
      expect(consistency.wiz_port.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.wiz_port.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00322_element_check_00299 **********\n\n");
    });

    test('00323_element_check_00300', () async {
      print("\n********** テスト実行：00323_element_check_00300 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.title;
      print(consistency.spqc_subsvr.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.title = testData1s;
      print(consistency.spqc_subsvr.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.title = testData2s;
      print(consistency.spqc_subsvr.title);
      expect(consistency.spqc_subsvr.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.title = defalut;
      print(consistency.spqc_subsvr.title);
      expect(consistency.spqc_subsvr.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00323_element_check_00300 **********\n\n");
    });

    test('00324_element_check_00301', () async {
      print("\n********** テスト実行：00324_element_check_00301 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.obj;
      print(consistency.spqc_subsvr.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.obj = testData1;
      print(consistency.spqc_subsvr.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.obj = testData2;
      print(consistency.spqc_subsvr.obj);
      expect(consistency.spqc_subsvr.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.obj = defalut;
      print(consistency.spqc_subsvr.obj);
      expect(consistency.spqc_subsvr.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00324_element_check_00301 **********\n\n");
    });

    test('00325_element_check_00302', () async {
      print("\n********** テスト実行：00325_element_check_00302 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.condi;
      print(consistency.spqc_subsvr.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.condi = testData1;
      print(consistency.spqc_subsvr.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.condi = testData2;
      print(consistency.spqc_subsvr.condi);
      expect(consistency.spqc_subsvr.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.condi = defalut;
      print(consistency.spqc_subsvr.condi);
      expect(consistency.spqc_subsvr.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00325_element_check_00302 **********\n\n");
    });

    test('00326_element_check_00303', () async {
      print("\n********** テスト実行：00326_element_check_00303 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.typ;
      print(consistency.spqc_subsvr.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.typ = testData1;
      print(consistency.spqc_subsvr.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.typ = testData2;
      print(consistency.spqc_subsvr.typ);
      expect(consistency.spqc_subsvr.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.typ = defalut;
      print(consistency.spqc_subsvr.typ);
      expect(consistency.spqc_subsvr.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00326_element_check_00303 **********\n\n");
    });

    test('00327_element_check_00304', () async {
      print("\n********** テスト実行：00327_element_check_00304 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.keyword_typ;
      print(consistency.spqc_subsvr.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.keyword_typ = testData1;
      print(consistency.spqc_subsvr.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.keyword_typ = testData2;
      print(consistency.spqc_subsvr.keyword_typ);
      expect(consistency.spqc_subsvr.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.keyword_typ = defalut;
      print(consistency.spqc_subsvr.keyword_typ);
      expect(consistency.spqc_subsvr.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00327_element_check_00304 **********\n\n");
    });

    test('00328_element_check_00305', () async {
      print("\n********** テスト実行：00328_element_check_00305 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.file;
      print(consistency.spqc_subsvr.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.file = testData1s;
      print(consistency.spqc_subsvr.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.file = testData2s;
      print(consistency.spqc_subsvr.file);
      expect(consistency.spqc_subsvr.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.file = defalut;
      print(consistency.spqc_subsvr.file);
      expect(consistency.spqc_subsvr.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00328_element_check_00305 **********\n\n");
    });

    test('00329_element_check_00306', () async {
      print("\n********** テスト実行：00329_element_check_00306 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.spqc_subsvr.keyword;
      print(consistency.spqc_subsvr.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.spqc_subsvr.keyword = testData1s;
      print(consistency.spqc_subsvr.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.spqc_subsvr.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.spqc_subsvr.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.spqc_subsvr.keyword = testData2s;
      print(consistency.spqc_subsvr.keyword);
      expect(consistency.spqc_subsvr.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.spqc_subsvr.keyword = defalut;
      print(consistency.spqc_subsvr.keyword);
      expect(consistency.spqc_subsvr.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.spqc_subsvr.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00329_element_check_00306 **********\n\n");
    });

    test('00330_element_check_00307', () async {
      print("\n********** テスト実行：00330_element_check_00307 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.title;
      print(consistency.hq_userid.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.title = testData1s;
      print(consistency.hq_userid.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.title = testData2s;
      print(consistency.hq_userid.title);
      expect(consistency.hq_userid.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.title = defalut;
      print(consistency.hq_userid.title);
      expect(consistency.hq_userid.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00330_element_check_00307 **********\n\n");
    });

    test('00331_element_check_00308', () async {
      print("\n********** テスト実行：00331_element_check_00308 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.obj;
      print(consistency.hq_userid.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.obj = testData1;
      print(consistency.hq_userid.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.obj = testData2;
      print(consistency.hq_userid.obj);
      expect(consistency.hq_userid.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.obj = defalut;
      print(consistency.hq_userid.obj);
      expect(consistency.hq_userid.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00331_element_check_00308 **********\n\n");
    });

    test('00332_element_check_00309', () async {
      print("\n********** テスト実行：00332_element_check_00309 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.condi;
      print(consistency.hq_userid.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.condi = testData1;
      print(consistency.hq_userid.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.condi = testData2;
      print(consistency.hq_userid.condi);
      expect(consistency.hq_userid.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.condi = defalut;
      print(consistency.hq_userid.condi);
      expect(consistency.hq_userid.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00332_element_check_00309 **********\n\n");
    });

    test('00333_element_check_00310', () async {
      print("\n********** テスト実行：00333_element_check_00310 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.typ;
      print(consistency.hq_userid.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.typ = testData1;
      print(consistency.hq_userid.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.typ = testData2;
      print(consistency.hq_userid.typ);
      expect(consistency.hq_userid.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.typ = defalut;
      print(consistency.hq_userid.typ);
      expect(consistency.hq_userid.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00333_element_check_00310 **********\n\n");
    });

    test('00334_element_check_00311', () async {
      print("\n********** テスト実行：00334_element_check_00311 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.ini_typ;
      print(consistency.hq_userid.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.ini_typ = testData1;
      print(consistency.hq_userid.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.ini_typ = testData2;
      print(consistency.hq_userid.ini_typ);
      expect(consistency.hq_userid.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.ini_typ = defalut;
      print(consistency.hq_userid.ini_typ);
      expect(consistency.hq_userid.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00334_element_check_00311 **********\n\n");
    });

    test('00335_element_check_00312', () async {
      print("\n********** テスト実行：00335_element_check_00312 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.file;
      print(consistency.hq_userid.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.file = testData1s;
      print(consistency.hq_userid.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.file = testData2s;
      print(consistency.hq_userid.file);
      expect(consistency.hq_userid.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.file = defalut;
      print(consistency.hq_userid.file);
      expect(consistency.hq_userid.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00335_element_check_00312 **********\n\n");
    });

    test('00336_element_check_00313', () async {
      print("\n********** テスト実行：00336_element_check_00313 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.section;
      print(consistency.hq_userid.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.section = testData1s;
      print(consistency.hq_userid.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.section = testData2s;
      print(consistency.hq_userid.section);
      expect(consistency.hq_userid.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.section = defalut;
      print(consistency.hq_userid.section);
      expect(consistency.hq_userid.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00336_element_check_00313 **********\n\n");
    });

    test('00337_element_check_00314', () async {
      print("\n********** テスト実行：00337_element_check_00314 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userid.keyword;
      print(consistency.hq_userid.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userid.keyword = testData1s;
      print(consistency.hq_userid.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userid.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userid.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userid.keyword = testData2s;
      print(consistency.hq_userid.keyword);
      expect(consistency.hq_userid.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userid.keyword = defalut;
      print(consistency.hq_userid.keyword);
      expect(consistency.hq_userid.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userid.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00337_element_check_00314 **********\n\n");
    });

    test('00338_element_check_00315', () async {
      print("\n********** テスト実行：00338_element_check_00315 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.title;
      print(consistency.hq_userpass.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.title = testData1s;
      print(consistency.hq_userpass.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.title = testData2s;
      print(consistency.hq_userpass.title);
      expect(consistency.hq_userpass.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.title = defalut;
      print(consistency.hq_userpass.title);
      expect(consistency.hq_userpass.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00338_element_check_00315 **********\n\n");
    });

    test('00339_element_check_00316', () async {
      print("\n********** テスト実行：00339_element_check_00316 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.obj;
      print(consistency.hq_userpass.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.obj = testData1;
      print(consistency.hq_userpass.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.obj = testData2;
      print(consistency.hq_userpass.obj);
      expect(consistency.hq_userpass.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.obj = defalut;
      print(consistency.hq_userpass.obj);
      expect(consistency.hq_userpass.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00339_element_check_00316 **********\n\n");
    });

    test('00340_element_check_00317', () async {
      print("\n********** テスト実行：00340_element_check_00317 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.condi;
      print(consistency.hq_userpass.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.condi = testData1;
      print(consistency.hq_userpass.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.condi = testData2;
      print(consistency.hq_userpass.condi);
      expect(consistency.hq_userpass.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.condi = defalut;
      print(consistency.hq_userpass.condi);
      expect(consistency.hq_userpass.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00340_element_check_00317 **********\n\n");
    });

    test('00341_element_check_00318', () async {
      print("\n********** テスト実行：00341_element_check_00318 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.typ;
      print(consistency.hq_userpass.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.typ = testData1;
      print(consistency.hq_userpass.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.typ = testData2;
      print(consistency.hq_userpass.typ);
      expect(consistency.hq_userpass.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.typ = defalut;
      print(consistency.hq_userpass.typ);
      expect(consistency.hq_userpass.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00341_element_check_00318 **********\n\n");
    });

    test('00342_element_check_00319', () async {
      print("\n********** テスト実行：00342_element_check_00319 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.ini_typ;
      print(consistency.hq_userpass.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.ini_typ = testData1;
      print(consistency.hq_userpass.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.ini_typ = testData2;
      print(consistency.hq_userpass.ini_typ);
      expect(consistency.hq_userpass.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.ini_typ = defalut;
      print(consistency.hq_userpass.ini_typ);
      expect(consistency.hq_userpass.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00342_element_check_00319 **********\n\n");
    });

    test('00343_element_check_00320', () async {
      print("\n********** テスト実行：00343_element_check_00320 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.file;
      print(consistency.hq_userpass.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.file = testData1s;
      print(consistency.hq_userpass.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.file = testData2s;
      print(consistency.hq_userpass.file);
      expect(consistency.hq_userpass.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.file = defalut;
      print(consistency.hq_userpass.file);
      expect(consistency.hq_userpass.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00343_element_check_00320 **********\n\n");
    });

    test('00344_element_check_00321', () async {
      print("\n********** テスト実行：00344_element_check_00321 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.section;
      print(consistency.hq_userpass.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.section = testData1s;
      print(consistency.hq_userpass.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.section = testData2s;
      print(consistency.hq_userpass.section);
      expect(consistency.hq_userpass.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.section = defalut;
      print(consistency.hq_userpass.section);
      expect(consistency.hq_userpass.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00344_element_check_00321 **********\n\n");
    });

    test('00345_element_check_00322', () async {
      print("\n********** テスト実行：00345_element_check_00322 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_userpass.keyword;
      print(consistency.hq_userpass.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_userpass.keyword = testData1s;
      print(consistency.hq_userpass.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_userpass.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_userpass.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_userpass.keyword = testData2s;
      print(consistency.hq_userpass.keyword);
      expect(consistency.hq_userpass.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_userpass.keyword = defalut;
      print(consistency.hq_userpass.keyword);
      expect(consistency.hq_userpass.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_userpass.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00345_element_check_00322 **********\n\n");
    });

    test('00346_element_check_00323', () async {
      print("\n********** テスト実行：00346_element_check_00323 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.title;
      print(consistency.hq_compcd.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.title = testData1s;
      print(consistency.hq_compcd.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.title = testData2s;
      print(consistency.hq_compcd.title);
      expect(consistency.hq_compcd.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.title = defalut;
      print(consistency.hq_compcd.title);
      expect(consistency.hq_compcd.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00346_element_check_00323 **********\n\n");
    });

    test('00347_element_check_00324', () async {
      print("\n********** テスト実行：00347_element_check_00324 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.obj;
      print(consistency.hq_compcd.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.obj = testData1;
      print(consistency.hq_compcd.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.obj = testData2;
      print(consistency.hq_compcd.obj);
      expect(consistency.hq_compcd.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.obj = defalut;
      print(consistency.hq_compcd.obj);
      expect(consistency.hq_compcd.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00347_element_check_00324 **********\n\n");
    });

    test('00348_element_check_00325', () async {
      print("\n********** テスト実行：00348_element_check_00325 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.condi;
      print(consistency.hq_compcd.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.condi = testData1;
      print(consistency.hq_compcd.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.condi = testData2;
      print(consistency.hq_compcd.condi);
      expect(consistency.hq_compcd.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.condi = defalut;
      print(consistency.hq_compcd.condi);
      expect(consistency.hq_compcd.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00348_element_check_00325 **********\n\n");
    });

    test('00349_element_check_00326', () async {
      print("\n********** テスト実行：00349_element_check_00326 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.typ;
      print(consistency.hq_compcd.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.typ = testData1;
      print(consistency.hq_compcd.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.typ = testData2;
      print(consistency.hq_compcd.typ);
      expect(consistency.hq_compcd.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.typ = defalut;
      print(consistency.hq_compcd.typ);
      expect(consistency.hq_compcd.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00349_element_check_00326 **********\n\n");
    });

    test('00350_element_check_00327', () async {
      print("\n********** テスト実行：00350_element_check_00327 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.ini_typ;
      print(consistency.hq_compcd.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.ini_typ = testData1;
      print(consistency.hq_compcd.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.ini_typ = testData2;
      print(consistency.hq_compcd.ini_typ);
      expect(consistency.hq_compcd.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.ini_typ = defalut;
      print(consistency.hq_compcd.ini_typ);
      expect(consistency.hq_compcd.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00350_element_check_00327 **********\n\n");
    });

    test('00351_element_check_00328', () async {
      print("\n********** テスト実行：00351_element_check_00328 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.file;
      print(consistency.hq_compcd.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.file = testData1s;
      print(consistency.hq_compcd.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.file = testData2s;
      print(consistency.hq_compcd.file);
      expect(consistency.hq_compcd.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.file = defalut;
      print(consistency.hq_compcd.file);
      expect(consistency.hq_compcd.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00351_element_check_00328 **********\n\n");
    });

    test('00352_element_check_00329', () async {
      print("\n********** テスト実行：00352_element_check_00329 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.section;
      print(consistency.hq_compcd.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.section = testData1s;
      print(consistency.hq_compcd.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.section = testData2s;
      print(consistency.hq_compcd.section);
      expect(consistency.hq_compcd.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.section = defalut;
      print(consistency.hq_compcd.section);
      expect(consistency.hq_compcd.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00352_element_check_00329 **********\n\n");
    });

    test('00353_element_check_00330', () async {
      print("\n********** テスト実行：00353_element_check_00330 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_compcd.keyword;
      print(consistency.hq_compcd.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_compcd.keyword = testData1s;
      print(consistency.hq_compcd.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_compcd.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_compcd.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_compcd.keyword = testData2s;
      print(consistency.hq_compcd.keyword);
      expect(consistency.hq_compcd.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_compcd.keyword = defalut;
      print(consistency.hq_compcd.keyword);
      expect(consistency.hq_compcd.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_compcd.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00353_element_check_00330 **********\n\n");
    });

    test('00354_element_check_00331', () async {
      print("\n********** テスト実行：00354_element_check_00331 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.title;
      print(consistency.hq_url.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.title = testData1s;
      print(consistency.hq_url.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.title = testData2s;
      print(consistency.hq_url.title);
      expect(consistency.hq_url.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.title = defalut;
      print(consistency.hq_url.title);
      expect(consistency.hq_url.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00354_element_check_00331 **********\n\n");
    });

    test('00355_element_check_00332', () async {
      print("\n********** テスト実行：00355_element_check_00332 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.obj;
      print(consistency.hq_url.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.obj = testData1;
      print(consistency.hq_url.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.obj = testData2;
      print(consistency.hq_url.obj);
      expect(consistency.hq_url.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.obj = defalut;
      print(consistency.hq_url.obj);
      expect(consistency.hq_url.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00355_element_check_00332 **********\n\n");
    });

    test('00356_element_check_00333', () async {
      print("\n********** テスト実行：00356_element_check_00333 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.condi;
      print(consistency.hq_url.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.condi = testData1;
      print(consistency.hq_url.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.condi = testData2;
      print(consistency.hq_url.condi);
      expect(consistency.hq_url.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.condi = defalut;
      print(consistency.hq_url.condi);
      expect(consistency.hq_url.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00356_element_check_00333 **********\n\n");
    });

    test('00357_element_check_00334', () async {
      print("\n********** テスト実行：00357_element_check_00334 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.typ;
      print(consistency.hq_url.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.typ = testData1;
      print(consistency.hq_url.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.typ = testData2;
      print(consistency.hq_url.typ);
      expect(consistency.hq_url.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.typ = defalut;
      print(consistency.hq_url.typ);
      expect(consistency.hq_url.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00357_element_check_00334 **********\n\n");
    });

    test('00358_element_check_00335', () async {
      print("\n********** テスト実行：00358_element_check_00335 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.ini_typ;
      print(consistency.hq_url.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.ini_typ = testData1;
      print(consistency.hq_url.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.ini_typ = testData2;
      print(consistency.hq_url.ini_typ);
      expect(consistency.hq_url.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.ini_typ = defalut;
      print(consistency.hq_url.ini_typ);
      expect(consistency.hq_url.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00358_element_check_00335 **********\n\n");
    });

    test('00359_element_check_00336', () async {
      print("\n********** テスト実行：00359_element_check_00336 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.file;
      print(consistency.hq_url.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.file = testData1s;
      print(consistency.hq_url.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.file = testData2s;
      print(consistency.hq_url.file);
      expect(consistency.hq_url.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.file = defalut;
      print(consistency.hq_url.file);
      expect(consistency.hq_url.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00359_element_check_00336 **********\n\n");
    });

    test('00360_element_check_00337', () async {
      print("\n********** テスト実行：00360_element_check_00337 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.section;
      print(consistency.hq_url.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.section = testData1s;
      print(consistency.hq_url.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.section = testData2s;
      print(consistency.hq_url.section);
      expect(consistency.hq_url.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.section = defalut;
      print(consistency.hq_url.section);
      expect(consistency.hq_url.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00360_element_check_00337 **********\n\n");
    });

    test('00361_element_check_00338', () async {
      print("\n********** テスト実行：00361_element_check_00338 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.hq_url.keyword;
      print(consistency.hq_url.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.hq_url.keyword = testData1s;
      print(consistency.hq_url.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.hq_url.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.hq_url.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.hq_url.keyword = testData2s;
      print(consistency.hq_url.keyword);
      expect(consistency.hq_url.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.hq_url.keyword = defalut;
      print(consistency.hq_url.keyword);
      expect(consistency.hq_url.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.hq_url.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00361_element_check_00338 **********\n\n");
    });

    test('00362_element_check_00339', () async {
      print("\n********** テスト実行：00362_element_check_00339 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.title;
      print(consistency.qcselect_port.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.title = testData1s;
      print(consistency.qcselect_port.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.title = testData2s;
      print(consistency.qcselect_port.title);
      expect(consistency.qcselect_port.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.title = defalut;
      print(consistency.qcselect_port.title);
      expect(consistency.qcselect_port.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00362_element_check_00339 **********\n\n");
    });

    test('00363_element_check_00340', () async {
      print("\n********** テスト実行：00363_element_check_00340 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.obj;
      print(consistency.qcselect_port.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.obj = testData1;
      print(consistency.qcselect_port.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.obj = testData2;
      print(consistency.qcselect_port.obj);
      expect(consistency.qcselect_port.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.obj = defalut;
      print(consistency.qcselect_port.obj);
      expect(consistency.qcselect_port.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00363_element_check_00340 **********\n\n");
    });

    test('00364_element_check_00341', () async {
      print("\n********** テスト実行：00364_element_check_00341 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.condi;
      print(consistency.qcselect_port.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.condi = testData1;
      print(consistency.qcselect_port.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.condi = testData2;
      print(consistency.qcselect_port.condi);
      expect(consistency.qcselect_port.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.condi = defalut;
      print(consistency.qcselect_port.condi);
      expect(consistency.qcselect_port.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00364_element_check_00341 **********\n\n");
    });

    test('00365_element_check_00342', () async {
      print("\n********** テスト実行：00365_element_check_00342 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.typ;
      print(consistency.qcselect_port.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.typ = testData1;
      print(consistency.qcselect_port.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.typ = testData2;
      print(consistency.qcselect_port.typ);
      expect(consistency.qcselect_port.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.typ = defalut;
      print(consistency.qcselect_port.typ);
      expect(consistency.qcselect_port.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00365_element_check_00342 **********\n\n");
    });

    test('00366_element_check_00343', () async {
      print("\n********** テスト実行：00366_element_check_00343 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.keyword_typ;
      print(consistency.qcselect_port.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.keyword_typ = testData1;
      print(consistency.qcselect_port.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.keyword_typ = testData2;
      print(consistency.qcselect_port.keyword_typ);
      expect(consistency.qcselect_port.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.keyword_typ = defalut;
      print(consistency.qcselect_port.keyword_typ);
      expect(consistency.qcselect_port.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00366_element_check_00343 **********\n\n");
    });

    test('00367_element_check_00344', () async {
      print("\n********** テスト実行：00367_element_check_00344 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.file;
      print(consistency.qcselect_port.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.file = testData1s;
      print(consistency.qcselect_port.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.file = testData2s;
      print(consistency.qcselect_port.file);
      expect(consistency.qcselect_port.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.file = defalut;
      print(consistency.qcselect_port.file);
      expect(consistency.qcselect_port.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00367_element_check_00344 **********\n\n");
    });

    test('00368_element_check_00345', () async {
      print("\n********** テスト実行：00368_element_check_00345 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcselect_port.keyword;
      print(consistency.qcselect_port.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcselect_port.keyword = testData1s;
      print(consistency.qcselect_port.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcselect_port.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcselect_port.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcselect_port.keyword = testData2s;
      print(consistency.qcselect_port.keyword);
      expect(consistency.qcselect_port.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcselect_port.keyword = defalut;
      print(consistency.qcselect_port.keyword);
      expect(consistency.qcselect_port.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcselect_port.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00368_element_check_00345 **********\n\n");
    });

    test('00369_element_check_00346', () async {
      print("\n********** テスト実行：00369_element_check_00346 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.title;
      print(consistency.bult_send.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.title = testData1s;
      print(consistency.bult_send.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.title = testData2s;
      print(consistency.bult_send.title);
      expect(consistency.bult_send.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.title = defalut;
      print(consistency.bult_send.title);
      expect(consistency.bult_send.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00369_element_check_00346 **********\n\n");
    });

    test('00370_element_check_00347', () async {
      print("\n********** テスト実行：00370_element_check_00347 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.obj;
      print(consistency.bult_send.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.obj = testData1;
      print(consistency.bult_send.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.obj = testData2;
      print(consistency.bult_send.obj);
      expect(consistency.bult_send.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.obj = defalut;
      print(consistency.bult_send.obj);
      expect(consistency.bult_send.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00370_element_check_00347 **********\n\n");
    });

    test('00371_element_check_00348', () async {
      print("\n********** テスト実行：00371_element_check_00348 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.condi;
      print(consistency.bult_send.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.condi = testData1;
      print(consistency.bult_send.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.condi = testData2;
      print(consistency.bult_send.condi);
      expect(consistency.bult_send.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.condi = defalut;
      print(consistency.bult_send.condi);
      expect(consistency.bult_send.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00371_element_check_00348 **********\n\n");
    });

    test('00372_element_check_00349', () async {
      print("\n********** テスト実行：00372_element_check_00349 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.typ;
      print(consistency.bult_send.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.typ = testData1;
      print(consistency.bult_send.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.typ = testData2;
      print(consistency.bult_send.typ);
      expect(consistency.bult_send.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.typ = defalut;
      print(consistency.bult_send.typ);
      expect(consistency.bult_send.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00372_element_check_00349 **********\n\n");
    });

    test('00373_element_check_00350', () async {
      print("\n********** テスト実行：00373_element_check_00350 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.ini_typ;
      print(consistency.bult_send.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.ini_typ = testData1;
      print(consistency.bult_send.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.ini_typ = testData2;
      print(consistency.bult_send.ini_typ);
      expect(consistency.bult_send.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.ini_typ = defalut;
      print(consistency.bult_send.ini_typ);
      expect(consistency.bult_send.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00373_element_check_00350 **********\n\n");
    });

    test('00374_element_check_00351', () async {
      print("\n********** テスト実行：00374_element_check_00351 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.file;
      print(consistency.bult_send.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.file = testData1s;
      print(consistency.bult_send.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.file = testData2s;
      print(consistency.bult_send.file);
      expect(consistency.bult_send.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.file = defalut;
      print(consistency.bult_send.file);
      expect(consistency.bult_send.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00374_element_check_00351 **********\n\n");
    });

    test('00375_element_check_00352', () async {
      print("\n********** テスト実行：00375_element_check_00352 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.section;
      print(consistency.bult_send.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.section = testData1s;
      print(consistency.bult_send.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.section = testData2s;
      print(consistency.bult_send.section);
      expect(consistency.bult_send.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.section = defalut;
      print(consistency.bult_send.section);
      expect(consistency.bult_send.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00375_element_check_00352 **********\n\n");
    });

    test('00376_element_check_00353', () async {
      print("\n********** テスト実行：00376_element_check_00353 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bult_send.keyword;
      print(consistency.bult_send.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bult_send.keyword = testData1s;
      print(consistency.bult_send.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bult_send.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bult_send.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bult_send.keyword = testData2s;
      print(consistency.bult_send.keyword);
      expect(consistency.bult_send.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bult_send.keyword = defalut;
      print(consistency.bult_send.keyword);
      expect(consistency.bult_send.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bult_send.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00376_element_check_00353 **********\n\n");
    });

    test('00377_element_check_00354', () async {
      print("\n********** テスト実行：00377_element_check_00354 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.title;
      print(consistency.tslnkweb_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.title = testData1s;
      print(consistency.tslnkweb_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.title = testData2s;
      print(consistency.tslnkweb_timeout.title);
      expect(consistency.tslnkweb_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.title = defalut;
      print(consistency.tslnkweb_timeout.title);
      expect(consistency.tslnkweb_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00377_element_check_00354 **********\n\n");
    });

    test('00378_element_check_00355', () async {
      print("\n********** テスト実行：00378_element_check_00355 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.obj;
      print(consistency.tslnkweb_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.obj = testData1;
      print(consistency.tslnkweb_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.obj = testData2;
      print(consistency.tslnkweb_timeout.obj);
      expect(consistency.tslnkweb_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.obj = defalut;
      print(consistency.tslnkweb_timeout.obj);
      expect(consistency.tslnkweb_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00378_element_check_00355 **********\n\n");
    });

    test('00379_element_check_00356', () async {
      print("\n********** テスト実行：00379_element_check_00356 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.condi;
      print(consistency.tslnkweb_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.condi = testData1;
      print(consistency.tslnkweb_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.condi = testData2;
      print(consistency.tslnkweb_timeout.condi);
      expect(consistency.tslnkweb_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.condi = defalut;
      print(consistency.tslnkweb_timeout.condi);
      expect(consistency.tslnkweb_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00379_element_check_00356 **********\n\n");
    });

    test('00380_element_check_00357', () async {
      print("\n********** テスト実行：00380_element_check_00357 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.typ;
      print(consistency.tslnkweb_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.typ = testData1;
      print(consistency.tslnkweb_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.typ = testData2;
      print(consistency.tslnkweb_timeout.typ);
      expect(consistency.tslnkweb_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.typ = defalut;
      print(consistency.tslnkweb_timeout.typ);
      expect(consistency.tslnkweb_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00380_element_check_00357 **********\n\n");
    });

    test('00381_element_check_00358', () async {
      print("\n********** テスト実行：00381_element_check_00358 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.ini_typ;
      print(consistency.tslnkweb_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.ini_typ = testData1;
      print(consistency.tslnkweb_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.ini_typ = testData2;
      print(consistency.tslnkweb_timeout.ini_typ);
      expect(consistency.tslnkweb_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.ini_typ = defalut;
      print(consistency.tslnkweb_timeout.ini_typ);
      expect(consistency.tslnkweb_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00381_element_check_00358 **********\n\n");
    });

    test('00382_element_check_00359', () async {
      print("\n********** テスト実行：00382_element_check_00359 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.file;
      print(consistency.tslnkweb_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.file = testData1s;
      print(consistency.tslnkweb_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.file = testData2s;
      print(consistency.tslnkweb_timeout.file);
      expect(consistency.tslnkweb_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.file = defalut;
      print(consistency.tslnkweb_timeout.file);
      expect(consistency.tslnkweb_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00382_element_check_00359 **********\n\n");
    });

    test('00383_element_check_00360', () async {
      print("\n********** テスト実行：00383_element_check_00360 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.section;
      print(consistency.tslnkweb_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.section = testData1s;
      print(consistency.tslnkweb_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.section = testData2s;
      print(consistency.tslnkweb_timeout.section);
      expect(consistency.tslnkweb_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.section = defalut;
      print(consistency.tslnkweb_timeout.section);
      expect(consistency.tslnkweb_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00383_element_check_00360 **********\n\n");
    });

    test('00384_element_check_00361', () async {
      print("\n********** テスト実行：00384_element_check_00361 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tslnkweb_timeout.keyword;
      print(consistency.tslnkweb_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tslnkweb_timeout.keyword = testData1s;
      print(consistency.tslnkweb_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tslnkweb_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tslnkweb_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tslnkweb_timeout.keyword = testData2s;
      print(consistency.tslnkweb_timeout.keyword);
      expect(consistency.tslnkweb_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tslnkweb_timeout.keyword = defalut;
      print(consistency.tslnkweb_timeout.keyword);
      expect(consistency.tslnkweb_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tslnkweb_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00384_element_check_00361 **********\n\n");
    });

    test('00385_element_check_00362', () async {
      print("\n********** テスト実行：00385_element_check_00362 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.title;
      print(consistency.pbchg_groupcd.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.title = testData1s;
      print(consistency.pbchg_groupcd.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.title = testData2s;
      print(consistency.pbchg_groupcd.title);
      expect(consistency.pbchg_groupcd.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.title = defalut;
      print(consistency.pbchg_groupcd.title);
      expect(consistency.pbchg_groupcd.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00385_element_check_00362 **********\n\n");
    });

    test('00386_element_check_00363', () async {
      print("\n********** テスト実行：00386_element_check_00363 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.obj;
      print(consistency.pbchg_groupcd.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.obj = testData1;
      print(consistency.pbchg_groupcd.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.obj = testData2;
      print(consistency.pbchg_groupcd.obj);
      expect(consistency.pbchg_groupcd.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.obj = defalut;
      print(consistency.pbchg_groupcd.obj);
      expect(consistency.pbchg_groupcd.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00386_element_check_00363 **********\n\n");
    });

    test('00387_element_check_00364', () async {
      print("\n********** テスト実行：00387_element_check_00364 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.condi;
      print(consistency.pbchg_groupcd.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.condi = testData1;
      print(consistency.pbchg_groupcd.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.condi = testData2;
      print(consistency.pbchg_groupcd.condi);
      expect(consistency.pbchg_groupcd.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.condi = defalut;
      print(consistency.pbchg_groupcd.condi);
      expect(consistency.pbchg_groupcd.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00387_element_check_00364 **********\n\n");
    });

    test('00388_element_check_00365', () async {
      print("\n********** テスト実行：00388_element_check_00365 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.typ;
      print(consistency.pbchg_groupcd.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.typ = testData1;
      print(consistency.pbchg_groupcd.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.typ = testData2;
      print(consistency.pbchg_groupcd.typ);
      expect(consistency.pbchg_groupcd.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.typ = defalut;
      print(consistency.pbchg_groupcd.typ);
      expect(consistency.pbchg_groupcd.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00388_element_check_00365 **********\n\n");
    });

    test('00389_element_check_00366', () async {
      print("\n********** テスト実行：00389_element_check_00366 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.ini_typ;
      print(consistency.pbchg_groupcd.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.ini_typ = testData1;
      print(consistency.pbchg_groupcd.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.ini_typ = testData2;
      print(consistency.pbchg_groupcd.ini_typ);
      expect(consistency.pbchg_groupcd.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.ini_typ = defalut;
      print(consistency.pbchg_groupcd.ini_typ);
      expect(consistency.pbchg_groupcd.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00389_element_check_00366 **********\n\n");
    });

    test('00390_element_check_00367', () async {
      print("\n********** テスト実行：00390_element_check_00367 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.file;
      print(consistency.pbchg_groupcd.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.file = testData1s;
      print(consistency.pbchg_groupcd.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.file = testData2s;
      print(consistency.pbchg_groupcd.file);
      expect(consistency.pbchg_groupcd.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.file = defalut;
      print(consistency.pbchg_groupcd.file);
      expect(consistency.pbchg_groupcd.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00390_element_check_00367 **********\n\n");
    });

    test('00391_element_check_00368', () async {
      print("\n********** テスト実行：00391_element_check_00368 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.section;
      print(consistency.pbchg_groupcd.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.section = testData1s;
      print(consistency.pbchg_groupcd.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.section = testData2s;
      print(consistency.pbchg_groupcd.section);
      expect(consistency.pbchg_groupcd.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.section = defalut;
      print(consistency.pbchg_groupcd.section);
      expect(consistency.pbchg_groupcd.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00391_element_check_00368 **********\n\n");
    });

    test('00392_element_check_00369', () async {
      print("\n********** テスト実行：00392_element_check_00369 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_groupcd.keyword;
      print(consistency.pbchg_groupcd.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_groupcd.keyword = testData1s;
      print(consistency.pbchg_groupcd.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_groupcd.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_groupcd.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_groupcd.keyword = testData2s;
      print(consistency.pbchg_groupcd.keyword);
      expect(consistency.pbchg_groupcd.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_groupcd.keyword = defalut;
      print(consistency.pbchg_groupcd.keyword);
      expect(consistency.pbchg_groupcd.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_groupcd.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00392_element_check_00369 **********\n\n");
    });

    test('00393_element_check_00370', () async {
      print("\n********** テスト実行：00393_element_check_00370 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.title;
      print(consistency.pbchg_officecd.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.title = testData1s;
      print(consistency.pbchg_officecd.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.title = testData2s;
      print(consistency.pbchg_officecd.title);
      expect(consistency.pbchg_officecd.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.title = defalut;
      print(consistency.pbchg_officecd.title);
      expect(consistency.pbchg_officecd.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00393_element_check_00370 **********\n\n");
    });

    test('00394_element_check_00371', () async {
      print("\n********** テスト実行：00394_element_check_00371 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.obj;
      print(consistency.pbchg_officecd.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.obj = testData1;
      print(consistency.pbchg_officecd.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.obj = testData2;
      print(consistency.pbchg_officecd.obj);
      expect(consistency.pbchg_officecd.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.obj = defalut;
      print(consistency.pbchg_officecd.obj);
      expect(consistency.pbchg_officecd.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00394_element_check_00371 **********\n\n");
    });

    test('00395_element_check_00372', () async {
      print("\n********** テスト実行：00395_element_check_00372 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.condi;
      print(consistency.pbchg_officecd.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.condi = testData1;
      print(consistency.pbchg_officecd.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.condi = testData2;
      print(consistency.pbchg_officecd.condi);
      expect(consistency.pbchg_officecd.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.condi = defalut;
      print(consistency.pbchg_officecd.condi);
      expect(consistency.pbchg_officecd.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00395_element_check_00372 **********\n\n");
    });

    test('00396_element_check_00373', () async {
      print("\n********** テスト実行：00396_element_check_00373 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.typ;
      print(consistency.pbchg_officecd.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.typ = testData1;
      print(consistency.pbchg_officecd.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.typ = testData2;
      print(consistency.pbchg_officecd.typ);
      expect(consistency.pbchg_officecd.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.typ = defalut;
      print(consistency.pbchg_officecd.typ);
      expect(consistency.pbchg_officecd.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00396_element_check_00373 **********\n\n");
    });

    test('00397_element_check_00374', () async {
      print("\n********** テスト実行：00397_element_check_00374 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.ini_typ;
      print(consistency.pbchg_officecd.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.ini_typ = testData1;
      print(consistency.pbchg_officecd.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.ini_typ = testData2;
      print(consistency.pbchg_officecd.ini_typ);
      expect(consistency.pbchg_officecd.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.ini_typ = defalut;
      print(consistency.pbchg_officecd.ini_typ);
      expect(consistency.pbchg_officecd.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00397_element_check_00374 **********\n\n");
    });

    test('00398_element_check_00375', () async {
      print("\n********** テスト実行：00398_element_check_00375 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.file;
      print(consistency.pbchg_officecd.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.file = testData1s;
      print(consistency.pbchg_officecd.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.file = testData2s;
      print(consistency.pbchg_officecd.file);
      expect(consistency.pbchg_officecd.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.file = defalut;
      print(consistency.pbchg_officecd.file);
      expect(consistency.pbchg_officecd.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00398_element_check_00375 **********\n\n");
    });

    test('00399_element_check_00376', () async {
      print("\n********** テスト実行：00399_element_check_00376 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.section;
      print(consistency.pbchg_officecd.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.section = testData1s;
      print(consistency.pbchg_officecd.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.section = testData2s;
      print(consistency.pbchg_officecd.section);
      expect(consistency.pbchg_officecd.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.section = defalut;
      print(consistency.pbchg_officecd.section);
      expect(consistency.pbchg_officecd.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00399_element_check_00376 **********\n\n");
    });

    test('00400_element_check_00377', () async {
      print("\n********** テスト実行：00400_element_check_00377 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_officecd.keyword;
      print(consistency.pbchg_officecd.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_officecd.keyword = testData1s;
      print(consistency.pbchg_officecd.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_officecd.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_officecd.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_officecd.keyword = testData2s;
      print(consistency.pbchg_officecd.keyword);
      expect(consistency.pbchg_officecd.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_officecd.keyword = defalut;
      print(consistency.pbchg_officecd.keyword);
      expect(consistency.pbchg_officecd.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_officecd.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00400_element_check_00377 **********\n\n");
    });

    test('00401_element_check_00378', () async {
      print("\n********** テスト実行：00401_element_check_00378 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.title;
      print(consistency.pbchg_strecd.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.title = testData1s;
      print(consistency.pbchg_strecd.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.title = testData2s;
      print(consistency.pbchg_strecd.title);
      expect(consistency.pbchg_strecd.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.title = defalut;
      print(consistency.pbchg_strecd.title);
      expect(consistency.pbchg_strecd.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00401_element_check_00378 **********\n\n");
    });

    test('00402_element_check_00379', () async {
      print("\n********** テスト実行：00402_element_check_00379 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.obj;
      print(consistency.pbchg_strecd.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.obj = testData1;
      print(consistency.pbchg_strecd.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.obj = testData2;
      print(consistency.pbchg_strecd.obj);
      expect(consistency.pbchg_strecd.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.obj = defalut;
      print(consistency.pbchg_strecd.obj);
      expect(consistency.pbchg_strecd.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00402_element_check_00379 **********\n\n");
    });

    test('00403_element_check_00380', () async {
      print("\n********** テスト実行：00403_element_check_00380 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.condi;
      print(consistency.pbchg_strecd.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.condi = testData1;
      print(consistency.pbchg_strecd.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.condi = testData2;
      print(consistency.pbchg_strecd.condi);
      expect(consistency.pbchg_strecd.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.condi = defalut;
      print(consistency.pbchg_strecd.condi);
      expect(consistency.pbchg_strecd.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00403_element_check_00380 **********\n\n");
    });

    test('00404_element_check_00381', () async {
      print("\n********** テスト実行：00404_element_check_00381 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.typ;
      print(consistency.pbchg_strecd.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.typ = testData1;
      print(consistency.pbchg_strecd.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.typ = testData2;
      print(consistency.pbchg_strecd.typ);
      expect(consistency.pbchg_strecd.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.typ = defalut;
      print(consistency.pbchg_strecd.typ);
      expect(consistency.pbchg_strecd.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00404_element_check_00381 **********\n\n");
    });

    test('00405_element_check_00382', () async {
      print("\n********** テスト実行：00405_element_check_00382 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.ini_typ;
      print(consistency.pbchg_strecd.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.ini_typ = testData1;
      print(consistency.pbchg_strecd.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.ini_typ = testData2;
      print(consistency.pbchg_strecd.ini_typ);
      expect(consistency.pbchg_strecd.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.ini_typ = defalut;
      print(consistency.pbchg_strecd.ini_typ);
      expect(consistency.pbchg_strecd.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00405_element_check_00382 **********\n\n");
    });

    test('00406_element_check_00383', () async {
      print("\n********** テスト実行：00406_element_check_00383 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.file;
      print(consistency.pbchg_strecd.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.file = testData1s;
      print(consistency.pbchg_strecd.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.file = testData2s;
      print(consistency.pbchg_strecd.file);
      expect(consistency.pbchg_strecd.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.file = defalut;
      print(consistency.pbchg_strecd.file);
      expect(consistency.pbchg_strecd.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00406_element_check_00383 **********\n\n");
    });

    test('00407_element_check_00384', () async {
      print("\n********** テスト実行：00407_element_check_00384 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.section;
      print(consistency.pbchg_strecd.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.section = testData1s;
      print(consistency.pbchg_strecd.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.section = testData2s;
      print(consistency.pbchg_strecd.section);
      expect(consistency.pbchg_strecd.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.section = defalut;
      print(consistency.pbchg_strecd.section);
      expect(consistency.pbchg_strecd.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00407_element_check_00384 **********\n\n");
    });

    test('00408_element_check_00385', () async {
      print("\n********** テスト実行：00408_element_check_00385 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_strecd.keyword;
      print(consistency.pbchg_strecd.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_strecd.keyword = testData1s;
      print(consistency.pbchg_strecd.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_strecd.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_strecd.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_strecd.keyword = testData2s;
      print(consistency.pbchg_strecd.keyword);
      expect(consistency.pbchg_strecd.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_strecd.keyword = defalut;
      print(consistency.pbchg_strecd.keyword);
      expect(consistency.pbchg_strecd.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_strecd.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00408_element_check_00385 **********\n\n");
    });

    test('00409_element_check_00386', () async {
      print("\n********** テスト実行：00409_element_check_00386 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.title;
      print(consistency.pbchg_interval.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.title = testData1s;
      print(consistency.pbchg_interval.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.title = testData2s;
      print(consistency.pbchg_interval.title);
      expect(consistency.pbchg_interval.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.title = defalut;
      print(consistency.pbchg_interval.title);
      expect(consistency.pbchg_interval.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00409_element_check_00386 **********\n\n");
    });

    test('00410_element_check_00387', () async {
      print("\n********** テスト実行：00410_element_check_00387 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.obj;
      print(consistency.pbchg_interval.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.obj = testData1;
      print(consistency.pbchg_interval.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.obj = testData2;
      print(consistency.pbchg_interval.obj);
      expect(consistency.pbchg_interval.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.obj = defalut;
      print(consistency.pbchg_interval.obj);
      expect(consistency.pbchg_interval.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00410_element_check_00387 **********\n\n");
    });

    test('00411_element_check_00388', () async {
      print("\n********** テスト実行：00411_element_check_00388 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.condi;
      print(consistency.pbchg_interval.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.condi = testData1;
      print(consistency.pbchg_interval.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.condi = testData2;
      print(consistency.pbchg_interval.condi);
      expect(consistency.pbchg_interval.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.condi = defalut;
      print(consistency.pbchg_interval.condi);
      expect(consistency.pbchg_interval.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00411_element_check_00388 **********\n\n");
    });

    test('00412_element_check_00389', () async {
      print("\n********** テスト実行：00412_element_check_00389 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.typ;
      print(consistency.pbchg_interval.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.typ = testData1;
      print(consistency.pbchg_interval.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.typ = testData2;
      print(consistency.pbchg_interval.typ);
      expect(consistency.pbchg_interval.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.typ = defalut;
      print(consistency.pbchg_interval.typ);
      expect(consistency.pbchg_interval.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00412_element_check_00389 **********\n\n");
    });

    test('00413_element_check_00390', () async {
      print("\n********** テスト実行：00413_element_check_00390 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.ini_typ;
      print(consistency.pbchg_interval.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.ini_typ = testData1;
      print(consistency.pbchg_interval.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.ini_typ = testData2;
      print(consistency.pbchg_interval.ini_typ);
      expect(consistency.pbchg_interval.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.ini_typ = defalut;
      print(consistency.pbchg_interval.ini_typ);
      expect(consistency.pbchg_interval.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00413_element_check_00390 **********\n\n");
    });

    test('00414_element_check_00391', () async {
      print("\n********** テスト実行：00414_element_check_00391 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.file;
      print(consistency.pbchg_interval.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.file = testData1s;
      print(consistency.pbchg_interval.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.file = testData2s;
      print(consistency.pbchg_interval.file);
      expect(consistency.pbchg_interval.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.file = defalut;
      print(consistency.pbchg_interval.file);
      expect(consistency.pbchg_interval.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00414_element_check_00391 **********\n\n");
    });

    test('00415_element_check_00392', () async {
      print("\n********** テスト実行：00415_element_check_00392 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.section;
      print(consistency.pbchg_interval.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.section = testData1s;
      print(consistency.pbchg_interval.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.section = testData2s;
      print(consistency.pbchg_interval.section);
      expect(consistency.pbchg_interval.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.section = defalut;
      print(consistency.pbchg_interval.section);
      expect(consistency.pbchg_interval.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00415_element_check_00392 **********\n\n");
    });

    test('00416_element_check_00393', () async {
      print("\n********** テスト実行：00416_element_check_00393 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_interval.keyword;
      print(consistency.pbchg_interval.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_interval.keyword = testData1s;
      print(consistency.pbchg_interval.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_interval.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_interval.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_interval.keyword = testData2s;
      print(consistency.pbchg_interval.keyword);
      expect(consistency.pbchg_interval.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_interval.keyword = defalut;
      print(consistency.pbchg_interval.keyword);
      expect(consistency.pbchg_interval.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_interval.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00416_element_check_00393 **********\n\n");
    });

    test('00417_element_check_00394', () async {
      print("\n********** テスト実行：00417_element_check_00394 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.title;
      print(consistency.pbchg_cnt.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.title = testData1s;
      print(consistency.pbchg_cnt.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.title = testData2s;
      print(consistency.pbchg_cnt.title);
      expect(consistency.pbchg_cnt.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.title = defalut;
      print(consistency.pbchg_cnt.title);
      expect(consistency.pbchg_cnt.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00417_element_check_00394 **********\n\n");
    });

    test('00418_element_check_00395', () async {
      print("\n********** テスト実行：00418_element_check_00395 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.obj;
      print(consistency.pbchg_cnt.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.obj = testData1;
      print(consistency.pbchg_cnt.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.obj = testData2;
      print(consistency.pbchg_cnt.obj);
      expect(consistency.pbchg_cnt.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.obj = defalut;
      print(consistency.pbchg_cnt.obj);
      expect(consistency.pbchg_cnt.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00418_element_check_00395 **********\n\n");
    });

    test('00419_element_check_00396', () async {
      print("\n********** テスト実行：00419_element_check_00396 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.condi;
      print(consistency.pbchg_cnt.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.condi = testData1;
      print(consistency.pbchg_cnt.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.condi = testData2;
      print(consistency.pbchg_cnt.condi);
      expect(consistency.pbchg_cnt.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.condi = defalut;
      print(consistency.pbchg_cnt.condi);
      expect(consistency.pbchg_cnt.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00419_element_check_00396 **********\n\n");
    });

    test('00420_element_check_00397', () async {
      print("\n********** テスト実行：00420_element_check_00397 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.typ;
      print(consistency.pbchg_cnt.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.typ = testData1;
      print(consistency.pbchg_cnt.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.typ = testData2;
      print(consistency.pbchg_cnt.typ);
      expect(consistency.pbchg_cnt.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.typ = defalut;
      print(consistency.pbchg_cnt.typ);
      expect(consistency.pbchg_cnt.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00420_element_check_00397 **********\n\n");
    });

    test('00421_element_check_00398', () async {
      print("\n********** テスト実行：00421_element_check_00398 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.ini_typ;
      print(consistency.pbchg_cnt.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.ini_typ = testData1;
      print(consistency.pbchg_cnt.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.ini_typ = testData2;
      print(consistency.pbchg_cnt.ini_typ);
      expect(consistency.pbchg_cnt.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.ini_typ = defalut;
      print(consistency.pbchg_cnt.ini_typ);
      expect(consistency.pbchg_cnt.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00421_element_check_00398 **********\n\n");
    });

    test('00422_element_check_00399', () async {
      print("\n********** テスト実行：00422_element_check_00399 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.file;
      print(consistency.pbchg_cnt.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.file = testData1s;
      print(consistency.pbchg_cnt.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.file = testData2s;
      print(consistency.pbchg_cnt.file);
      expect(consistency.pbchg_cnt.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.file = defalut;
      print(consistency.pbchg_cnt.file);
      expect(consistency.pbchg_cnt.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00422_element_check_00399 **********\n\n");
    });

    test('00423_element_check_00400', () async {
      print("\n********** テスト実行：00423_element_check_00400 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.section;
      print(consistency.pbchg_cnt.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.section = testData1s;
      print(consistency.pbchg_cnt.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.section = testData2s;
      print(consistency.pbchg_cnt.section);
      expect(consistency.pbchg_cnt.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.section = defalut;
      print(consistency.pbchg_cnt.section);
      expect(consistency.pbchg_cnt.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00423_element_check_00400 **********\n\n");
    });

    test('00424_element_check_00401', () async {
      print("\n********** テスト実行：00424_element_check_00401 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnt.keyword;
      print(consistency.pbchg_cnt.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnt.keyword = testData1s;
      print(consistency.pbchg_cnt.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnt.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnt.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnt.keyword = testData2s;
      print(consistency.pbchg_cnt.keyword);
      expect(consistency.pbchg_cnt.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnt.keyword = defalut;
      print(consistency.pbchg_cnt.keyword);
      expect(consistency.pbchg_cnt.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnt.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00424_element_check_00401 **********\n\n");
    });

    test('00425_element_check_00402', () async {
      print("\n********** テスト実行：00425_element_check_00402 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.title;
      print(consistency.pbchg_month.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.title = testData1s;
      print(consistency.pbchg_month.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.title = testData2s;
      print(consistency.pbchg_month.title);
      expect(consistency.pbchg_month.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.title = defalut;
      print(consistency.pbchg_month.title);
      expect(consistency.pbchg_month.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00425_element_check_00402 **********\n\n");
    });

    test('00426_element_check_00403', () async {
      print("\n********** テスト実行：00426_element_check_00403 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.obj;
      print(consistency.pbchg_month.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.obj = testData1;
      print(consistency.pbchg_month.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.obj = testData2;
      print(consistency.pbchg_month.obj);
      expect(consistency.pbchg_month.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.obj = defalut;
      print(consistency.pbchg_month.obj);
      expect(consistency.pbchg_month.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00426_element_check_00403 **********\n\n");
    });

    test('00427_element_check_00404', () async {
      print("\n********** テスト実行：00427_element_check_00404 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.condi;
      print(consistency.pbchg_month.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.condi = testData1;
      print(consistency.pbchg_month.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.condi = testData2;
      print(consistency.pbchg_month.condi);
      expect(consistency.pbchg_month.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.condi = defalut;
      print(consistency.pbchg_month.condi);
      expect(consistency.pbchg_month.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00427_element_check_00404 **********\n\n");
    });

    test('00428_element_check_00405', () async {
      print("\n********** テスト実行：00428_element_check_00405 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.typ;
      print(consistency.pbchg_month.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.typ = testData1;
      print(consistency.pbchg_month.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.typ = testData2;
      print(consistency.pbchg_month.typ);
      expect(consistency.pbchg_month.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.typ = defalut;
      print(consistency.pbchg_month.typ);
      expect(consistency.pbchg_month.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00428_element_check_00405 **********\n\n");
    });

    test('00429_element_check_00406', () async {
      print("\n********** テスト実行：00429_element_check_00406 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.ini_typ;
      print(consistency.pbchg_month.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.ini_typ = testData1;
      print(consistency.pbchg_month.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.ini_typ = testData2;
      print(consistency.pbchg_month.ini_typ);
      expect(consistency.pbchg_month.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.ini_typ = defalut;
      print(consistency.pbchg_month.ini_typ);
      expect(consistency.pbchg_month.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00429_element_check_00406 **********\n\n");
    });

    test('00430_element_check_00407', () async {
      print("\n********** テスト実行：00430_element_check_00407 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.file;
      print(consistency.pbchg_month.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.file = testData1s;
      print(consistency.pbchg_month.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.file = testData2s;
      print(consistency.pbchg_month.file);
      expect(consistency.pbchg_month.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.file = defalut;
      print(consistency.pbchg_month.file);
      expect(consistency.pbchg_month.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00430_element_check_00407 **********\n\n");
    });

    test('00431_element_check_00408', () async {
      print("\n********** テスト実行：00431_element_check_00408 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.section;
      print(consistency.pbchg_month.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.section = testData1s;
      print(consistency.pbchg_month.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.section = testData2s;
      print(consistency.pbchg_month.section);
      expect(consistency.pbchg_month.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.section = defalut;
      print(consistency.pbchg_month.section);
      expect(consistency.pbchg_month.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00431_element_check_00408 **********\n\n");
    });

    test('00432_element_check_00409', () async {
      print("\n********** テスト実行：00432_element_check_00409 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_month.keyword;
      print(consistency.pbchg_month.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_month.keyword = testData1s;
      print(consistency.pbchg_month.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_month.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_month.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_month.keyword = testData2s;
      print(consistency.pbchg_month.keyword);
      expect(consistency.pbchg_month.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_month.keyword = defalut;
      print(consistency.pbchg_month.keyword);
      expect(consistency.pbchg_month.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_month.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00432_element_check_00409 **********\n\n");
    });

    test('00433_element_check_00410', () async {
      print("\n********** テスト実行：00433_element_check_00410 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.title;
      print(consistency.pbchg_steps.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.title = testData1s;
      print(consistency.pbchg_steps.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.title = testData2s;
      print(consistency.pbchg_steps.title);
      expect(consistency.pbchg_steps.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.title = defalut;
      print(consistency.pbchg_steps.title);
      expect(consistency.pbchg_steps.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00433_element_check_00410 **********\n\n");
    });

    test('00434_element_check_00411', () async {
      print("\n********** テスト実行：00434_element_check_00411 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.obj;
      print(consistency.pbchg_steps.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.obj = testData1;
      print(consistency.pbchg_steps.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.obj = testData2;
      print(consistency.pbchg_steps.obj);
      expect(consistency.pbchg_steps.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.obj = defalut;
      print(consistency.pbchg_steps.obj);
      expect(consistency.pbchg_steps.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00434_element_check_00411 **********\n\n");
    });

    test('00435_element_check_00412', () async {
      print("\n********** テスト実行：00435_element_check_00412 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.condi;
      print(consistency.pbchg_steps.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.condi = testData1;
      print(consistency.pbchg_steps.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.condi = testData2;
      print(consistency.pbchg_steps.condi);
      expect(consistency.pbchg_steps.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.condi = defalut;
      print(consistency.pbchg_steps.condi);
      expect(consistency.pbchg_steps.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00435_element_check_00412 **********\n\n");
    });

    test('00436_element_check_00413', () async {
      print("\n********** テスト実行：00436_element_check_00413 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.typ;
      print(consistency.pbchg_steps.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.typ = testData1;
      print(consistency.pbchg_steps.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.typ = testData2;
      print(consistency.pbchg_steps.typ);
      expect(consistency.pbchg_steps.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.typ = defalut;
      print(consistency.pbchg_steps.typ);
      expect(consistency.pbchg_steps.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00436_element_check_00413 **********\n\n");
    });

    test('00437_element_check_00414', () async {
      print("\n********** テスト実行：00437_element_check_00414 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.ini_typ;
      print(consistency.pbchg_steps.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.ini_typ = testData1;
      print(consistency.pbchg_steps.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.ini_typ = testData2;
      print(consistency.pbchg_steps.ini_typ);
      expect(consistency.pbchg_steps.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.ini_typ = defalut;
      print(consistency.pbchg_steps.ini_typ);
      expect(consistency.pbchg_steps.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00437_element_check_00414 **********\n\n");
    });

    test('00438_element_check_00415', () async {
      print("\n********** テスト実行：00438_element_check_00415 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.file;
      print(consistency.pbchg_steps.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.file = testData1s;
      print(consistency.pbchg_steps.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.file = testData2s;
      print(consistency.pbchg_steps.file);
      expect(consistency.pbchg_steps.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.file = defalut;
      print(consistency.pbchg_steps.file);
      expect(consistency.pbchg_steps.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00438_element_check_00415 **********\n\n");
    });

    test('00439_element_check_00416', () async {
      print("\n********** テスト実行：00439_element_check_00416 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.section;
      print(consistency.pbchg_steps.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.section = testData1s;
      print(consistency.pbchg_steps.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.section = testData2s;
      print(consistency.pbchg_steps.section);
      expect(consistency.pbchg_steps.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.section = defalut;
      print(consistency.pbchg_steps.section);
      expect(consistency.pbchg_steps.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00439_element_check_00416 **********\n\n");
    });

    test('00440_element_check_00417', () async {
      print("\n********** テスト実行：00440_element_check_00417 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_steps.keyword;
      print(consistency.pbchg_steps.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_steps.keyword = testData1s;
      print(consistency.pbchg_steps.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_steps.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_steps.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_steps.keyword = testData2s;
      print(consistency.pbchg_steps.keyword);
      expect(consistency.pbchg_steps.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_steps.keyword = defalut;
      print(consistency.pbchg_steps.keyword);
      expect(consistency.pbchg_steps.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_steps.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00440_element_check_00417 **********\n\n");
    });

    test('00441_element_check_00418', () async {
      print("\n********** テスト実行：00441_element_check_00418 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.title;
      print(consistency.pbchg_res_sel.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.title = testData1s;
      print(consistency.pbchg_res_sel.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.title = testData2s;
      print(consistency.pbchg_res_sel.title);
      expect(consistency.pbchg_res_sel.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.title = defalut;
      print(consistency.pbchg_res_sel.title);
      expect(consistency.pbchg_res_sel.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00441_element_check_00418 **********\n\n");
    });

    test('00442_element_check_00419', () async {
      print("\n********** テスト実行：00442_element_check_00419 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.obj;
      print(consistency.pbchg_res_sel.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.obj = testData1;
      print(consistency.pbchg_res_sel.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.obj = testData2;
      print(consistency.pbchg_res_sel.obj);
      expect(consistency.pbchg_res_sel.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.obj = defalut;
      print(consistency.pbchg_res_sel.obj);
      expect(consistency.pbchg_res_sel.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00442_element_check_00419 **********\n\n");
    });

    test('00443_element_check_00420', () async {
      print("\n********** テスト実行：00443_element_check_00420 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.condi;
      print(consistency.pbchg_res_sel.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.condi = testData1;
      print(consistency.pbchg_res_sel.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.condi = testData2;
      print(consistency.pbchg_res_sel.condi);
      expect(consistency.pbchg_res_sel.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.condi = defalut;
      print(consistency.pbchg_res_sel.condi);
      expect(consistency.pbchg_res_sel.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00443_element_check_00420 **********\n\n");
    });

    test('00444_element_check_00421', () async {
      print("\n********** テスト実行：00444_element_check_00421 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.typ;
      print(consistency.pbchg_res_sel.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.typ = testData1;
      print(consistency.pbchg_res_sel.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.typ = testData2;
      print(consistency.pbchg_res_sel.typ);
      expect(consistency.pbchg_res_sel.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.typ = defalut;
      print(consistency.pbchg_res_sel.typ);
      expect(consistency.pbchg_res_sel.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00444_element_check_00421 **********\n\n");
    });

    test('00445_element_check_00422', () async {
      print("\n********** テスト実行：00445_element_check_00422 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.ini_typ;
      print(consistency.pbchg_res_sel.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.ini_typ = testData1;
      print(consistency.pbchg_res_sel.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.ini_typ = testData2;
      print(consistency.pbchg_res_sel.ini_typ);
      expect(consistency.pbchg_res_sel.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.ini_typ = defalut;
      print(consistency.pbchg_res_sel.ini_typ);
      expect(consistency.pbchg_res_sel.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00445_element_check_00422 **********\n\n");
    });

    test('00446_element_check_00423', () async {
      print("\n********** テスト実行：00446_element_check_00423 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.file;
      print(consistency.pbchg_res_sel.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.file = testData1s;
      print(consistency.pbchg_res_sel.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.file = testData2s;
      print(consistency.pbchg_res_sel.file);
      expect(consistency.pbchg_res_sel.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.file = defalut;
      print(consistency.pbchg_res_sel.file);
      expect(consistency.pbchg_res_sel.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00446_element_check_00423 **********\n\n");
    });

    test('00447_element_check_00424', () async {
      print("\n********** テスト実行：00447_element_check_00424 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.section;
      print(consistency.pbchg_res_sel.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.section = testData1s;
      print(consistency.pbchg_res_sel.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.section = testData2s;
      print(consistency.pbchg_res_sel.section);
      expect(consistency.pbchg_res_sel.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.section = defalut;
      print(consistency.pbchg_res_sel.section);
      expect(consistency.pbchg_res_sel.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00447_element_check_00424 **********\n\n");
    });

    test('00448_element_check_00425', () async {
      print("\n********** テスト実行：00448_element_check_00425 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_res_sel.keyword;
      print(consistency.pbchg_res_sel.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_res_sel.keyword = testData1s;
      print(consistency.pbchg_res_sel.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_res_sel.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_res_sel.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_res_sel.keyword = testData2s;
      print(consistency.pbchg_res_sel.keyword);
      expect(consistency.pbchg_res_sel.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_res_sel.keyword = defalut;
      print(consistency.pbchg_res_sel.keyword);
      expect(consistency.pbchg_res_sel.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_res_sel.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00448_element_check_00425 **********\n\n");
    });

    test('00449_element_check_00426', () async {
      print("\n********** テスト実行：00449_element_check_00426 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.title;
      print(consistency.pbchg_fee1_sel.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.title = testData1s;
      print(consistency.pbchg_fee1_sel.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.title = testData2s;
      print(consistency.pbchg_fee1_sel.title);
      expect(consistency.pbchg_fee1_sel.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.title = defalut;
      print(consistency.pbchg_fee1_sel.title);
      expect(consistency.pbchg_fee1_sel.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00449_element_check_00426 **********\n\n");
    });

    test('00450_element_check_00427', () async {
      print("\n********** テスト実行：00450_element_check_00427 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.obj;
      print(consistency.pbchg_fee1_sel.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.obj = testData1;
      print(consistency.pbchg_fee1_sel.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.obj = testData2;
      print(consistency.pbchg_fee1_sel.obj);
      expect(consistency.pbchg_fee1_sel.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.obj = defalut;
      print(consistency.pbchg_fee1_sel.obj);
      expect(consistency.pbchg_fee1_sel.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00450_element_check_00427 **********\n\n");
    });

    test('00451_element_check_00428', () async {
      print("\n********** テスト実行：00451_element_check_00428 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.condi;
      print(consistency.pbchg_fee1_sel.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.condi = testData1;
      print(consistency.pbchg_fee1_sel.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.condi = testData2;
      print(consistency.pbchg_fee1_sel.condi);
      expect(consistency.pbchg_fee1_sel.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.condi = defalut;
      print(consistency.pbchg_fee1_sel.condi);
      expect(consistency.pbchg_fee1_sel.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00451_element_check_00428 **********\n\n");
    });

    test('00452_element_check_00429', () async {
      print("\n********** テスト実行：00452_element_check_00429 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.typ;
      print(consistency.pbchg_fee1_sel.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.typ = testData1;
      print(consistency.pbchg_fee1_sel.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.typ = testData2;
      print(consistency.pbchg_fee1_sel.typ);
      expect(consistency.pbchg_fee1_sel.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.typ = defalut;
      print(consistency.pbchg_fee1_sel.typ);
      expect(consistency.pbchg_fee1_sel.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00452_element_check_00429 **********\n\n");
    });

    test('00453_element_check_00430', () async {
      print("\n********** テスト実行：00453_element_check_00430 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.ini_typ;
      print(consistency.pbchg_fee1_sel.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.ini_typ = testData1;
      print(consistency.pbchg_fee1_sel.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.ini_typ = testData2;
      print(consistency.pbchg_fee1_sel.ini_typ);
      expect(consistency.pbchg_fee1_sel.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.ini_typ = defalut;
      print(consistency.pbchg_fee1_sel.ini_typ);
      expect(consistency.pbchg_fee1_sel.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00453_element_check_00430 **********\n\n");
    });

    test('00454_element_check_00431', () async {
      print("\n********** テスト実行：00454_element_check_00431 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.file;
      print(consistency.pbchg_fee1_sel.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.file = testData1s;
      print(consistency.pbchg_fee1_sel.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.file = testData2s;
      print(consistency.pbchg_fee1_sel.file);
      expect(consistency.pbchg_fee1_sel.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.file = defalut;
      print(consistency.pbchg_fee1_sel.file);
      expect(consistency.pbchg_fee1_sel.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00454_element_check_00431 **********\n\n");
    });

    test('00455_element_check_00432', () async {
      print("\n********** テスト実行：00455_element_check_00432 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.section;
      print(consistency.pbchg_fee1_sel.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.section = testData1s;
      print(consistency.pbchg_fee1_sel.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.section = testData2s;
      print(consistency.pbchg_fee1_sel.section);
      expect(consistency.pbchg_fee1_sel.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.section = defalut;
      print(consistency.pbchg_fee1_sel.section);
      expect(consistency.pbchg_fee1_sel.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00455_element_check_00432 **********\n\n");
    });

    test('00456_element_check_00433', () async {
      print("\n********** テスト実行：00456_element_check_00433 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee1_sel.keyword;
      print(consistency.pbchg_fee1_sel.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee1_sel.keyword = testData1s;
      print(consistency.pbchg_fee1_sel.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee1_sel.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee1_sel.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee1_sel.keyword = testData2s;
      print(consistency.pbchg_fee1_sel.keyword);
      expect(consistency.pbchg_fee1_sel.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee1_sel.keyword = defalut;
      print(consistency.pbchg_fee1_sel.keyword);
      expect(consistency.pbchg_fee1_sel.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee1_sel.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00456_element_check_00433 **********\n\n");
    });

    test('00457_element_check_00434', () async {
      print("\n********** テスト実行：00457_element_check_00434 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.title;
      print(consistency.pbchg_fee2_sel.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.title = testData1s;
      print(consistency.pbchg_fee2_sel.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.title = testData2s;
      print(consistency.pbchg_fee2_sel.title);
      expect(consistency.pbchg_fee2_sel.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.title = defalut;
      print(consistency.pbchg_fee2_sel.title);
      expect(consistency.pbchg_fee2_sel.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00457_element_check_00434 **********\n\n");
    });

    test('00458_element_check_00435', () async {
      print("\n********** テスト実行：00458_element_check_00435 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.obj;
      print(consistency.pbchg_fee2_sel.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.obj = testData1;
      print(consistency.pbchg_fee2_sel.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.obj = testData2;
      print(consistency.pbchg_fee2_sel.obj);
      expect(consistency.pbchg_fee2_sel.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.obj = defalut;
      print(consistency.pbchg_fee2_sel.obj);
      expect(consistency.pbchg_fee2_sel.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00458_element_check_00435 **********\n\n");
    });

    test('00459_element_check_00436', () async {
      print("\n********** テスト実行：00459_element_check_00436 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.condi;
      print(consistency.pbchg_fee2_sel.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.condi = testData1;
      print(consistency.pbchg_fee2_sel.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.condi = testData2;
      print(consistency.pbchg_fee2_sel.condi);
      expect(consistency.pbchg_fee2_sel.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.condi = defalut;
      print(consistency.pbchg_fee2_sel.condi);
      expect(consistency.pbchg_fee2_sel.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00459_element_check_00436 **********\n\n");
    });

    test('00460_element_check_00437', () async {
      print("\n********** テスト実行：00460_element_check_00437 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.typ;
      print(consistency.pbchg_fee2_sel.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.typ = testData1;
      print(consistency.pbchg_fee2_sel.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.typ = testData2;
      print(consistency.pbchg_fee2_sel.typ);
      expect(consistency.pbchg_fee2_sel.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.typ = defalut;
      print(consistency.pbchg_fee2_sel.typ);
      expect(consistency.pbchg_fee2_sel.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00460_element_check_00437 **********\n\n");
    });

    test('00461_element_check_00438', () async {
      print("\n********** テスト実行：00461_element_check_00438 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.ini_typ;
      print(consistency.pbchg_fee2_sel.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.ini_typ = testData1;
      print(consistency.pbchg_fee2_sel.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.ini_typ = testData2;
      print(consistency.pbchg_fee2_sel.ini_typ);
      expect(consistency.pbchg_fee2_sel.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.ini_typ = defalut;
      print(consistency.pbchg_fee2_sel.ini_typ);
      expect(consistency.pbchg_fee2_sel.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00461_element_check_00438 **********\n\n");
    });

    test('00462_element_check_00439', () async {
      print("\n********** テスト実行：00462_element_check_00439 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.file;
      print(consistency.pbchg_fee2_sel.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.file = testData1s;
      print(consistency.pbchg_fee2_sel.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.file = testData2s;
      print(consistency.pbchg_fee2_sel.file);
      expect(consistency.pbchg_fee2_sel.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.file = defalut;
      print(consistency.pbchg_fee2_sel.file);
      expect(consistency.pbchg_fee2_sel.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00462_element_check_00439 **********\n\n");
    });

    test('00463_element_check_00440', () async {
      print("\n********** テスト実行：00463_element_check_00440 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.section;
      print(consistency.pbchg_fee2_sel.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.section = testData1s;
      print(consistency.pbchg_fee2_sel.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.section = testData2s;
      print(consistency.pbchg_fee2_sel.section);
      expect(consistency.pbchg_fee2_sel.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.section = defalut;
      print(consistency.pbchg_fee2_sel.section);
      expect(consistency.pbchg_fee2_sel.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00463_element_check_00440 **********\n\n");
    });

    test('00464_element_check_00441', () async {
      print("\n********** テスト実行：00464_element_check_00441 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_fee2_sel.keyword;
      print(consistency.pbchg_fee2_sel.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_fee2_sel.keyword = testData1s;
      print(consistency.pbchg_fee2_sel.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_fee2_sel.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_fee2_sel.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_fee2_sel.keyword = testData2s;
      print(consistency.pbchg_fee2_sel.keyword);
      expect(consistency.pbchg_fee2_sel.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_fee2_sel.keyword = defalut;
      print(consistency.pbchg_fee2_sel.keyword);
      expect(consistency.pbchg_fee2_sel.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_fee2_sel.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00464_element_check_00441 **********\n\n");
    });

    test('00465_element_check_00442', () async {
      print("\n********** テスト実行：00465_element_check_00442 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.title;
      print(consistency.pbchg_cnct.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.title = testData1s;
      print(consistency.pbchg_cnct.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.title = testData2s;
      print(consistency.pbchg_cnct.title);
      expect(consistency.pbchg_cnct.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.title = defalut;
      print(consistency.pbchg_cnct.title);
      expect(consistency.pbchg_cnct.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00465_element_check_00442 **********\n\n");
    });

    test('00466_element_check_00443', () async {
      print("\n********** テスト実行：00466_element_check_00443 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.obj;
      print(consistency.pbchg_cnct.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.obj = testData1;
      print(consistency.pbchg_cnct.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.obj = testData2;
      print(consistency.pbchg_cnct.obj);
      expect(consistency.pbchg_cnct.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.obj = defalut;
      print(consistency.pbchg_cnct.obj);
      expect(consistency.pbchg_cnct.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00466_element_check_00443 **********\n\n");
    });

    test('00467_element_check_00444', () async {
      print("\n********** テスト実行：00467_element_check_00444 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.condi;
      print(consistency.pbchg_cnct.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.condi = testData1;
      print(consistency.pbchg_cnct.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.condi = testData2;
      print(consistency.pbchg_cnct.condi);
      expect(consistency.pbchg_cnct.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.condi = defalut;
      print(consistency.pbchg_cnct.condi);
      expect(consistency.pbchg_cnct.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00467_element_check_00444 **********\n\n");
    });

    test('00468_element_check_00445', () async {
      print("\n********** テスト実行：00468_element_check_00445 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.typ;
      print(consistency.pbchg_cnct.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.typ = testData1;
      print(consistency.pbchg_cnct.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.typ = testData2;
      print(consistency.pbchg_cnct.typ);
      expect(consistency.pbchg_cnct.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.typ = defalut;
      print(consistency.pbchg_cnct.typ);
      expect(consistency.pbchg_cnct.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00468_element_check_00445 **********\n\n");
    });

    test('00469_element_check_00446', () async {
      print("\n********** テスト実行：00469_element_check_00446 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.ini_typ;
      print(consistency.pbchg_cnct.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.ini_typ = testData1;
      print(consistency.pbchg_cnct.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.ini_typ = testData2;
      print(consistency.pbchg_cnct.ini_typ);
      expect(consistency.pbchg_cnct.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.ini_typ = defalut;
      print(consistency.pbchg_cnct.ini_typ);
      expect(consistency.pbchg_cnct.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00469_element_check_00446 **********\n\n");
    });

    test('00470_element_check_00447', () async {
      print("\n********** テスト実行：00470_element_check_00447 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.file;
      print(consistency.pbchg_cnct.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.file = testData1s;
      print(consistency.pbchg_cnct.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.file = testData2s;
      print(consistency.pbchg_cnct.file);
      expect(consistency.pbchg_cnct.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.file = defalut;
      print(consistency.pbchg_cnct.file);
      expect(consistency.pbchg_cnct.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00470_element_check_00447 **********\n\n");
    });

    test('00471_element_check_00448', () async {
      print("\n********** テスト実行：00471_element_check_00448 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.section;
      print(consistency.pbchg_cnct.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.section = testData1s;
      print(consistency.pbchg_cnct.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.section = testData2s;
      print(consistency.pbchg_cnct.section);
      expect(consistency.pbchg_cnct.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.section = defalut;
      print(consistency.pbchg_cnct.section);
      expect(consistency.pbchg_cnct.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00471_element_check_00448 **********\n\n");
    });

    test('00472_element_check_00449', () async {
      print("\n********** テスト実行：00472_element_check_00449 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_cnct.keyword;
      print(consistency.pbchg_cnct.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_cnct.keyword = testData1s;
      print(consistency.pbchg_cnct.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_cnct.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_cnct.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_cnct.keyword = testData2s;
      print(consistency.pbchg_cnct.keyword);
      expect(consistency.pbchg_cnct.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_cnct.keyword = defalut;
      print(consistency.pbchg_cnct.keyword);
      expect(consistency.pbchg_cnct.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_cnct.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00472_element_check_00449 **********\n\n");
    });

    test('00473_element_check_00450', () async {
      print("\n********** テスト実行：00473_element_check_00450 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.title;
      print(consistency.pbchg_rd_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.title = testData1s;
      print(consistency.pbchg_rd_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.title = testData2s;
      print(consistency.pbchg_rd_timeout.title);
      expect(consistency.pbchg_rd_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.title = defalut;
      print(consistency.pbchg_rd_timeout.title);
      expect(consistency.pbchg_rd_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00473_element_check_00450 **********\n\n");
    });

    test('00474_element_check_00451', () async {
      print("\n********** テスト実行：00474_element_check_00451 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.obj;
      print(consistency.pbchg_rd_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.obj = testData1;
      print(consistency.pbchg_rd_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.obj = testData2;
      print(consistency.pbchg_rd_timeout.obj);
      expect(consistency.pbchg_rd_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.obj = defalut;
      print(consistency.pbchg_rd_timeout.obj);
      expect(consistency.pbchg_rd_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00474_element_check_00451 **********\n\n");
    });

    test('00475_element_check_00452', () async {
      print("\n********** テスト実行：00475_element_check_00452 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.condi;
      print(consistency.pbchg_rd_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.condi = testData1;
      print(consistency.pbchg_rd_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.condi = testData2;
      print(consistency.pbchg_rd_timeout.condi);
      expect(consistency.pbchg_rd_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.condi = defalut;
      print(consistency.pbchg_rd_timeout.condi);
      expect(consistency.pbchg_rd_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00475_element_check_00452 **********\n\n");
    });

    test('00476_element_check_00453', () async {
      print("\n********** テスト実行：00476_element_check_00453 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.typ;
      print(consistency.pbchg_rd_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.typ = testData1;
      print(consistency.pbchg_rd_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.typ = testData2;
      print(consistency.pbchg_rd_timeout.typ);
      expect(consistency.pbchg_rd_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.typ = defalut;
      print(consistency.pbchg_rd_timeout.typ);
      expect(consistency.pbchg_rd_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00476_element_check_00453 **********\n\n");
    });

    test('00477_element_check_00454', () async {
      print("\n********** テスト実行：00477_element_check_00454 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.ini_typ;
      print(consistency.pbchg_rd_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.ini_typ = testData1;
      print(consistency.pbchg_rd_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.ini_typ = testData2;
      print(consistency.pbchg_rd_timeout.ini_typ);
      expect(consistency.pbchg_rd_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.ini_typ = defalut;
      print(consistency.pbchg_rd_timeout.ini_typ);
      expect(consistency.pbchg_rd_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00477_element_check_00454 **********\n\n");
    });

    test('00478_element_check_00455', () async {
      print("\n********** テスト実行：00478_element_check_00455 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.file;
      print(consistency.pbchg_rd_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.file = testData1s;
      print(consistency.pbchg_rd_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.file = testData2s;
      print(consistency.pbchg_rd_timeout.file);
      expect(consistency.pbchg_rd_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.file = defalut;
      print(consistency.pbchg_rd_timeout.file);
      expect(consistency.pbchg_rd_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00478_element_check_00455 **********\n\n");
    });

    test('00479_element_check_00456', () async {
      print("\n********** テスト実行：00479_element_check_00456 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.section;
      print(consistency.pbchg_rd_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.section = testData1s;
      print(consistency.pbchg_rd_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.section = testData2s;
      print(consistency.pbchg_rd_timeout.section);
      expect(consistency.pbchg_rd_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.section = defalut;
      print(consistency.pbchg_rd_timeout.section);
      expect(consistency.pbchg_rd_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00479_element_check_00456 **********\n\n");
    });

    test('00480_element_check_00457', () async {
      print("\n********** テスト実行：00480_element_check_00457 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_rd_timeout.keyword;
      print(consistency.pbchg_rd_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_rd_timeout.keyword = testData1s;
      print(consistency.pbchg_rd_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_rd_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_rd_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_rd_timeout.keyword = testData2s;
      print(consistency.pbchg_rd_timeout.keyword);
      expect(consistency.pbchg_rd_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_rd_timeout.keyword = defalut;
      print(consistency.pbchg_rd_timeout.keyword);
      expect(consistency.pbchg_rd_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_rd_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00480_element_check_00457 **********\n\n");
    });

    test('00481_element_check_00458', () async {
      print("\n********** テスト実行：00481_element_check_00458 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.title;
      print(consistency.pbchg_wt_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.title = testData1s;
      print(consistency.pbchg_wt_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.title = testData2s;
      print(consistency.pbchg_wt_timeout.title);
      expect(consistency.pbchg_wt_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.title = defalut;
      print(consistency.pbchg_wt_timeout.title);
      expect(consistency.pbchg_wt_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00481_element_check_00458 **********\n\n");
    });

    test('00482_element_check_00459', () async {
      print("\n********** テスト実行：00482_element_check_00459 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.obj;
      print(consistency.pbchg_wt_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.obj = testData1;
      print(consistency.pbchg_wt_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.obj = testData2;
      print(consistency.pbchg_wt_timeout.obj);
      expect(consistency.pbchg_wt_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.obj = defalut;
      print(consistency.pbchg_wt_timeout.obj);
      expect(consistency.pbchg_wt_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00482_element_check_00459 **********\n\n");
    });

    test('00483_element_check_00460', () async {
      print("\n********** テスト実行：00483_element_check_00460 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.condi;
      print(consistency.pbchg_wt_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.condi = testData1;
      print(consistency.pbchg_wt_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.condi = testData2;
      print(consistency.pbchg_wt_timeout.condi);
      expect(consistency.pbchg_wt_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.condi = defalut;
      print(consistency.pbchg_wt_timeout.condi);
      expect(consistency.pbchg_wt_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00483_element_check_00460 **********\n\n");
    });

    test('00484_element_check_00461', () async {
      print("\n********** テスト実行：00484_element_check_00461 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.typ;
      print(consistency.pbchg_wt_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.typ = testData1;
      print(consistency.pbchg_wt_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.typ = testData2;
      print(consistency.pbchg_wt_timeout.typ);
      expect(consistency.pbchg_wt_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.typ = defalut;
      print(consistency.pbchg_wt_timeout.typ);
      expect(consistency.pbchg_wt_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00484_element_check_00461 **********\n\n");
    });

    test('00485_element_check_00462', () async {
      print("\n********** テスト実行：00485_element_check_00462 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.ini_typ;
      print(consistency.pbchg_wt_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.ini_typ = testData1;
      print(consistency.pbchg_wt_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.ini_typ = testData2;
      print(consistency.pbchg_wt_timeout.ini_typ);
      expect(consistency.pbchg_wt_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.ini_typ = defalut;
      print(consistency.pbchg_wt_timeout.ini_typ);
      expect(consistency.pbchg_wt_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00485_element_check_00462 **********\n\n");
    });

    test('00486_element_check_00463', () async {
      print("\n********** テスト実行：00486_element_check_00463 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.file;
      print(consistency.pbchg_wt_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.file = testData1s;
      print(consistency.pbchg_wt_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.file = testData2s;
      print(consistency.pbchg_wt_timeout.file);
      expect(consistency.pbchg_wt_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.file = defalut;
      print(consistency.pbchg_wt_timeout.file);
      expect(consistency.pbchg_wt_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00486_element_check_00463 **********\n\n");
    });

    test('00487_element_check_00464', () async {
      print("\n********** テスト実行：00487_element_check_00464 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.section;
      print(consistency.pbchg_wt_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.section = testData1s;
      print(consistency.pbchg_wt_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.section = testData2s;
      print(consistency.pbchg_wt_timeout.section);
      expect(consistency.pbchg_wt_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.section = defalut;
      print(consistency.pbchg_wt_timeout.section);
      expect(consistency.pbchg_wt_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00487_element_check_00464 **********\n\n");
    });

    test('00488_element_check_00465', () async {
      print("\n********** テスト実行：00488_element_check_00465 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.pbchg_wt_timeout.keyword;
      print(consistency.pbchg_wt_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.pbchg_wt_timeout.keyword = testData1s;
      print(consistency.pbchg_wt_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.pbchg_wt_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.pbchg_wt_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.pbchg_wt_timeout.keyword = testData2s;
      print(consistency.pbchg_wt_timeout.keyword);
      expect(consistency.pbchg_wt_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.pbchg_wt_timeout.keyword = defalut;
      print(consistency.pbchg_wt_timeout.keyword);
      expect(consistency.pbchg_wt_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.pbchg_wt_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00488_element_check_00465 **********\n\n");
    });

    test('00489_element_check_00466', () async {
      print("\n********** テスト実行：00489_element_check_00466 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.title;
      print(consistency.add_total.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.title = testData1s;
      print(consistency.add_total.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.title = testData2s;
      print(consistency.add_total.title);
      expect(consistency.add_total.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.title = defalut;
      print(consistency.add_total.title);
      expect(consistency.add_total.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00489_element_check_00466 **********\n\n");
    });

    test('00490_element_check_00467', () async {
      print("\n********** テスト実行：00490_element_check_00467 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.obj;
      print(consistency.add_total.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.obj = testData1;
      print(consistency.add_total.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.obj = testData2;
      print(consistency.add_total.obj);
      expect(consistency.add_total.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.obj = defalut;
      print(consistency.add_total.obj);
      expect(consistency.add_total.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00490_element_check_00467 **********\n\n");
    });

    test('00491_element_check_00468', () async {
      print("\n********** テスト実行：00491_element_check_00468 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.condi;
      print(consistency.add_total.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.condi = testData1;
      print(consistency.add_total.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.condi = testData2;
      print(consistency.add_total.condi);
      expect(consistency.add_total.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.condi = defalut;
      print(consistency.add_total.condi);
      expect(consistency.add_total.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00491_element_check_00468 **********\n\n");
    });

    test('00492_element_check_00469', () async {
      print("\n********** テスト実行：00492_element_check_00469 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.typ;
      print(consistency.add_total.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.typ = testData1;
      print(consistency.add_total.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.typ = testData2;
      print(consistency.add_total.typ);
      expect(consistency.add_total.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.typ = defalut;
      print(consistency.add_total.typ);
      expect(consistency.add_total.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00492_element_check_00469 **********\n\n");
    });

    test('00493_element_check_00470', () async {
      print("\n********** テスト実行：00493_element_check_00470 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.ini_typ;
      print(consistency.add_total.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.ini_typ = testData1;
      print(consistency.add_total.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.ini_typ = testData2;
      print(consistency.add_total.ini_typ);
      expect(consistency.add_total.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.ini_typ = defalut;
      print(consistency.add_total.ini_typ);
      expect(consistency.add_total.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00493_element_check_00470 **********\n\n");
    });

    test('00494_element_check_00471', () async {
      print("\n********** テスト実行：00494_element_check_00471 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.file;
      print(consistency.add_total.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.file = testData1s;
      print(consistency.add_total.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.file = testData2s;
      print(consistency.add_total.file);
      expect(consistency.add_total.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.file = defalut;
      print(consistency.add_total.file);
      expect(consistency.add_total.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00494_element_check_00471 **********\n\n");
    });

    test('00495_element_check_00472', () async {
      print("\n********** テスト実行：00495_element_check_00472 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.section;
      print(consistency.add_total.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.section = testData1s;
      print(consistency.add_total.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.section = testData2s;
      print(consistency.add_total.section);
      expect(consistency.add_total.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.section = defalut;
      print(consistency.add_total.section);
      expect(consistency.add_total.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00495_element_check_00472 **********\n\n");
    });

    test('00496_element_check_00473', () async {
      print("\n********** テスト実行：00496_element_check_00473 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_total.keyword;
      print(consistency.add_total.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_total.keyword = testData1s;
      print(consistency.add_total.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_total.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_total.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_total.keyword = testData2s;
      print(consistency.add_total.keyword);
      expect(consistency.add_total.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_total.keyword = defalut;
      print(consistency.add_total.keyword);
      expect(consistency.add_total.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_total.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00496_element_check_00473 **********\n\n");
    });

    test('00497_element_check_00474', () async {
      print("\n********** テスト実行：00497_element_check_00474 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.title;
      print(consistency.add_cust.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.title = testData1s;
      print(consistency.add_cust.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.title = testData2s;
      print(consistency.add_cust.title);
      expect(consistency.add_cust.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.title = defalut;
      print(consistency.add_cust.title);
      expect(consistency.add_cust.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00497_element_check_00474 **********\n\n");
    });

    test('00498_element_check_00475', () async {
      print("\n********** テスト実行：00498_element_check_00475 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.obj;
      print(consistency.add_cust.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.obj = testData1;
      print(consistency.add_cust.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.obj = testData2;
      print(consistency.add_cust.obj);
      expect(consistency.add_cust.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.obj = defalut;
      print(consistency.add_cust.obj);
      expect(consistency.add_cust.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00498_element_check_00475 **********\n\n");
    });

    test('00499_element_check_00476', () async {
      print("\n********** テスト実行：00499_element_check_00476 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.condi;
      print(consistency.add_cust.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.condi = testData1;
      print(consistency.add_cust.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.condi = testData2;
      print(consistency.add_cust.condi);
      expect(consistency.add_cust.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.condi = defalut;
      print(consistency.add_cust.condi);
      expect(consistency.add_cust.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00499_element_check_00476 **********\n\n");
    });

    test('00500_element_check_00477', () async {
      print("\n********** テスト実行：00500_element_check_00477 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.typ;
      print(consistency.add_cust.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.typ = testData1;
      print(consistency.add_cust.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.typ = testData2;
      print(consistency.add_cust.typ);
      expect(consistency.add_cust.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.typ = defalut;
      print(consistency.add_cust.typ);
      expect(consistency.add_cust.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00500_element_check_00477 **********\n\n");
    });

    test('00501_element_check_00478', () async {
      print("\n********** テスト実行：00501_element_check_00478 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.ini_typ;
      print(consistency.add_cust.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.ini_typ = testData1;
      print(consistency.add_cust.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.ini_typ = testData2;
      print(consistency.add_cust.ini_typ);
      expect(consistency.add_cust.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.ini_typ = defalut;
      print(consistency.add_cust.ini_typ);
      expect(consistency.add_cust.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00501_element_check_00478 **********\n\n");
    });

    test('00502_element_check_00479', () async {
      print("\n********** テスト実行：00502_element_check_00479 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.file;
      print(consistency.add_cust.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.file = testData1s;
      print(consistency.add_cust.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.file = testData2s;
      print(consistency.add_cust.file);
      expect(consistency.add_cust.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.file = defalut;
      print(consistency.add_cust.file);
      expect(consistency.add_cust.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00502_element_check_00479 **********\n\n");
    });

    test('00503_element_check_00480', () async {
      print("\n********** テスト実行：00503_element_check_00480 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.section;
      print(consistency.add_cust.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.section = testData1s;
      print(consistency.add_cust.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.section = testData2s;
      print(consistency.add_cust.section);
      expect(consistency.add_cust.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.section = defalut;
      print(consistency.add_cust.section);
      expect(consistency.add_cust.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00503_element_check_00480 **********\n\n");
    });

    test('00504_element_check_00481', () async {
      print("\n********** テスト実行：00504_element_check_00481 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.add_cust.keyword;
      print(consistency.add_cust.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.add_cust.keyword = testData1s;
      print(consistency.add_cust.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.add_cust.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.add_cust.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.add_cust.keyword = testData2s;
      print(consistency.add_cust.keyword);
      expect(consistency.add_cust.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.add_cust.keyword = defalut;
      print(consistency.add_cust.keyword);
      expect(consistency.add_cust.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.add_cust.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00504_element_check_00481 **********\n\n");
    });

    test('00505_element_check_00482', () async {
      print("\n********** テスト実行：00505_element_check_00482 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.title;
      print(consistency.realitmsend_cnct.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.title = testData1s;
      print(consistency.realitmsend_cnct.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.title = testData2s;
      print(consistency.realitmsend_cnct.title);
      expect(consistency.realitmsend_cnct.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.title = defalut;
      print(consistency.realitmsend_cnct.title);
      expect(consistency.realitmsend_cnct.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00505_element_check_00482 **********\n\n");
    });

    test('00506_element_check_00483', () async {
      print("\n********** テスト実行：00506_element_check_00483 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.obj;
      print(consistency.realitmsend_cnct.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.obj = testData1;
      print(consistency.realitmsend_cnct.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.obj = testData2;
      print(consistency.realitmsend_cnct.obj);
      expect(consistency.realitmsend_cnct.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.obj = defalut;
      print(consistency.realitmsend_cnct.obj);
      expect(consistency.realitmsend_cnct.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00506_element_check_00483 **********\n\n");
    });

    test('00507_element_check_00484', () async {
      print("\n********** テスト実行：00507_element_check_00484 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.condi;
      print(consistency.realitmsend_cnct.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.condi = testData1;
      print(consistency.realitmsend_cnct.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.condi = testData2;
      print(consistency.realitmsend_cnct.condi);
      expect(consistency.realitmsend_cnct.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.condi = defalut;
      print(consistency.realitmsend_cnct.condi);
      expect(consistency.realitmsend_cnct.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00507_element_check_00484 **********\n\n");
    });

    test('00508_element_check_00485', () async {
      print("\n********** テスト実行：00508_element_check_00485 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.typ;
      print(consistency.realitmsend_cnct.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.typ = testData1;
      print(consistency.realitmsend_cnct.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.typ = testData2;
      print(consistency.realitmsend_cnct.typ);
      expect(consistency.realitmsend_cnct.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.typ = defalut;
      print(consistency.realitmsend_cnct.typ);
      expect(consistency.realitmsend_cnct.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00508_element_check_00485 **********\n\n");
    });

    test('00509_element_check_00486', () async {
      print("\n********** テスト実行：00509_element_check_00486 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.ini_typ;
      print(consistency.realitmsend_cnct.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.ini_typ = testData1;
      print(consistency.realitmsend_cnct.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.ini_typ = testData2;
      print(consistency.realitmsend_cnct.ini_typ);
      expect(consistency.realitmsend_cnct.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.ini_typ = defalut;
      print(consistency.realitmsend_cnct.ini_typ);
      expect(consistency.realitmsend_cnct.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00509_element_check_00486 **********\n\n");
    });

    test('00510_element_check_00487', () async {
      print("\n********** テスト実行：00510_element_check_00487 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.file;
      print(consistency.realitmsend_cnct.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.file = testData1s;
      print(consistency.realitmsend_cnct.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.file = testData2s;
      print(consistency.realitmsend_cnct.file);
      expect(consistency.realitmsend_cnct.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.file = defalut;
      print(consistency.realitmsend_cnct.file);
      expect(consistency.realitmsend_cnct.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00510_element_check_00487 **********\n\n");
    });

    test('00511_element_check_00488', () async {
      print("\n********** テスト実行：00511_element_check_00488 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.section;
      print(consistency.realitmsend_cnct.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.section = testData1s;
      print(consistency.realitmsend_cnct.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.section = testData2s;
      print(consistency.realitmsend_cnct.section);
      expect(consistency.realitmsend_cnct.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.section = defalut;
      print(consistency.realitmsend_cnct.section);
      expect(consistency.realitmsend_cnct.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00511_element_check_00488 **********\n\n");
    });

    test('00512_element_check_00489', () async {
      print("\n********** テスト実行：00512_element_check_00489 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.realitmsend_cnct.keyword;
      print(consistency.realitmsend_cnct.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.realitmsend_cnct.keyword = testData1s;
      print(consistency.realitmsend_cnct.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.realitmsend_cnct.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.realitmsend_cnct.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.realitmsend_cnct.keyword = testData2s;
      print(consistency.realitmsend_cnct.keyword);
      expect(consistency.realitmsend_cnct.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.realitmsend_cnct.keyword = defalut;
      print(consistency.realitmsend_cnct.keyword);
      expect(consistency.realitmsend_cnct.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.realitmsend_cnct.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00512_element_check_00489 **********\n\n");
    });

    test('00513_element_check_00490', () async {
      print("\n********** テスト実行：00513_element_check_00490 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.title;
      print(consistency.ca_ipaddr.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.title = testData1s;
      print(consistency.ca_ipaddr.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.title = testData2s;
      print(consistency.ca_ipaddr.title);
      expect(consistency.ca_ipaddr.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.title = defalut;
      print(consistency.ca_ipaddr.title);
      expect(consistency.ca_ipaddr.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00513_element_check_00490 **********\n\n");
    });

    test('00514_element_check_00491', () async {
      print("\n********** テスト実行：00514_element_check_00491 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.obj;
      print(consistency.ca_ipaddr.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.obj = testData1;
      print(consistency.ca_ipaddr.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.obj = testData2;
      print(consistency.ca_ipaddr.obj);
      expect(consistency.ca_ipaddr.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.obj = defalut;
      print(consistency.ca_ipaddr.obj);
      expect(consistency.ca_ipaddr.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00514_element_check_00491 **********\n\n");
    });

    test('00515_element_check_00492', () async {
      print("\n********** テスト実行：00515_element_check_00492 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.condi;
      print(consistency.ca_ipaddr.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.condi = testData1;
      print(consistency.ca_ipaddr.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.condi = testData2;
      print(consistency.ca_ipaddr.condi);
      expect(consistency.ca_ipaddr.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.condi = defalut;
      print(consistency.ca_ipaddr.condi);
      expect(consistency.ca_ipaddr.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00515_element_check_00492 **********\n\n");
    });

    test('00516_element_check_00493', () async {
      print("\n********** テスト実行：00516_element_check_00493 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.typ;
      print(consistency.ca_ipaddr.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.typ = testData1;
      print(consistency.ca_ipaddr.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.typ = testData2;
      print(consistency.ca_ipaddr.typ);
      expect(consistency.ca_ipaddr.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.typ = defalut;
      print(consistency.ca_ipaddr.typ);
      expect(consistency.ca_ipaddr.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00516_element_check_00493 **********\n\n");
    });

    test('00517_element_check_00494', () async {
      print("\n********** テスト実行：00517_element_check_00494 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.ini_typ;
      print(consistency.ca_ipaddr.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.ini_typ = testData1;
      print(consistency.ca_ipaddr.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.ini_typ = testData2;
      print(consistency.ca_ipaddr.ini_typ);
      expect(consistency.ca_ipaddr.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.ini_typ = defalut;
      print(consistency.ca_ipaddr.ini_typ);
      expect(consistency.ca_ipaddr.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00517_element_check_00494 **********\n\n");
    });

    test('00518_element_check_00495', () async {
      print("\n********** テスト実行：00518_element_check_00495 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.file;
      print(consistency.ca_ipaddr.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.file = testData1s;
      print(consistency.ca_ipaddr.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.file = testData2s;
      print(consistency.ca_ipaddr.file);
      expect(consistency.ca_ipaddr.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.file = defalut;
      print(consistency.ca_ipaddr.file);
      expect(consistency.ca_ipaddr.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00518_element_check_00495 **********\n\n");
    });

    test('00519_element_check_00496', () async {
      print("\n********** テスト実行：00519_element_check_00496 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.section;
      print(consistency.ca_ipaddr.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.section = testData1s;
      print(consistency.ca_ipaddr.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.section = testData2s;
      print(consistency.ca_ipaddr.section);
      expect(consistency.ca_ipaddr.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.section = defalut;
      print(consistency.ca_ipaddr.section);
      expect(consistency.ca_ipaddr.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00519_element_check_00496 **********\n\n");
    });

    test('00520_element_check_00497', () async {
      print("\n********** テスト実行：00520_element_check_00497 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_ipaddr.keyword;
      print(consistency.ca_ipaddr.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_ipaddr.keyword = testData1s;
      print(consistency.ca_ipaddr.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_ipaddr.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_ipaddr.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_ipaddr.keyword = testData2s;
      print(consistency.ca_ipaddr.keyword);
      expect(consistency.ca_ipaddr.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_ipaddr.keyword = defalut;
      print(consistency.ca_ipaddr.keyword);
      expect(consistency.ca_ipaddr.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_ipaddr.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00520_element_check_00497 **********\n\n");
    });

    test('00521_element_check_00498', () async {
      print("\n********** テスト実行：00521_element_check_00498 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.title;
      print(consistency.ca_port.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.title = testData1s;
      print(consistency.ca_port.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.title = testData2s;
      print(consistency.ca_port.title);
      expect(consistency.ca_port.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.title = defalut;
      print(consistency.ca_port.title);
      expect(consistency.ca_port.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00521_element_check_00498 **********\n\n");
    });

    test('00522_element_check_00499', () async {
      print("\n********** テスト実行：00522_element_check_00499 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.obj;
      print(consistency.ca_port.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.obj = testData1;
      print(consistency.ca_port.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.obj = testData2;
      print(consistency.ca_port.obj);
      expect(consistency.ca_port.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.obj = defalut;
      print(consistency.ca_port.obj);
      expect(consistency.ca_port.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00522_element_check_00499 **********\n\n");
    });

    test('00523_element_check_00500', () async {
      print("\n********** テスト実行：00523_element_check_00500 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.condi;
      print(consistency.ca_port.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.condi = testData1;
      print(consistency.ca_port.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.condi = testData2;
      print(consistency.ca_port.condi);
      expect(consistency.ca_port.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.condi = defalut;
      print(consistency.ca_port.condi);
      expect(consistency.ca_port.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00523_element_check_00500 **********\n\n");
    });

    test('00524_element_check_00501', () async {
      print("\n********** テスト実行：00524_element_check_00501 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.typ;
      print(consistency.ca_port.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.typ = testData1;
      print(consistency.ca_port.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.typ = testData2;
      print(consistency.ca_port.typ);
      expect(consistency.ca_port.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.typ = defalut;
      print(consistency.ca_port.typ);
      expect(consistency.ca_port.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00524_element_check_00501 **********\n\n");
    });

    test('00525_element_check_00502', () async {
      print("\n********** テスト実行：00525_element_check_00502 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.ini_typ;
      print(consistency.ca_port.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.ini_typ = testData1;
      print(consistency.ca_port.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.ini_typ = testData2;
      print(consistency.ca_port.ini_typ);
      expect(consistency.ca_port.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.ini_typ = defalut;
      print(consistency.ca_port.ini_typ);
      expect(consistency.ca_port.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00525_element_check_00502 **********\n\n");
    });

    test('00526_element_check_00503', () async {
      print("\n********** テスト実行：00526_element_check_00503 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.file;
      print(consistency.ca_port.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.file = testData1s;
      print(consistency.ca_port.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.file = testData2s;
      print(consistency.ca_port.file);
      expect(consistency.ca_port.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.file = defalut;
      print(consistency.ca_port.file);
      expect(consistency.ca_port.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00526_element_check_00503 **********\n\n");
    });

    test('00527_element_check_00504', () async {
      print("\n********** テスト実行：00527_element_check_00504 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.section;
      print(consistency.ca_port.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.section = testData1s;
      print(consistency.ca_port.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.section = testData2s;
      print(consistency.ca_port.section);
      expect(consistency.ca_port.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.section = defalut;
      print(consistency.ca_port.section);
      expect(consistency.ca_port.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00527_element_check_00504 **********\n\n");
    });

    test('00528_element_check_00505', () async {
      print("\n********** テスト実行：00528_element_check_00505 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.ca_port.keyword;
      print(consistency.ca_port.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.ca_port.keyword = testData1s;
      print(consistency.ca_port.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.ca_port.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.ca_port.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.ca_port.keyword = testData2s;
      print(consistency.ca_port.keyword);
      expect(consistency.ca_port.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.ca_port.keyword = defalut;
      print(consistency.ca_port.keyword);
      expect(consistency.ca_port.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.ca_port.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00528_element_check_00505 **********\n\n");
    });

    test('00529_element_check_00506', () async {
      print("\n********** テスト実行：00529_element_check_00506 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.title;
      print(consistency.qcashier.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.title = testData1s;
      print(consistency.qcashier.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.title = testData2s;
      print(consistency.qcashier.title);
      expect(consistency.qcashier.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.title = defalut;
      print(consistency.qcashier.title);
      expect(consistency.qcashier.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00529_element_check_00506 **********\n\n");
    });

    test('00530_element_check_00507', () async {
      print("\n********** テスト実行：00530_element_check_00507 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.obj;
      print(consistency.qcashier.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.obj = testData1;
      print(consistency.qcashier.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.obj = testData2;
      print(consistency.qcashier.obj);
      expect(consistency.qcashier.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.obj = defalut;
      print(consistency.qcashier.obj);
      expect(consistency.qcashier.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00530_element_check_00507 **********\n\n");
    });

    test('00531_element_check_00508', () async {
      print("\n********** テスト実行：00531_element_check_00508 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.condi;
      print(consistency.qcashier.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.condi = testData1;
      print(consistency.qcashier.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.condi = testData2;
      print(consistency.qcashier.condi);
      expect(consistency.qcashier.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.condi = defalut;
      print(consistency.qcashier.condi);
      expect(consistency.qcashier.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00531_element_check_00508 **********\n\n");
    });

    test('00532_element_check_00509', () async {
      print("\n********** テスト実行：00532_element_check_00509 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.condi1_typ;
      print(consistency.qcashier.condi1_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.condi1_typ = testData1;
      print(consistency.qcashier.condi1_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.condi1_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.condi1_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.condi1_typ = testData2;
      print(consistency.qcashier.condi1_typ);
      expect(consistency.qcashier.condi1_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi1_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.condi1_typ = defalut;
      print(consistency.qcashier.condi1_typ);
      expect(consistency.qcashier.condi1_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi1_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00532_element_check_00509 **********\n\n");
    });

    test('00533_element_check_00510', () async {
      print("\n********** テスト実行：00533_element_check_00510 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.condi1_key;
      print(consistency.qcashier.condi1_key);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.condi1_key = testData1s;
      print(consistency.qcashier.condi1_key);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.condi1_key == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.condi1_key == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.condi1_key = testData2s;
      print(consistency.qcashier.condi1_key);
      expect(consistency.qcashier.condi1_key == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi1_key == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.condi1_key = defalut;
      print(consistency.qcashier.condi1_key);
      expect(consistency.qcashier.condi1_key == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi1_key == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00533_element_check_00510 **********\n\n");
    });

    test('00534_element_check_00511', () async {
      print("\n********** テスト実行：00534_element_check_00511 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.condi1_judge;
      print(consistency.qcashier.condi1_judge);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.condi1_judge = testData1;
      print(consistency.qcashier.condi1_judge);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.condi1_judge == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.condi1_judge == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.condi1_judge = testData2;
      print(consistency.qcashier.condi1_judge);
      expect(consistency.qcashier.condi1_judge == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi1_judge == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.condi1_judge = defalut;
      print(consistency.qcashier.condi1_judge);
      expect(consistency.qcashier.condi1_judge == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.condi1_judge == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00534_element_check_00511 **********\n\n");
    });

    test('00535_element_check_00512', () async {
      print("\n********** テスト実行：00535_element_check_00512 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.typ;
      print(consistency.qcashier.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.typ = testData1;
      print(consistency.qcashier.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.typ = testData2;
      print(consistency.qcashier.typ);
      expect(consistency.qcashier.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.typ = defalut;
      print(consistency.qcashier.typ);
      expect(consistency.qcashier.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00535_element_check_00512 **********\n\n");
    });

    test('00536_element_check_00513', () async {
      print("\n********** テスト実行：00536_element_check_00513 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.qcashier.file;
      print(consistency.qcashier.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.qcashier.file = testData1s;
      print(consistency.qcashier.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.qcashier.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.qcashier.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.qcashier.file = testData2s;
      print(consistency.qcashier.file);
      expect(consistency.qcashier.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.qcashier.file = defalut;
      print(consistency.qcashier.file);
      expect(consistency.qcashier.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.qcashier.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00536_element_check_00513 **********\n\n");
    });

    test('00537_element_check_00514', () async {
      print("\n********** テスト実行：00537_element_check_00514 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.title;
      print(consistency.tswebsvr.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.title = testData1s;
      print(consistency.tswebsvr.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.title = testData2s;
      print(consistency.tswebsvr.title);
      expect(consistency.tswebsvr.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.title = defalut;
      print(consistency.tswebsvr.title);
      expect(consistency.tswebsvr.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00537_element_check_00514 **********\n\n");
    });

    test('00538_element_check_00515', () async {
      print("\n********** テスト実行：00538_element_check_00515 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.obj;
      print(consistency.tswebsvr.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.obj = testData1;
      print(consistency.tswebsvr.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.obj = testData2;
      print(consistency.tswebsvr.obj);
      expect(consistency.tswebsvr.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.obj = defalut;
      print(consistency.tswebsvr.obj);
      expect(consistency.tswebsvr.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00538_element_check_00515 **********\n\n");
    });

    test('00539_element_check_00516', () async {
      print("\n********** テスト実行：00539_element_check_00516 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.condi;
      print(consistency.tswebsvr.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.condi = testData1;
      print(consistency.tswebsvr.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.condi = testData2;
      print(consistency.tswebsvr.condi);
      expect(consistency.tswebsvr.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.condi = defalut;
      print(consistency.tswebsvr.condi);
      expect(consistency.tswebsvr.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00539_element_check_00516 **********\n\n");
    });

    test('00540_element_check_00517', () async {
      print("\n********** テスト実行：00540_element_check_00517 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.typ;
      print(consistency.tswebsvr.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.typ = testData1;
      print(consistency.tswebsvr.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.typ = testData2;
      print(consistency.tswebsvr.typ);
      expect(consistency.tswebsvr.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.typ = defalut;
      print(consistency.tswebsvr.typ);
      expect(consistency.tswebsvr.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00540_element_check_00517 **********\n\n");
    });

    test('00541_element_check_00518', () async {
      print("\n********** テスト実行：00541_element_check_00518 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.keyword_typ;
      print(consistency.tswebsvr.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.keyword_typ = testData1;
      print(consistency.tswebsvr.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.keyword_typ = testData2;
      print(consistency.tswebsvr.keyword_typ);
      expect(consistency.tswebsvr.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.keyword_typ = defalut;
      print(consistency.tswebsvr.keyword_typ);
      expect(consistency.tswebsvr.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00541_element_check_00518 **********\n\n");
    });

    test('00542_element_check_00519', () async {
      print("\n********** テスト実行：00542_element_check_00519 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.file;
      print(consistency.tswebsvr.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.file = testData1s;
      print(consistency.tswebsvr.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.file = testData2s;
      print(consistency.tswebsvr.file);
      expect(consistency.tswebsvr.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.file = defalut;
      print(consistency.tswebsvr.file);
      expect(consistency.tswebsvr.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00542_element_check_00519 **********\n\n");
    });

    test('00543_element_check_00520', () async {
      print("\n********** テスト実行：00543_element_check_00520 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.tswebsvr.keyword;
      print(consistency.tswebsvr.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.tswebsvr.keyword = testData1s;
      print(consistency.tswebsvr.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.tswebsvr.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.tswebsvr.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.tswebsvr.keyword = testData2s;
      print(consistency.tswebsvr.keyword);
      expect(consistency.tswebsvr.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.tswebsvr.keyword = defalut;
      print(consistency.tswebsvr.keyword);
      expect(consistency.tswebsvr.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.tswebsvr.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00543_element_check_00520 **********\n\n");
    });

    test('00544_element_check_00521', () async {
      print("\n********** テスト実行：00544_element_check_00521 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.title;
      print(consistency.verup_cnct.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.title = testData1s;
      print(consistency.verup_cnct.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.title = testData2s;
      print(consistency.verup_cnct.title);
      expect(consistency.verup_cnct.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.title = defalut;
      print(consistency.verup_cnct.title);
      expect(consistency.verup_cnct.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00544_element_check_00521 **********\n\n");
    });

    test('00545_element_check_00522', () async {
      print("\n********** テスト実行：00545_element_check_00522 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.obj;
      print(consistency.verup_cnct.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.obj = testData1;
      print(consistency.verup_cnct.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.obj = testData2;
      print(consistency.verup_cnct.obj);
      expect(consistency.verup_cnct.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.obj = defalut;
      print(consistency.verup_cnct.obj);
      expect(consistency.verup_cnct.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00545_element_check_00522 **********\n\n");
    });

    test('00546_element_check_00523', () async {
      print("\n********** テスト実行：00546_element_check_00523 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.condi;
      print(consistency.verup_cnct.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.condi = testData1;
      print(consistency.verup_cnct.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.condi = testData2;
      print(consistency.verup_cnct.condi);
      expect(consistency.verup_cnct.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.condi = defalut;
      print(consistency.verup_cnct.condi);
      expect(consistency.verup_cnct.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00546_element_check_00523 **********\n\n");
    });

    test('00547_element_check_00524', () async {
      print("\n********** テスト実行：00547_element_check_00524 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.typ;
      print(consistency.verup_cnct.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.typ = testData1;
      print(consistency.verup_cnct.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.typ = testData2;
      print(consistency.verup_cnct.typ);
      expect(consistency.verup_cnct.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.typ = defalut;
      print(consistency.verup_cnct.typ);
      expect(consistency.verup_cnct.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00547_element_check_00524 **********\n\n");
    });

    test('00548_element_check_00525', () async {
      print("\n********** テスト実行：00548_element_check_00525 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.keyword_typ;
      print(consistency.verup_cnct.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.keyword_typ = testData1;
      print(consistency.verup_cnct.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.keyword_typ = testData2;
      print(consistency.verup_cnct.keyword_typ);
      expect(consistency.verup_cnct.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.keyword_typ = defalut;
      print(consistency.verup_cnct.keyword_typ);
      expect(consistency.verup_cnct.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00548_element_check_00525 **********\n\n");
    });

    test('00549_element_check_00526', () async {
      print("\n********** テスト実行：00549_element_check_00526 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.file;
      print(consistency.verup_cnct.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.file = testData1s;
      print(consistency.verup_cnct.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.file = testData2s;
      print(consistency.verup_cnct.file);
      expect(consistency.verup_cnct.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.file = defalut;
      print(consistency.verup_cnct.file);
      expect(consistency.verup_cnct.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00549_element_check_00526 **********\n\n");
    });

    test('00550_element_check_00527', () async {
      print("\n********** テスト実行：00550_element_check_00527 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.verup_cnct.keyword;
      print(consistency.verup_cnct.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.verup_cnct.keyword = testData1s;
      print(consistency.verup_cnct.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.verup_cnct.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.verup_cnct.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.verup_cnct.keyword = testData2s;
      print(consistency.verup_cnct.keyword);
      expect(consistency.verup_cnct.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.verup_cnct.keyword = defalut;
      print(consistency.verup_cnct.keyword);
      expect(consistency.verup_cnct.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.verup_cnct.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00550_element_check_00527 **********\n\n");
    });

    test('00551_element_check_00528', () async {
      print("\n********** テスト実行：00551_element_check_00528 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.title;
      print(consistency.bkup_save.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.title = testData1s;
      print(consistency.bkup_save.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.title = testData2s;
      print(consistency.bkup_save.title);
      expect(consistency.bkup_save.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.title = defalut;
      print(consistency.bkup_save.title);
      expect(consistency.bkup_save.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00551_element_check_00528 **********\n\n");
    });

    test('00552_element_check_00529', () async {
      print("\n********** テスト実行：00552_element_check_00529 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.obj;
      print(consistency.bkup_save.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.obj = testData1;
      print(consistency.bkup_save.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.obj = testData2;
      print(consistency.bkup_save.obj);
      expect(consistency.bkup_save.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.obj = defalut;
      print(consistency.bkup_save.obj);
      expect(consistency.bkup_save.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00552_element_check_00529 **********\n\n");
    });

    test('00553_element_check_00530', () async {
      print("\n********** テスト実行：00553_element_check_00530 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.condi;
      print(consistency.bkup_save.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.condi = testData1;
      print(consistency.bkup_save.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.condi = testData2;
      print(consistency.bkup_save.condi);
      expect(consistency.bkup_save.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.condi = defalut;
      print(consistency.bkup_save.condi);
      expect(consistency.bkup_save.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00553_element_check_00530 **********\n\n");
    });

    test('00554_element_check_00531', () async {
      print("\n********** テスト実行：00554_element_check_00531 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.typ;
      print(consistency.bkup_save.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.typ = testData1;
      print(consistency.bkup_save.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.typ = testData2;
      print(consistency.bkup_save.typ);
      expect(consistency.bkup_save.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.typ = defalut;
      print(consistency.bkup_save.typ);
      expect(consistency.bkup_save.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00554_element_check_00531 **********\n\n");
    });

    test('00555_element_check_00532', () async {
      print("\n********** テスト実行：00555_element_check_00532 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.keyword_typ;
      print(consistency.bkup_save.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.keyword_typ = testData1;
      print(consistency.bkup_save.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.keyword_typ = testData2;
      print(consistency.bkup_save.keyword_typ);
      expect(consistency.bkup_save.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.keyword_typ = defalut;
      print(consistency.bkup_save.keyword_typ);
      expect(consistency.bkup_save.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00555_element_check_00532 **********\n\n");
    });

    test('00556_element_check_00533', () async {
      print("\n********** テスト実行：00556_element_check_00533 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.file;
      print(consistency.bkup_save.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.file = testData1s;
      print(consistency.bkup_save.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.file = testData2s;
      print(consistency.bkup_save.file);
      expect(consistency.bkup_save.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.file = defalut;
      print(consistency.bkup_save.file);
      expect(consistency.bkup_save.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00556_element_check_00533 **********\n\n");
    });

    test('00557_element_check_00534', () async {
      print("\n********** テスト実行：00557_element_check_00534 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.bkup_save.keyword;
      print(consistency.bkup_save.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.bkup_save.keyword = testData1s;
      print(consistency.bkup_save.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.bkup_save.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.bkup_save.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.bkup_save.keyword = testData2s;
      print(consistency.bkup_save.keyword);
      expect(consistency.bkup_save.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.bkup_save.keyword = defalut;
      print(consistency.bkup_save.keyword);
      expect(consistency.bkup_save.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.bkup_save.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00557_element_check_00534 **********\n\n");
    });

    test('00558_element_check_00535', () async {
      print("\n********** テスト実行：00558_element_check_00535 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.title;
      print(consistency.histlog_server.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.title = testData1s;
      print(consistency.histlog_server.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.title = testData2s;
      print(consistency.histlog_server.title);
      expect(consistency.histlog_server.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.title = defalut;
      print(consistency.histlog_server.title);
      expect(consistency.histlog_server.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00558_element_check_00535 **********\n\n");
    });

    test('00559_element_check_00536', () async {
      print("\n********** テスト実行：00559_element_check_00536 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.obj;
      print(consistency.histlog_server.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.obj = testData1;
      print(consistency.histlog_server.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.obj = testData2;
      print(consistency.histlog_server.obj);
      expect(consistency.histlog_server.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.obj = defalut;
      print(consistency.histlog_server.obj);
      expect(consistency.histlog_server.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00559_element_check_00536 **********\n\n");
    });

    test('00560_element_check_00537', () async {
      print("\n********** テスト実行：00560_element_check_00537 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.condi;
      print(consistency.histlog_server.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.condi = testData1;
      print(consistency.histlog_server.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.condi = testData2;
      print(consistency.histlog_server.condi);
      expect(consistency.histlog_server.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.condi = defalut;
      print(consistency.histlog_server.condi);
      expect(consistency.histlog_server.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00560_element_check_00537 **********\n\n");
    });

    test('00561_element_check_00538', () async {
      print("\n********** テスト実行：00561_element_check_00538 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.typ;
      print(consistency.histlog_server.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.typ = testData1;
      print(consistency.histlog_server.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.typ = testData2;
      print(consistency.histlog_server.typ);
      expect(consistency.histlog_server.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.typ = defalut;
      print(consistency.histlog_server.typ);
      expect(consistency.histlog_server.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00561_element_check_00538 **********\n\n");
    });

    test('00562_element_check_00539', () async {
      print("\n********** テスト実行：00562_element_check_00539 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.keyword_typ;
      print(consistency.histlog_server.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.keyword_typ = testData1;
      print(consistency.histlog_server.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.keyword_typ = testData2;
      print(consistency.histlog_server.keyword_typ);
      expect(consistency.histlog_server.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.keyword_typ = defalut;
      print(consistency.histlog_server.keyword_typ);
      expect(consistency.histlog_server.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00562_element_check_00539 **********\n\n");
    });

    test('00563_element_check_00540', () async {
      print("\n********** テスト実行：00563_element_check_00540 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.file;
      print(consistency.histlog_server.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.file = testData1s;
      print(consistency.histlog_server.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.file = testData2s;
      print(consistency.histlog_server.file);
      expect(consistency.histlog_server.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.file = defalut;
      print(consistency.histlog_server.file);
      expect(consistency.histlog_server.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00563_element_check_00540 **********\n\n");
    });

    test('00564_element_check_00541', () async {
      print("\n********** テスト実行：00564_element_check_00541 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server.keyword;
      print(consistency.histlog_server.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server.keyword = testData1s;
      print(consistency.histlog_server.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server.keyword = testData2s;
      print(consistency.histlog_server.keyword);
      expect(consistency.histlog_server.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server.keyword = defalut;
      print(consistency.histlog_server.keyword);
      expect(consistency.histlog_server.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00564_element_check_00541 **********\n\n");
    });

    test('00565_element_check_00542', () async {
      print("\n********** テスト実行：00565_element_check_00542 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.title;
      print(consistency.histlog_server_sub.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.title = testData1s;
      print(consistency.histlog_server_sub.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.title = testData2s;
      print(consistency.histlog_server_sub.title);
      expect(consistency.histlog_server_sub.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.title = defalut;
      print(consistency.histlog_server_sub.title);
      expect(consistency.histlog_server_sub.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00565_element_check_00542 **********\n\n");
    });

    test('00566_element_check_00543', () async {
      print("\n********** テスト実行：00566_element_check_00543 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.obj;
      print(consistency.histlog_server_sub.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.obj = testData1;
      print(consistency.histlog_server_sub.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.obj = testData2;
      print(consistency.histlog_server_sub.obj);
      expect(consistency.histlog_server_sub.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.obj = defalut;
      print(consistency.histlog_server_sub.obj);
      expect(consistency.histlog_server_sub.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00566_element_check_00543 **********\n\n");
    });

    test('00567_element_check_00544', () async {
      print("\n********** テスト実行：00567_element_check_00544 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.condi;
      print(consistency.histlog_server_sub.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.condi = testData1;
      print(consistency.histlog_server_sub.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.condi = testData2;
      print(consistency.histlog_server_sub.condi);
      expect(consistency.histlog_server_sub.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.condi = defalut;
      print(consistency.histlog_server_sub.condi);
      expect(consistency.histlog_server_sub.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00567_element_check_00544 **********\n\n");
    });

    test('00568_element_check_00545', () async {
      print("\n********** テスト実行：00568_element_check_00545 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.typ;
      print(consistency.histlog_server_sub.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.typ = testData1;
      print(consistency.histlog_server_sub.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.typ = testData2;
      print(consistency.histlog_server_sub.typ);
      expect(consistency.histlog_server_sub.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.typ = defalut;
      print(consistency.histlog_server_sub.typ);
      expect(consistency.histlog_server_sub.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00568_element_check_00545 **********\n\n");
    });

    test('00569_element_check_00546', () async {
      print("\n********** テスト実行：00569_element_check_00546 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.keyword_typ;
      print(consistency.histlog_server_sub.keyword_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.keyword_typ = testData1;
      print(consistency.histlog_server_sub.keyword_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.keyword_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.keyword_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.keyword_typ = testData2;
      print(consistency.histlog_server_sub.keyword_typ);
      expect(consistency.histlog_server_sub.keyword_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.keyword_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.keyword_typ = defalut;
      print(consistency.histlog_server_sub.keyword_typ);
      expect(consistency.histlog_server_sub.keyword_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.keyword_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00569_element_check_00546 **********\n\n");
    });

    test('00570_element_check_00547', () async {
      print("\n********** テスト実行：00570_element_check_00547 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.file;
      print(consistency.histlog_server_sub.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.file = testData1s;
      print(consistency.histlog_server_sub.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.file = testData2s;
      print(consistency.histlog_server_sub.file);
      expect(consistency.histlog_server_sub.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.file = defalut;
      print(consistency.histlog_server_sub.file);
      expect(consistency.histlog_server_sub.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00570_element_check_00547 **********\n\n");
    });

    test('00571_element_check_00548', () async {
      print("\n********** テスト実行：00571_element_check_00548 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.histlog_server_sub.keyword;
      print(consistency.histlog_server_sub.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.histlog_server_sub.keyword = testData1s;
      print(consistency.histlog_server_sub.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.histlog_server_sub.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.histlog_server_sub.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.histlog_server_sub.keyword = testData2s;
      print(consistency.histlog_server_sub.keyword);
      expect(consistency.histlog_server_sub.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.histlog_server_sub.keyword = defalut;
      print(consistency.histlog_server_sub.keyword);
      expect(consistency.histlog_server_sub.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.histlog_server_sub.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00571_element_check_00548 **********\n\n");
    });

    test('00572_element_check_00549', () async {
      print("\n********** テスト実行：00572_element_check_00549 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.title;
      print(consistency.repica_url.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.title = testData1s;
      print(consistency.repica_url.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.title = testData2s;
      print(consistency.repica_url.title);
      expect(consistency.repica_url.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.title = defalut;
      print(consistency.repica_url.title);
      expect(consistency.repica_url.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00572_element_check_00549 **********\n\n");
    });

    test('00573_element_check_00550', () async {
      print("\n********** テスト実行：00573_element_check_00550 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.obj;
      print(consistency.repica_url.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.obj = testData1;
      print(consistency.repica_url.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.obj = testData2;
      print(consistency.repica_url.obj);
      expect(consistency.repica_url.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.obj = defalut;
      print(consistency.repica_url.obj);
      expect(consistency.repica_url.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00573_element_check_00550 **********\n\n");
    });

    test('00574_element_check_00551', () async {
      print("\n********** テスト実行：00574_element_check_00551 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.condi;
      print(consistency.repica_url.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.condi = testData1;
      print(consistency.repica_url.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.condi = testData2;
      print(consistency.repica_url.condi);
      expect(consistency.repica_url.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.condi = defalut;
      print(consistency.repica_url.condi);
      expect(consistency.repica_url.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00574_element_check_00551 **********\n\n");
    });

    test('00575_element_check_00552', () async {
      print("\n********** テスト実行：00575_element_check_00552 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.typ;
      print(consistency.repica_url.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.typ = testData1;
      print(consistency.repica_url.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.typ = testData2;
      print(consistency.repica_url.typ);
      expect(consistency.repica_url.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.typ = defalut;
      print(consistency.repica_url.typ);
      expect(consistency.repica_url.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00575_element_check_00552 **********\n\n");
    });

    test('00576_element_check_00553', () async {
      print("\n********** テスト実行：00576_element_check_00553 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.ini_typ;
      print(consistency.repica_url.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.ini_typ = testData1;
      print(consistency.repica_url.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.ini_typ = testData2;
      print(consistency.repica_url.ini_typ);
      expect(consistency.repica_url.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.ini_typ = defalut;
      print(consistency.repica_url.ini_typ);
      expect(consistency.repica_url.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00576_element_check_00553 **********\n\n");
    });

    test('00577_element_check_00554', () async {
      print("\n********** テスト実行：00577_element_check_00554 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.file;
      print(consistency.repica_url.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.file = testData1s;
      print(consistency.repica_url.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.file = testData2s;
      print(consistency.repica_url.file);
      expect(consistency.repica_url.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.file = defalut;
      print(consistency.repica_url.file);
      expect(consistency.repica_url.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00577_element_check_00554 **********\n\n");
    });

    test('00578_element_check_00555', () async {
      print("\n********** テスト実行：00578_element_check_00555 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.section;
      print(consistency.repica_url.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.section = testData1s;
      print(consistency.repica_url.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.section = testData2s;
      print(consistency.repica_url.section);
      expect(consistency.repica_url.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.section = defalut;
      print(consistency.repica_url.section);
      expect(consistency.repica_url.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00578_element_check_00555 **********\n\n");
    });

    test('00579_element_check_00556', () async {
      print("\n********** テスト実行：00579_element_check_00556 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url.keyword;
      print(consistency.repica_url.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url.keyword = testData1s;
      print(consistency.repica_url.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url.keyword = testData2s;
      print(consistency.repica_url.keyword);
      expect(consistency.repica_url.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url.keyword = defalut;
      print(consistency.repica_url.keyword);
      expect(consistency.repica_url.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00579_element_check_00556 **********\n\n");
    });

    test('00580_element_check_00557', () async {
      print("\n********** テスト実行：00580_element_check_00557 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.title;
      print(consistency.repica_url_cancel.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.title = testData1s;
      print(consistency.repica_url_cancel.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.title = testData2s;
      print(consistency.repica_url_cancel.title);
      expect(consistency.repica_url_cancel.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.title = defalut;
      print(consistency.repica_url_cancel.title);
      expect(consistency.repica_url_cancel.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00580_element_check_00557 **********\n\n");
    });

    test('00581_element_check_00558', () async {
      print("\n********** テスト実行：00581_element_check_00558 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.obj;
      print(consistency.repica_url_cancel.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.obj = testData1;
      print(consistency.repica_url_cancel.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.obj = testData2;
      print(consistency.repica_url_cancel.obj);
      expect(consistency.repica_url_cancel.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.obj = defalut;
      print(consistency.repica_url_cancel.obj);
      expect(consistency.repica_url_cancel.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00581_element_check_00558 **********\n\n");
    });

    test('00582_element_check_00559', () async {
      print("\n********** テスト実行：00582_element_check_00559 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.condi;
      print(consistency.repica_url_cancel.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.condi = testData1;
      print(consistency.repica_url_cancel.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.condi = testData2;
      print(consistency.repica_url_cancel.condi);
      expect(consistency.repica_url_cancel.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.condi = defalut;
      print(consistency.repica_url_cancel.condi);
      expect(consistency.repica_url_cancel.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00582_element_check_00559 **********\n\n");
    });

    test('00583_element_check_00560', () async {
      print("\n********** テスト実行：00583_element_check_00560 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.typ;
      print(consistency.repica_url_cancel.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.typ = testData1;
      print(consistency.repica_url_cancel.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.typ = testData2;
      print(consistency.repica_url_cancel.typ);
      expect(consistency.repica_url_cancel.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.typ = defalut;
      print(consistency.repica_url_cancel.typ);
      expect(consistency.repica_url_cancel.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00583_element_check_00560 **********\n\n");
    });

    test('00584_element_check_00561', () async {
      print("\n********** テスト実行：00584_element_check_00561 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.ini_typ;
      print(consistency.repica_url_cancel.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.ini_typ = testData1;
      print(consistency.repica_url_cancel.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.ini_typ = testData2;
      print(consistency.repica_url_cancel.ini_typ);
      expect(consistency.repica_url_cancel.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.ini_typ = defalut;
      print(consistency.repica_url_cancel.ini_typ);
      expect(consistency.repica_url_cancel.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00584_element_check_00561 **********\n\n");
    });

    test('00585_element_check_00562', () async {
      print("\n********** テスト実行：00585_element_check_00562 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.file;
      print(consistency.repica_url_cancel.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.file = testData1s;
      print(consistency.repica_url_cancel.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.file = testData2s;
      print(consistency.repica_url_cancel.file);
      expect(consistency.repica_url_cancel.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.file = defalut;
      print(consistency.repica_url_cancel.file);
      expect(consistency.repica_url_cancel.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00585_element_check_00562 **********\n\n");
    });

    test('00586_element_check_00563', () async {
      print("\n********** テスト実行：00586_element_check_00563 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.section;
      print(consistency.repica_url_cancel.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.section = testData1s;
      print(consistency.repica_url_cancel.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.section = testData2s;
      print(consistency.repica_url_cancel.section);
      expect(consistency.repica_url_cancel.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.section = defalut;
      print(consistency.repica_url_cancel.section);
      expect(consistency.repica_url_cancel.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00586_element_check_00563 **********\n\n");
    });

    test('00587_element_check_00564', () async {
      print("\n********** テスト実行：00587_element_check_00564 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_url_cancel.keyword;
      print(consistency.repica_url_cancel.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_url_cancel.keyword = testData1s;
      print(consistency.repica_url_cancel.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_url_cancel.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_url_cancel.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_url_cancel.keyword = testData2s;
      print(consistency.repica_url_cancel.keyword);
      expect(consistency.repica_url_cancel.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_url_cancel.keyword = defalut;
      print(consistency.repica_url_cancel.keyword);
      expect(consistency.repica_url_cancel.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_url_cancel.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00587_element_check_00564 **********\n\n");
    });

    test('00588_element_check_00565', () async {
      print("\n********** テスト実行：00588_element_check_00565 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.title;
      print(consistency.repica_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.title = testData1s;
      print(consistency.repica_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.title = testData2s;
      print(consistency.repica_timeout.title);
      expect(consistency.repica_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.title = defalut;
      print(consistency.repica_timeout.title);
      expect(consistency.repica_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00588_element_check_00565 **********\n\n");
    });

    test('00589_element_check_00566', () async {
      print("\n********** テスト実行：00589_element_check_00566 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.obj;
      print(consistency.repica_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.obj = testData1;
      print(consistency.repica_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.obj = testData2;
      print(consistency.repica_timeout.obj);
      expect(consistency.repica_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.obj = defalut;
      print(consistency.repica_timeout.obj);
      expect(consistency.repica_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00589_element_check_00566 **********\n\n");
    });

    test('00590_element_check_00567', () async {
      print("\n********** テスト実行：00590_element_check_00567 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.condi;
      print(consistency.repica_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.condi = testData1;
      print(consistency.repica_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.condi = testData2;
      print(consistency.repica_timeout.condi);
      expect(consistency.repica_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.condi = defalut;
      print(consistency.repica_timeout.condi);
      expect(consistency.repica_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00590_element_check_00567 **********\n\n");
    });

    test('00591_element_check_00568', () async {
      print("\n********** テスト実行：00591_element_check_00568 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.typ;
      print(consistency.repica_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.typ = testData1;
      print(consistency.repica_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.typ = testData2;
      print(consistency.repica_timeout.typ);
      expect(consistency.repica_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.typ = defalut;
      print(consistency.repica_timeout.typ);
      expect(consistency.repica_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00591_element_check_00568 **********\n\n");
    });

    test('00592_element_check_00569', () async {
      print("\n********** テスト実行：00592_element_check_00569 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.ini_typ;
      print(consistency.repica_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.ini_typ = testData1;
      print(consistency.repica_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.ini_typ = testData2;
      print(consistency.repica_timeout.ini_typ);
      expect(consistency.repica_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.ini_typ = defalut;
      print(consistency.repica_timeout.ini_typ);
      expect(consistency.repica_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00592_element_check_00569 **********\n\n");
    });

    test('00593_element_check_00570', () async {
      print("\n********** テスト実行：00593_element_check_00570 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.file;
      print(consistency.repica_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.file = testData1s;
      print(consistency.repica_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.file = testData2s;
      print(consistency.repica_timeout.file);
      expect(consistency.repica_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.file = defalut;
      print(consistency.repica_timeout.file);
      expect(consistency.repica_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00593_element_check_00570 **********\n\n");
    });

    test('00594_element_check_00571', () async {
      print("\n********** テスト実行：00594_element_check_00571 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.section;
      print(consistency.repica_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.section = testData1s;
      print(consistency.repica_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.section = testData2s;
      print(consistency.repica_timeout.section);
      expect(consistency.repica_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.section = defalut;
      print(consistency.repica_timeout.section);
      expect(consistency.repica_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00594_element_check_00571 **********\n\n");
    });

    test('00595_element_check_00572', () async {
      print("\n********** テスト実行：00595_element_check_00572 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_timeout.keyword;
      print(consistency.repica_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_timeout.keyword = testData1s;
      print(consistency.repica_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_timeout.keyword = testData2s;
      print(consistency.repica_timeout.keyword);
      expect(consistency.repica_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_timeout.keyword = defalut;
      print(consistency.repica_timeout.keyword);
      expect(consistency.repica_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00595_element_check_00572 **********\n\n");
    });

    test('00596_element_check_00573', () async {
      print("\n********** テスト実行：00596_element_check_00573 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.title;
      print(consistency.repica_id.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.title = testData1s;
      print(consistency.repica_id.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.title = testData2s;
      print(consistency.repica_id.title);
      expect(consistency.repica_id.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.title = defalut;
      print(consistency.repica_id.title);
      expect(consistency.repica_id.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00596_element_check_00573 **********\n\n");
    });

    test('00597_element_check_00574', () async {
      print("\n********** テスト実行：00597_element_check_00574 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.obj;
      print(consistency.repica_id.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.obj = testData1;
      print(consistency.repica_id.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.obj = testData2;
      print(consistency.repica_id.obj);
      expect(consistency.repica_id.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.obj = defalut;
      print(consistency.repica_id.obj);
      expect(consistency.repica_id.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00597_element_check_00574 **********\n\n");
    });

    test('00598_element_check_00575', () async {
      print("\n********** テスト実行：00598_element_check_00575 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.condi;
      print(consistency.repica_id.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.condi = testData1;
      print(consistency.repica_id.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.condi = testData2;
      print(consistency.repica_id.condi);
      expect(consistency.repica_id.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.condi = defalut;
      print(consistency.repica_id.condi);
      expect(consistency.repica_id.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00598_element_check_00575 **********\n\n");
    });

    test('00599_element_check_00576', () async {
      print("\n********** テスト実行：00599_element_check_00576 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.typ;
      print(consistency.repica_id.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.typ = testData1;
      print(consistency.repica_id.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.typ = testData2;
      print(consistency.repica_id.typ);
      expect(consistency.repica_id.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.typ = defalut;
      print(consistency.repica_id.typ);
      expect(consistency.repica_id.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00599_element_check_00576 **********\n\n");
    });

    test('00600_element_check_00577', () async {
      print("\n********** テスト実行：00600_element_check_00577 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.ini_typ;
      print(consistency.repica_id.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.ini_typ = testData1;
      print(consistency.repica_id.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.ini_typ = testData2;
      print(consistency.repica_id.ini_typ);
      expect(consistency.repica_id.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.ini_typ = defalut;
      print(consistency.repica_id.ini_typ);
      expect(consistency.repica_id.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00600_element_check_00577 **********\n\n");
    });

    test('00601_element_check_00578', () async {
      print("\n********** テスト実行：00601_element_check_00578 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.file;
      print(consistency.repica_id.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.file = testData1s;
      print(consistency.repica_id.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.file = testData2s;
      print(consistency.repica_id.file);
      expect(consistency.repica_id.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.file = defalut;
      print(consistency.repica_id.file);
      expect(consistency.repica_id.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00601_element_check_00578 **********\n\n");
    });

    test('00602_element_check_00579', () async {
      print("\n********** テスト実行：00602_element_check_00579 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.section;
      print(consistency.repica_id.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.section = testData1s;
      print(consistency.repica_id.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.section = testData2s;
      print(consistency.repica_id.section);
      expect(consistency.repica_id.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.section = defalut;
      print(consistency.repica_id.section);
      expect(consistency.repica_id.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00602_element_check_00579 **********\n\n");
    });

    test('00603_element_check_00580', () async {
      print("\n********** テスト実行：00603_element_check_00580 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.repica_id.keyword;
      print(consistency.repica_id.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.repica_id.keyword = testData1s;
      print(consistency.repica_id.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.repica_id.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.repica_id.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.repica_id.keyword = testData2s;
      print(consistency.repica_id.keyword);
      expect(consistency.repica_id.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.repica_id.keyword = defalut;
      print(consistency.repica_id.keyword);
      expect(consistency.repica_id.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.repica_id.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00603_element_check_00580 **********\n\n");
    });

    test('00604_element_check_00581', () async {
      print("\n********** テスト実行：00604_element_check_00581 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.title;
      print(consistency.barcodepay_url.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.title = testData1s;
      print(consistency.barcodepay_url.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.title = testData2s;
      print(consistency.barcodepay_url.title);
      expect(consistency.barcodepay_url.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.title = defalut;
      print(consistency.barcodepay_url.title);
      expect(consistency.barcodepay_url.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00604_element_check_00581 **********\n\n");
    });

    test('00605_element_check_00582', () async {
      print("\n********** テスト実行：00605_element_check_00582 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.obj;
      print(consistency.barcodepay_url.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.obj = testData1;
      print(consistency.barcodepay_url.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.obj = testData2;
      print(consistency.barcodepay_url.obj);
      expect(consistency.barcodepay_url.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.obj = defalut;
      print(consistency.barcodepay_url.obj);
      expect(consistency.barcodepay_url.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00605_element_check_00582 **********\n\n");
    });

    test('00606_element_check_00583', () async {
      print("\n********** テスト実行：00606_element_check_00583 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.condi;
      print(consistency.barcodepay_url.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.condi = testData1;
      print(consistency.barcodepay_url.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.condi = testData2;
      print(consistency.barcodepay_url.condi);
      expect(consistency.barcodepay_url.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.condi = defalut;
      print(consistency.barcodepay_url.condi);
      expect(consistency.barcodepay_url.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00606_element_check_00583 **********\n\n");
    });

    test('00607_element_check_00584', () async {
      print("\n********** テスト実行：00607_element_check_00584 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.typ;
      print(consistency.barcodepay_url.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.typ = testData1;
      print(consistency.barcodepay_url.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.typ = testData2;
      print(consistency.barcodepay_url.typ);
      expect(consistency.barcodepay_url.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.typ = defalut;
      print(consistency.barcodepay_url.typ);
      expect(consistency.barcodepay_url.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00607_element_check_00584 **********\n\n");
    });

    test('00608_element_check_00585', () async {
      print("\n********** テスト実行：00608_element_check_00585 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.ini_typ;
      print(consistency.barcodepay_url.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.ini_typ = testData1;
      print(consistency.barcodepay_url.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.ini_typ = testData2;
      print(consistency.barcodepay_url.ini_typ);
      expect(consistency.barcodepay_url.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.ini_typ = defalut;
      print(consistency.barcodepay_url.ini_typ);
      expect(consistency.barcodepay_url.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00608_element_check_00585 **********\n\n");
    });

    test('00609_element_check_00586', () async {
      print("\n********** テスト実行：00609_element_check_00586 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.file;
      print(consistency.barcodepay_url.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.file = testData1s;
      print(consistency.barcodepay_url.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.file = testData2s;
      print(consistency.barcodepay_url.file);
      expect(consistency.barcodepay_url.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.file = defalut;
      print(consistency.barcodepay_url.file);
      expect(consistency.barcodepay_url.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00609_element_check_00586 **********\n\n");
    });

    test('00610_element_check_00587', () async {
      print("\n********** テスト実行：00610_element_check_00587 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.section;
      print(consistency.barcodepay_url.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.section = testData1s;
      print(consistency.barcodepay_url.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.section = testData2s;
      print(consistency.barcodepay_url.section);
      expect(consistency.barcodepay_url.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.section = defalut;
      print(consistency.barcodepay_url.section);
      expect(consistency.barcodepay_url.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00610_element_check_00587 **********\n\n");
    });

    test('00611_element_check_00588', () async {
      print("\n********** テスト実行：00611_element_check_00588 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_url.keyword;
      print(consistency.barcodepay_url.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_url.keyword = testData1s;
      print(consistency.barcodepay_url.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_url.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_url.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_url.keyword = testData2s;
      print(consistency.barcodepay_url.keyword);
      expect(consistency.barcodepay_url.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_url.keyword = defalut;
      print(consistency.barcodepay_url.keyword);
      expect(consistency.barcodepay_url.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_url.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00611_element_check_00588 **********\n\n");
    });

    test('00612_element_check_00589', () async {
      print("\n********** テスト実行：00612_element_check_00589 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.title;
      print(consistency.barcodepay_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.title = testData1s;
      print(consistency.barcodepay_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.title = testData2s;
      print(consistency.barcodepay_timeout.title);
      expect(consistency.barcodepay_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.title = defalut;
      print(consistency.barcodepay_timeout.title);
      expect(consistency.barcodepay_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00612_element_check_00589 **********\n\n");
    });

    test('00613_element_check_00590', () async {
      print("\n********** テスト実行：00613_element_check_00590 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.obj;
      print(consistency.barcodepay_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.obj = testData1;
      print(consistency.barcodepay_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.obj = testData2;
      print(consistency.barcodepay_timeout.obj);
      expect(consistency.barcodepay_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.obj = defalut;
      print(consistency.barcodepay_timeout.obj);
      expect(consistency.barcodepay_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00613_element_check_00590 **********\n\n");
    });

    test('00614_element_check_00591', () async {
      print("\n********** テスト実行：00614_element_check_00591 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.condi;
      print(consistency.barcodepay_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.condi = testData1;
      print(consistency.barcodepay_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.condi = testData2;
      print(consistency.barcodepay_timeout.condi);
      expect(consistency.barcodepay_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.condi = defalut;
      print(consistency.barcodepay_timeout.condi);
      expect(consistency.barcodepay_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00614_element_check_00591 **********\n\n");
    });

    test('00615_element_check_00592', () async {
      print("\n********** テスト実行：00615_element_check_00592 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.typ;
      print(consistency.barcodepay_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.typ = testData1;
      print(consistency.barcodepay_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.typ = testData2;
      print(consistency.barcodepay_timeout.typ);
      expect(consistency.barcodepay_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.typ = defalut;
      print(consistency.barcodepay_timeout.typ);
      expect(consistency.barcodepay_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00615_element_check_00592 **********\n\n");
    });

    test('00616_element_check_00593', () async {
      print("\n********** テスト実行：00616_element_check_00593 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.ini_typ;
      print(consistency.barcodepay_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.ini_typ = testData1;
      print(consistency.barcodepay_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.ini_typ = testData2;
      print(consistency.barcodepay_timeout.ini_typ);
      expect(consistency.barcodepay_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.ini_typ = defalut;
      print(consistency.barcodepay_timeout.ini_typ);
      expect(consistency.barcodepay_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00616_element_check_00593 **********\n\n");
    });

    test('00617_element_check_00594', () async {
      print("\n********** テスト実行：00617_element_check_00594 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.file;
      print(consistency.barcodepay_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.file = testData1s;
      print(consistency.barcodepay_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.file = testData2s;
      print(consistency.barcodepay_timeout.file);
      expect(consistency.barcodepay_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.file = defalut;
      print(consistency.barcodepay_timeout.file);
      expect(consistency.barcodepay_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00617_element_check_00594 **********\n\n");
    });

    test('00618_element_check_00595', () async {
      print("\n********** テスト実行：00618_element_check_00595 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.section;
      print(consistency.barcodepay_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.section = testData1s;
      print(consistency.barcodepay_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.section = testData2s;
      print(consistency.barcodepay_timeout.section);
      expect(consistency.barcodepay_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.section = defalut;
      print(consistency.barcodepay_timeout.section);
      expect(consistency.barcodepay_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00618_element_check_00595 **********\n\n");
    });

    test('00619_element_check_00596', () async {
      print("\n********** テスト実行：00619_element_check_00596 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_timeout.keyword;
      print(consistency.barcodepay_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_timeout.keyword = testData1s;
      print(consistency.barcodepay_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_timeout.keyword = testData2s;
      print(consistency.barcodepay_timeout.keyword);
      expect(consistency.barcodepay_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_timeout.keyword = defalut;
      print(consistency.barcodepay_timeout.keyword);
      expect(consistency.barcodepay_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00619_element_check_00596 **********\n\n");
    });

    test('00620_element_check_00597', () async {
      print("\n********** テスト実行：00620_element_check_00597 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.title;
      print(consistency.barcodepay_merchantCode.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.title = testData1s;
      print(consistency.barcodepay_merchantCode.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.title = testData2s;
      print(consistency.barcodepay_merchantCode.title);
      expect(consistency.barcodepay_merchantCode.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.title = defalut;
      print(consistency.barcodepay_merchantCode.title);
      expect(consistency.barcodepay_merchantCode.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00620_element_check_00597 **********\n\n");
    });

    test('00621_element_check_00598', () async {
      print("\n********** テスト実行：00621_element_check_00598 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.obj;
      print(consistency.barcodepay_merchantCode.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.obj = testData1;
      print(consistency.barcodepay_merchantCode.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.obj = testData2;
      print(consistency.barcodepay_merchantCode.obj);
      expect(consistency.barcodepay_merchantCode.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.obj = defalut;
      print(consistency.barcodepay_merchantCode.obj);
      expect(consistency.barcodepay_merchantCode.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00621_element_check_00598 **********\n\n");
    });

    test('00622_element_check_00599', () async {
      print("\n********** テスト実行：00622_element_check_00599 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.condi;
      print(consistency.barcodepay_merchantCode.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.condi = testData1;
      print(consistency.barcodepay_merchantCode.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.condi = testData2;
      print(consistency.barcodepay_merchantCode.condi);
      expect(consistency.barcodepay_merchantCode.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.condi = defalut;
      print(consistency.barcodepay_merchantCode.condi);
      expect(consistency.barcodepay_merchantCode.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00622_element_check_00599 **********\n\n");
    });

    test('00623_element_check_00600', () async {
      print("\n********** テスト実行：00623_element_check_00600 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.typ;
      print(consistency.barcodepay_merchantCode.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.typ = testData1;
      print(consistency.barcodepay_merchantCode.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.typ = testData2;
      print(consistency.barcodepay_merchantCode.typ);
      expect(consistency.barcodepay_merchantCode.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.typ = defalut;
      print(consistency.barcodepay_merchantCode.typ);
      expect(consistency.barcodepay_merchantCode.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00623_element_check_00600 **********\n\n");
    });

    test('00624_element_check_00601', () async {
      print("\n********** テスト実行：00624_element_check_00601 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.ini_typ;
      print(consistency.barcodepay_merchantCode.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.ini_typ = testData1;
      print(consistency.barcodepay_merchantCode.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.ini_typ = testData2;
      print(consistency.barcodepay_merchantCode.ini_typ);
      expect(consistency.barcodepay_merchantCode.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.ini_typ = defalut;
      print(consistency.barcodepay_merchantCode.ini_typ);
      expect(consistency.barcodepay_merchantCode.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00624_element_check_00601 **********\n\n");
    });

    test('00625_element_check_00602', () async {
      print("\n********** テスト実行：00625_element_check_00602 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.file;
      print(consistency.barcodepay_merchantCode.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.file = testData1s;
      print(consistency.barcodepay_merchantCode.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.file = testData2s;
      print(consistency.barcodepay_merchantCode.file);
      expect(consistency.barcodepay_merchantCode.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.file = defalut;
      print(consistency.barcodepay_merchantCode.file);
      expect(consistency.barcodepay_merchantCode.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00625_element_check_00602 **********\n\n");
    });

    test('00626_element_check_00603', () async {
      print("\n********** テスト実行：00626_element_check_00603 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.section;
      print(consistency.barcodepay_merchantCode.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.section = testData1s;
      print(consistency.barcodepay_merchantCode.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.section = testData2s;
      print(consistency.barcodepay_merchantCode.section);
      expect(consistency.barcodepay_merchantCode.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.section = defalut;
      print(consistency.barcodepay_merchantCode.section);
      expect(consistency.barcodepay_merchantCode.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00626_element_check_00603 **********\n\n");
    });

    test('00627_element_check_00604', () async {
      print("\n********** テスト実行：00627_element_check_00604 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_merchantCode.keyword;
      print(consistency.barcodepay_merchantCode.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_merchantCode.keyword = testData1s;
      print(consistency.barcodepay_merchantCode.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_merchantCode.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_merchantCode.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_merchantCode.keyword = testData2s;
      print(consistency.barcodepay_merchantCode.keyword);
      expect(consistency.barcodepay_merchantCode.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_merchantCode.keyword = defalut;
      print(consistency.barcodepay_merchantCode.keyword);
      expect(consistency.barcodepay_merchantCode.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_merchantCode.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00627_element_check_00604 **********\n\n");
    });

    test('00628_element_check_00605', () async {
      print("\n********** テスト実行：00628_element_check_00605 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.title;
      print(consistency.barcodepay_cliantId.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.title = testData1s;
      print(consistency.barcodepay_cliantId.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.title = testData2s;
      print(consistency.barcodepay_cliantId.title);
      expect(consistency.barcodepay_cliantId.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.title = defalut;
      print(consistency.barcodepay_cliantId.title);
      expect(consistency.barcodepay_cliantId.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00628_element_check_00605 **********\n\n");
    });

    test('00629_element_check_00606', () async {
      print("\n********** テスト実行：00629_element_check_00606 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.obj;
      print(consistency.barcodepay_cliantId.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.obj = testData1;
      print(consistency.barcodepay_cliantId.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.obj = testData2;
      print(consistency.barcodepay_cliantId.obj);
      expect(consistency.barcodepay_cliantId.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.obj = defalut;
      print(consistency.barcodepay_cliantId.obj);
      expect(consistency.barcodepay_cliantId.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00629_element_check_00606 **********\n\n");
    });

    test('00630_element_check_00607', () async {
      print("\n********** テスト実行：00630_element_check_00607 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.condi;
      print(consistency.barcodepay_cliantId.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.condi = testData1;
      print(consistency.barcodepay_cliantId.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.condi = testData2;
      print(consistency.barcodepay_cliantId.condi);
      expect(consistency.barcodepay_cliantId.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.condi = defalut;
      print(consistency.barcodepay_cliantId.condi);
      expect(consistency.barcodepay_cliantId.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00630_element_check_00607 **********\n\n");
    });

    test('00631_element_check_00608', () async {
      print("\n********** テスト実行：00631_element_check_00608 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.typ;
      print(consistency.barcodepay_cliantId.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.typ = testData1;
      print(consistency.barcodepay_cliantId.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.typ = testData2;
      print(consistency.barcodepay_cliantId.typ);
      expect(consistency.barcodepay_cliantId.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.typ = defalut;
      print(consistency.barcodepay_cliantId.typ);
      expect(consistency.barcodepay_cliantId.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00631_element_check_00608 **********\n\n");
    });

    test('00632_element_check_00609', () async {
      print("\n********** テスト実行：00632_element_check_00609 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.ini_typ;
      print(consistency.barcodepay_cliantId.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.ini_typ = testData1;
      print(consistency.barcodepay_cliantId.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.ini_typ = testData2;
      print(consistency.barcodepay_cliantId.ini_typ);
      expect(consistency.barcodepay_cliantId.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.ini_typ = defalut;
      print(consistency.barcodepay_cliantId.ini_typ);
      expect(consistency.barcodepay_cliantId.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00632_element_check_00609 **********\n\n");
    });

    test('00633_element_check_00610', () async {
      print("\n********** テスト実行：00633_element_check_00610 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.file;
      print(consistency.barcodepay_cliantId.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.file = testData1s;
      print(consistency.barcodepay_cliantId.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.file = testData2s;
      print(consistency.barcodepay_cliantId.file);
      expect(consistency.barcodepay_cliantId.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.file = defalut;
      print(consistency.barcodepay_cliantId.file);
      expect(consistency.barcodepay_cliantId.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00633_element_check_00610 **********\n\n");
    });

    test('00634_element_check_00611', () async {
      print("\n********** テスト実行：00634_element_check_00611 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.section;
      print(consistency.barcodepay_cliantId.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.section = testData1s;
      print(consistency.barcodepay_cliantId.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.section = testData2s;
      print(consistency.barcodepay_cliantId.section);
      expect(consistency.barcodepay_cliantId.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.section = defalut;
      print(consistency.barcodepay_cliantId.section);
      expect(consistency.barcodepay_cliantId.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00634_element_check_00611 **********\n\n");
    });

    test('00635_element_check_00612', () async {
      print("\n********** テスト実行：00635_element_check_00612 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.barcodepay_cliantId.keyword;
      print(consistency.barcodepay_cliantId.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.barcodepay_cliantId.keyword = testData1s;
      print(consistency.barcodepay_cliantId.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.barcodepay_cliantId.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.barcodepay_cliantId.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.barcodepay_cliantId.keyword = testData2s;
      print(consistency.barcodepay_cliantId.keyword);
      expect(consistency.barcodepay_cliantId.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.barcodepay_cliantId.keyword = defalut;
      print(consistency.barcodepay_cliantId.keyword);
      expect(consistency.barcodepay_cliantId.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.barcodepay_cliantId.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00635_element_check_00612 **********\n\n");
    });

    test('00636_element_check_00613', () async {
      print("\n********** テスト実行：00636_element_check_00613 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.DUMMY.title;
      print(consistency.DUMMY.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.DUMMY.title = testData1s;
      print(consistency.DUMMY.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.DUMMY.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.DUMMY.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.DUMMY.title = testData2s;
      print(consistency.DUMMY.title);
      expect(consistency.DUMMY.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.DUMMY.title = defalut;
      print(consistency.DUMMY.title);
      expect(consistency.DUMMY.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00636_element_check_00613 **********\n\n");
    });

    test('00637_element_check_00614', () async {
      print("\n********** テスト実行：00637_element_check_00614 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.DUMMY.file;
      print(consistency.DUMMY.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.DUMMY.file = testData1s;
      print(consistency.DUMMY.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.DUMMY.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.DUMMY.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.DUMMY.file = testData2s;
      print(consistency.DUMMY.file);
      expect(consistency.DUMMY.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.DUMMY.file = defalut;
      print(consistency.DUMMY.file);
      expect(consistency.DUMMY.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00637_element_check_00614 **********\n\n");
    });

    test('00638_element_check_00615', () async {
      print("\n********** テスト実行：00638_element_check_00615 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.DUMMY.typ;
      print(consistency.DUMMY.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.DUMMY.typ = testData1;
      print(consistency.DUMMY.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.DUMMY.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.DUMMY.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.DUMMY.typ = testData2;
      print(consistency.DUMMY.typ);
      expect(consistency.DUMMY.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.DUMMY.typ = defalut;
      print(consistency.DUMMY.typ);
      expect(consistency.DUMMY.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00638_element_check_00615 **********\n\n");
    });

    test('00639_element_check_00616', () async {
      print("\n********** テスト実行：00639_element_check_00616 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.DUMMY.obj;
      print(consistency.DUMMY.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.DUMMY.obj = testData1;
      print(consistency.DUMMY.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.DUMMY.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.DUMMY.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.DUMMY.obj = testData2;
      print(consistency.DUMMY.obj);
      expect(consistency.DUMMY.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.DUMMY.obj = defalut;
      print(consistency.DUMMY.obj);
      expect(consistency.DUMMY.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.DUMMY.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00639_element_check_00616 **********\n\n");
    });

    test('00640_element_check_00617', () async {
      print("\n********** テスト実行：00640_element_check_00617 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.title;
      print(consistency.linepay_url.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.title = testData1s;
      print(consistency.linepay_url.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.title = testData2s;
      print(consistency.linepay_url.title);
      expect(consistency.linepay_url.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.title = defalut;
      print(consistency.linepay_url.title);
      expect(consistency.linepay_url.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00640_element_check_00617 **********\n\n");
    });

    test('00641_element_check_00618', () async {
      print("\n********** テスト実行：00641_element_check_00618 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.obj;
      print(consistency.linepay_url.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.obj = testData1;
      print(consistency.linepay_url.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.obj = testData2;
      print(consistency.linepay_url.obj);
      expect(consistency.linepay_url.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.obj = defalut;
      print(consistency.linepay_url.obj);
      expect(consistency.linepay_url.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00641_element_check_00618 **********\n\n");
    });

    test('00642_element_check_00619', () async {
      print("\n********** テスト実行：00642_element_check_00619 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.condi;
      print(consistency.linepay_url.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.condi = testData1;
      print(consistency.linepay_url.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.condi = testData2;
      print(consistency.linepay_url.condi);
      expect(consistency.linepay_url.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.condi = defalut;
      print(consistency.linepay_url.condi);
      expect(consistency.linepay_url.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00642_element_check_00619 **********\n\n");
    });

    test('00643_element_check_00620', () async {
      print("\n********** テスト実行：00643_element_check_00620 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.typ;
      print(consistency.linepay_url.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.typ = testData1;
      print(consistency.linepay_url.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.typ = testData2;
      print(consistency.linepay_url.typ);
      expect(consistency.linepay_url.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.typ = defalut;
      print(consistency.linepay_url.typ);
      expect(consistency.linepay_url.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00643_element_check_00620 **********\n\n");
    });

    test('00644_element_check_00621', () async {
      print("\n********** テスト実行：00644_element_check_00621 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.ini_typ;
      print(consistency.linepay_url.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.ini_typ = testData1;
      print(consistency.linepay_url.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.ini_typ = testData2;
      print(consistency.linepay_url.ini_typ);
      expect(consistency.linepay_url.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.ini_typ = defalut;
      print(consistency.linepay_url.ini_typ);
      expect(consistency.linepay_url.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00644_element_check_00621 **********\n\n");
    });

    test('00645_element_check_00622', () async {
      print("\n********** テスト実行：00645_element_check_00622 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.file;
      print(consistency.linepay_url.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.file = testData1s;
      print(consistency.linepay_url.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.file = testData2s;
      print(consistency.linepay_url.file);
      expect(consistency.linepay_url.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.file = defalut;
      print(consistency.linepay_url.file);
      expect(consistency.linepay_url.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00645_element_check_00622 **********\n\n");
    });

    test('00646_element_check_00623', () async {
      print("\n********** テスト実行：00646_element_check_00623 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.section;
      print(consistency.linepay_url.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.section = testData1s;
      print(consistency.linepay_url.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.section = testData2s;
      print(consistency.linepay_url.section);
      expect(consistency.linepay_url.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.section = defalut;
      print(consistency.linepay_url.section);
      expect(consistency.linepay_url.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00646_element_check_00623 **********\n\n");
    });

    test('00647_element_check_00624', () async {
      print("\n********** テスト実行：00647_element_check_00624 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_url.keyword;
      print(consistency.linepay_url.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_url.keyword = testData1s;
      print(consistency.linepay_url.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_url.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_url.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_url.keyword = testData2s;
      print(consistency.linepay_url.keyword);
      expect(consistency.linepay_url.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_url.keyword = defalut;
      print(consistency.linepay_url.keyword);
      expect(consistency.linepay_url.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_url.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00647_element_check_00624 **********\n\n");
    });

    test('00648_element_check_00625', () async {
      print("\n********** テスト実行：00648_element_check_00625 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.title;
      print(consistency.linepay_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.title = testData1s;
      print(consistency.linepay_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.title = testData2s;
      print(consistency.linepay_timeout.title);
      expect(consistency.linepay_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.title = defalut;
      print(consistency.linepay_timeout.title);
      expect(consistency.linepay_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00648_element_check_00625 **********\n\n");
    });

    test('00649_element_check_00626', () async {
      print("\n********** テスト実行：00649_element_check_00626 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.obj;
      print(consistency.linepay_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.obj = testData1;
      print(consistency.linepay_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.obj = testData2;
      print(consistency.linepay_timeout.obj);
      expect(consistency.linepay_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.obj = defalut;
      print(consistency.linepay_timeout.obj);
      expect(consistency.linepay_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00649_element_check_00626 **********\n\n");
    });

    test('00650_element_check_00627', () async {
      print("\n********** テスト実行：00650_element_check_00627 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.condi;
      print(consistency.linepay_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.condi = testData1;
      print(consistency.linepay_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.condi = testData2;
      print(consistency.linepay_timeout.condi);
      expect(consistency.linepay_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.condi = defalut;
      print(consistency.linepay_timeout.condi);
      expect(consistency.linepay_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00650_element_check_00627 **********\n\n");
    });

    test('00651_element_check_00628', () async {
      print("\n********** テスト実行：00651_element_check_00628 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.typ;
      print(consistency.linepay_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.typ = testData1;
      print(consistency.linepay_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.typ = testData2;
      print(consistency.linepay_timeout.typ);
      expect(consistency.linepay_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.typ = defalut;
      print(consistency.linepay_timeout.typ);
      expect(consistency.linepay_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00651_element_check_00628 **********\n\n");
    });

    test('00652_element_check_00629', () async {
      print("\n********** テスト実行：00652_element_check_00629 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.ini_typ;
      print(consistency.linepay_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.ini_typ = testData1;
      print(consistency.linepay_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.ini_typ = testData2;
      print(consistency.linepay_timeout.ini_typ);
      expect(consistency.linepay_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.ini_typ = defalut;
      print(consistency.linepay_timeout.ini_typ);
      expect(consistency.linepay_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00652_element_check_00629 **********\n\n");
    });

    test('00653_element_check_00630', () async {
      print("\n********** テスト実行：00653_element_check_00630 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.file;
      print(consistency.linepay_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.file = testData1s;
      print(consistency.linepay_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.file = testData2s;
      print(consistency.linepay_timeout.file);
      expect(consistency.linepay_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.file = defalut;
      print(consistency.linepay_timeout.file);
      expect(consistency.linepay_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00653_element_check_00630 **********\n\n");
    });

    test('00654_element_check_00631', () async {
      print("\n********** テスト実行：00654_element_check_00631 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.section;
      print(consistency.linepay_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.section = testData1s;
      print(consistency.linepay_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.section = testData2s;
      print(consistency.linepay_timeout.section);
      expect(consistency.linepay_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.section = defalut;
      print(consistency.linepay_timeout.section);
      expect(consistency.linepay_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00654_element_check_00631 **********\n\n");
    });

    test('00655_element_check_00632', () async {
      print("\n********** テスト実行：00655_element_check_00632 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_timeout.keyword;
      print(consistency.linepay_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_timeout.keyword = testData1s;
      print(consistency.linepay_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_timeout.keyword = testData2s;
      print(consistency.linepay_timeout.keyword);
      expect(consistency.linepay_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_timeout.keyword = defalut;
      print(consistency.linepay_timeout.keyword);
      expect(consistency.linepay_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00655_element_check_00632 **********\n\n");
    });

    test('00656_element_check_00633', () async {
      print("\n********** テスト実行：00656_element_check_00633 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.title;
      print(consistency.linepay_channelId.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.title = testData1s;
      print(consistency.linepay_channelId.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.title = testData2s;
      print(consistency.linepay_channelId.title);
      expect(consistency.linepay_channelId.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.title = defalut;
      print(consistency.linepay_channelId.title);
      expect(consistency.linepay_channelId.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00656_element_check_00633 **********\n\n");
    });

    test('00657_element_check_00634', () async {
      print("\n********** テスト実行：00657_element_check_00634 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.obj;
      print(consistency.linepay_channelId.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.obj = testData1;
      print(consistency.linepay_channelId.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.obj = testData2;
      print(consistency.linepay_channelId.obj);
      expect(consistency.linepay_channelId.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.obj = defalut;
      print(consistency.linepay_channelId.obj);
      expect(consistency.linepay_channelId.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00657_element_check_00634 **********\n\n");
    });

    test('00658_element_check_00635', () async {
      print("\n********** テスト実行：00658_element_check_00635 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.condi;
      print(consistency.linepay_channelId.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.condi = testData1;
      print(consistency.linepay_channelId.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.condi = testData2;
      print(consistency.linepay_channelId.condi);
      expect(consistency.linepay_channelId.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.condi = defalut;
      print(consistency.linepay_channelId.condi);
      expect(consistency.linepay_channelId.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00658_element_check_00635 **********\n\n");
    });

    test('00659_element_check_00636', () async {
      print("\n********** テスト実行：00659_element_check_00636 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.typ;
      print(consistency.linepay_channelId.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.typ = testData1;
      print(consistency.linepay_channelId.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.typ = testData2;
      print(consistency.linepay_channelId.typ);
      expect(consistency.linepay_channelId.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.typ = defalut;
      print(consistency.linepay_channelId.typ);
      expect(consistency.linepay_channelId.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00659_element_check_00636 **********\n\n");
    });

    test('00660_element_check_00637', () async {
      print("\n********** テスト実行：00660_element_check_00637 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.ini_typ;
      print(consistency.linepay_channelId.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.ini_typ = testData1;
      print(consistency.linepay_channelId.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.ini_typ = testData2;
      print(consistency.linepay_channelId.ini_typ);
      expect(consistency.linepay_channelId.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.ini_typ = defalut;
      print(consistency.linepay_channelId.ini_typ);
      expect(consistency.linepay_channelId.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00660_element_check_00637 **********\n\n");
    });

    test('00661_element_check_00638', () async {
      print("\n********** テスト実行：00661_element_check_00638 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.file;
      print(consistency.linepay_channelId.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.file = testData1s;
      print(consistency.linepay_channelId.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.file = testData2s;
      print(consistency.linepay_channelId.file);
      expect(consistency.linepay_channelId.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.file = defalut;
      print(consistency.linepay_channelId.file);
      expect(consistency.linepay_channelId.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00661_element_check_00638 **********\n\n");
    });

    test('00662_element_check_00639', () async {
      print("\n********** テスト実行：00662_element_check_00639 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.section;
      print(consistency.linepay_channelId.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.section = testData1s;
      print(consistency.linepay_channelId.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.section = testData2s;
      print(consistency.linepay_channelId.section);
      expect(consistency.linepay_channelId.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.section = defalut;
      print(consistency.linepay_channelId.section);
      expect(consistency.linepay_channelId.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00662_element_check_00639 **********\n\n");
    });

    test('00663_element_check_00640', () async {
      print("\n********** テスト実行：00663_element_check_00640 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelId.keyword;
      print(consistency.linepay_channelId.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelId.keyword = testData1s;
      print(consistency.linepay_channelId.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelId.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelId.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelId.keyword = testData2s;
      print(consistency.linepay_channelId.keyword);
      expect(consistency.linepay_channelId.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelId.keyword = defalut;
      print(consistency.linepay_channelId.keyword);
      expect(consistency.linepay_channelId.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelId.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00663_element_check_00640 **********\n\n");
    });

    test('00664_element_check_00641', () async {
      print("\n********** テスト実行：00664_element_check_00641 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.title;
      print(consistency.linepay_channelSecretKey.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.title = testData1s;
      print(consistency.linepay_channelSecretKey.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.title = testData2s;
      print(consistency.linepay_channelSecretKey.title);
      expect(consistency.linepay_channelSecretKey.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.title = defalut;
      print(consistency.linepay_channelSecretKey.title);
      expect(consistency.linepay_channelSecretKey.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00664_element_check_00641 **********\n\n");
    });

    test('00665_element_check_00642', () async {
      print("\n********** テスト実行：00665_element_check_00642 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.obj;
      print(consistency.linepay_channelSecretKey.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.obj = testData1;
      print(consistency.linepay_channelSecretKey.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.obj = testData2;
      print(consistency.linepay_channelSecretKey.obj);
      expect(consistency.linepay_channelSecretKey.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.obj = defalut;
      print(consistency.linepay_channelSecretKey.obj);
      expect(consistency.linepay_channelSecretKey.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00665_element_check_00642 **********\n\n");
    });

    test('00666_element_check_00643', () async {
      print("\n********** テスト実行：00666_element_check_00643 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.condi;
      print(consistency.linepay_channelSecretKey.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.condi = testData1;
      print(consistency.linepay_channelSecretKey.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.condi = testData2;
      print(consistency.linepay_channelSecretKey.condi);
      expect(consistency.linepay_channelSecretKey.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.condi = defalut;
      print(consistency.linepay_channelSecretKey.condi);
      expect(consistency.linepay_channelSecretKey.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00666_element_check_00643 **********\n\n");
    });

    test('00667_element_check_00644', () async {
      print("\n********** テスト実行：00667_element_check_00644 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.typ;
      print(consistency.linepay_channelSecretKey.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.typ = testData1;
      print(consistency.linepay_channelSecretKey.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.typ = testData2;
      print(consistency.linepay_channelSecretKey.typ);
      expect(consistency.linepay_channelSecretKey.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.typ = defalut;
      print(consistency.linepay_channelSecretKey.typ);
      expect(consistency.linepay_channelSecretKey.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00667_element_check_00644 **********\n\n");
    });

    test('00668_element_check_00645', () async {
      print("\n********** テスト実行：00668_element_check_00645 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.ini_typ;
      print(consistency.linepay_channelSecretKey.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.ini_typ = testData1;
      print(consistency.linepay_channelSecretKey.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.ini_typ = testData2;
      print(consistency.linepay_channelSecretKey.ini_typ);
      expect(consistency.linepay_channelSecretKey.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.ini_typ = defalut;
      print(consistency.linepay_channelSecretKey.ini_typ);
      expect(consistency.linepay_channelSecretKey.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00668_element_check_00645 **********\n\n");
    });

    test('00669_element_check_00646', () async {
      print("\n********** テスト実行：00669_element_check_00646 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.file;
      print(consistency.linepay_channelSecretKey.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.file = testData1s;
      print(consistency.linepay_channelSecretKey.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.file = testData2s;
      print(consistency.linepay_channelSecretKey.file);
      expect(consistency.linepay_channelSecretKey.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.file = defalut;
      print(consistency.linepay_channelSecretKey.file);
      expect(consistency.linepay_channelSecretKey.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00669_element_check_00646 **********\n\n");
    });

    test('00670_element_check_00647', () async {
      print("\n********** テスト実行：00670_element_check_00647 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.section;
      print(consistency.linepay_channelSecretKey.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.section = testData1s;
      print(consistency.linepay_channelSecretKey.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.section = testData2s;
      print(consistency.linepay_channelSecretKey.section);
      expect(consistency.linepay_channelSecretKey.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.section = defalut;
      print(consistency.linepay_channelSecretKey.section);
      expect(consistency.linepay_channelSecretKey.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00670_element_check_00647 **********\n\n");
    });

    test('00671_element_check_00648', () async {
      print("\n********** テスト実行：00671_element_check_00648 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_channelSecretKey.keyword;
      print(consistency.linepay_channelSecretKey.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_channelSecretKey.keyword = testData1s;
      print(consistency.linepay_channelSecretKey.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_channelSecretKey.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_channelSecretKey.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_channelSecretKey.keyword = testData2s;
      print(consistency.linepay_channelSecretKey.keyword);
      expect(consistency.linepay_channelSecretKey.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_channelSecretKey.keyword = defalut;
      print(consistency.linepay_channelSecretKey.keyword);
      expect(consistency.linepay_channelSecretKey.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_channelSecretKey.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00671_element_check_00648 **********\n\n");
    });

    test('00672_element_check_00649', () async {
      print("\n********** テスト実行：00672_element_check_00649 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.title;
      print(consistency.linepay_line_at.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.title = testData1s;
      print(consistency.linepay_line_at.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.title = testData2s;
      print(consistency.linepay_line_at.title);
      expect(consistency.linepay_line_at.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.title = defalut;
      print(consistency.linepay_line_at.title);
      expect(consistency.linepay_line_at.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00672_element_check_00649 **********\n\n");
    });

    test('00673_element_check_00650', () async {
      print("\n********** テスト実行：00673_element_check_00650 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.obj;
      print(consistency.linepay_line_at.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.obj = testData1;
      print(consistency.linepay_line_at.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.obj = testData2;
      print(consistency.linepay_line_at.obj);
      expect(consistency.linepay_line_at.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.obj = defalut;
      print(consistency.linepay_line_at.obj);
      expect(consistency.linepay_line_at.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00673_element_check_00650 **********\n\n");
    });

    test('00674_element_check_00651', () async {
      print("\n********** テスト実行：00674_element_check_00651 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.condi;
      print(consistency.linepay_line_at.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.condi = testData1;
      print(consistency.linepay_line_at.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.condi = testData2;
      print(consistency.linepay_line_at.condi);
      expect(consistency.linepay_line_at.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.condi = defalut;
      print(consistency.linepay_line_at.condi);
      expect(consistency.linepay_line_at.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00674_element_check_00651 **********\n\n");
    });

    test('00675_element_check_00652', () async {
      print("\n********** テスト実行：00675_element_check_00652 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.typ;
      print(consistency.linepay_line_at.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.typ = testData1;
      print(consistency.linepay_line_at.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.typ = testData2;
      print(consistency.linepay_line_at.typ);
      expect(consistency.linepay_line_at.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.typ = defalut;
      print(consistency.linepay_line_at.typ);
      expect(consistency.linepay_line_at.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00675_element_check_00652 **********\n\n");
    });

    test('00676_element_check_00653', () async {
      print("\n********** テスト実行：00676_element_check_00653 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.ini_typ;
      print(consistency.linepay_line_at.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.ini_typ = testData1;
      print(consistency.linepay_line_at.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.ini_typ = testData2;
      print(consistency.linepay_line_at.ini_typ);
      expect(consistency.linepay_line_at.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.ini_typ = defalut;
      print(consistency.linepay_line_at.ini_typ);
      expect(consistency.linepay_line_at.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00676_element_check_00653 **********\n\n");
    });

    test('00677_element_check_00654', () async {
      print("\n********** テスト実行：00677_element_check_00654 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.file;
      print(consistency.linepay_line_at.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.file = testData1s;
      print(consistency.linepay_line_at.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.file = testData2s;
      print(consistency.linepay_line_at.file);
      expect(consistency.linepay_line_at.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.file = defalut;
      print(consistency.linepay_line_at.file);
      expect(consistency.linepay_line_at.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00677_element_check_00654 **********\n\n");
    });

    test('00678_element_check_00655', () async {
      print("\n********** テスト実行：00678_element_check_00655 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.section;
      print(consistency.linepay_line_at.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.section = testData1s;
      print(consistency.linepay_line_at.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.section = testData2s;
      print(consistency.linepay_line_at.section);
      expect(consistency.linepay_line_at.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.section = defalut;
      print(consistency.linepay_line_at.section);
      expect(consistency.linepay_line_at.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00678_element_check_00655 **********\n\n");
    });

    test('00679_element_check_00656', () async {
      print("\n********** テスト実行：00679_element_check_00656 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.linepay_line_at.keyword;
      print(consistency.linepay_line_at.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.linepay_line_at.keyword = testData1s;
      print(consistency.linepay_line_at.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.linepay_line_at.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.linepay_line_at.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.linepay_line_at.keyword = testData2s;
      print(consistency.linepay_line_at.keyword);
      expect(consistency.linepay_line_at.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.linepay_line_at.keyword = defalut;
      print(consistency.linepay_line_at.keyword);
      expect(consistency.linepay_line_at.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.linepay_line_at.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00679_element_check_00656 **********\n\n");
    });

    test('00680_element_check_00657', () async {
      print("\n********** テスト実行：00680_element_check_00657 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.title;
      print(consistency.onepay_url.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.title = testData1s;
      print(consistency.onepay_url.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.title = testData2s;
      print(consistency.onepay_url.title);
      expect(consistency.onepay_url.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.title = defalut;
      print(consistency.onepay_url.title);
      expect(consistency.onepay_url.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00680_element_check_00657 **********\n\n");
    });

    test('00681_element_check_00658', () async {
      print("\n********** テスト実行：00681_element_check_00658 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.obj;
      print(consistency.onepay_url.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.obj = testData1;
      print(consistency.onepay_url.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.obj = testData2;
      print(consistency.onepay_url.obj);
      expect(consistency.onepay_url.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.obj = defalut;
      print(consistency.onepay_url.obj);
      expect(consistency.onepay_url.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00681_element_check_00658 **********\n\n");
    });

    test('00682_element_check_00659', () async {
      print("\n********** テスト実行：00682_element_check_00659 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.condi;
      print(consistency.onepay_url.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.condi = testData1;
      print(consistency.onepay_url.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.condi = testData2;
      print(consistency.onepay_url.condi);
      expect(consistency.onepay_url.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.condi = defalut;
      print(consistency.onepay_url.condi);
      expect(consistency.onepay_url.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00682_element_check_00659 **********\n\n");
    });

    test('00683_element_check_00660', () async {
      print("\n********** テスト実行：00683_element_check_00660 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.typ;
      print(consistency.onepay_url.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.typ = testData1;
      print(consistency.onepay_url.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.typ = testData2;
      print(consistency.onepay_url.typ);
      expect(consistency.onepay_url.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.typ = defalut;
      print(consistency.onepay_url.typ);
      expect(consistency.onepay_url.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00683_element_check_00660 **********\n\n");
    });

    test('00684_element_check_00661', () async {
      print("\n********** テスト実行：00684_element_check_00661 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.ini_typ;
      print(consistency.onepay_url.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.ini_typ = testData1;
      print(consistency.onepay_url.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.ini_typ = testData2;
      print(consistency.onepay_url.ini_typ);
      expect(consistency.onepay_url.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.ini_typ = defalut;
      print(consistency.onepay_url.ini_typ);
      expect(consistency.onepay_url.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00684_element_check_00661 **********\n\n");
    });

    test('00685_element_check_00662', () async {
      print("\n********** テスト実行：00685_element_check_00662 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.file;
      print(consistency.onepay_url.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.file = testData1s;
      print(consistency.onepay_url.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.file = testData2s;
      print(consistency.onepay_url.file);
      expect(consistency.onepay_url.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.file = defalut;
      print(consistency.onepay_url.file);
      expect(consistency.onepay_url.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00685_element_check_00662 **********\n\n");
    });

    test('00686_element_check_00663', () async {
      print("\n********** テスト実行：00686_element_check_00663 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.section;
      print(consistency.onepay_url.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.section = testData1s;
      print(consistency.onepay_url.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.section = testData2s;
      print(consistency.onepay_url.section);
      expect(consistency.onepay_url.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.section = defalut;
      print(consistency.onepay_url.section);
      expect(consistency.onepay_url.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00686_element_check_00663 **********\n\n");
    });

    test('00687_element_check_00664', () async {
      print("\n********** テスト実行：00687_element_check_00664 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_url.keyword;
      print(consistency.onepay_url.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_url.keyword = testData1s;
      print(consistency.onepay_url.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_url.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_url.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_url.keyword = testData2s;
      print(consistency.onepay_url.keyword);
      expect(consistency.onepay_url.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_url.keyword = defalut;
      print(consistency.onepay_url.keyword);
      expect(consistency.onepay_url.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_url.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00687_element_check_00664 **********\n\n");
    });

    test('00688_element_check_00665', () async {
      print("\n********** テスト実行：00688_element_check_00665 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.title;
      print(consistency.onepay_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.title = testData1s;
      print(consistency.onepay_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.title = testData2s;
      print(consistency.onepay_timeout.title);
      expect(consistency.onepay_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.title = defalut;
      print(consistency.onepay_timeout.title);
      expect(consistency.onepay_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00688_element_check_00665 **********\n\n");
    });

    test('00689_element_check_00666', () async {
      print("\n********** テスト実行：00689_element_check_00666 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.obj;
      print(consistency.onepay_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.obj = testData1;
      print(consistency.onepay_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.obj = testData2;
      print(consistency.onepay_timeout.obj);
      expect(consistency.onepay_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.obj = defalut;
      print(consistency.onepay_timeout.obj);
      expect(consistency.onepay_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00689_element_check_00666 **********\n\n");
    });

    test('00690_element_check_00667', () async {
      print("\n********** テスト実行：00690_element_check_00667 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.condi;
      print(consistency.onepay_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.condi = testData1;
      print(consistency.onepay_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.condi = testData2;
      print(consistency.onepay_timeout.condi);
      expect(consistency.onepay_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.condi = defalut;
      print(consistency.onepay_timeout.condi);
      expect(consistency.onepay_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00690_element_check_00667 **********\n\n");
    });

    test('00691_element_check_00668', () async {
      print("\n********** テスト実行：00691_element_check_00668 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.typ;
      print(consistency.onepay_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.typ = testData1;
      print(consistency.onepay_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.typ = testData2;
      print(consistency.onepay_timeout.typ);
      expect(consistency.onepay_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.typ = defalut;
      print(consistency.onepay_timeout.typ);
      expect(consistency.onepay_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00691_element_check_00668 **********\n\n");
    });

    test('00692_element_check_00669', () async {
      print("\n********** テスト実行：00692_element_check_00669 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.ini_typ;
      print(consistency.onepay_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.ini_typ = testData1;
      print(consistency.onepay_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.ini_typ = testData2;
      print(consistency.onepay_timeout.ini_typ);
      expect(consistency.onepay_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.ini_typ = defalut;
      print(consistency.onepay_timeout.ini_typ);
      expect(consistency.onepay_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00692_element_check_00669 **********\n\n");
    });

    test('00693_element_check_00670', () async {
      print("\n********** テスト実行：00693_element_check_00670 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.file;
      print(consistency.onepay_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.file = testData1s;
      print(consistency.onepay_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.file = testData2s;
      print(consistency.onepay_timeout.file);
      expect(consistency.onepay_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.file = defalut;
      print(consistency.onepay_timeout.file);
      expect(consistency.onepay_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00693_element_check_00670 **********\n\n");
    });

    test('00694_element_check_00671', () async {
      print("\n********** テスト実行：00694_element_check_00671 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.section;
      print(consistency.onepay_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.section = testData1s;
      print(consistency.onepay_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.section = testData2s;
      print(consistency.onepay_timeout.section);
      expect(consistency.onepay_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.section = defalut;
      print(consistency.onepay_timeout.section);
      expect(consistency.onepay_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00694_element_check_00671 **********\n\n");
    });

    test('00695_element_check_00672', () async {
      print("\n********** テスト実行：00695_element_check_00672 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.onepay_timeout.keyword;
      print(consistency.onepay_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.onepay_timeout.keyword = testData1s;
      print(consistency.onepay_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.onepay_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.onepay_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.onepay_timeout.keyword = testData2s;
      print(consistency.onepay_timeout.keyword);
      expect(consistency.onepay_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.onepay_timeout.keyword = defalut;
      print(consistency.onepay_timeout.keyword);
      expect(consistency.onepay_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.onepay_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00695_element_check_00672 **********\n\n");
    });

    test('00696_element_check_00673', () async {
      print("\n********** テスト実行：00696_element_check_00673 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.title;
      print(consistency.canalpayment_url.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.title = testData1s;
      print(consistency.canalpayment_url.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.title = testData2s;
      print(consistency.canalpayment_url.title);
      expect(consistency.canalpayment_url.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.title = defalut;
      print(consistency.canalpayment_url.title);
      expect(consistency.canalpayment_url.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00696_element_check_00673 **********\n\n");
    });

    test('00697_element_check_00674', () async {
      print("\n********** テスト実行：00697_element_check_00674 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.obj;
      print(consistency.canalpayment_url.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.obj = testData1;
      print(consistency.canalpayment_url.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.obj = testData2;
      print(consistency.canalpayment_url.obj);
      expect(consistency.canalpayment_url.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.obj = defalut;
      print(consistency.canalpayment_url.obj);
      expect(consistency.canalpayment_url.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00697_element_check_00674 **********\n\n");
    });

    test('00698_element_check_00675', () async {
      print("\n********** テスト実行：00698_element_check_00675 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.condi;
      print(consistency.canalpayment_url.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.condi = testData1;
      print(consistency.canalpayment_url.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.condi = testData2;
      print(consistency.canalpayment_url.condi);
      expect(consistency.canalpayment_url.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.condi = defalut;
      print(consistency.canalpayment_url.condi);
      expect(consistency.canalpayment_url.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00698_element_check_00675 **********\n\n");
    });

    test('00699_element_check_00676', () async {
      print("\n********** テスト実行：00699_element_check_00676 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.typ;
      print(consistency.canalpayment_url.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.typ = testData1;
      print(consistency.canalpayment_url.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.typ = testData2;
      print(consistency.canalpayment_url.typ);
      expect(consistency.canalpayment_url.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.typ = defalut;
      print(consistency.canalpayment_url.typ);
      expect(consistency.canalpayment_url.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00699_element_check_00676 **********\n\n");
    });

    test('00700_element_check_00677', () async {
      print("\n********** テスト実行：00700_element_check_00677 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.ini_typ;
      print(consistency.canalpayment_url.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.ini_typ = testData1;
      print(consistency.canalpayment_url.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.ini_typ = testData2;
      print(consistency.canalpayment_url.ini_typ);
      expect(consistency.canalpayment_url.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.ini_typ = defalut;
      print(consistency.canalpayment_url.ini_typ);
      expect(consistency.canalpayment_url.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00700_element_check_00677 **********\n\n");
    });

    test('00701_element_check_00678', () async {
      print("\n********** テスト実行：00701_element_check_00678 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.file;
      print(consistency.canalpayment_url.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.file = testData1s;
      print(consistency.canalpayment_url.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.file = testData2s;
      print(consistency.canalpayment_url.file);
      expect(consistency.canalpayment_url.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.file = defalut;
      print(consistency.canalpayment_url.file);
      expect(consistency.canalpayment_url.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00701_element_check_00678 **********\n\n");
    });

    test('00702_element_check_00679', () async {
      print("\n********** テスト実行：00702_element_check_00679 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.section;
      print(consistency.canalpayment_url.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.section = testData1s;
      print(consistency.canalpayment_url.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.section = testData2s;
      print(consistency.canalpayment_url.section);
      expect(consistency.canalpayment_url.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.section = defalut;
      print(consistency.canalpayment_url.section);
      expect(consistency.canalpayment_url.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00702_element_check_00679 **********\n\n");
    });

    test('00703_element_check_00680', () async {
      print("\n********** テスト実行：00703_element_check_00680 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_url.keyword;
      print(consistency.canalpayment_url.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_url.keyword = testData1s;
      print(consistency.canalpayment_url.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_url.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_url.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_url.keyword = testData2s;
      print(consistency.canalpayment_url.keyword);
      expect(consistency.canalpayment_url.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_url.keyword = defalut;
      print(consistency.canalpayment_url.keyword);
      expect(consistency.canalpayment_url.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_url.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00703_element_check_00680 **********\n\n");
    });

    test('00704_element_check_00681', () async {
      print("\n********** テスト実行：00704_element_check_00681 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.title;
      print(consistency.canalpayment_timeout.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.title = testData1s;
      print(consistency.canalpayment_timeout.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.title = testData2s;
      print(consistency.canalpayment_timeout.title);
      expect(consistency.canalpayment_timeout.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.title = defalut;
      print(consistency.canalpayment_timeout.title);
      expect(consistency.canalpayment_timeout.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00704_element_check_00681 **********\n\n");
    });

    test('00705_element_check_00682', () async {
      print("\n********** テスト実行：00705_element_check_00682 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.obj;
      print(consistency.canalpayment_timeout.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.obj = testData1;
      print(consistency.canalpayment_timeout.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.obj = testData2;
      print(consistency.canalpayment_timeout.obj);
      expect(consistency.canalpayment_timeout.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.obj = defalut;
      print(consistency.canalpayment_timeout.obj);
      expect(consistency.canalpayment_timeout.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00705_element_check_00682 **********\n\n");
    });

    test('00706_element_check_00683', () async {
      print("\n********** テスト実行：00706_element_check_00683 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.condi;
      print(consistency.canalpayment_timeout.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.condi = testData1;
      print(consistency.canalpayment_timeout.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.condi = testData2;
      print(consistency.canalpayment_timeout.condi);
      expect(consistency.canalpayment_timeout.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.condi = defalut;
      print(consistency.canalpayment_timeout.condi);
      expect(consistency.canalpayment_timeout.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00706_element_check_00683 **********\n\n");
    });

    test('00707_element_check_00684', () async {
      print("\n********** テスト実行：00707_element_check_00684 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.typ;
      print(consistency.canalpayment_timeout.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.typ = testData1;
      print(consistency.canalpayment_timeout.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.typ = testData2;
      print(consistency.canalpayment_timeout.typ);
      expect(consistency.canalpayment_timeout.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.typ = defalut;
      print(consistency.canalpayment_timeout.typ);
      expect(consistency.canalpayment_timeout.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00707_element_check_00684 **********\n\n");
    });

    test('00708_element_check_00685', () async {
      print("\n********** テスト実行：00708_element_check_00685 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.ini_typ;
      print(consistency.canalpayment_timeout.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.ini_typ = testData1;
      print(consistency.canalpayment_timeout.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.ini_typ = testData2;
      print(consistency.canalpayment_timeout.ini_typ);
      expect(consistency.canalpayment_timeout.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.ini_typ = defalut;
      print(consistency.canalpayment_timeout.ini_typ);
      expect(consistency.canalpayment_timeout.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00708_element_check_00685 **********\n\n");
    });

    test('00709_element_check_00686', () async {
      print("\n********** テスト実行：00709_element_check_00686 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.file;
      print(consistency.canalpayment_timeout.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.file = testData1s;
      print(consistency.canalpayment_timeout.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.file = testData2s;
      print(consistency.canalpayment_timeout.file);
      expect(consistency.canalpayment_timeout.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.file = defalut;
      print(consistency.canalpayment_timeout.file);
      expect(consistency.canalpayment_timeout.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00709_element_check_00686 **********\n\n");
    });

    test('00710_element_check_00687', () async {
      print("\n********** テスト実行：00710_element_check_00687 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.section;
      print(consistency.canalpayment_timeout.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.section = testData1s;
      print(consistency.canalpayment_timeout.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.section = testData2s;
      print(consistency.canalpayment_timeout.section);
      expect(consistency.canalpayment_timeout.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.section = defalut;
      print(consistency.canalpayment_timeout.section);
      expect(consistency.canalpayment_timeout.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00710_element_check_00687 **********\n\n");
    });

    test('00711_element_check_00688', () async {
      print("\n********** テスト実行：00711_element_check_00688 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_timeout.keyword;
      print(consistency.canalpayment_timeout.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_timeout.keyword = testData1s;
      print(consistency.canalpayment_timeout.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_timeout.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_timeout.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_timeout.keyword = testData2s;
      print(consistency.canalpayment_timeout.keyword);
      expect(consistency.canalpayment_timeout.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_timeout.keyword = defalut;
      print(consistency.canalpayment_timeout.keyword);
      expect(consistency.canalpayment_timeout.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_timeout.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00711_element_check_00688 **********\n\n");
    });

    test('00712_element_check_00689', () async {
      print("\n********** テスト実行：00712_element_check_00689 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.title;
      print(consistency.canalpayment_company_code.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.title = testData1s;
      print(consistency.canalpayment_company_code.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.title = testData2s;
      print(consistency.canalpayment_company_code.title);
      expect(consistency.canalpayment_company_code.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.title = defalut;
      print(consistency.canalpayment_company_code.title);
      expect(consistency.canalpayment_company_code.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00712_element_check_00689 **********\n\n");
    });

    test('00713_element_check_00690', () async {
      print("\n********** テスト実行：00713_element_check_00690 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.obj;
      print(consistency.canalpayment_company_code.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.obj = testData1;
      print(consistency.canalpayment_company_code.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.obj = testData2;
      print(consistency.canalpayment_company_code.obj);
      expect(consistency.canalpayment_company_code.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.obj = defalut;
      print(consistency.canalpayment_company_code.obj);
      expect(consistency.canalpayment_company_code.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00713_element_check_00690 **********\n\n");
    });

    test('00714_element_check_00691', () async {
      print("\n********** テスト実行：00714_element_check_00691 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.condi;
      print(consistency.canalpayment_company_code.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.condi = testData1;
      print(consistency.canalpayment_company_code.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.condi = testData2;
      print(consistency.canalpayment_company_code.condi);
      expect(consistency.canalpayment_company_code.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.condi = defalut;
      print(consistency.canalpayment_company_code.condi);
      expect(consistency.canalpayment_company_code.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00714_element_check_00691 **********\n\n");
    });

    test('00715_element_check_00692', () async {
      print("\n********** テスト実行：00715_element_check_00692 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.typ;
      print(consistency.canalpayment_company_code.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.typ = testData1;
      print(consistency.canalpayment_company_code.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.typ = testData2;
      print(consistency.canalpayment_company_code.typ);
      expect(consistency.canalpayment_company_code.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.typ = defalut;
      print(consistency.canalpayment_company_code.typ);
      expect(consistency.canalpayment_company_code.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00715_element_check_00692 **********\n\n");
    });

    test('00716_element_check_00693', () async {
      print("\n********** テスト実行：00716_element_check_00693 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.ini_typ;
      print(consistency.canalpayment_company_code.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.ini_typ = testData1;
      print(consistency.canalpayment_company_code.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.ini_typ = testData2;
      print(consistency.canalpayment_company_code.ini_typ);
      expect(consistency.canalpayment_company_code.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.ini_typ = defalut;
      print(consistency.canalpayment_company_code.ini_typ);
      expect(consistency.canalpayment_company_code.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00716_element_check_00693 **********\n\n");
    });

    test('00717_element_check_00694', () async {
      print("\n********** テスト実行：00717_element_check_00694 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.file;
      print(consistency.canalpayment_company_code.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.file = testData1s;
      print(consistency.canalpayment_company_code.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.file = testData2s;
      print(consistency.canalpayment_company_code.file);
      expect(consistency.canalpayment_company_code.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.file = defalut;
      print(consistency.canalpayment_company_code.file);
      expect(consistency.canalpayment_company_code.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00717_element_check_00694 **********\n\n");
    });

    test('00718_element_check_00695', () async {
      print("\n********** テスト実行：00718_element_check_00695 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.section;
      print(consistency.canalpayment_company_code.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.section = testData1s;
      print(consistency.canalpayment_company_code.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.section = testData2s;
      print(consistency.canalpayment_company_code.section);
      expect(consistency.canalpayment_company_code.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.section = defalut;
      print(consistency.canalpayment_company_code.section);
      expect(consistency.canalpayment_company_code.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00718_element_check_00695 **********\n\n");
    });

    test('00719_element_check_00696', () async {
      print("\n********** テスト実行：00719_element_check_00696 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_company_code.keyword;
      print(consistency.canalpayment_company_code.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_company_code.keyword = testData1s;
      print(consistency.canalpayment_company_code.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_company_code.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_company_code.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_company_code.keyword = testData2s;
      print(consistency.canalpayment_company_code.keyword);
      expect(consistency.canalpayment_company_code.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_company_code.keyword = defalut;
      print(consistency.canalpayment_company_code.keyword);
      expect(consistency.canalpayment_company_code.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_company_code.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00719_element_check_00696 **********\n\n");
    });

    test('00720_element_check_00697', () async {
      print("\n********** テスト実行：00720_element_check_00697 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.title;
      print(consistency.canalpayment_branch_code.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.title = testData1s;
      print(consistency.canalpayment_branch_code.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.title = testData2s;
      print(consistency.canalpayment_branch_code.title);
      expect(consistency.canalpayment_branch_code.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.title = defalut;
      print(consistency.canalpayment_branch_code.title);
      expect(consistency.canalpayment_branch_code.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00720_element_check_00697 **********\n\n");
    });

    test('00721_element_check_00698', () async {
      print("\n********** テスト実行：00721_element_check_00698 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.obj;
      print(consistency.canalpayment_branch_code.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.obj = testData1;
      print(consistency.canalpayment_branch_code.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.obj = testData2;
      print(consistency.canalpayment_branch_code.obj);
      expect(consistency.canalpayment_branch_code.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.obj = defalut;
      print(consistency.canalpayment_branch_code.obj);
      expect(consistency.canalpayment_branch_code.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00721_element_check_00698 **********\n\n");
    });

    test('00722_element_check_00699', () async {
      print("\n********** テスト実行：00722_element_check_00699 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.condi;
      print(consistency.canalpayment_branch_code.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.condi = testData1;
      print(consistency.canalpayment_branch_code.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.condi = testData2;
      print(consistency.canalpayment_branch_code.condi);
      expect(consistency.canalpayment_branch_code.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.condi = defalut;
      print(consistency.canalpayment_branch_code.condi);
      expect(consistency.canalpayment_branch_code.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00722_element_check_00699 **********\n\n");
    });

    test('00723_element_check_00700', () async {
      print("\n********** テスト実行：00723_element_check_00700 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.typ;
      print(consistency.canalpayment_branch_code.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.typ = testData1;
      print(consistency.canalpayment_branch_code.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.typ = testData2;
      print(consistency.canalpayment_branch_code.typ);
      expect(consistency.canalpayment_branch_code.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.typ = defalut;
      print(consistency.canalpayment_branch_code.typ);
      expect(consistency.canalpayment_branch_code.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00723_element_check_00700 **********\n\n");
    });

    test('00724_element_check_00701', () async {
      print("\n********** テスト実行：00724_element_check_00701 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.ini_typ;
      print(consistency.canalpayment_branch_code.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.ini_typ = testData1;
      print(consistency.canalpayment_branch_code.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.ini_typ = testData2;
      print(consistency.canalpayment_branch_code.ini_typ);
      expect(consistency.canalpayment_branch_code.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.ini_typ = defalut;
      print(consistency.canalpayment_branch_code.ini_typ);
      expect(consistency.canalpayment_branch_code.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00724_element_check_00701 **********\n\n");
    });

    test('00725_element_check_00702', () async {
      print("\n********** テスト実行：00725_element_check_00702 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.file;
      print(consistency.canalpayment_branch_code.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.file = testData1s;
      print(consistency.canalpayment_branch_code.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.file = testData2s;
      print(consistency.canalpayment_branch_code.file);
      expect(consistency.canalpayment_branch_code.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.file = defalut;
      print(consistency.canalpayment_branch_code.file);
      expect(consistency.canalpayment_branch_code.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00725_element_check_00702 **********\n\n");
    });

    test('00726_element_check_00703', () async {
      print("\n********** テスト実行：00726_element_check_00703 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.section;
      print(consistency.canalpayment_branch_code.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.section = testData1s;
      print(consistency.canalpayment_branch_code.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.section = testData2s;
      print(consistency.canalpayment_branch_code.section);
      expect(consistency.canalpayment_branch_code.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.section = defalut;
      print(consistency.canalpayment_branch_code.section);
      expect(consistency.canalpayment_branch_code.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00726_element_check_00703 **********\n\n");
    });

    test('00727_element_check_00704', () async {
      print("\n********** テスト実行：00727_element_check_00704 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_branch_code.keyword;
      print(consistency.canalpayment_branch_code.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_branch_code.keyword = testData1s;
      print(consistency.canalpayment_branch_code.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_branch_code.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_branch_code.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_branch_code.keyword = testData2s;
      print(consistency.canalpayment_branch_code.keyword);
      expect(consistency.canalpayment_branch_code.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_branch_code.keyword = defalut;
      print(consistency.canalpayment_branch_code.keyword);
      expect(consistency.canalpayment_branch_code.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_branch_code.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00727_element_check_00704 **********\n\n");
    });

    test('00728_element_check_00705', () async {
      print("\n********** テスト実行：00728_element_check_00705 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.title;
      print(consistency.canalpayment_merchantId.title);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.title = testData1s;
      print(consistency.canalpayment_merchantId.title);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.title == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.title == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.title = testData2s;
      print(consistency.canalpayment_merchantId.title);
      expect(consistency.canalpayment_merchantId.title == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.title == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.title = defalut;
      print(consistency.canalpayment_merchantId.title);
      expect(consistency.canalpayment_merchantId.title == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.title == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00728_element_check_00705 **********\n\n");
    });

    test('00729_element_check_00706', () async {
      print("\n********** テスト実行：00729_element_check_00706 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.obj;
      print(consistency.canalpayment_merchantId.obj);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.obj = testData1;
      print(consistency.canalpayment_merchantId.obj);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.obj == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.obj == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.obj = testData2;
      print(consistency.canalpayment_merchantId.obj);
      expect(consistency.canalpayment_merchantId.obj == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.obj == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.obj = defalut;
      print(consistency.canalpayment_merchantId.obj);
      expect(consistency.canalpayment_merchantId.obj == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.obj == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00729_element_check_00706 **********\n\n");
    });

    test('00730_element_check_00707', () async {
      print("\n********** テスト実行：00730_element_check_00707 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.condi;
      print(consistency.canalpayment_merchantId.condi);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.condi = testData1;
      print(consistency.canalpayment_merchantId.condi);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.condi == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.condi == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.condi = testData2;
      print(consistency.canalpayment_merchantId.condi);
      expect(consistency.canalpayment_merchantId.condi == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.condi == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.condi = defalut;
      print(consistency.canalpayment_merchantId.condi);
      expect(consistency.canalpayment_merchantId.condi == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.condi == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00730_element_check_00707 **********\n\n");
    });

    test('00731_element_check_00708', () async {
      print("\n********** テスト実行：00731_element_check_00708 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.typ;
      print(consistency.canalpayment_merchantId.typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.typ = testData1;
      print(consistency.canalpayment_merchantId.typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.typ = testData2;
      print(consistency.canalpayment_merchantId.typ);
      expect(consistency.canalpayment_merchantId.typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.typ = defalut;
      print(consistency.canalpayment_merchantId.typ);
      expect(consistency.canalpayment_merchantId.typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00731_element_check_00708 **********\n\n");
    });

    test('00732_element_check_00709', () async {
      print("\n********** テスト実行：00732_element_check_00709 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.ini_typ;
      print(consistency.canalpayment_merchantId.ini_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.ini_typ = testData1;
      print(consistency.canalpayment_merchantId.ini_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.ini_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.ini_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.ini_typ = testData2;
      print(consistency.canalpayment_merchantId.ini_typ);
      expect(consistency.canalpayment_merchantId.ini_typ == testData2, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.ini_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.ini_typ = defalut;
      print(consistency.canalpayment_merchantId.ini_typ);
      expect(consistency.canalpayment_merchantId.ini_typ == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.ini_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00732_element_check_00709 **********\n\n");
    });

    test('00733_element_check_00710', () async {
      print("\n********** テスト実行：00733_element_check_00710 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.file;
      print(consistency.canalpayment_merchantId.file);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.file = testData1s;
      print(consistency.canalpayment_merchantId.file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.file == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.file == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.file = testData2s;
      print(consistency.canalpayment_merchantId.file);
      expect(consistency.canalpayment_merchantId.file == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.file == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.file = defalut;
      print(consistency.canalpayment_merchantId.file);
      expect(consistency.canalpayment_merchantId.file == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00733_element_check_00710 **********\n\n");
    });

    test('00734_element_check_00711', () async {
      print("\n********** テスト実行：00734_element_check_00711 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.section;
      print(consistency.canalpayment_merchantId.section);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.section = testData1s;
      print(consistency.canalpayment_merchantId.section);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.section == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.section == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.section = testData2s;
      print(consistency.canalpayment_merchantId.section);
      expect(consistency.canalpayment_merchantId.section == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.section == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.section = defalut;
      print(consistency.canalpayment_merchantId.section);
      expect(consistency.canalpayment_merchantId.section == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.section == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00734_element_check_00711 **********\n\n");
    });

    test('00735_element_check_00712', () async {
      print("\n********** テスト実行：00735_element_check_00712 **********");

      consistency = ConsistencyJsonFile();
      allPropatyCheckInit(consistency);

      // ①loadを実行する。
      await consistency.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = consistency.canalpayment_merchantId.keyword;
      print(consistency.canalpayment_merchantId.keyword);

      // ②指定したプロパティにテストデータ1を書き込む。
      consistency.canalpayment_merchantId.keyword = testData1s;
      print(consistency.canalpayment_merchantId.keyword);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(consistency.canalpayment_merchantId.keyword == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await consistency.save();
      await consistency.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(consistency.canalpayment_merchantId.keyword == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      consistency.canalpayment_merchantId.keyword = testData2s;
      print(consistency.canalpayment_merchantId.keyword);
      expect(consistency.canalpayment_merchantId.keyword == testData2s, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.keyword == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      consistency.canalpayment_merchantId.keyword = defalut;
      print(consistency.canalpayment_merchantId.keyword);
      expect(consistency.canalpayment_merchantId.keyword == defalut, true);
      await consistency.save();
      await consistency.load();
      expect(consistency.canalpayment_merchantId.keyword == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(consistency, true);

      print("********** テスト終了：00735_element_check_00712 **********\n\n");
    });

  });
}

void allPropatyCheckInit(ConsistencyJsonFile test)
{
  expect(test.version.title, "");
  expect(test.version.obj, 0);
  expect(test.version.condi, 0);
  expect(test.version.typ, 0);
  expect(test.version.ini_typ, 0);
  expect(test.version.file, "");
  expect(test.version.section, "");
  expect(test.version.keyword, "");
  expect(test.macno_check.title, "");
  expect(test.macno_check.obj, 0);
  expect(test.macno_check.condi, 0);
  expect(test.macno_check.typ, 0);
  expect(test.stre_cd.title, "");
  expect(test.stre_cd.obj, 0);
  expect(test.stre_cd.condi, 0);
  expect(test.stre_cd.typ, 0);
  expect(test.stre_cd.ini_typ, 0);
  expect(test.stre_cd.file, "");
  expect(test.stre_cd.section, "");
  expect(test.stre_cd.keyword, "");
  expect(test.ms_onoff.title, "");
  expect(test.ms_onoff.obj, 0);
  expect(test.ms_onoff.condi, 0);
  expect(test.ms_onoff.typ, 0);
  expect(test.ms_onoff.ini_typ, 0);
  expect(test.ms_onoff.file, "");
  expect(test.ms_onoff.section, "");
  expect(test.ms_onoff.keyword, "");
  expect(test.mac_info_timeserver.title, "");
  expect(test.mac_info_timeserver.obj, 0);
  expect(test.mac_info_timeserver.condi, 0);
  expect(test.mac_info_timeserver.typ, 0);
  expect(test.mac_info_timeserver.ini_typ, 0);
  expect(test.mac_info_timeserver.file, "");
  expect(test.mac_info_timeserver.section, "");
  expect(test.mac_info_timeserver.keyword, "");
  expect(test.ts_ver_mrg.title, "");
  expect(test.ts_ver_mrg.obj, 0);
  expect(test.ts_ver_mrg.condi, 0);
  expect(test.ts_ver_mrg.typ, 0);
  expect(test.ts_ver_mrg.ini_typ, 0);
  expect(test.ts_ver_mrg.file, "");
  expect(test.ts_ver_mrg.section, "");
  expect(test.ts_ver_mrg.keyword, "");
  expect(test.psc_scn_cmd_desktop.title, "");
  expect(test.psc_scn_cmd_desktop.obj, 0);
  expect(test.psc_scn_cmd_desktop.condi, 0);
  expect(test.psc_scn_cmd_desktop.typ, 0);
  expect(test.psc_scn_cmd_desktop.ini_typ, 0);
  expect(test.psc_scn_cmd_desktop.file, "");
  expect(test.psc_scn_cmd_desktop.section, "");
  expect(test.psc_scn_cmd_desktop.keyword, "");
  expect(test.psc_scn_cmd_tower.title, "");
  expect(test.psc_scn_cmd_tower.obj, 0);
  expect(test.psc_scn_cmd_tower.condi, 0);
  expect(test.psc_scn_cmd_tower.typ, 0);
  expect(test.psc_scn_cmd_tower.ini_typ, 0);
  expect(test.psc_scn_cmd_tower.file, "");
  expect(test.psc_scn_cmd_tower.section, "");
  expect(test.psc_scn_cmd_tower.keyword, "");
  expect(test.scan_dp_snd_desktop.title, "");
  expect(test.scan_dp_snd_desktop.obj, 0);
  expect(test.scan_dp_snd_desktop.condi, 0);
  expect(test.scan_dp_snd_desktop.typ, 0);
  expect(test.scan_dp_snd_desktop.ini_typ, 0);
  expect(test.scan_dp_snd_desktop.file, "");
  expect(test.scan_dp_snd_desktop.section, "");
  expect(test.scan_dp_snd_desktop.keyword, "");
  expect(test.scan_dp_snd_tower.title, "");
  expect(test.scan_dp_snd_tower.obj, 0);
  expect(test.scan_dp_snd_tower.condi, 0);
  expect(test.scan_dp_snd_tower.typ, 0);
  expect(test.scan_dp_snd_tower.ini_typ, 0);
  expect(test.scan_dp_snd_tower.file, "");
  expect(test.scan_dp_snd_tower.section, "");
  expect(test.scan_dp_snd_tower.keyword, "");
  expect(test.eat_in_start_end_check.title, "");
  expect(test.eat_in_start_end_check.obj, 0);
  expect(test.eat_in_start_end_check.condi, 0);
  expect(test.eat_in_start_end_check.condi1_typ, 0);
  expect(test.eat_in_start_end_check.condi1_key, "");
  expect(test.eat_in_start_end_check.condi1_judge, 0);
  expect(test.eat_in_start_end_check.typ, 0);
  expect(test.eat_in_start_end_check.st_file, "");
  expect(test.eat_in_start_end_check.st_sect, "");
  expect(test.eat_in_start_end_check.st_key, "");
  expect(test.eat_in_start_end_check.end_file, "");
  expect(test.eat_in_start_end_check.end_sect, "");
  expect(test.eat_in_start_end_check.end_key, "");
  expect(test.catalinapr_cnct.title, "");
  expect(test.catalinapr_cnct.obj, 0);
  expect(test.catalinapr_cnct.condi, 0);
  expect(test.catalinapr_cnct.condi1_typ, 0);
  expect(test.catalinapr_cnct.condi1_key, "");
  expect(test.catalinapr_cnct.condi1_judge, 0);
  expect(test.catalinapr_cnct.typ, 0);
  expect(test.catalinapr_cnct.ini_typ, 0);
  expect(test.catalinapr_cnct.file, "");
  expect(test.catalinapr_cnct.section, "");
  expect(test.catalinapr_cnct.keyword, "");
  expect(test.custrealsvr_cnct.title, "");
  expect(test.custrealsvr_cnct.obj, 0);
  expect(test.custrealsvr_cnct.condi, 0);
  expect(test.custrealsvr_cnct.typ, 0);
  expect(test.custrealsvr_cnct.ini_typ, 0);
  expect(test.custrealsvr_cnct.file, "");
  expect(test.custrealsvr_cnct.section, "");
  expect(test.custrealsvr_cnct.keyword, "");
  expect(test.netmask.title, "");
  expect(test.netmask.obj, 0);
  expect(test.netmask.condi, 0);
  expect(test.netmask.typ, 0);
  expect(test.netmask.keyword_typ, 0);
  expect(test.netmask.file, "");
  expect(test.netmask.keyword, "");
  expect(test.gateway.title, "");
  expect(test.gateway.obj, 0);
  expect(test.gateway.condi, 0);
  expect(test.gateway.typ, 0);
  expect(test.gateway.keyword_typ, 0);
  expect(test.gateway.file, "");
  expect(test.gateway.keyword, "");
  expect(test.ts2100.title, "");
  expect(test.ts2100.obj, 0);
  expect(test.ts2100.condi, 0);
  expect(test.ts2100.typ, 0);
  expect(test.ts2100.keyword_typ, 0);
  expect(test.ts2100.file, "");
  expect(test.ts2100.keyword, "");
  expect(test.ts21db.title, "");
  expect(test.ts21db.obj, 0);
  expect(test.ts21db.condi, 0);
  expect(test.ts21db.typ, 0);
  expect(test.ts21db.keyword_typ, 0);
  expect(test.ts21db.file, "");
  expect(test.ts21db.keyword, "");
  expect(test.subsrx.title, "");
  expect(test.subsrx.obj, 0);
  expect(test.subsrx.condi, 0);
  expect(test.subsrx.typ, 0);
  expect(test.subsrx.keyword_typ, 0);
  expect(test.subsrx.file, "");
  expect(test.subsrx.keyword, "");
  expect(test.compc.title, "");
  expect(test.compc.obj, 0);
  expect(test.compc.condi, 0);
  expect(test.compc.typ, 0);
  expect(test.compc.keyword_typ, 0);
  expect(test.compc.file, "");
  expect(test.compc.keyword, "");
  expect(test.sims2100.title, "");
  expect(test.sims2100.obj, 0);
  expect(test.sims2100.condi, 0);
  expect(test.sims2100.typ, 0);
  expect(test.sims2100.keyword_typ, 0);
  expect(test.sims2100.file, "");
  expect(test.sims2100.keyword, "");
  expect(test.sc_adr.title, "");
  expect(test.sc_adr.obj, 0);
  expect(test.sc_adr.condi, 0);
  expect(test.sc_adr.typ, 0);
  expect(test.sc_adr.ini_typ, 0);
  expect(test.sc_adr.file, "");
  expect(test.sc_adr.section, "");
  expect(test.sc_adr.keyword, "");
  expect(test.sc_port.title, "");
  expect(test.sc_port.obj, 0);
  expect(test.sc_port.condi, 0);
  expect(test.sc_port.typ, 0);
  expect(test.sc_port.ini_typ, 0);
  expect(test.sc_port.file, "");
  expect(test.sc_port.section, "");
  expect(test.sc_port.keyword, "");
  expect(test.manage.title, "");
  expect(test.manage.obj, 0);
  expect(test.manage.condi, 0);
  expect(test.manage.typ, 0);
  expect(test.manage.keyword_typ, 0);
  expect(test.manage.file, "");
  expect(test.manage.keyword, "");
  expect(test.comport.title, "");
  expect(test.comport.obj, 0);
  expect(test.comport.condi, 0);
  expect(test.comport.typ, 0);
  expect(test.comport.keyword_typ, 0);
  expect(test.comport.file, "");
  expect(test.comport.keyword, "");
  expect(test.custserver.title, "");
  expect(test.custserver.obj, 0);
  expect(test.custserver.condi, 0);
  expect(test.custserver.typ, 0);
  expect(test.custserver.keyword_typ, 0);
  expect(test.custserver.file, "");
  expect(test.custserver.keyword, "");
  expect(test.custsvrport.title, "");
  expect(test.custsvrport.obj, 0);
  expect(test.custsvrport.condi, 0);
  expect(test.custsvrport.typ, 0);
  expect(test.custsvrport.keyword_typ, 0);
  expect(test.custsvrport.file, "");
  expect(test.custsvrport.keyword, "");
  expect(test.custrealsvr_timeout.title, "");
  expect(test.custrealsvr_timeout.obj, 0);
  expect(test.custrealsvr_timeout.condi, 0);
  expect(test.custrealsvr_timeout.typ, 0);
  expect(test.custrealsvr_timeout.ini_typ, 0);
  expect(test.custrealsvr_timeout.file, "");
  expect(test.custrealsvr_timeout.section, "");
  expect(test.custrealsvr_timeout.keyword, "");
  expect(test.mente_port.title, "");
  expect(test.mente_port.obj, 0);
  expect(test.mente_port.condi, 0);
  expect(test.mente_port.typ, 0);
  expect(test.mente_port.ini_typ, 0);
  expect(test.mente_port.file, "");
  expect(test.mente_port.section, "");
  expect(test.mente_port.keyword, "");
  expect(test.sc_mente_port.title, "");
  expect(test.sc_mente_port.obj, 0);
  expect(test.sc_mente_port.condi, 0);
  expect(test.sc_mente_port.typ, 0);
  expect(test.sc_mente_port.ini_typ, 0);
  expect(test.sc_mente_port.file, "");
  expect(test.sc_mente_port.section, "");
  expect(test.sc_mente_port.keyword, "");
  expect(test.dns.title, "");
  expect(test.dns.obj, 0);
  expect(test.dns.condi, 0);
  expect(test.dns.condi1_typ, 0);
  expect(test.dns.condi1_key, "");
  expect(test.dns.condi1_judge, 0);
  expect(test.dns.typ, 0);
  expect(test.dns.file, "");
  expect(test.dns.keyword, "");
  expect(test.timeserver.title, "");
  expect(test.timeserver.obj, 0);
  expect(test.timeserver.condi, 0);
  expect(test.timeserver.typ, 0);
  expect(test.timeserver.keyword_typ, 0);
  expect(test.timeserver.file, "");
  expect(test.timeserver.keyword, "");
  expect(test.centerserver_mst.title, "");
  expect(test.centerserver_mst.obj, 0);
  expect(test.centerserver_mst.condi, 0);
  expect(test.centerserver_mst.typ, 0);
  expect(test.centerserver_mst.keyword_typ, 0);
  expect(test.centerserver_mst.file, "");
  expect(test.centerserver_mst.keyword, "");
  expect(test.centerserver_trn.title, "");
  expect(test.centerserver_trn.obj, 0);
  expect(test.centerserver_trn.condi, 0);
  expect(test.centerserver_trn.typ, 0);
  expect(test.centerserver_trn.keyword_typ, 0);
  expect(test.centerserver_trn.file, "");
  expect(test.centerserver_trn.keyword, "");
  expect(test.custserver2.title, "");
  expect(test.custserver2.obj, 0);
  expect(test.custserver2.condi, 0);
  expect(test.custserver2.typ, 0);
  expect(test.custserver2.keyword_typ, 0);
  expect(test.custserver2.file, "");
  expect(test.custserver2.keyword, "");
  expect(test.hbtime.title, "");
  expect(test.hbtime.obj, 0);
  expect(test.hbtime.condi, 0);
  expect(test.hbtime.typ, 0);
  expect(test.hbtime.ini_typ, 0);
  expect(test.hbtime.file, "");
  expect(test.hbtime.section, "");
  expect(test.hbtime.keyword, "");
  expect(test.offlinetime.title, "");
  expect(test.offlinetime.obj, 0);
  expect(test.offlinetime.condi, 0);
  expect(test.offlinetime.typ, 0);
  expect(test.offlinetime.ini_typ, 0);
  expect(test.offlinetime.file, "");
  expect(test.offlinetime.section, "");
  expect(test.offlinetime.keyword, "");
  expect(test.spqc.title, "");
  expect(test.spqc.obj, 0);
  expect(test.spqc.condi, 0);
  expect(test.spqc.typ, 0);
  expect(test.spqc.keyword_typ, 0);
  expect(test.spqc.file, "");
  expect(test.spqc.keyword, "");
  expect(test.spqcport.title, "");
  expect(test.spqcport.obj, 0);
  expect(test.spqcport.condi, 0);
  expect(test.spqcport.typ, 0);
  expect(test.spqcport.keyword_typ, 0);
  expect(test.spqcport.file, "");
  expect(test.spqcport.keyword, "");
  expect(test.wiz_port.title, "");
  expect(test.wiz_port.obj, 0);
  expect(test.wiz_port.condi, 0);
  expect(test.wiz_port.typ, 0);
  expect(test.wiz_port.keyword_typ, 0);
  expect(test.wiz_port.file, "");
  expect(test.wiz_port.keyword, "");
  expect(test.spqc_subsvr.title, "");
  expect(test.spqc_subsvr.obj, 0);
  expect(test.spqc_subsvr.condi, 0);
  expect(test.spqc_subsvr.typ, 0);
  expect(test.spqc_subsvr.keyword_typ, 0);
  expect(test.spqc_subsvr.file, "");
  expect(test.spqc_subsvr.keyword, "");
  expect(test.hq_userid.title, "");
  expect(test.hq_userid.obj, 0);
  expect(test.hq_userid.condi, 0);
  expect(test.hq_userid.typ, 0);
  expect(test.hq_userid.ini_typ, 0);
  expect(test.hq_userid.file, "");
  expect(test.hq_userid.section, "");
  expect(test.hq_userid.keyword, "");
  expect(test.hq_userpass.title, "");
  expect(test.hq_userpass.obj, 0);
  expect(test.hq_userpass.condi, 0);
  expect(test.hq_userpass.typ, 0);
  expect(test.hq_userpass.ini_typ, 0);
  expect(test.hq_userpass.file, "");
  expect(test.hq_userpass.section, "");
  expect(test.hq_userpass.keyword, "");
  expect(test.hq_compcd.title, "");
  expect(test.hq_compcd.obj, 0);
  expect(test.hq_compcd.condi, 0);
  expect(test.hq_compcd.typ, 0);
  expect(test.hq_compcd.ini_typ, 0);
  expect(test.hq_compcd.file, "");
  expect(test.hq_compcd.section, "");
  expect(test.hq_compcd.keyword, "");
  expect(test.hq_url.title, "");
  expect(test.hq_url.obj, 0);
  expect(test.hq_url.condi, 0);
  expect(test.hq_url.typ, 0);
  expect(test.hq_url.ini_typ, 0);
  expect(test.hq_url.file, "");
  expect(test.hq_url.section, "");
  expect(test.hq_url.keyword, "");
  expect(test.qcselect_port.title, "");
  expect(test.qcselect_port.obj, 0);
  expect(test.qcselect_port.condi, 0);
  expect(test.qcselect_port.typ, 0);
  expect(test.qcselect_port.keyword_typ, 0);
  expect(test.qcselect_port.file, "");
  expect(test.qcselect_port.keyword, "");
  expect(test.bult_send.title, "");
  expect(test.bult_send.obj, 0);
  expect(test.bult_send.condi, 0);
  expect(test.bult_send.typ, 0);
  expect(test.bult_send.ini_typ, 0);
  expect(test.bult_send.file, "");
  expect(test.bult_send.section, "");
  expect(test.bult_send.keyword, "");
  expect(test.tslnkweb_timeout.title, "");
  expect(test.tslnkweb_timeout.obj, 0);
  expect(test.tslnkweb_timeout.condi, 0);
  expect(test.tslnkweb_timeout.typ, 0);
  expect(test.tslnkweb_timeout.ini_typ, 0);
  expect(test.tslnkweb_timeout.file, "");
  expect(test.tslnkweb_timeout.section, "");
  expect(test.tslnkweb_timeout.keyword, "");
  expect(test.pbchg_groupcd.title, "");
  expect(test.pbchg_groupcd.obj, 0);
  expect(test.pbchg_groupcd.condi, 0);
  expect(test.pbchg_groupcd.typ, 0);
  expect(test.pbchg_groupcd.ini_typ, 0);
  expect(test.pbchg_groupcd.file, "");
  expect(test.pbchg_groupcd.section, "");
  expect(test.pbchg_groupcd.keyword, "");
  expect(test.pbchg_officecd.title, "");
  expect(test.pbchg_officecd.obj, 0);
  expect(test.pbchg_officecd.condi, 0);
  expect(test.pbchg_officecd.typ, 0);
  expect(test.pbchg_officecd.ini_typ, 0);
  expect(test.pbchg_officecd.file, "");
  expect(test.pbchg_officecd.section, "");
  expect(test.pbchg_officecd.keyword, "");
  expect(test.pbchg_strecd.title, "");
  expect(test.pbchg_strecd.obj, 0);
  expect(test.pbchg_strecd.condi, 0);
  expect(test.pbchg_strecd.typ, 0);
  expect(test.pbchg_strecd.ini_typ, 0);
  expect(test.pbchg_strecd.file, "");
  expect(test.pbchg_strecd.section, "");
  expect(test.pbchg_strecd.keyword, "");
  expect(test.pbchg_interval.title, "");
  expect(test.pbchg_interval.obj, 0);
  expect(test.pbchg_interval.condi, 0);
  expect(test.pbchg_interval.typ, 0);
  expect(test.pbchg_interval.ini_typ, 0);
  expect(test.pbchg_interval.file, "");
  expect(test.pbchg_interval.section, "");
  expect(test.pbchg_interval.keyword, "");
  expect(test.pbchg_cnt.title, "");
  expect(test.pbchg_cnt.obj, 0);
  expect(test.pbchg_cnt.condi, 0);
  expect(test.pbchg_cnt.typ, 0);
  expect(test.pbchg_cnt.ini_typ, 0);
  expect(test.pbchg_cnt.file, "");
  expect(test.pbchg_cnt.section, "");
  expect(test.pbchg_cnt.keyword, "");
  expect(test.pbchg_month.title, "");
  expect(test.pbchg_month.obj, 0);
  expect(test.pbchg_month.condi, 0);
  expect(test.pbchg_month.typ, 0);
  expect(test.pbchg_month.ini_typ, 0);
  expect(test.pbchg_month.file, "");
  expect(test.pbchg_month.section, "");
  expect(test.pbchg_month.keyword, "");
  expect(test.pbchg_steps.title, "");
  expect(test.pbchg_steps.obj, 0);
  expect(test.pbchg_steps.condi, 0);
  expect(test.pbchg_steps.typ, 0);
  expect(test.pbchg_steps.ini_typ, 0);
  expect(test.pbchg_steps.file, "");
  expect(test.pbchg_steps.section, "");
  expect(test.pbchg_steps.keyword, "");
  expect(test.pbchg_res_sel.title, "");
  expect(test.pbchg_res_sel.obj, 0);
  expect(test.pbchg_res_sel.condi, 0);
  expect(test.pbchg_res_sel.typ, 0);
  expect(test.pbchg_res_sel.ini_typ, 0);
  expect(test.pbchg_res_sel.file, "");
  expect(test.pbchg_res_sel.section, "");
  expect(test.pbchg_res_sel.keyword, "");
  expect(test.pbchg_fee1_sel.title, "");
  expect(test.pbchg_fee1_sel.obj, 0);
  expect(test.pbchg_fee1_sel.condi, 0);
  expect(test.pbchg_fee1_sel.typ, 0);
  expect(test.pbchg_fee1_sel.ini_typ, 0);
  expect(test.pbchg_fee1_sel.file, "");
  expect(test.pbchg_fee1_sel.section, "");
  expect(test.pbchg_fee1_sel.keyword, "");
  expect(test.pbchg_fee2_sel.title, "");
  expect(test.pbchg_fee2_sel.obj, 0);
  expect(test.pbchg_fee2_sel.condi, 0);
  expect(test.pbchg_fee2_sel.typ, 0);
  expect(test.pbchg_fee2_sel.ini_typ, 0);
  expect(test.pbchg_fee2_sel.file, "");
  expect(test.pbchg_fee2_sel.section, "");
  expect(test.pbchg_fee2_sel.keyword, "");
  expect(test.pbchg_cnct.title, "");
  expect(test.pbchg_cnct.obj, 0);
  expect(test.pbchg_cnct.condi, 0);
  expect(test.pbchg_cnct.typ, 0);
  expect(test.pbchg_cnct.ini_typ, 0);
  expect(test.pbchg_cnct.file, "");
  expect(test.pbchg_cnct.section, "");
  expect(test.pbchg_cnct.keyword, "");
  expect(test.pbchg_rd_timeout.title, "");
  expect(test.pbchg_rd_timeout.obj, 0);
  expect(test.pbchg_rd_timeout.condi, 0);
  expect(test.pbchg_rd_timeout.typ, 0);
  expect(test.pbchg_rd_timeout.ini_typ, 0);
  expect(test.pbchg_rd_timeout.file, "");
  expect(test.pbchg_rd_timeout.section, "");
  expect(test.pbchg_rd_timeout.keyword, "");
  expect(test.pbchg_wt_timeout.title, "");
  expect(test.pbchg_wt_timeout.obj, 0);
  expect(test.pbchg_wt_timeout.condi, 0);
  expect(test.pbchg_wt_timeout.typ, 0);
  expect(test.pbchg_wt_timeout.ini_typ, 0);
  expect(test.pbchg_wt_timeout.file, "");
  expect(test.pbchg_wt_timeout.section, "");
  expect(test.pbchg_wt_timeout.keyword, "");
  expect(test.add_total.title, "");
  expect(test.add_total.obj, 0);
  expect(test.add_total.condi, 0);
  expect(test.add_total.typ, 0);
  expect(test.add_total.ini_typ, 0);
  expect(test.add_total.file, "");
  expect(test.add_total.section, "");
  expect(test.add_total.keyword, "");
  expect(test.add_cust.title, "");
  expect(test.add_cust.obj, 0);
  expect(test.add_cust.condi, 0);
  expect(test.add_cust.typ, 0);
  expect(test.add_cust.ini_typ, 0);
  expect(test.add_cust.file, "");
  expect(test.add_cust.section, "");
  expect(test.add_cust.keyword, "");
  expect(test.realitmsend_cnct.title, "");
  expect(test.realitmsend_cnct.obj, 0);
  expect(test.realitmsend_cnct.condi, 0);
  expect(test.realitmsend_cnct.typ, 0);
  expect(test.realitmsend_cnct.ini_typ, 0);
  expect(test.realitmsend_cnct.file, "");
  expect(test.realitmsend_cnct.section, "");
  expect(test.realitmsend_cnct.keyword, "");
  expect(test.ca_ipaddr.title, "");
  expect(test.ca_ipaddr.obj, 0);
  expect(test.ca_ipaddr.condi, 0);
  expect(test.ca_ipaddr.typ, 0);
  expect(test.ca_ipaddr.ini_typ, 0);
  expect(test.ca_ipaddr.file, "");
  expect(test.ca_ipaddr.section, "");
  expect(test.ca_ipaddr.keyword, "");
  expect(test.ca_port.title, "");
  expect(test.ca_port.obj, 0);
  expect(test.ca_port.condi, 0);
  expect(test.ca_port.typ, 0);
  expect(test.ca_port.ini_typ, 0);
  expect(test.ca_port.file, "");
  expect(test.ca_port.section, "");
  expect(test.ca_port.keyword, "");
  expect(test.qcashier.title, "");
  expect(test.qcashier.obj, 0);
  expect(test.qcashier.condi, 0);
  expect(test.qcashier.condi1_typ, 0);
  expect(test.qcashier.condi1_key, "");
  expect(test.qcashier.condi1_judge, 0);
  expect(test.qcashier.typ, 0);
  expect(test.qcashier.file, "");
  expect(test.tswebsvr.title, "");
  expect(test.tswebsvr.obj, 0);
  expect(test.tswebsvr.condi, 0);
  expect(test.tswebsvr.typ, 0);
  expect(test.tswebsvr.keyword_typ, 0);
  expect(test.tswebsvr.file, "");
  expect(test.tswebsvr.keyword, "");
  expect(test.verup_cnct.title, "");
  expect(test.verup_cnct.obj, 0);
  expect(test.verup_cnct.condi, 0);
  expect(test.verup_cnct.typ, 0);
  expect(test.verup_cnct.keyword_typ, 0);
  expect(test.verup_cnct.file, "");
  expect(test.verup_cnct.keyword, "");
  expect(test.bkup_save.title, "");
  expect(test.bkup_save.obj, 0);
  expect(test.bkup_save.condi, 0);
  expect(test.bkup_save.typ, 0);
  expect(test.bkup_save.keyword_typ, 0);
  expect(test.bkup_save.file, "");
  expect(test.bkup_save.keyword, "");
  expect(test.histlog_server.title, "");
  expect(test.histlog_server.obj, 0);
  expect(test.histlog_server.condi, 0);
  expect(test.histlog_server.typ, 0);
  expect(test.histlog_server.keyword_typ, 0);
  expect(test.histlog_server.file, "");
  expect(test.histlog_server.keyword, "");
  expect(test.histlog_server_sub.title, "");
  expect(test.histlog_server_sub.obj, 0);
  expect(test.histlog_server_sub.condi, 0);
  expect(test.histlog_server_sub.typ, 0);
  expect(test.histlog_server_sub.keyword_typ, 0);
  expect(test.histlog_server_sub.file, "");
  expect(test.histlog_server_sub.keyword, "");
  expect(test.repica_url.title, "");
  expect(test.repica_url.obj, 0);
  expect(test.repica_url.condi, 0);
  expect(test.repica_url.typ, 0);
  expect(test.repica_url.ini_typ, 0);
  expect(test.repica_url.file, "");
  expect(test.repica_url.section, "");
  expect(test.repica_url.keyword, "");
  expect(test.repica_url_cancel.title, "");
  expect(test.repica_url_cancel.obj, 0);
  expect(test.repica_url_cancel.condi, 0);
  expect(test.repica_url_cancel.typ, 0);
  expect(test.repica_url_cancel.ini_typ, 0);
  expect(test.repica_url_cancel.file, "");
  expect(test.repica_url_cancel.section, "");
  expect(test.repica_url_cancel.keyword, "");
  expect(test.repica_timeout.title, "");
  expect(test.repica_timeout.obj, 0);
  expect(test.repica_timeout.condi, 0);
  expect(test.repica_timeout.typ, 0);
  expect(test.repica_timeout.ini_typ, 0);
  expect(test.repica_timeout.file, "");
  expect(test.repica_timeout.section, "");
  expect(test.repica_timeout.keyword, "");
  expect(test.repica_id.title, "");
  expect(test.repica_id.obj, 0);
  expect(test.repica_id.condi, 0);
  expect(test.repica_id.typ, 0);
  expect(test.repica_id.ini_typ, 0);
  expect(test.repica_id.file, "");
  expect(test.repica_id.section, "");
  expect(test.repica_id.keyword, "");
  expect(test.barcodepay_url.title, "");
  expect(test.barcodepay_url.obj, 0);
  expect(test.barcodepay_url.condi, 0);
  expect(test.barcodepay_url.typ, 0);
  expect(test.barcodepay_url.ini_typ, 0);
  expect(test.barcodepay_url.file, "");
  expect(test.barcodepay_url.section, "");
  expect(test.barcodepay_url.keyword, "");
  expect(test.barcodepay_timeout.title, "");
  expect(test.barcodepay_timeout.obj, 0);
  expect(test.barcodepay_timeout.condi, 0);
  expect(test.barcodepay_timeout.typ, 0);
  expect(test.barcodepay_timeout.ini_typ, 0);
  expect(test.barcodepay_timeout.file, "");
  expect(test.barcodepay_timeout.section, "");
  expect(test.barcodepay_timeout.keyword, "");
  expect(test.barcodepay_merchantCode.title, "");
  expect(test.barcodepay_merchantCode.obj, 0);
  expect(test.barcodepay_merchantCode.condi, 0);
  expect(test.barcodepay_merchantCode.typ, 0);
  expect(test.barcodepay_merchantCode.ini_typ, 0);
  expect(test.barcodepay_merchantCode.file, "");
  expect(test.barcodepay_merchantCode.section, "");
  expect(test.barcodepay_merchantCode.keyword, "");
  expect(test.barcodepay_cliantId.title, "");
  expect(test.barcodepay_cliantId.obj, 0);
  expect(test.barcodepay_cliantId.condi, 0);
  expect(test.barcodepay_cliantId.typ, 0);
  expect(test.barcodepay_cliantId.ini_typ, 0);
  expect(test.barcodepay_cliantId.file, "");
  expect(test.barcodepay_cliantId.section, "");
  expect(test.barcodepay_cliantId.keyword, "");
  expect(test.DUMMY.title, "");
  expect(test.DUMMY.file, "");
  expect(test.DUMMY.typ, 0);
  expect(test.DUMMY.obj, 0);
  expect(test.linepay_url.title, "");
  expect(test.linepay_url.obj, 0);
  expect(test.linepay_url.condi, 0);
  expect(test.linepay_url.typ, 0);
  expect(test.linepay_url.ini_typ, 0);
  expect(test.linepay_url.file, "");
  expect(test.linepay_url.section, "");
  expect(test.linepay_url.keyword, "");
  expect(test.linepay_timeout.title, "");
  expect(test.linepay_timeout.obj, 0);
  expect(test.linepay_timeout.condi, 0);
  expect(test.linepay_timeout.typ, 0);
  expect(test.linepay_timeout.ini_typ, 0);
  expect(test.linepay_timeout.file, "");
  expect(test.linepay_timeout.section, "");
  expect(test.linepay_timeout.keyword, "");
  expect(test.linepay_channelId.title, "");
  expect(test.linepay_channelId.obj, 0);
  expect(test.linepay_channelId.condi, 0);
  expect(test.linepay_channelId.typ, 0);
  expect(test.linepay_channelId.ini_typ, 0);
  expect(test.linepay_channelId.file, "");
  expect(test.linepay_channelId.section, "");
  expect(test.linepay_channelId.keyword, "");
  expect(test.linepay_channelSecretKey.title, "");
  expect(test.linepay_channelSecretKey.obj, 0);
  expect(test.linepay_channelSecretKey.condi, 0);
  expect(test.linepay_channelSecretKey.typ, 0);
  expect(test.linepay_channelSecretKey.ini_typ, 0);
  expect(test.linepay_channelSecretKey.file, "");
  expect(test.linepay_channelSecretKey.section, "");
  expect(test.linepay_channelSecretKey.keyword, "");
  expect(test.linepay_line_at.title, "");
  expect(test.linepay_line_at.obj, 0);
  expect(test.linepay_line_at.condi, 0);
  expect(test.linepay_line_at.typ, 0);
  expect(test.linepay_line_at.ini_typ, 0);
  expect(test.linepay_line_at.file, "");
  expect(test.linepay_line_at.section, "");
  expect(test.linepay_line_at.keyword, "");
  expect(test.onepay_url.title, "");
  expect(test.onepay_url.obj, 0);
  expect(test.onepay_url.condi, 0);
  expect(test.onepay_url.typ, 0);
  expect(test.onepay_url.ini_typ, 0);
  expect(test.onepay_url.file, "");
  expect(test.onepay_url.section, "");
  expect(test.onepay_url.keyword, "");
  expect(test.onepay_timeout.title, "");
  expect(test.onepay_timeout.obj, 0);
  expect(test.onepay_timeout.condi, 0);
  expect(test.onepay_timeout.typ, 0);
  expect(test.onepay_timeout.ini_typ, 0);
  expect(test.onepay_timeout.file, "");
  expect(test.onepay_timeout.section, "");
  expect(test.onepay_timeout.keyword, "");
  expect(test.canalpayment_url.title, "");
  expect(test.canalpayment_url.obj, 0);
  expect(test.canalpayment_url.condi, 0);
  expect(test.canalpayment_url.typ, 0);
  expect(test.canalpayment_url.ini_typ, 0);
  expect(test.canalpayment_url.file, "");
  expect(test.canalpayment_url.section, "");
  expect(test.canalpayment_url.keyword, "");
  expect(test.canalpayment_timeout.title, "");
  expect(test.canalpayment_timeout.obj, 0);
  expect(test.canalpayment_timeout.condi, 0);
  expect(test.canalpayment_timeout.typ, 0);
  expect(test.canalpayment_timeout.ini_typ, 0);
  expect(test.canalpayment_timeout.file, "");
  expect(test.canalpayment_timeout.section, "");
  expect(test.canalpayment_timeout.keyword, "");
  expect(test.canalpayment_company_code.title, "");
  expect(test.canalpayment_company_code.obj, 0);
  expect(test.canalpayment_company_code.condi, 0);
  expect(test.canalpayment_company_code.typ, 0);
  expect(test.canalpayment_company_code.ini_typ, 0);
  expect(test.canalpayment_company_code.file, "");
  expect(test.canalpayment_company_code.section, "");
  expect(test.canalpayment_company_code.keyword, "");
  expect(test.canalpayment_branch_code.title, "");
  expect(test.canalpayment_branch_code.obj, 0);
  expect(test.canalpayment_branch_code.condi, 0);
  expect(test.canalpayment_branch_code.typ, 0);
  expect(test.canalpayment_branch_code.ini_typ, 0);
  expect(test.canalpayment_branch_code.file, "");
  expect(test.canalpayment_branch_code.section, "");
  expect(test.canalpayment_branch_code.keyword, "");
  expect(test.canalpayment_merchantId.title, "");
  expect(test.canalpayment_merchantId.obj, 0);
  expect(test.canalpayment_merchantId.condi, 0);
  expect(test.canalpayment_merchantId.typ, 0);
  expect(test.canalpayment_merchantId.ini_typ, 0);
  expect(test.canalpayment_merchantId.file, "");
  expect(test.canalpayment_merchantId.section, "");
  expect(test.canalpayment_merchantId.keyword, "");
}

void allPropatyCheck(ConsistencyJsonFile test, bool firstItemCheck)
{
  if(firstItemCheck == true) {
    expect(test.version.title, "バージョン");
  }
  expect(test.version.obj, 0);
  expect(test.version.condi, 0);
  expect(test.version.typ, 2);
  expect(test.version.ini_typ, 1);
  expect(test.version.file, "conf/version.json");
  expect(test.version.section, "apl");
  expect(test.version.keyword, "ver");
  expect(test.macno_check.title, "レジ番号関連");
  expect(test.macno_check.obj, 0);
  expect(test.macno_check.condi, 0);
  expect(test.macno_check.typ, 0);
  expect(test.stre_cd.title, "店舗コード");
  expect(test.stre_cd.obj, 0);
  expect(test.stre_cd.condi, 0);
  expect(test.stre_cd.typ, 2);
  expect(test.stre_cd.ini_typ, 0);
  expect(test.stre_cd.file, "conf/mac_info.json");
  expect(test.stre_cd.section, "system");
  expect(test.stre_cd.keyword, "shpno");
  expect(test.ms_onoff.title, "M/S仕様");
  expect(test.ms_onoff.obj, 0);
  expect(test.ms_onoff.condi, 0);
  expect(test.ms_onoff.typ, 2);
  expect(test.ms_onoff.ini_typ, 0);
  expect(test.ms_onoff.file, "conf/mac_info.json");
  expect(test.ms_onoff.section, "mm_system");
  expect(test.ms_onoff.keyword, "mm_onoff");
  expect(test.mac_info_timeserver.title, "時刻問い合わせ先");
  expect(test.mac_info_timeserver.obj, 0);
  expect(test.mac_info_timeserver.condi, 0);
  expect(test.mac_info_timeserver.typ, 2);
  expect(test.mac_info_timeserver.ini_typ, 0);
  expect(test.mac_info_timeserver.file, "conf/mac_info.json");
  expect(test.mac_info_timeserver.section, "timeserver");
  expect(test.mac_info_timeserver.keyword, "timeserver");
  expect(test.ts_ver_mrg.title, "ＴＳバージョン管理");
  expect(test.ts_ver_mrg.obj, 0);
  expect(test.ts_ver_mrg.condi, 0);
  expect(test.ts_ver_mrg.typ, 2);
  expect(test.ts_ver_mrg.ini_typ, 0);
  expect(test.ts_ver_mrg.file, "conf/mac_info.json");
  expect(test.ts_ver_mrg.section, "system");
  expect(test.ts_ver_mrg.keyword, "ts_ver_mrg");
  expect(test.psc_scn_cmd_desktop.title, "ＰＳＣスキャナコマンド制御（卓上）");
  expect(test.psc_scn_cmd_desktop.obj, 0);
  expect(test.psc_scn_cmd_desktop.condi, 0);
  expect(test.psc_scn_cmd_desktop.typ, 2);
  expect(test.psc_scn_cmd_desktop.ini_typ, 0);
  expect(test.psc_scn_cmd_desktop.file, "conf/mac_info.json");
  expect(test.psc_scn_cmd_desktop.section, "scanner");
  expect(test.psc_scn_cmd_desktop.keyword, "scn_cmd_desktop");
  expect(test.psc_scn_cmd_tower.title, "ＰＳＣスキャナコマンド制御（タワー）");
  expect(test.psc_scn_cmd_tower.obj, 0);
  expect(test.psc_scn_cmd_tower.condi, 0);
  expect(test.psc_scn_cmd_tower.typ, 2);
  expect(test.psc_scn_cmd_tower.ini_typ, 0);
  expect(test.psc_scn_cmd_tower.file, "conf/mac_info.json");
  expect(test.psc_scn_cmd_tower.section, "scanner");
  expect(test.psc_scn_cmd_tower.keyword, "scn_cmd_tower");
  expect(test.scan_dp_snd_desktop.title, "特定バーコード読取時スキャン音変更（卓上）");
  expect(test.scan_dp_snd_desktop.obj, 0);
  expect(test.scan_dp_snd_desktop.condi, 0);
  expect(test.scan_dp_snd_desktop.typ, 2);
  expect(test.scan_dp_snd_desktop.ini_typ, 0);
  expect(test.scan_dp_snd_desktop.file, "conf/mac_info.json");
  expect(test.scan_dp_snd_desktop.section, "scanner");
  expect(test.scan_dp_snd_desktop.keyword, "scan_dp_snd_desktop");
  expect(test.scan_dp_snd_tower.title, "特定バーコード読取時スキャン音変更（タワー）");
  expect(test.scan_dp_snd_tower.obj, 0);
  expect(test.scan_dp_snd_tower.condi, 0);
  expect(test.scan_dp_snd_tower.typ, 2);
  expect(test.scan_dp_snd_tower.ini_typ, 0);
  expect(test.scan_dp_snd_tower.file, "conf/mac_info.json");
  expect(test.scan_dp_snd_tower.section, "scanner");
  expect(test.scan_dp_snd_tower.keyword, "scan_dp_snd_tower");
  expect(test.eat_in_start_end_check.title, "イートイン仕様整理番号");
  expect(test.eat_in_start_end_check.obj, 0);
  expect(test.eat_in_start_end_check.condi, 1);
  expect(test.eat_in_start_end_check.condi1_typ, 1);
  expect(test.eat_in_start_end_check.condi1_key, "eat_in");
  expect(test.eat_in_start_end_check.condi1_judge, 1);
  expect(test.eat_in_start_end_check.typ, 4);
  expect(test.eat_in_start_end_check.st_file, "conf/eat_in.json");
  expect(test.eat_in_start_end_check.st_sect, "counter");
  expect(test.eat_in_start_end_check.st_key, "start");
  expect(test.eat_in_start_end_check.end_file, "conf/eat_in.json");
  expect(test.eat_in_start_end_check.end_sect, "counter");
  expect(test.eat_in_start_end_check.end_key, "end");
  expect(test.catalinapr_cnct.title, "カタリナプリンタ接続");
  expect(test.catalinapr_cnct.obj, 0);
  expect(test.catalinapr_cnct.condi, 1);
  expect(test.catalinapr_cnct.condi1_typ, 1);
  expect(test.catalinapr_cnct.condi1_key, "catalinasystem");
  expect(test.catalinapr_cnct.condi1_judge, 1);
  expect(test.catalinapr_cnct.typ, 2);
  expect(test.catalinapr_cnct.ini_typ, 0);
  expect(test.catalinapr_cnct.file, "conf/mac_info.json");
  expect(test.catalinapr_cnct.section, "internal_flg");
  expect(test.catalinapr_cnct.keyword, "catalinapr_cnct");
  expect(test.custrealsvr_cnct.title, "会員問い合わせサーバー接続");
  expect(test.custrealsvr_cnct.obj, 0);
  expect(test.custrealsvr_cnct.condi, 0);
  expect(test.custrealsvr_cnct.typ, 2);
  expect(test.custrealsvr_cnct.ini_typ, 0);
  expect(test.custrealsvr_cnct.file, "conf/mac_info.json");
  expect(test.custrealsvr_cnct.section, "internal_flg");
  expect(test.custrealsvr_cnct.keyword, "custrealsvr_cnct");
  expect(test.netmask.title, "サブネットマスク");
  expect(test.netmask.obj, 0);
  expect(test.netmask.condi, 0);
  expect(test.netmask.typ, 1);
  expect(test.netmask.keyword_typ, 0);
  expect(test.netmask.file, "/etc/sysconfig/network-scripts/ifcfg-eth0");
  expect(test.netmask.keyword, "NETMASK");
  expect(test.gateway.title, "ゲートウェイアドレス");
  expect(test.gateway.obj, 0);
  expect(test.gateway.condi, 0);
  expect(test.gateway.typ, 1);
  expect(test.gateway.keyword_typ, 0);
  expect(test.gateway.file, "/etc/sysconfig/network-scripts/ifcfg-eth0");
  expect(test.gateway.keyword, "GATEWAY");
  expect(test.ts2100.title, "サーバーＩＰアドレス");
  expect(test.ts2100.obj, 0);
  expect(test.ts2100.condi, 0);
  expect(test.ts2100.typ, 1);
  expect(test.ts2100.keyword_typ, 1);
  expect(test.ts2100.file, "/etc/hosts");
  expect(test.ts2100.keyword, "ts2100");
  expect(test.ts21db.title, "ＤＢサーバーＩＰアドレス");
  expect(test.ts21db.obj, 0);
  expect(test.ts21db.condi, 0);
  expect(test.ts21db.typ, 1);
  expect(test.ts21db.keyword_typ, 1);
  expect(test.ts21db.file, "/etc/hosts");
  expect(test.ts21db.keyword, "ts21db");
  expect(test.subsrx.title, "サブサーバーＩＰアドレス");
  expect(test.subsrx.obj, 0);
  expect(test.subsrx.condi, 0);
  expect(test.subsrx.typ, 1);
  expect(test.subsrx.keyword_typ, 1);
  expect(test.subsrx.file, "/etc/hosts");
  expect(test.subsrx.keyword, "subsrx");
  expect(test.compc.title, "通信ＰＣ　ＩＰアドレス");
  expect(test.compc.obj, 0);
  expect(test.compc.condi, 0);
  expect(test.compc.typ, 1);
  expect(test.compc.keyword_typ, 1);
  expect(test.compc.file, "/etc/hosts");
  expect(test.compc.keyword, "compc");
  expect(test.sims2100.title, "ＳＩＭＳ２１００ＩＰアドレス＿１");
  expect(test.sims2100.obj, 0);
  expect(test.sims2100.condi, 0);
  expect(test.sims2100.typ, 1);
  expect(test.sims2100.keyword_typ, 1);
  expect(test.sims2100.file, "/etc/hosts");
  expect(test.sims2100.keyword, "sims2100");
  expect(test.sc_adr.title, "ＳＩＭＳ２１００ＩＰアドレス＿２");
  expect(test.sc_adr.obj, 0);
  expect(test.sc_adr.condi, 0);
  expect(test.sc_adr.typ, 2);
  expect(test.sc_adr.ini_typ, 0);
  expect(test.sc_adr.file, "conf/mac_info.json");
  expect(test.sc_adr.section, "mm_system");
  expect(test.sc_adr.keyword, "sc_adr");
  expect(test.sc_port.title, "ＳＩＭＳ２１００ポート番号");
  expect(test.sc_port.obj, 0);
  expect(test.sc_port.condi, 0);
  expect(test.sc_port.typ, 2);
  expect(test.sc_port.ini_typ, 0);
  expect(test.sc_port.file, "conf/mac_info.json");
  expect(test.sc_port.section, "mm_system");
  expect(test.sc_port.keyword, "sc_port");
  expect(test.manage.title, "モニタＰＣ　ＩＰアドレス");
  expect(test.manage.obj, 0);
  expect(test.manage.condi, 0);
  expect(test.manage.typ, 1);
  expect(test.manage.keyword_typ, 1);
  expect(test.manage.file, "/etc/hosts");
  expect(test.manage.keyword, "manage");
  expect(test.comport.title, "通信ＰＣ　ポート番号");
  expect(test.comport.obj, 0);
  expect(test.comport.condi, 0);
  expect(test.comport.typ, 1);
  expect(test.comport.keyword_typ, 2);
  expect(test.comport.file, "/etc/services");
  expect(test.comport.keyword, "comport");
  expect(test.custserver.title, "会員サーバー　ＩＰアドレス");
  expect(test.custserver.obj, 0);
  expect(test.custserver.condi, 0);
  expect(test.custserver.typ, 1);
  expect(test.custserver.keyword_typ, 1);
  expect(test.custserver.file, "/etc/hosts");
  expect(test.custserver.keyword, "custserver");
  expect(test.custsvrport.title, "会員サーバー　ポート番号");
  expect(test.custsvrport.obj, 0);
  expect(test.custsvrport.condi, 0);
  expect(test.custsvrport.typ, 1);
  expect(test.custsvrport.keyword_typ, 2);
  expect(test.custsvrport.file, "/etc/services");
  expect(test.custsvrport.keyword, "custsvrport");
  expect(test.custrealsvr_timeout.title, "リアル会員問い合わせ　受信タイムアウト秒");
  expect(test.custrealsvr_timeout.obj, 0);
  expect(test.custrealsvr_timeout.condi, 0);
  expect(test.custrealsvr_timeout.typ, 2);
  expect(test.custrealsvr_timeout.ini_typ, 0);
  expect(test.custrealsvr_timeout.file, "conf/sys_param.json");
  expect(test.custrealsvr_timeout.section, "custrealsvr");
  expect(test.custrealsvr_timeout.keyword, "timeout");
  expect(test.mente_port.title, "メンテナンス（セグメント、メモ）　ポート番号");
  expect(test.mente_port.obj, 0);
  expect(test.mente_port.condi, 0);
  expect(test.mente_port.typ, 2);
  expect(test.mente_port.ini_typ, 0);
  expect(test.mente_port.file, "conf/mac_info.json");
  expect(test.mente_port.section, "mm_system");
  expect(test.mente_port.keyword, "mente_port");
  expect(test.sc_mente_port.title, "SIMS用メンテナンス（セグメント）　ポート番号");
  expect(test.sc_mente_port.obj, 0);
  expect(test.sc_mente_port.condi, 0);
  expect(test.sc_mente_port.typ, 2);
  expect(test.sc_mente_port.ini_typ, 0);
  expect(test.sc_mente_port.file, "conf/mac_info.json");
  expect(test.sc_mente_port.section, "mm_system");
  expect(test.sc_mente_port.keyword, "sc_mente_port");
  expect(test.dns.title, "ＤＮＳ（１）、ＤＮＳ（２）");
  expect(test.dns.obj, 0);
  expect(test.dns.condi, 1);
  expect(test.dns.condi1_typ, 1);
  expect(test.dns.condi1_key, "custreal_netdoa");
  expect(test.dns.condi1_judge, 1);
  expect(test.dns.typ, 5);
  expect(test.dns.file, "/etc/resolv.conf");
  expect(test.dns.keyword, "nameserver");
  expect(test.timeserver.title, "タイムサーバー　ＩＰアドレス");
  expect(test.timeserver.obj, 0);
  expect(test.timeserver.condi, 0);
  expect(test.timeserver.typ, 1);
  expect(test.timeserver.keyword_typ, 1);
  expect(test.timeserver.file, "/etc/hosts");
  expect(test.timeserver.keyword, "timeserver");
  expect(test.centerserver_mst.title, "センターサーバー（マスタ）　ＩＰアドレス");
  expect(test.centerserver_mst.obj, 0);
  expect(test.centerserver_mst.condi, 0);
  expect(test.centerserver_mst.typ, 1);
  expect(test.centerserver_mst.keyword_typ, 1);
  expect(test.centerserver_mst.file, "/etc/hosts");
  expect(test.centerserver_mst.keyword, "centerserver_mst");
  expect(test.centerserver_trn.title, "センターサーバー（実績）　ＩＰアドレス");
  expect(test.centerserver_trn.obj, 0);
  expect(test.centerserver_trn.condi, 0);
  expect(test.centerserver_trn.typ, 1);
  expect(test.centerserver_trn.keyword_typ, 1);
  expect(test.centerserver_trn.file, "/etc/hosts");
  expect(test.centerserver_trn.keyword, "centerserver_trn");
  expect(test.custserver2.title, "会員サーバー２　ＩＰアドレス");
  expect(test.custserver2.obj, 0);
  expect(test.custserver2.condi, 0);
  expect(test.custserver2.typ, 1);
  expect(test.custserver2.keyword_typ, 1);
  expect(test.custserver2.file, "/etc/hosts");
  expect(test.custserver2.keyword, "custserver2");
  expect(test.hbtime.title, "会員サーバー２　ハートビート間隔");
  expect(test.hbtime.obj, 0);
  expect(test.hbtime.condi, 0);
  expect(test.hbtime.typ, 2);
  expect(test.hbtime.ini_typ, 0);
  expect(test.hbtime.file, "conf/sys_param.json");
  expect(test.hbtime.section, "custsvr2");
  expect(test.hbtime.keyword, "hbtime");
  expect(test.offlinetime.title, "会員サーバー２　オフライン時未接続間隔");
  expect(test.offlinetime.obj, 0);
  expect(test.offlinetime.condi, 0);
  expect(test.offlinetime.typ, 2);
  expect(test.offlinetime.ini_typ, 0);
  expect(test.offlinetime.file, "conf/sys_param.json");
  expect(test.offlinetime.section, "custsvr2");
  expect(test.offlinetime.keyword, "offlinetime");
  expect(test.spqc.title, "お会計券管理　ＩＰアドレス");
  expect(test.spqc.obj, 0);
  expect(test.spqc.condi, 0);
  expect(test.spqc.typ, 1);
  expect(test.spqc.keyword_typ, 1);
  expect(test.spqc.file, "/etc/hosts");
  expect(test.spqc.keyword, "spqc");
  expect(test.spqcport.title, "お会計券管理　ポート番号");
  expect(test.spqcport.obj, 0);
  expect(test.spqcport.condi, 0);
  expect(test.spqcport.typ, 1);
  expect(test.spqcport.keyword_typ, 2);
  expect(test.spqcport.file, "/etc/services");
  expect(test.spqcport.keyword, "spqcport");
  expect(test.wiz_port.title, "Wiz接続　ポート番号");
  expect(test.wiz_port.obj, 0);
  expect(test.wiz_port.condi, 0);
  expect(test.wiz_port.typ, 1);
  expect(test.wiz_port.keyword_typ, 2);
  expect(test.wiz_port.file, "/etc/services");
  expect(test.wiz_port.keyword, "wiz_port");
  expect(test.spqc_subsvr.title, "お会計券管理サブサーバーＩＰアドレス");
  expect(test.spqc_subsvr.obj, 0);
  expect(test.spqc_subsvr.condi, 0);
  expect(test.spqc_subsvr.typ, 1);
  expect(test.spqc_subsvr.keyword_typ, 1);
  expect(test.spqc_subsvr.file, "/etc/hosts");
  expect(test.spqc_subsvr.keyword, "spqc_subsvr");
  expect(test.hq_userid.title, "ﾀﾞｲﾚｸﾄﾎﾟｲﾝﾄ顧客仕様　ログインＩＤ");
  expect(test.hq_userid.obj, 0);
  expect(test.hq_userid.condi, 0);
  expect(test.hq_userid.typ, 2);
  expect(test.hq_userid.ini_typ, 0);
  expect(test.hq_userid.file, "conf/sys_param.json");
  expect(test.hq_userid.section, "hq");
  expect(test.hq_userid.keyword, "userid");
  expect(test.hq_userpass.title, "ﾀﾞｲﾚｸﾄﾎﾟｲﾝﾄ顧客仕様　ログインパスワード");
  expect(test.hq_userpass.obj, 0);
  expect(test.hq_userpass.condi, 0);
  expect(test.hq_userpass.typ, 2);
  expect(test.hq_userpass.ini_typ, 0);
  expect(test.hq_userpass.file, "conf/sys_param.json");
  expect(test.hq_userpass.section, "hq");
  expect(test.hq_userpass.keyword, "userpass");
  expect(test.hq_compcd.title, "ﾀﾞｲﾚｸﾄﾎﾟｲﾝﾄ顧客仕様　企業コード");
  expect(test.hq_compcd.obj, 0);
  expect(test.hq_compcd.condi, 0);
  expect(test.hq_compcd.typ, 2);
  expect(test.hq_compcd.ini_typ, 0);
  expect(test.hq_compcd.file, "conf/sys_param.json");
  expect(test.hq_compcd.section, "hq");
  expect(test.hq_compcd.keyword, "compcd");
  expect(test.hq_url.title, "ﾀﾞｲﾚｸﾄﾎﾟｲﾝﾄ顧客仕様　接続先ＵＲＬ");
  expect(test.hq_url.obj, 0);
  expect(test.hq_url.condi, 0);
  expect(test.hq_url.typ, 2);
  expect(test.hq_url.ini_typ, 0);
  expect(test.hq_url.file, "conf/sys_param.json");
  expect(test.hq_url.section, "hq");
  expect(test.hq_url.keyword, "url");
  expect(test.qcselect_port.title, "QC指定接続　ポート番号");
  expect(test.qcselect_port.obj, 0);
  expect(test.qcselect_port.condi, 0);
  expect(test.qcselect_port.typ, 1);
  expect(test.qcselect_port.keyword_typ, 2);
  expect(test.qcselect_port.file, "/etc/services");
  expect(test.qcselect_port.keyword, "qcselect_port");
  expect(test.bult_send.title, "センターサーバー　速報実績の送信");
  expect(test.bult_send.obj, 0);
  expect(test.bult_send.condi, 0);
  expect(test.bult_send.typ, 2);
  expect(test.bult_send.ini_typ, 0);
  expect(test.bult_send.file, "conf/mac_info.json");
  expect(test.bult_send.section, "center_server");
  expect(test.bult_send.keyword, "bult_send");
  expect(test.tslnkweb_timeout.title, "センターサーバー　速報実績送信の間隔");
  expect(test.tslnkweb_timeout.obj, 0);
  expect(test.tslnkweb_timeout.condi, 0);
  expect(test.tslnkweb_timeout.typ, 2);
  expect(test.tslnkweb_timeout.ini_typ, 0);
  expect(test.tslnkweb_timeout.file, "conf/mac_info.json");
  expect(test.tslnkweb_timeout.section, "center_server");
  expect(test.tslnkweb_timeout.keyword, "tslnkweb_timeout");
  expect(test.pbchg_groupcd.title, "公共料金　会社グループコード");
  expect(test.pbchg_groupcd.obj, 0);
  expect(test.pbchg_groupcd.condi, 0);
  expect(test.pbchg_groupcd.typ, 2);
  expect(test.pbchg_groupcd.ini_typ, 0);
  expect(test.pbchg_groupcd.file, "conf/pbchg.json");
  expect(test.pbchg_groupcd.section, "system");
  expect(test.pbchg_groupcd.keyword, "groupcd");
  expect(test.pbchg_officecd.title, "公共料金　会社コード");
  expect(test.pbchg_officecd.obj, 0);
  expect(test.pbchg_officecd.condi, 0);
  expect(test.pbchg_officecd.typ, 2);
  expect(test.pbchg_officecd.ini_typ, 0);
  expect(test.pbchg_officecd.file, "conf/pbchg.json");
  expect(test.pbchg_officecd.section, "system");
  expect(test.pbchg_officecd.keyword, "officecd");
  expect(test.pbchg_strecd.title, "公共料金　店舗コード");
  expect(test.pbchg_strecd.obj, 0);
  expect(test.pbchg_strecd.condi, 0);
  expect(test.pbchg_strecd.typ, 2);
  expect(test.pbchg_strecd.ini_typ, 0);
  expect(test.pbchg_strecd.file, "conf/pbchg.json");
  expect(test.pbchg_strecd.section, "system");
  expect(test.pbchg_strecd.keyword, "strecd");
  expect(test.pbchg_interval.title, "公共料金　収納代行速報リトライ間隔");
  expect(test.pbchg_interval.obj, 0);
  expect(test.pbchg_interval.condi, 0);
  expect(test.pbchg_interval.typ, 2);
  expect(test.pbchg_interval.ini_typ, 0);
  expect(test.pbchg_interval.file, "conf/pbchg.json");
  expect(test.pbchg_interval.section, "retry");
  expect(test.pbchg_interval.keyword, "interval");
  expect(test.pbchg_cnt.title, "公共料金　収納代行速報リトライ回数");
  expect(test.pbchg_cnt.obj, 0);
  expect(test.pbchg_cnt.condi, 0);
  expect(test.pbchg_cnt.typ, 2);
  expect(test.pbchg_cnt.ini_typ, 0);
  expect(test.pbchg_cnt.file, "conf/pbchg.json");
  expect(test.pbchg_cnt.section, "retry");
  expect(test.pbchg_cnt.keyword, "cnt");
  expect(test.pbchg_month.title, "公共料金　収納代行過去実績保持月数");
  expect(test.pbchg_month.obj, 0);
  expect(test.pbchg_month.condi, 0);
  expect(test.pbchg_month.typ, 2);
  expect(test.pbchg_month.ini_typ, 0);
  expect(test.pbchg_month.file, "conf/pbchg.json");
  expect(test.pbchg_month.section, "save");
  expect(test.pbchg_month.keyword, "month");
  expect(test.pbchg_steps.title, "公共料金　１取引公共料金制限段数");
  expect(test.pbchg_steps.obj, 0);
  expect(test.pbchg_steps.condi, 0);
  expect(test.pbchg_steps.typ, 2);
  expect(test.pbchg_steps.ini_typ, 0);
  expect(test.pbchg_steps.file, "conf/pbchg.json");
  expect(test.pbchg_steps.section, "tran");
  expect(test.pbchg_steps.keyword, "steps");
  expect(test.pbchg_res_sel.title, "公共料金　公共料金実績フラグ");
  expect(test.pbchg_res_sel.obj, 0);
  expect(test.pbchg_res_sel.condi, 0);
  expect(test.pbchg_res_sel.typ, 2);
  expect(test.pbchg_res_sel.ini_typ, 0);
  expect(test.pbchg_res_sel.file, "conf/pbchg.json");
  expect(test.pbchg_res_sel.section, "tran");
  expect(test.pbchg_res_sel.keyword, "res_sel");
  expect(test.pbchg_fee1_sel.title, "公共料金　手数料1実績フラグ");
  expect(test.pbchg_fee1_sel.obj, 0);
  expect(test.pbchg_fee1_sel.condi, 0);
  expect(test.pbchg_fee1_sel.typ, 2);
  expect(test.pbchg_fee1_sel.ini_typ, 0);
  expect(test.pbchg_fee1_sel.file, "conf/pbchg.json");
  expect(test.pbchg_fee1_sel.section, "tran");
  expect(test.pbchg_fee1_sel.keyword, "fee1_sel");
  expect(test.pbchg_fee2_sel.title, "公共料金　手数料2実績フラグ");
  expect(test.pbchg_fee2_sel.obj, 0);
  expect(test.pbchg_fee2_sel.condi, 0);
  expect(test.pbchg_fee2_sel.typ, 2);
  expect(test.pbchg_fee2_sel.ini_typ, 0);
  expect(test.pbchg_fee2_sel.file, "conf/pbchg.json");
  expect(test.pbchg_fee2_sel.section, "tran");
  expect(test.pbchg_fee2_sel.keyword, "fee2_sel");
  expect(test.pbchg_cnct.title, "公共料金　接続タイムアウト");
  expect(test.pbchg_cnct.obj, 0);
  expect(test.pbchg_cnct.condi, 0);
  expect(test.pbchg_cnct.typ, 2);
  expect(test.pbchg_cnct.ini_typ, 0);
  expect(test.pbchg_cnct.file, "conf/pbchg.json");
  expect(test.pbchg_cnct.section, "retry");
  expect(test.pbchg_cnct.keyword, "cnct");
  expect(test.pbchg_rd_timeout.title, "公共料金　受信タイムアウト");
  expect(test.pbchg_rd_timeout.obj, 0);
  expect(test.pbchg_rd_timeout.condi, 0);
  expect(test.pbchg_rd_timeout.typ, 2);
  expect(test.pbchg_rd_timeout.ini_typ, 0);
  expect(test.pbchg_rd_timeout.file, "conf/pbchg.json");
  expect(test.pbchg_rd_timeout.section, "retry");
  expect(test.pbchg_rd_timeout.keyword, "rd_timeout");
  expect(test.pbchg_wt_timeout.title, "公共料金　送信タイムアウト");
  expect(test.pbchg_wt_timeout.obj, 0);
  expect(test.pbchg_wt_timeout.condi, 0);
  expect(test.pbchg_wt_timeout.typ, 2);
  expect(test.pbchg_wt_timeout.ini_typ, 0);
  expect(test.pbchg_wt_timeout.file, "conf/pbchg.json");
  expect(test.pbchg_wt_timeout.section, "retry");
  expect(test.pbchg_wt_timeout.keyword, "wt_timeout");
  expect(test.add_total.title, "日計データを累計に加算");
  expect(test.add_total.obj, 1);
  expect(test.add_total.condi, 0);
  expect(test.add_total.typ, 2);
  expect(test.add_total.ini_typ, 0);
  expect(test.add_total.file, "conf/mac_info.json");
  expect(test.add_total.section, "mm_system");
  expect(test.add_total.keyword, "add_total");
  expect(test.add_cust.title, "会員日計データを累計に加算");
  expect(test.add_cust.obj, 1);
  expect(test.add_cust.condi, 0);
  expect(test.add_cust.typ, 2);
  expect(test.add_cust.ini_typ, 0);
  expect(test.add_cust.file, "conf/mac_info.json");
  expect(test.add_cust.section, "mm_system");
  expect(test.add_cust.keyword, "add_cust");
  expect(test.realitmsend_cnct.title, "リアル明細送信サーバー接続");
  expect(test.realitmsend_cnct.obj, 0);
  expect(test.realitmsend_cnct.condi, 0);
  expect(test.realitmsend_cnct.typ, 2);
  expect(test.realitmsend_cnct.ini_typ, 0);
  expect(test.realitmsend_cnct.file, "conf/mac_info.json");
  expect(test.realitmsend_cnct.section, "internal_flg");
  expect(test.realitmsend_cnct.keyword, "realitmsend_cnct");
  expect(test.ca_ipaddr.title, "リアル明細送信サーバー　ＩＰアドレス");
  expect(test.ca_ipaddr.obj, 0);
  expect(test.ca_ipaddr.condi, 0);
  expect(test.ca_ipaddr.typ, 2);
  expect(test.ca_ipaddr.ini_typ, 0);
  expect(test.ca_ipaddr.file, "conf/sys_param.json");
  expect(test.ca_ipaddr.section, "catalina");
  expect(test.ca_ipaddr.keyword, "ca_ipaddr");
  expect(test.ca_port.title, "リアル明細送信サーバー　ポート番号");
  expect(test.ca_port.obj, 0);
  expect(test.ca_port.condi, 0);
  expect(test.ca_port.typ, 2);
  expect(test.ca_port.ini_typ, 0);
  expect(test.ca_port.file, "conf/sys_param.json");
  expect(test.ca_port.section, "catalina");
  expect(test.ca_port.keyword, "ca_port");
  expect(test.qcashier.title, "QCashier.iniファイル");
  expect(test.qcashier.obj, 0);
  expect(test.qcashier.condi, 1);
  expect(test.qcashier.condi1_typ, 1);
  expect(test.qcashier.condi1_key, "qcashier_system");
  expect(test.qcashier.condi1_judge, 1);
  expect(test.qcashier.typ, 3);
  expect(test.qcashier.file, "conf/qcashier.json");
  expect(test.tswebsvr.title, "ＴＳ仕様 シェル実行サーバー ＩＰアドレス");
  expect(test.tswebsvr.obj, 0);
  expect(test.tswebsvr.condi, 0);
  expect(test.tswebsvr.typ, 1);
  expect(test.tswebsvr.keyword_typ, 1);
  expect(test.tswebsvr.file, "/etc/hosts");
  expect(test.tswebsvr.keyword, "tswebsvr");
  expect(test.verup_cnct.title, "バージョンアップファイル取得先 ＩＰアドレス");
  expect(test.verup_cnct.obj, 0);
  expect(test.verup_cnct.condi, 0);
  expect(test.verup_cnct.typ, 1);
  expect(test.verup_cnct.keyword_typ, 1);
  expect(test.verup_cnct.file, "/etc/hosts");
  expect(test.verup_cnct.keyword, "verup_cnct");
  expect(test.bkup_save.title, "spec_bkup保存先 ＩＰアドレス");
  expect(test.bkup_save.obj, 0);
  expect(test.bkup_save.condi, 0);
  expect(test.bkup_save.typ, 1);
  expect(test.bkup_save.keyword_typ, 1);
  expect(test.bkup_save.file, "/etc/hosts");
  expect(test.bkup_save.keyword, "bkup_save");
  expect(test.histlog_server.title, "履歴(COPY文)マスター取込み先　ＩＰアドレス");
  expect(test.histlog_server.obj, 0);
  expect(test.histlog_server.condi, 0);
  expect(test.histlog_server.typ, 1);
  expect(test.histlog_server.keyword_typ, 1);
  expect(test.histlog_server.file, "/etc/hosts");
  expect(test.histlog_server.keyword, "histlog_server");
  expect(test.histlog_server_sub.title, "履歴(COPY文)マスター取込み先  ＩＰアドレス (サブ)");
  expect(test.histlog_server_sub.obj, 0);
  expect(test.histlog_server_sub.condi, 0);
  expect(test.histlog_server_sub.typ, 1);
  expect(test.histlog_server_sub.keyword_typ, 1);
  expect(test.histlog_server_sub.file, "/etc/hosts");
  expect(test.histlog_server_sub.keyword, "histlog_sub_server");
  expect(test.repica_url.title, "レピカ仕様 プリペイド接続アドレス(1)");
  expect(test.repica_url.obj, 0);
  expect(test.repica_url.condi, 0);
  expect(test.repica_url.typ, 2);
  expect(test.repica_url.ini_typ, 0);
  expect(test.repica_url.file, "conf/repica.json");
  expect(test.repica_url.section, "normal");
  expect(test.repica_url.keyword, "url");
  expect(test.repica_url_cancel.title, "レピカ仕様 プリペイド接続アドレス(2)");
  expect(test.repica_url_cancel.obj, 0);
  expect(test.repica_url_cancel.condi, 0);
  expect(test.repica_url_cancel.typ, 2);
  expect(test.repica_url_cancel.ini_typ, 0);
  expect(test.repica_url_cancel.file, "conf/repica.json");
  expect(test.repica_url_cancel.section, "normal");
  expect(test.repica_url_cancel.keyword, "url_auto_cancel");
  expect(test.repica_timeout.title, "レピカ仕様 プリペイド接続 タイムアウト");
  expect(test.repica_timeout.obj, 0);
  expect(test.repica_timeout.condi, 0);
  expect(test.repica_timeout.typ, 2);
  expect(test.repica_timeout.ini_typ, 0);
  expect(test.repica_timeout.file, "conf/repica.json");
  expect(test.repica_timeout.section, "normal");
  expect(test.repica_timeout.keyword, "timeout");
  expect(test.repica_id.title, "レピカ仕様 プリペイド接続 ID");
  expect(test.repica_id.obj, 0);
  expect(test.repica_id.condi, 0);
  expect(test.repica_id.typ, 2);
  expect(test.repica_id.ini_typ, 0);
  expect(test.repica_id.file, "conf/repica.json");
  expect(test.repica_id.section, "normal");
  expect(test.repica_id.keyword, "client_signature");
  expect(test.barcodepay_url.title, "JPQR決済 問い合わせURL");
  expect(test.barcodepay_url.obj, 0);
  expect(test.barcodepay_url.condi, 0);
  expect(test.barcodepay_url.typ, 2);
  expect(test.barcodepay_url.ini_typ, 0);
  expect(test.barcodepay_url.file, "conf/barcode_pay.json");
  expect(test.barcodepay_url.section, "barcodepay");
  expect(test.barcodepay_url.keyword, "url");
  expect(test.barcodepay_timeout.title, "JPQR決済 タイムアウト");
  expect(test.barcodepay_timeout.obj, 0);
  expect(test.barcodepay_timeout.condi, 0);
  expect(test.barcodepay_timeout.typ, 2);
  expect(test.barcodepay_timeout.ini_typ, 0);
  expect(test.barcodepay_timeout.file, "conf/barcode_pay.json");
  expect(test.barcodepay_timeout.section, "barcodepay");
  expect(test.barcodepay_timeout.keyword, "timeout");
  expect(test.barcodepay_merchantCode.title, "JPQR決済 merchantCode");
  expect(test.barcodepay_merchantCode.obj, 0);
  expect(test.barcodepay_merchantCode.condi, 0);
  expect(test.barcodepay_merchantCode.typ, 2);
  expect(test.barcodepay_merchantCode.ini_typ, 0);
  expect(test.barcodepay_merchantCode.file, "conf/barcode_pay.json");
  expect(test.barcodepay_merchantCode.section, "barcodepay");
  expect(test.barcodepay_merchantCode.keyword, "merchantCode");
  expect(test.barcodepay_cliantId.title, "JPQR決済 cliantId");
  expect(test.barcodepay_cliantId.obj, 0);
  expect(test.barcodepay_cliantId.condi, 0);
  expect(test.barcodepay_cliantId.typ, 2);
  expect(test.barcodepay_cliantId.ini_typ, 0);
  expect(test.barcodepay_cliantId.file, "conf/barcode_pay.json");
  expect(test.barcodepay_cliantId.section, "barcodepay");
  expect(test.barcodepay_cliantId.keyword, "cliantId");
  expect(test.DUMMY.title, "DUMMY");
  expect(test.DUMMY.file, "/etc/sysconfig/network-scripts/ifcfg-enp1s0");
  expect(test.DUMMY.typ, 99);
  expect(test.DUMMY.obj, 99);
  expect(test.linepay_url.title, "LINE Pay 問い合わせURL");
  expect(test.linepay_url.obj, 0);
  expect(test.linepay_url.condi, 0);
  expect(test.linepay_url.typ, 2);
  expect(test.linepay_url.ini_typ, 0);
  expect(test.linepay_url.file, "conf/barcode_pay.json");
  expect(test.linepay_url.section, "linepay");
  expect(test.linepay_url.keyword, "url");
  expect(test.linepay_timeout.title, "LINE Pay タイムアウト秒");
  expect(test.linepay_timeout.obj, 0);
  expect(test.linepay_timeout.condi, 0);
  expect(test.linepay_timeout.typ, 2);
  expect(test.linepay_timeout.ini_typ, 0);
  expect(test.linepay_timeout.file, "conf/barcode_pay.json");
  expect(test.linepay_timeout.section, "linepay");
  expect(test.linepay_timeout.keyword, "timeout");
  expect(test.linepay_channelId.title, "LINE Pay channelId");
  expect(test.linepay_channelId.obj, 0);
  expect(test.linepay_channelId.condi, 0);
  expect(test.linepay_channelId.typ, 2);
  expect(test.linepay_channelId.ini_typ, 0);
  expect(test.linepay_channelId.file, "conf/barcode_pay.json");
  expect(test.linepay_channelId.section, "linepay");
  expect(test.linepay_channelId.keyword, "channelId");
  expect(test.linepay_channelSecretKey.title, "LINE Pay channelSecretKey");
  expect(test.linepay_channelSecretKey.obj, 0);
  expect(test.linepay_channelSecretKey.condi, 0);
  expect(test.linepay_channelSecretKey.typ, 2);
  expect(test.linepay_channelSecretKey.ini_typ, 0);
  expect(test.linepay_channelSecretKey.file, "conf/barcode_pay.json");
  expect(test.linepay_channelSecretKey.section, "linepay");
  expect(test.linepay_channelSecretKey.keyword, "channelSecretKey");
  expect(test.linepay_line_at.title, "LINE Pay LINE@");
  expect(test.linepay_line_at.obj, 0);
  expect(test.linepay_line_at.condi, 0);
  expect(test.linepay_line_at.typ, 2);
  expect(test.linepay_line_at.ini_typ, 0);
  expect(test.linepay_line_at.file, "conf/barcode_pay.json");
  expect(test.linepay_line_at.section, "linepay");
  expect(test.linepay_line_at.keyword, "line_at");
  expect(test.onepay_url.title, "Onepay 問い合わせURL");
  expect(test.onepay_url.obj, 0);
  expect(test.onepay_url.condi, 0);
  expect(test.onepay_url.typ, 2);
  expect(test.onepay_url.ini_typ, 0);
  expect(test.onepay_url.file, "conf/barcode_pay.json");
  expect(test.onepay_url.section, "onepay");
  expect(test.onepay_url.keyword, "url");
  expect(test.onepay_timeout.title, "Onepay タイムアウト秒");
  expect(test.onepay_timeout.obj, 0);
  expect(test.onepay_timeout.condi, 0);
  expect(test.onepay_timeout.typ, 2);
  expect(test.onepay_timeout.ini_typ, 0);
  expect(test.onepay_timeout.file, "conf/barcode_pay.json");
  expect(test.onepay_timeout.section, "onepay");
  expect(test.onepay_timeout.keyword, "timeout");
  expect(test.canalpayment_url.title, "CANALPayment 問い合わせURL");
  expect(test.canalpayment_url.obj, 0);
  expect(test.canalpayment_url.condi, 0);
  expect(test.canalpayment_url.typ, 2);
  expect(test.canalpayment_url.ini_typ, 0);
  expect(test.canalpayment_url.file, "conf/barcode_pay.json");
  expect(test.canalpayment_url.section, "canalpayment");
  expect(test.canalpayment_url.keyword, "url");
  expect(test.canalpayment_timeout.title, "CANALPayment タイムアウト秒");
  expect(test.canalpayment_timeout.obj, 0);
  expect(test.canalpayment_timeout.condi, 0);
  expect(test.canalpayment_timeout.typ, 2);
  expect(test.canalpayment_timeout.ini_typ, 0);
  expect(test.canalpayment_timeout.file, "conf/barcode_pay.json");
  expect(test.canalpayment_timeout.section, "canalpayment");
  expect(test.canalpayment_timeout.keyword, "timeout");
  expect(test.canalpayment_company_code.title, "CANALPayment 企業コード");
  expect(test.canalpayment_company_code.obj, 0);
  expect(test.canalpayment_company_code.condi, 0);
  expect(test.canalpayment_company_code.typ, 2);
  expect(test.canalpayment_company_code.ini_typ, 0);
  expect(test.canalpayment_company_code.file, "conf/barcode_pay.json");
  expect(test.canalpayment_company_code.section, "canalpayment");
  expect(test.canalpayment_company_code.keyword, "company_code");
  expect(test.canalpayment_branch_code.title, "CANALPayment 店舗コード");
  expect(test.canalpayment_branch_code.obj, 0);
  expect(test.canalpayment_branch_code.condi, 0);
  expect(test.canalpayment_branch_code.typ, 2);
  expect(test.canalpayment_branch_code.ini_typ, 0);
  expect(test.canalpayment_branch_code.file, "conf/barcode_pay.json");
  expect(test.canalpayment_branch_code.section, "canalpayment");
  expect(test.canalpayment_branch_code.keyword, "branch_code");
  expect(test.canalpayment_merchantId.title, "CANALPayment マーチャントID");
  expect(test.canalpayment_merchantId.obj, 0);
  expect(test.canalpayment_merchantId.condi, 0);
  expect(test.canalpayment_merchantId.typ, 2);
  expect(test.canalpayment_merchantId.ini_typ, 0);
  expect(test.canalpayment_merchantId.file, "conf/barcode_pay.json");
  expect(test.canalpayment_merchantId.section, "canalpayment");
  expect(test.canalpayment_merchantId.keyword, "merchantId");
}

