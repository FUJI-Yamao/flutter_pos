/*
 * (C)2023 TERAOKA SEIKO Co., Ltd./株式会社寺岡精工
 * CONFIDENTIAL/社外秘
 * 無断開示・無断複製禁止
 */
 
import 'package:flutter_pos/app/common/environment.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/cupertino.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';
import 'package:path/path.dart';
import 'dart:io';
import 'unitTestParts.dart';

import '../../../../lib/app/common/cls_conf/configJsonFile.dart';
import '../../../../lib/app/common/cls_conf/sysJsonFile.dart';

late SysJsonFile sys;

void main(){
  sysJsonFile_test2();
}

void sysJsonFile_test2()
{
  TestWidgetsFlutterBinding.ensureInitialized();
  const String confPath = "conf/";
  const String testDir = "test_assets";
  const String fileName = "sys.json";
  const String section = "info";
  const String key = "version";
  const defaultData = "00.00.85";
  const testData1  =  987654321;    // テストデータ1
  const testData1s = "987654321";
  const testData2  =  192834675;    // テストデータ2
  const testData2s = "192834675";
  const testData3  =  129834765;    // テストデータ3
  const testData3s = "129834765";

  group('SysJsonFile',()
  {
    setUp(() async{
      PathProviderPlatform.instance = MockPathProviderPlatform();
      // 当該JSONファイルをデフォルトに戻す。
      await SysJsonFile().setDefault();
    });

    // 各テストの事後処理
    tearDown(() async{
      // 当該JSONファイルをデフォルトに戻す。
      await SysJsonFile().setDefault();
    });

    test('00665_element_check_00642', () async {
      print("\n********** テスト実行：00665_element_check_00642 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers03;
      print(sys.boot_jr_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers03 = testData1s;
      print(sys.boot_jr_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers03 = testData2s;
      print(sys.boot_jr_tower.drivers03);
      expect(sys.boot_jr_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers03 = defalut;
      print(sys.boot_jr_tower.drivers03);
      expect(sys.boot_jr_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00665_element_check_00642 **********\n\n");
    });

    test('00666_element_check_00643', () async {
      print("\n********** テスト実行：00666_element_check_00643 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers04;
      print(sys.boot_jr_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers04 = testData1s;
      print(sys.boot_jr_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers04 = testData2s;
      print(sys.boot_jr_tower.drivers04);
      expect(sys.boot_jr_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers04 = defalut;
      print(sys.boot_jr_tower.drivers04);
      expect(sys.boot_jr_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00666_element_check_00643 **********\n\n");
    });

    test('00667_element_check_00644', () async {
      print("\n********** テスト実行：00667_element_check_00644 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers05;
      print(sys.boot_jr_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers05 = testData1s;
      print(sys.boot_jr_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers05 = testData2s;
      print(sys.boot_jr_tower.drivers05);
      expect(sys.boot_jr_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers05 = defalut;
      print(sys.boot_jr_tower.drivers05);
      expect(sys.boot_jr_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00667_element_check_00644 **********\n\n");
    });

    test('00668_element_check_00645', () async {
      print("\n********** テスト実行：00668_element_check_00645 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers06;
      print(sys.boot_jr_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers06 = testData1s;
      print(sys.boot_jr_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers06 = testData2s;
      print(sys.boot_jr_tower.drivers06);
      expect(sys.boot_jr_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers06 = defalut;
      print(sys.boot_jr_tower.drivers06);
      expect(sys.boot_jr_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00668_element_check_00645 **********\n\n");
    });

    test('00669_element_check_00646', () async {
      print("\n********** テスト実行：00669_element_check_00646 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers07;
      print(sys.boot_jr_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers07 = testData1s;
      print(sys.boot_jr_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers07 = testData2s;
      print(sys.boot_jr_tower.drivers07);
      expect(sys.boot_jr_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers07 = defalut;
      print(sys.boot_jr_tower.drivers07);
      expect(sys.boot_jr_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00669_element_check_00646 **********\n\n");
    });

    test('00670_element_check_00647', () async {
      print("\n********** テスト実行：00670_element_check_00647 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers08;
      print(sys.boot_jr_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers08 = testData1s;
      print(sys.boot_jr_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers08 = testData2s;
      print(sys.boot_jr_tower.drivers08);
      expect(sys.boot_jr_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers08 = defalut;
      print(sys.boot_jr_tower.drivers08);
      expect(sys.boot_jr_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00670_element_check_00647 **********\n\n");
    });

    test('00671_element_check_00648', () async {
      print("\n********** テスト実行：00671_element_check_00648 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers09;
      print(sys.boot_jr_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers09 = testData1s;
      print(sys.boot_jr_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers09 = testData2s;
      print(sys.boot_jr_tower.drivers09);
      expect(sys.boot_jr_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers09 = defalut;
      print(sys.boot_jr_tower.drivers09);
      expect(sys.boot_jr_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00671_element_check_00648 **********\n\n");
    });

    test('00672_element_check_00649', () async {
      print("\n********** テスト実行：00672_element_check_00649 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers10;
      print(sys.boot_jr_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers10 = testData1s;
      print(sys.boot_jr_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers10 = testData2s;
      print(sys.boot_jr_tower.drivers10);
      expect(sys.boot_jr_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers10 = defalut;
      print(sys.boot_jr_tower.drivers10);
      expect(sys.boot_jr_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00672_element_check_00649 **********\n\n");
    });

    test('00673_element_check_00650', () async {
      print("\n********** テスト実行：00673_element_check_00650 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers11;
      print(sys.boot_jr_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers11 = testData1s;
      print(sys.boot_jr_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers11 = testData2s;
      print(sys.boot_jr_tower.drivers11);
      expect(sys.boot_jr_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers11 = defalut;
      print(sys.boot_jr_tower.drivers11);
      expect(sys.boot_jr_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00673_element_check_00650 **********\n\n");
    });

    test('00674_element_check_00651', () async {
      print("\n********** テスト実行：00674_element_check_00651 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers12;
      print(sys.boot_jr_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers12 = testData1s;
      print(sys.boot_jr_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers12 = testData2s;
      print(sys.boot_jr_tower.drivers12);
      expect(sys.boot_jr_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers12 = defalut;
      print(sys.boot_jr_tower.drivers12);
      expect(sys.boot_jr_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00674_element_check_00651 **********\n\n");
    });

    test('00675_element_check_00652', () async {
      print("\n********** テスト実行：00675_element_check_00652 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers13;
      print(sys.boot_jr_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers13 = testData1s;
      print(sys.boot_jr_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers13 = testData2s;
      print(sys.boot_jr_tower.drivers13);
      expect(sys.boot_jr_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers13 = defalut;
      print(sys.boot_jr_tower.drivers13);
      expect(sys.boot_jr_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00675_element_check_00652 **********\n\n");
    });

    test('00676_element_check_00653', () async {
      print("\n********** テスト実行：00676_element_check_00653 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers14;
      print(sys.boot_jr_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers14 = testData1s;
      print(sys.boot_jr_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers14 = testData2s;
      print(sys.boot_jr_tower.drivers14);
      expect(sys.boot_jr_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers14 = defalut;
      print(sys.boot_jr_tower.drivers14);
      expect(sys.boot_jr_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00676_element_check_00653 **********\n\n");
    });

    test('00677_element_check_00654', () async {
      print("\n********** テスト実行：00677_element_check_00654 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers15;
      print(sys.boot_jr_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers15 = testData1s;
      print(sys.boot_jr_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers15 = testData2s;
      print(sys.boot_jr_tower.drivers15);
      expect(sys.boot_jr_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers15 = defalut;
      print(sys.boot_jr_tower.drivers15);
      expect(sys.boot_jr_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00677_element_check_00654 **********\n\n");
    });

    test('00678_element_check_00655', () async {
      print("\n********** テスト実行：00678_element_check_00655 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers16;
      print(sys.boot_jr_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers16 = testData1s;
      print(sys.boot_jr_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers16 = testData2s;
      print(sys.boot_jr_tower.drivers16);
      expect(sys.boot_jr_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers16 = defalut;
      print(sys.boot_jr_tower.drivers16);
      expect(sys.boot_jr_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00678_element_check_00655 **********\n\n");
    });

    test('00679_element_check_00656', () async {
      print("\n********** テスト実行：00679_element_check_00656 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers17;
      print(sys.boot_jr_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers17 = testData1s;
      print(sys.boot_jr_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers17 = testData2s;
      print(sys.boot_jr_tower.drivers17);
      expect(sys.boot_jr_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers17 = defalut;
      print(sys.boot_jr_tower.drivers17);
      expect(sys.boot_jr_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00679_element_check_00656 **********\n\n");
    });

    test('00680_element_check_00657', () async {
      print("\n********** テスト実行：00680_element_check_00657 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers18;
      print(sys.boot_jr_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers18 = testData1s;
      print(sys.boot_jr_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers18 = testData2s;
      print(sys.boot_jr_tower.drivers18);
      expect(sys.boot_jr_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers18 = defalut;
      print(sys.boot_jr_tower.drivers18);
      expect(sys.boot_jr_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00680_element_check_00657 **********\n\n");
    });

    test('00681_element_check_00658', () async {
      print("\n********** テスト実行：00681_element_check_00658 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers19;
      print(sys.boot_jr_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers19 = testData1s;
      print(sys.boot_jr_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers19 = testData2s;
      print(sys.boot_jr_tower.drivers19);
      expect(sys.boot_jr_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers19 = defalut;
      print(sys.boot_jr_tower.drivers19);
      expect(sys.boot_jr_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00681_element_check_00658 **********\n\n");
    });

    test('00682_element_check_00659', () async {
      print("\n********** テスト実行：00682_element_check_00659 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers20;
      print(sys.boot_jr_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers20 = testData1s;
      print(sys.boot_jr_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers20 = testData2s;
      print(sys.boot_jr_tower.drivers20);
      expect(sys.boot_jr_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers20 = defalut;
      print(sys.boot_jr_tower.drivers20);
      expect(sys.boot_jr_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00682_element_check_00659 **********\n\n");
    });

    test('00683_element_check_00660', () async {
      print("\n********** テスト実行：00683_element_check_00660 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers21;
      print(sys.boot_jr_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers21 = testData1s;
      print(sys.boot_jr_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers21 = testData2s;
      print(sys.boot_jr_tower.drivers21);
      expect(sys.boot_jr_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers21 = defalut;
      print(sys.boot_jr_tower.drivers21);
      expect(sys.boot_jr_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00683_element_check_00660 **********\n\n");
    });

    test('00684_element_check_00661', () async {
      print("\n********** テスト実行：00684_element_check_00661 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers22;
      print(sys.boot_jr_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers22 = testData1s;
      print(sys.boot_jr_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers22 = testData2s;
      print(sys.boot_jr_tower.drivers22);
      expect(sys.boot_jr_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers22 = defalut;
      print(sys.boot_jr_tower.drivers22);
      expect(sys.boot_jr_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00684_element_check_00661 **********\n\n");
    });

    test('00685_element_check_00662', () async {
      print("\n********** テスト実行：00685_element_check_00662 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers23;
      print(sys.boot_jr_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers23 = testData1s;
      print(sys.boot_jr_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers23 = testData2s;
      print(sys.boot_jr_tower.drivers23);
      expect(sys.boot_jr_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers23 = defalut;
      print(sys.boot_jr_tower.drivers23);
      expect(sys.boot_jr_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00685_element_check_00662 **********\n\n");
    });

    test('00686_element_check_00663', () async {
      print("\n********** テスト実行：00686_element_check_00663 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers24;
      print(sys.boot_jr_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers24 = testData1s;
      print(sys.boot_jr_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers24 = testData2s;
      print(sys.boot_jr_tower.drivers24);
      expect(sys.boot_jr_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers24 = defalut;
      print(sys.boot_jr_tower.drivers24);
      expect(sys.boot_jr_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00686_element_check_00663 **********\n\n");
    });

    test('00687_element_check_00664', () async {
      print("\n********** テスト実行：00687_element_check_00664 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers25;
      print(sys.boot_jr_tower.drivers25);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers25 = testData1s;
      print(sys.boot_jr_tower.drivers25);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers25 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers25 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers25 = testData2s;
      print(sys.boot_jr_tower.drivers25);
      expect(sys.boot_jr_tower.drivers25 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers25 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers25 = defalut;
      print(sys.boot_jr_tower.drivers25);
      expect(sys.boot_jr_tower.drivers25 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers25 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00687_element_check_00664 **********\n\n");
    });

    test('00688_element_check_00665', () async {
      print("\n********** テスト実行：00688_element_check_00665 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers26;
      print(sys.boot_jr_tower.drivers26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers26 = testData1s;
      print(sys.boot_jr_tower.drivers26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers26 = testData2s;
      print(sys.boot_jr_tower.drivers26);
      expect(sys.boot_jr_tower.drivers26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers26 = defalut;
      print(sys.boot_jr_tower.drivers26);
      expect(sys.boot_jr_tower.drivers26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00688_element_check_00665 **********\n\n");
    });

    test('00689_element_check_00666', () async {
      print("\n********** テスト実行：00689_element_check_00666 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers27;
      print(sys.boot_jr_tower.drivers27);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers27 = testData1s;
      print(sys.boot_jr_tower.drivers27);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers27 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers27 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers27 = testData2s;
      print(sys.boot_jr_tower.drivers27);
      expect(sys.boot_jr_tower.drivers27 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers27 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers27 = defalut;
      print(sys.boot_jr_tower.drivers27);
      expect(sys.boot_jr_tower.drivers27 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers27 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00689_element_check_00666 **********\n\n");
    });

    test('00690_element_check_00667', () async {
      print("\n********** テスト実行：00690_element_check_00667 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers28;
      print(sys.boot_jr_tower.drivers28);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers28 = testData1s;
      print(sys.boot_jr_tower.drivers28);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers28 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers28 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers28 = testData2s;
      print(sys.boot_jr_tower.drivers28);
      expect(sys.boot_jr_tower.drivers28 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers28 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers28 = defalut;
      print(sys.boot_jr_tower.drivers28);
      expect(sys.boot_jr_tower.drivers28 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers28 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00690_element_check_00667 **********\n\n");
    });

    test('00691_element_check_00668', () async {
      print("\n********** テスト実行：00691_element_check_00668 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers36;
      print(sys.boot_jr_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers36 = testData1s;
      print(sys.boot_jr_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers36 = testData2s;
      print(sys.boot_jr_tower.drivers36);
      expect(sys.boot_jr_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers36 = defalut;
      print(sys.boot_jr_tower.drivers36);
      expect(sys.boot_jr_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00691_element_check_00668 **********\n\n");
    });

    test('00692_element_check_00669', () async {
      print("\n********** テスト実行：00692_element_check_00669 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers37;
      print(sys.boot_jr_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers37 = testData1s;
      print(sys.boot_jr_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers37 = testData2s;
      print(sys.boot_jr_tower.drivers37);
      expect(sys.boot_jr_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers37 = defalut;
      print(sys.boot_jr_tower.drivers37);
      expect(sys.boot_jr_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00692_element_check_00669 **********\n\n");
    });

    test('00693_element_check_00670', () async {
      print("\n********** テスト実行：00693_element_check_00670 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers38;
      print(sys.boot_jr_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers38 = testData1s;
      print(sys.boot_jr_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers38 = testData2s;
      print(sys.boot_jr_tower.drivers38);
      expect(sys.boot_jr_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers38 = defalut;
      print(sys.boot_jr_tower.drivers38);
      expect(sys.boot_jr_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00693_element_check_00670 **********\n\n");
    });

    test('00694_element_check_00671', () async {
      print("\n********** テスト実行：00694_element_check_00671 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_jr_tower.drivers39;
      print(sys.boot_jr_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_jr_tower.drivers39 = testData1s;
      print(sys.boot_jr_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_jr_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_jr_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_jr_tower.drivers39 = testData2s;
      print(sys.boot_jr_tower.drivers39);
      expect(sys.boot_jr_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_jr_tower.drivers39 = defalut;
      print(sys.boot_jr_tower.drivers39);
      expect(sys.boot_jr_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_jr_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00694_element_check_00671 **********\n\n");
    });

    test('00695_element_check_00672', () async {
      print("\n********** テスト実行：00695_element_check_00672 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers01;
      print(sys.boot_tower.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers01 = testData1s;
      print(sys.boot_tower.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers01 = testData2s;
      print(sys.boot_tower.drivers01);
      expect(sys.boot_tower.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers01 = defalut;
      print(sys.boot_tower.drivers01);
      expect(sys.boot_tower.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00695_element_check_00672 **********\n\n");
    });

    test('00696_element_check_00673', () async {
      print("\n********** テスト実行：00696_element_check_00673 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers02;
      print(sys.boot_tower.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers02 = testData1s;
      print(sys.boot_tower.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers02 = testData2s;
      print(sys.boot_tower.drivers02);
      expect(sys.boot_tower.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers02 = defalut;
      print(sys.boot_tower.drivers02);
      expect(sys.boot_tower.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00696_element_check_00673 **********\n\n");
    });

    test('00697_element_check_00674', () async {
      print("\n********** テスト実行：00697_element_check_00674 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers03;
      print(sys.boot_tower.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers03 = testData1s;
      print(sys.boot_tower.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers03 = testData2s;
      print(sys.boot_tower.drivers03);
      expect(sys.boot_tower.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers03 = defalut;
      print(sys.boot_tower.drivers03);
      expect(sys.boot_tower.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00697_element_check_00674 **********\n\n");
    });

    test('00698_element_check_00675', () async {
      print("\n********** テスト実行：00698_element_check_00675 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers04;
      print(sys.boot_tower.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers04 = testData1s;
      print(sys.boot_tower.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers04 = testData2s;
      print(sys.boot_tower.drivers04);
      expect(sys.boot_tower.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers04 = defalut;
      print(sys.boot_tower.drivers04);
      expect(sys.boot_tower.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00698_element_check_00675 **********\n\n");
    });

    test('00699_element_check_00676', () async {
      print("\n********** テスト実行：00699_element_check_00676 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers05;
      print(sys.boot_tower.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers05 = testData1s;
      print(sys.boot_tower.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers05 = testData2s;
      print(sys.boot_tower.drivers05);
      expect(sys.boot_tower.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers05 = defalut;
      print(sys.boot_tower.drivers05);
      expect(sys.boot_tower.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00699_element_check_00676 **********\n\n");
    });

    test('00700_element_check_00677', () async {
      print("\n********** テスト実行：00700_element_check_00677 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers06;
      print(sys.boot_tower.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers06 = testData1s;
      print(sys.boot_tower.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers06 = testData2s;
      print(sys.boot_tower.drivers06);
      expect(sys.boot_tower.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers06 = defalut;
      print(sys.boot_tower.drivers06);
      expect(sys.boot_tower.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00700_element_check_00677 **********\n\n");
    });

    test('00701_element_check_00678', () async {
      print("\n********** テスト実行：00701_element_check_00678 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers07;
      print(sys.boot_tower.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers07 = testData1s;
      print(sys.boot_tower.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers07 = testData2s;
      print(sys.boot_tower.drivers07);
      expect(sys.boot_tower.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers07 = defalut;
      print(sys.boot_tower.drivers07);
      expect(sys.boot_tower.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00701_element_check_00678 **********\n\n");
    });

    test('00702_element_check_00679', () async {
      print("\n********** テスト実行：00702_element_check_00679 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers08;
      print(sys.boot_tower.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers08 = testData1s;
      print(sys.boot_tower.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers08 = testData2s;
      print(sys.boot_tower.drivers08);
      expect(sys.boot_tower.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers08 = defalut;
      print(sys.boot_tower.drivers08);
      expect(sys.boot_tower.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00702_element_check_00679 **********\n\n");
    });

    test('00703_element_check_00680', () async {
      print("\n********** テスト実行：00703_element_check_00680 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers09;
      print(sys.boot_tower.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers09 = testData1s;
      print(sys.boot_tower.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers09 = testData2s;
      print(sys.boot_tower.drivers09);
      expect(sys.boot_tower.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers09 = defalut;
      print(sys.boot_tower.drivers09);
      expect(sys.boot_tower.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00703_element_check_00680 **********\n\n");
    });

    test('00704_element_check_00681', () async {
      print("\n********** テスト実行：00704_element_check_00681 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers10;
      print(sys.boot_tower.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers10 = testData1s;
      print(sys.boot_tower.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers10 = testData2s;
      print(sys.boot_tower.drivers10);
      expect(sys.boot_tower.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers10 = defalut;
      print(sys.boot_tower.drivers10);
      expect(sys.boot_tower.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00704_element_check_00681 **********\n\n");
    });

    test('00705_element_check_00682', () async {
      print("\n********** テスト実行：00705_element_check_00682 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers11;
      print(sys.boot_tower.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers11 = testData1s;
      print(sys.boot_tower.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers11 = testData2s;
      print(sys.boot_tower.drivers11);
      expect(sys.boot_tower.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers11 = defalut;
      print(sys.boot_tower.drivers11);
      expect(sys.boot_tower.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00705_element_check_00682 **********\n\n");
    });

    test('00706_element_check_00683', () async {
      print("\n********** テスト実行：00706_element_check_00683 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers12;
      print(sys.boot_tower.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers12 = testData1s;
      print(sys.boot_tower.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers12 = testData2s;
      print(sys.boot_tower.drivers12);
      expect(sys.boot_tower.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers12 = defalut;
      print(sys.boot_tower.drivers12);
      expect(sys.boot_tower.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00706_element_check_00683 **********\n\n");
    });

    test('00707_element_check_00684', () async {
      print("\n********** テスト実行：00707_element_check_00684 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers13;
      print(sys.boot_tower.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers13 = testData1s;
      print(sys.boot_tower.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers13 = testData2s;
      print(sys.boot_tower.drivers13);
      expect(sys.boot_tower.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers13 = defalut;
      print(sys.boot_tower.drivers13);
      expect(sys.boot_tower.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00707_element_check_00684 **********\n\n");
    });

    test('00708_element_check_00685', () async {
      print("\n********** テスト実行：00708_element_check_00685 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers14;
      print(sys.boot_tower.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers14 = testData1s;
      print(sys.boot_tower.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers14 = testData2s;
      print(sys.boot_tower.drivers14);
      expect(sys.boot_tower.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers14 = defalut;
      print(sys.boot_tower.drivers14);
      expect(sys.boot_tower.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00708_element_check_00685 **********\n\n");
    });

    test('00709_element_check_00686', () async {
      print("\n********** テスト実行：00709_element_check_00686 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers15;
      print(sys.boot_tower.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers15 = testData1s;
      print(sys.boot_tower.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers15 = testData2s;
      print(sys.boot_tower.drivers15);
      expect(sys.boot_tower.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers15 = defalut;
      print(sys.boot_tower.drivers15);
      expect(sys.boot_tower.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00709_element_check_00686 **********\n\n");
    });

    test('00710_element_check_00687', () async {
      print("\n********** テスト実行：00710_element_check_00687 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers16;
      print(sys.boot_tower.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers16 = testData1s;
      print(sys.boot_tower.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers16 = testData2s;
      print(sys.boot_tower.drivers16);
      expect(sys.boot_tower.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers16 = defalut;
      print(sys.boot_tower.drivers16);
      expect(sys.boot_tower.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00710_element_check_00687 **********\n\n");
    });

    test('00711_element_check_00688', () async {
      print("\n********** テスト実行：00711_element_check_00688 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers17;
      print(sys.boot_tower.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers17 = testData1s;
      print(sys.boot_tower.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers17 = testData2s;
      print(sys.boot_tower.drivers17);
      expect(sys.boot_tower.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers17 = defalut;
      print(sys.boot_tower.drivers17);
      expect(sys.boot_tower.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00711_element_check_00688 **********\n\n");
    });

    test('00712_element_check_00689', () async {
      print("\n********** テスト実行：00712_element_check_00689 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers18;
      print(sys.boot_tower.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers18 = testData1s;
      print(sys.boot_tower.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers18 = testData2s;
      print(sys.boot_tower.drivers18);
      expect(sys.boot_tower.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers18 = defalut;
      print(sys.boot_tower.drivers18);
      expect(sys.boot_tower.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00712_element_check_00689 **********\n\n");
    });

    test('00713_element_check_00690', () async {
      print("\n********** テスト実行：00713_element_check_00690 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers19;
      print(sys.boot_tower.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers19 = testData1s;
      print(sys.boot_tower.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers19 = testData2s;
      print(sys.boot_tower.drivers19);
      expect(sys.boot_tower.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers19 = defalut;
      print(sys.boot_tower.drivers19);
      expect(sys.boot_tower.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00713_element_check_00690 **********\n\n");
    });

    test('00714_element_check_00691', () async {
      print("\n********** テスト実行：00714_element_check_00691 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers20;
      print(sys.boot_tower.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers20 = testData1s;
      print(sys.boot_tower.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers20 = testData2s;
      print(sys.boot_tower.drivers20);
      expect(sys.boot_tower.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers20 = defalut;
      print(sys.boot_tower.drivers20);
      expect(sys.boot_tower.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00714_element_check_00691 **********\n\n");
    });

    test('00715_element_check_00692', () async {
      print("\n********** テスト実行：00715_element_check_00692 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers21;
      print(sys.boot_tower.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers21 = testData1s;
      print(sys.boot_tower.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers21 = testData2s;
      print(sys.boot_tower.drivers21);
      expect(sys.boot_tower.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers21 = defalut;
      print(sys.boot_tower.drivers21);
      expect(sys.boot_tower.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00715_element_check_00692 **********\n\n");
    });

    test('00716_element_check_00693', () async {
      print("\n********** テスト実行：00716_element_check_00693 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers22;
      print(sys.boot_tower.drivers22);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers22 = testData1s;
      print(sys.boot_tower.drivers22);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers22 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers22 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers22 = testData2s;
      print(sys.boot_tower.drivers22);
      expect(sys.boot_tower.drivers22 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers22 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers22 = defalut;
      print(sys.boot_tower.drivers22);
      expect(sys.boot_tower.drivers22 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers22 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00716_element_check_00693 **********\n\n");
    });

    test('00717_element_check_00694', () async {
      print("\n********** テスト実行：00717_element_check_00694 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers23;
      print(sys.boot_tower.drivers23);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers23 = testData1s;
      print(sys.boot_tower.drivers23);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers23 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers23 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers23 = testData2s;
      print(sys.boot_tower.drivers23);
      expect(sys.boot_tower.drivers23 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers23 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers23 = defalut;
      print(sys.boot_tower.drivers23);
      expect(sys.boot_tower.drivers23 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers23 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00717_element_check_00694 **********\n\n");
    });

    test('00718_element_check_00695', () async {
      print("\n********** テスト実行：00718_element_check_00695 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers24;
      print(sys.boot_tower.drivers24);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers24 = testData1s;
      print(sys.boot_tower.drivers24);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers24 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers24 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers24 = testData2s;
      print(sys.boot_tower.drivers24);
      expect(sys.boot_tower.drivers24 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers24 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers24 = defalut;
      print(sys.boot_tower.drivers24);
      expect(sys.boot_tower.drivers24 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers24 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00718_element_check_00695 **********\n\n");
    });

    test('00719_element_check_00696', () async {
      print("\n********** テスト実行：00719_element_check_00696 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers25;
      print(sys.boot_tower.drivers25);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers25 = testData1s;
      print(sys.boot_tower.drivers25);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers25 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers25 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers25 = testData2s;
      print(sys.boot_tower.drivers25);
      expect(sys.boot_tower.drivers25 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers25 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers25 = defalut;
      print(sys.boot_tower.drivers25);
      expect(sys.boot_tower.drivers25 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers25 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00719_element_check_00696 **********\n\n");
    });

    test('00720_element_check_00697', () async {
      print("\n********** テスト実行：00720_element_check_00697 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers26;
      print(sys.boot_tower.drivers26);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers26 = testData1s;
      print(sys.boot_tower.drivers26);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers26 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers26 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers26 = testData2s;
      print(sys.boot_tower.drivers26);
      expect(sys.boot_tower.drivers26 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers26 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers26 = defalut;
      print(sys.boot_tower.drivers26);
      expect(sys.boot_tower.drivers26 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers26 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00720_element_check_00697 **********\n\n");
    });

    test('00721_element_check_00698', () async {
      print("\n********** テスト実行：00721_element_check_00698 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers27;
      print(sys.boot_tower.drivers27);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers27 = testData1s;
      print(sys.boot_tower.drivers27);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers27 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers27 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers27 = testData2s;
      print(sys.boot_tower.drivers27);
      expect(sys.boot_tower.drivers27 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers27 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers27 = defalut;
      print(sys.boot_tower.drivers27);
      expect(sys.boot_tower.drivers27 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers27 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00721_element_check_00698 **********\n\n");
    });

    test('00722_element_check_00699', () async {
      print("\n********** テスト実行：00722_element_check_00699 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers28;
      print(sys.boot_tower.drivers28);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers28 = testData1s;
      print(sys.boot_tower.drivers28);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers28 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers28 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers28 = testData2s;
      print(sys.boot_tower.drivers28);
      expect(sys.boot_tower.drivers28 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers28 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers28 = defalut;
      print(sys.boot_tower.drivers28);
      expect(sys.boot_tower.drivers28 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers28 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00722_element_check_00699 **********\n\n");
    });

    test('00723_element_check_00700', () async {
      print("\n********** テスト実行：00723_element_check_00700 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers29;
      print(sys.boot_tower.drivers29);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers29 = testData1s;
      print(sys.boot_tower.drivers29);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers29 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers29 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers29 = testData2s;
      print(sys.boot_tower.drivers29);
      expect(sys.boot_tower.drivers29 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers29 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers29 = defalut;
      print(sys.boot_tower.drivers29);
      expect(sys.boot_tower.drivers29 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers29 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00723_element_check_00700 **********\n\n");
    });

    test('00724_element_check_00701', () async {
      print("\n********** テスト実行：00724_element_check_00701 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers30;
      print(sys.boot_tower.drivers30);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers30 = testData1s;
      print(sys.boot_tower.drivers30);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers30 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers30 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers30 = testData2s;
      print(sys.boot_tower.drivers30);
      expect(sys.boot_tower.drivers30 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers30 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers30 = defalut;
      print(sys.boot_tower.drivers30);
      expect(sys.boot_tower.drivers30 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers30 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00724_element_check_00701 **********\n\n");
    });

    test('00725_element_check_00702', () async {
      print("\n********** テスト実行：00725_element_check_00702 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers31;
      print(sys.boot_tower.drivers31);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers31 = testData1s;
      print(sys.boot_tower.drivers31);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers31 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers31 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers31 = testData2s;
      print(sys.boot_tower.drivers31);
      expect(sys.boot_tower.drivers31 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers31 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers31 = defalut;
      print(sys.boot_tower.drivers31);
      expect(sys.boot_tower.drivers31 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers31 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00725_element_check_00702 **********\n\n");
    });

    test('00726_element_check_00703', () async {
      print("\n********** テスト実行：00726_element_check_00703 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers32;
      print(sys.boot_tower.drivers32);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers32 = testData1s;
      print(sys.boot_tower.drivers32);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers32 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers32 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers32 = testData2s;
      print(sys.boot_tower.drivers32);
      expect(sys.boot_tower.drivers32 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers32 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers32 = defalut;
      print(sys.boot_tower.drivers32);
      expect(sys.boot_tower.drivers32 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers32 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00726_element_check_00703 **********\n\n");
    });

    test('00727_element_check_00704', () async {
      print("\n********** テスト実行：00727_element_check_00704 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers36;
      print(sys.boot_tower.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers36 = testData1s;
      print(sys.boot_tower.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers36 = testData2s;
      print(sys.boot_tower.drivers36);
      expect(sys.boot_tower.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers36 = defalut;
      print(sys.boot_tower.drivers36);
      expect(sys.boot_tower.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00727_element_check_00704 **********\n\n");
    });

    test('00728_element_check_00705', () async {
      print("\n********** テスト実行：00728_element_check_00705 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers37;
      print(sys.boot_tower.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers37 = testData1s;
      print(sys.boot_tower.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers37 = testData2s;
      print(sys.boot_tower.drivers37);
      expect(sys.boot_tower.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers37 = defalut;
      print(sys.boot_tower.drivers37);
      expect(sys.boot_tower.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00728_element_check_00705 **********\n\n");
    });

    test('00729_element_check_00706', () async {
      print("\n********** テスト実行：00729_element_check_00706 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers38;
      print(sys.boot_tower.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers38 = testData1s;
      print(sys.boot_tower.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers38 = testData2s;
      print(sys.boot_tower.drivers38);
      expect(sys.boot_tower.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers38 = defalut;
      print(sys.boot_tower.drivers38);
      expect(sys.boot_tower.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00729_element_check_00706 **********\n\n");
    });

    test('00730_element_check_00707', () async {
      print("\n********** テスト実行：00730_element_check_00707 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_tower.drivers39;
      print(sys.boot_tower.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_tower.drivers39 = testData1s;
      print(sys.boot_tower.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_tower.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_tower.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_tower.drivers39 = testData2s;
      print(sys.boot_tower.drivers39);
      expect(sys.boot_tower.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_tower.drivers39 = defalut;
      print(sys.boot_tower.drivers39);
      expect(sys.boot_tower.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_tower.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00730_element_check_00707 **********\n\n");
    });

    test('00731_element_check_00708', () async {
      print("\n********** テスト実行：00731_element_check_00708 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers01;
      print(sys.boot_desktop.drivers01);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers01 = testData1s;
      print(sys.boot_desktop.drivers01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers01 = testData2s;
      print(sys.boot_desktop.drivers01);
      expect(sys.boot_desktop.drivers01 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers01 = defalut;
      print(sys.boot_desktop.drivers01);
      expect(sys.boot_desktop.drivers01 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00731_element_check_00708 **********\n\n");
    });

    test('00732_element_check_00709', () async {
      print("\n********** テスト実行：00732_element_check_00709 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers02;
      print(sys.boot_desktop.drivers02);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers02 = testData1s;
      print(sys.boot_desktop.drivers02);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers02 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers02 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers02 = testData2s;
      print(sys.boot_desktop.drivers02);
      expect(sys.boot_desktop.drivers02 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers02 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers02 = defalut;
      print(sys.boot_desktop.drivers02);
      expect(sys.boot_desktop.drivers02 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers02 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00732_element_check_00709 **********\n\n");
    });

    test('00733_element_check_00710', () async {
      print("\n********** テスト実行：00733_element_check_00710 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers03;
      print(sys.boot_desktop.drivers03);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers03 = testData1s;
      print(sys.boot_desktop.drivers03);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers03 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers03 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers03 = testData2s;
      print(sys.boot_desktop.drivers03);
      expect(sys.boot_desktop.drivers03 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers03 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers03 = defalut;
      print(sys.boot_desktop.drivers03);
      expect(sys.boot_desktop.drivers03 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers03 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00733_element_check_00710 **********\n\n");
    });

    test('00734_element_check_00711', () async {
      print("\n********** テスト実行：00734_element_check_00711 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers04;
      print(sys.boot_desktop.drivers04);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers04 = testData1s;
      print(sys.boot_desktop.drivers04);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers04 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers04 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers04 = testData2s;
      print(sys.boot_desktop.drivers04);
      expect(sys.boot_desktop.drivers04 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers04 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers04 = defalut;
      print(sys.boot_desktop.drivers04);
      expect(sys.boot_desktop.drivers04 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers04 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00734_element_check_00711 **********\n\n");
    });

    test('00735_element_check_00712', () async {
      print("\n********** テスト実行：00735_element_check_00712 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers05;
      print(sys.boot_desktop.drivers05);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers05 = testData1s;
      print(sys.boot_desktop.drivers05);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers05 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers05 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers05 = testData2s;
      print(sys.boot_desktop.drivers05);
      expect(sys.boot_desktop.drivers05 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers05 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers05 = defalut;
      print(sys.boot_desktop.drivers05);
      expect(sys.boot_desktop.drivers05 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers05 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00735_element_check_00712 **********\n\n");
    });

    test('00736_element_check_00713', () async {
      print("\n********** テスト実行：00736_element_check_00713 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers06;
      print(sys.boot_desktop.drivers06);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers06 = testData1s;
      print(sys.boot_desktop.drivers06);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers06 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers06 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers06 = testData2s;
      print(sys.boot_desktop.drivers06);
      expect(sys.boot_desktop.drivers06 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers06 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers06 = defalut;
      print(sys.boot_desktop.drivers06);
      expect(sys.boot_desktop.drivers06 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers06 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00736_element_check_00713 **********\n\n");
    });

    test('00737_element_check_00714', () async {
      print("\n********** テスト実行：00737_element_check_00714 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers07;
      print(sys.boot_desktop.drivers07);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers07 = testData1s;
      print(sys.boot_desktop.drivers07);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers07 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers07 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers07 = testData2s;
      print(sys.boot_desktop.drivers07);
      expect(sys.boot_desktop.drivers07 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers07 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers07 = defalut;
      print(sys.boot_desktop.drivers07);
      expect(sys.boot_desktop.drivers07 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers07 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00737_element_check_00714 **********\n\n");
    });

    test('00738_element_check_00715', () async {
      print("\n********** テスト実行：00738_element_check_00715 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers08;
      print(sys.boot_desktop.drivers08);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers08 = testData1s;
      print(sys.boot_desktop.drivers08);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers08 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers08 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers08 = testData2s;
      print(sys.boot_desktop.drivers08);
      expect(sys.boot_desktop.drivers08 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers08 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers08 = defalut;
      print(sys.boot_desktop.drivers08);
      expect(sys.boot_desktop.drivers08 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers08 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00738_element_check_00715 **********\n\n");
    });

    test('00739_element_check_00716', () async {
      print("\n********** テスト実行：00739_element_check_00716 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers09;
      print(sys.boot_desktop.drivers09);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers09 = testData1s;
      print(sys.boot_desktop.drivers09);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers09 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers09 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers09 = testData2s;
      print(sys.boot_desktop.drivers09);
      expect(sys.boot_desktop.drivers09 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers09 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers09 = defalut;
      print(sys.boot_desktop.drivers09);
      expect(sys.boot_desktop.drivers09 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers09 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00739_element_check_00716 **********\n\n");
    });

    test('00740_element_check_00717', () async {
      print("\n********** テスト実行：00740_element_check_00717 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers10;
      print(sys.boot_desktop.drivers10);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers10 = testData1s;
      print(sys.boot_desktop.drivers10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers10 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers10 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers10 = testData2s;
      print(sys.boot_desktop.drivers10);
      expect(sys.boot_desktop.drivers10 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers10 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers10 = defalut;
      print(sys.boot_desktop.drivers10);
      expect(sys.boot_desktop.drivers10 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00740_element_check_00717 **********\n\n");
    });

    test('00741_element_check_00718', () async {
      print("\n********** テスト実行：00741_element_check_00718 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers11;
      print(sys.boot_desktop.drivers11);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers11 = testData1s;
      print(sys.boot_desktop.drivers11);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers11 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers11 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers11 = testData2s;
      print(sys.boot_desktop.drivers11);
      expect(sys.boot_desktop.drivers11 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers11 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers11 = defalut;
      print(sys.boot_desktop.drivers11);
      expect(sys.boot_desktop.drivers11 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers11 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00741_element_check_00718 **********\n\n");
    });

    test('00742_element_check_00719', () async {
      print("\n********** テスト実行：00742_element_check_00719 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers12;
      print(sys.boot_desktop.drivers12);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers12 = testData1s;
      print(sys.boot_desktop.drivers12);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers12 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers12 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers12 = testData2s;
      print(sys.boot_desktop.drivers12);
      expect(sys.boot_desktop.drivers12 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers12 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers12 = defalut;
      print(sys.boot_desktop.drivers12);
      expect(sys.boot_desktop.drivers12 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers12 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00742_element_check_00719 **********\n\n");
    });

    test('00743_element_check_00720', () async {
      print("\n********** テスト実行：00743_element_check_00720 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers13;
      print(sys.boot_desktop.drivers13);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers13 = testData1s;
      print(sys.boot_desktop.drivers13);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers13 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers13 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers13 = testData2s;
      print(sys.boot_desktop.drivers13);
      expect(sys.boot_desktop.drivers13 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers13 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers13 = defalut;
      print(sys.boot_desktop.drivers13);
      expect(sys.boot_desktop.drivers13 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers13 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00743_element_check_00720 **********\n\n");
    });

    test('00744_element_check_00721', () async {
      print("\n********** テスト実行：00744_element_check_00721 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers14;
      print(sys.boot_desktop.drivers14);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers14 = testData1s;
      print(sys.boot_desktop.drivers14);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers14 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers14 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers14 = testData2s;
      print(sys.boot_desktop.drivers14);
      expect(sys.boot_desktop.drivers14 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers14 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers14 = defalut;
      print(sys.boot_desktop.drivers14);
      expect(sys.boot_desktop.drivers14 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers14 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00744_element_check_00721 **********\n\n");
    });

    test('00745_element_check_00722', () async {
      print("\n********** テスト実行：00745_element_check_00722 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers15;
      print(sys.boot_desktop.drivers15);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers15 = testData1s;
      print(sys.boot_desktop.drivers15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers15 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers15 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers15 = testData2s;
      print(sys.boot_desktop.drivers15);
      expect(sys.boot_desktop.drivers15 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers15 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers15 = defalut;
      print(sys.boot_desktop.drivers15);
      expect(sys.boot_desktop.drivers15 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00745_element_check_00722 **********\n\n");
    });

    test('00746_element_check_00723', () async {
      print("\n********** テスト実行：00746_element_check_00723 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers16;
      print(sys.boot_desktop.drivers16);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers16 = testData1s;
      print(sys.boot_desktop.drivers16);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers16 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers16 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers16 = testData2s;
      print(sys.boot_desktop.drivers16);
      expect(sys.boot_desktop.drivers16 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers16 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers16 = defalut;
      print(sys.boot_desktop.drivers16);
      expect(sys.boot_desktop.drivers16 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers16 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00746_element_check_00723 **********\n\n");
    });

    test('00747_element_check_00724', () async {
      print("\n********** テスト実行：00747_element_check_00724 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers17;
      print(sys.boot_desktop.drivers17);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers17 = testData1s;
      print(sys.boot_desktop.drivers17);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers17 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers17 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers17 = testData2s;
      print(sys.boot_desktop.drivers17);
      expect(sys.boot_desktop.drivers17 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers17 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers17 = defalut;
      print(sys.boot_desktop.drivers17);
      expect(sys.boot_desktop.drivers17 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers17 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00747_element_check_00724 **********\n\n");
    });

    test('00748_element_check_00725', () async {
      print("\n********** テスト実行：00748_element_check_00725 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers18;
      print(sys.boot_desktop.drivers18);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers18 = testData1s;
      print(sys.boot_desktop.drivers18);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers18 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers18 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers18 = testData2s;
      print(sys.boot_desktop.drivers18);
      expect(sys.boot_desktop.drivers18 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers18 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers18 = defalut;
      print(sys.boot_desktop.drivers18);
      expect(sys.boot_desktop.drivers18 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers18 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00748_element_check_00725 **********\n\n");
    });

    test('00749_element_check_00726', () async {
      print("\n********** テスト実行：00749_element_check_00726 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers19;
      print(sys.boot_desktop.drivers19);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers19 = testData1s;
      print(sys.boot_desktop.drivers19);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers19 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers19 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers19 = testData2s;
      print(sys.boot_desktop.drivers19);
      expect(sys.boot_desktop.drivers19 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers19 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers19 = defalut;
      print(sys.boot_desktop.drivers19);
      expect(sys.boot_desktop.drivers19 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers19 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00749_element_check_00726 **********\n\n");
    });

    test('00750_element_check_00727', () async {
      print("\n********** テスト実行：00750_element_check_00727 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers20;
      print(sys.boot_desktop.drivers20);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers20 = testData1s;
      print(sys.boot_desktop.drivers20);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers20 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers20 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers20 = testData2s;
      print(sys.boot_desktop.drivers20);
      expect(sys.boot_desktop.drivers20 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers20 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers20 = defalut;
      print(sys.boot_desktop.drivers20);
      expect(sys.boot_desktop.drivers20 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers20 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00750_element_check_00727 **********\n\n");
    });

    test('00751_element_check_00728', () async {
      print("\n********** テスト実行：00751_element_check_00728 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers21;
      print(sys.boot_desktop.drivers21);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers21 = testData1s;
      print(sys.boot_desktop.drivers21);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers21 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers21 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers21 = testData2s;
      print(sys.boot_desktop.drivers21);
      expect(sys.boot_desktop.drivers21 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers21 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers21 = defalut;
      print(sys.boot_desktop.drivers21);
      expect(sys.boot_desktop.drivers21 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers21 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00751_element_check_00728 **********\n\n");
    });

    test('00752_element_check_00729', () async {
      print("\n********** テスト実行：00752_element_check_00729 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers36;
      print(sys.boot_desktop.drivers36);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers36 = testData1s;
      print(sys.boot_desktop.drivers36);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers36 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers36 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers36 = testData2s;
      print(sys.boot_desktop.drivers36);
      expect(sys.boot_desktop.drivers36 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers36 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers36 = defalut;
      print(sys.boot_desktop.drivers36);
      expect(sys.boot_desktop.drivers36 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers36 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00752_element_check_00729 **********\n\n");
    });

    test('00753_element_check_00730', () async {
      print("\n********** テスト実行：00753_element_check_00730 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers37;
      print(sys.boot_desktop.drivers37);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers37 = testData1s;
      print(sys.boot_desktop.drivers37);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers37 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers37 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers37 = testData2s;
      print(sys.boot_desktop.drivers37);
      expect(sys.boot_desktop.drivers37 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers37 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers37 = defalut;
      print(sys.boot_desktop.drivers37);
      expect(sys.boot_desktop.drivers37 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers37 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00753_element_check_00730 **********\n\n");
    });

    test('00754_element_check_00731', () async {
      print("\n********** テスト実行：00754_element_check_00731 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers38;
      print(sys.boot_desktop.drivers38);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers38 = testData1s;
      print(sys.boot_desktop.drivers38);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers38 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers38 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers38 = testData2s;
      print(sys.boot_desktop.drivers38);
      expect(sys.boot_desktop.drivers38 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers38 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers38 = defalut;
      print(sys.boot_desktop.drivers38);
      expect(sys.boot_desktop.drivers38 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers38 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00754_element_check_00731 **********\n\n");
    });

    test('00755_element_check_00732', () async {
      print("\n********** テスト実行：00755_element_check_00732 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.boot_desktop.drivers39;
      print(sys.boot_desktop.drivers39);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.boot_desktop.drivers39 = testData1s;
      print(sys.boot_desktop.drivers39);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.boot_desktop.drivers39 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.boot_desktop.drivers39 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.boot_desktop.drivers39 = testData2s;
      print(sys.boot_desktop.drivers39);
      expect(sys.boot_desktop.drivers39 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers39 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.boot_desktop.drivers39 = defalut;
      print(sys.boot_desktop.drivers39);
      expect(sys.boot_desktop.drivers39 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.boot_desktop.drivers39 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00755_element_check_00732 **********\n\n");
    });

    test('00756_element_check_00733', () async {
      print("\n********** テスト実行：00756_element_check_00733 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.verup.verup;
      print(sys.verup.verup);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.verup.verup = testData1s;
      print(sys.verup.verup);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.verup.verup == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.verup.verup == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.verup.verup = testData2s;
      print(sys.verup.verup);
      expect(sys.verup.verup == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.verup == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.verup.verup = defalut;
      print(sys.verup.verup);
      expect(sys.verup.verup == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.verup == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00756_element_check_00733 **********\n\n");
    });

    test('00757_element_check_00734', () async {
      print("\n********** テスト実行：00757_element_check_00734 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.verup.date;
      print(sys.verup.date);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.verup.date = testData1s;
      print(sys.verup.date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.verup.date == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.verup.date == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.verup.date = testData2s;
      print(sys.verup.date);
      expect(sys.verup.date == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.date == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.verup.date = defalut;
      print(sys.verup.date);
      expect(sys.verup.date == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00757_element_check_00734 **********\n\n");
    });

    test('00758_element_check_00735', () async {
      print("\n********** テスト実行：00758_element_check_00735 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.verup.time;
      print(sys.verup.time);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.verup.time = testData1s;
      print(sys.verup.time);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.verup.time == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.verup.time == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.verup.time = testData2s;
      print(sys.verup.time);
      expect(sys.verup.time == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.time == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.verup.time = defalut;
      print(sys.verup.time);
      expect(sys.verup.time == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.time == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00758_element_check_00735 **********\n\n");
    });

    test('00759_element_check_00736', () async {
      print("\n********** テスト実行：00759_element_check_00736 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.verup.command;
      print(sys.verup.command);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.verup.command = testData1s;
      print(sys.verup.command);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.verup.command == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.verup.command == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.verup.command = testData2s;
      print(sys.verup.command);
      expect(sys.verup.command == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.command == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.verup.command = defalut;
      print(sys.verup.command);
      expect(sys.verup.command == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.command == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00759_element_check_00736 **********\n\n");
    });

    test('00760_element_check_00737', () async {
      print("\n********** テスト実行：00760_element_check_00737 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.verup.param;
      print(sys.verup.param);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.verup.param = testData1s;
      print(sys.verup.param);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.verup.param == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.verup.param == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.verup.param = testData2s;
      print(sys.verup.param);
      expect(sys.verup.param == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.param == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.verup.param = defalut;
      print(sys.verup.param);
      expect(sys.verup.param == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.verup.param == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00760_element_check_00737 **********\n\n");
    });

    test('00761_element_check_00738', () async {
      print("\n********** テスト実行：00761_element_check_00738 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.keyvol1;
      print(sys.speaker.keyvol1);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.keyvol1 = testData1;
      print(sys.speaker.keyvol1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.keyvol1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.keyvol1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.keyvol1 = testData2;
      print(sys.speaker.keyvol1);
      expect(sys.speaker.keyvol1 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keyvol1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.keyvol1 = defalut;
      print(sys.speaker.keyvol1);
      expect(sys.speaker.keyvol1 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keyvol1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00761_element_check_00738 **********\n\n");
    });

    test('00762_element_check_00739', () async {
      print("\n********** テスト実行：00762_element_check_00739 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.keytone1;
      print(sys.speaker.keytone1);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.keytone1 = testData1;
      print(sys.speaker.keytone1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.keytone1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.keytone1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.keytone1 = testData2;
      print(sys.speaker.keytone1);
      expect(sys.speaker.keytone1 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keytone1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.keytone1 = defalut;
      print(sys.speaker.keytone1);
      expect(sys.speaker.keytone1 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keytone1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00762_element_check_00739 **********\n\n");
    });

    test('00763_element_check_00740', () async {
      print("\n********** テスト実行：00763_element_check_00740 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.scanvol1;
      print(sys.speaker.scanvol1);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.scanvol1 = testData1;
      print(sys.speaker.scanvol1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.scanvol1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.scanvol1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.scanvol1 = testData2;
      print(sys.speaker.scanvol1);
      expect(sys.speaker.scanvol1 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scanvol1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.scanvol1 = defalut;
      print(sys.speaker.scanvol1);
      expect(sys.speaker.scanvol1 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scanvol1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00763_element_check_00740 **********\n\n");
    });

    test('00764_element_check_00741', () async {
      print("\n********** テスト実行：00764_element_check_00741 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.scantone1;
      print(sys.speaker.scantone1);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.scantone1 = testData1;
      print(sys.speaker.scantone1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.scantone1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.scantone1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.scantone1 = testData2;
      print(sys.speaker.scantone1);
      expect(sys.speaker.scantone1 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scantone1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.scantone1 = defalut;
      print(sys.speaker.scantone1);
      expect(sys.speaker.scantone1 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scantone1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00764_element_check_00741 **********\n\n");
    });

    test('00765_element_check_00742', () async {
      print("\n********** テスト実行：00765_element_check_00742 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.keyvol2;
      print(sys.speaker.keyvol2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.keyvol2 = testData1;
      print(sys.speaker.keyvol2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.keyvol2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.keyvol2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.keyvol2 = testData2;
      print(sys.speaker.keyvol2);
      expect(sys.speaker.keyvol2 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keyvol2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.keyvol2 = defalut;
      print(sys.speaker.keyvol2);
      expect(sys.speaker.keyvol2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keyvol2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00765_element_check_00742 **********\n\n");
    });

    test('00766_element_check_00743', () async {
      print("\n********** テスト実行：00766_element_check_00743 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.keytone2;
      print(sys.speaker.keytone2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.keytone2 = testData1;
      print(sys.speaker.keytone2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.keytone2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.keytone2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.keytone2 = testData2;
      print(sys.speaker.keytone2);
      expect(sys.speaker.keytone2 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keytone2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.keytone2 = defalut;
      print(sys.speaker.keytone2);
      expect(sys.speaker.keytone2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.keytone2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00766_element_check_00743 **********\n\n");
    });

    test('00767_element_check_00744', () async {
      print("\n********** テスト実行：00767_element_check_00744 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.scanvol2;
      print(sys.speaker.scanvol2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.scanvol2 = testData1;
      print(sys.speaker.scanvol2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.scanvol2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.scanvol2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.scanvol2 = testData2;
      print(sys.speaker.scanvol2);
      expect(sys.speaker.scanvol2 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scanvol2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.scanvol2 = defalut;
      print(sys.speaker.scanvol2);
      expect(sys.speaker.scanvol2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scanvol2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00767_element_check_00744 **********\n\n");
    });

    test('00768_element_check_00745', () async {
      print("\n********** テスト実行：00768_element_check_00745 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.speaker.scantone2;
      print(sys.speaker.scantone2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.speaker.scantone2 = testData1;
      print(sys.speaker.scantone2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.speaker.scantone2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.speaker.scantone2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.speaker.scantone2 = testData2;
      print(sys.speaker.scantone2);
      expect(sys.speaker.scantone2 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scantone2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.speaker.scantone2 = defalut;
      print(sys.speaker.scantone2);
      expect(sys.speaker.scantone2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.speaker.scantone2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00768_element_check_00745 **********\n\n");
    });

    test('00769_element_check_00746', () async {
      print("\n********** テスト実行：00769_element_check_00746 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbright.lcdbright1;
      print(sys.lcdbright.lcdbright1);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbright.lcdbright1 = testData1;
      print(sys.lcdbright.lcdbright1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbright.lcdbright1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbright.lcdbright1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbright.lcdbright1 = testData2;
      print(sys.lcdbright.lcdbright1);
      expect(sys.lcdbright.lcdbright1 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbright.lcdbright1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbright.lcdbright1 = defalut;
      print(sys.lcdbright.lcdbright1);
      expect(sys.lcdbright.lcdbright1 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbright.lcdbright1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00769_element_check_00746 **********\n\n");
    });

    test('00770_element_check_00747', () async {
      print("\n********** テスト実行：00770_element_check_00747 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbright.lcdbright2;
      print(sys.lcdbright.lcdbright2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbright.lcdbright2 = testData1;
      print(sys.lcdbright.lcdbright2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbright.lcdbright2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbright.lcdbright2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbright.lcdbright2 = testData2;
      print(sys.lcdbright.lcdbright2);
      expect(sys.lcdbright.lcdbright2 == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbright.lcdbright2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbright.lcdbright2 = defalut;
      print(sys.lcdbright.lcdbright2);
      expect(sys.lcdbright.lcdbright2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbright.lcdbright2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00770_element_check_00747 **********\n\n");
    });

    test('00771_element_check_00748', () async {
      print("\n********** テスト実行：00771_element_check_00748 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.logging.maxsize;
      print(sys.logging.maxsize);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.logging.maxsize = testData1;
      print(sys.logging.maxsize);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.logging.maxsize == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.logging.maxsize == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.logging.maxsize = testData2;
      print(sys.logging.maxsize);
      expect(sys.logging.maxsize == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.logging.maxsize == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.logging.maxsize = defalut;
      print(sys.logging.maxsize);
      expect(sys.logging.maxsize == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.logging.maxsize == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00771_element_check_00748 **********\n\n");
    });

    test('00772_element_check_00749', () async {
      print("\n********** テスト実行：00772_element_check_00749 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.logging.level;
      print(sys.logging.level);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.logging.level = testData1;
      print(sys.logging.level);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.logging.level == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.logging.level == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.logging.level = testData2;
      print(sys.logging.level);
      expect(sys.logging.level == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.logging.level == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.logging.level = defalut;
      print(sys.logging.level);
      expect(sys.logging.level == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.logging.level == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00772_element_check_00749 **********\n\n");
    });

    test('00773_element_check_00750', () async {
      print("\n********** テスト実行：00773_element_check_00750 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scanner.reschar;
      print(sys.scanner.reschar);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scanner.reschar = testData1;
      print(sys.scanner.reschar);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scanner.reschar == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scanner.reschar == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scanner.reschar = testData2;
      print(sys.scanner.reschar);
      expect(sys.scanner.reschar == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scanner.reschar == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scanner.reschar = defalut;
      print(sys.scanner.reschar);
      expect(sys.scanner.reschar == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scanner.reschar == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00773_element_check_00750 **********\n\n");
    });

    test('00774_element_check_00751', () async {
      print("\n********** テスト実行：00774_element_check_00751 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scanner.reschar_tower;
      print(sys.scanner.reschar_tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scanner.reschar_tower = testData1;
      print(sys.scanner.reschar_tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scanner.reschar_tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scanner.reschar_tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scanner.reschar_tower = testData2;
      print(sys.scanner.reschar_tower);
      expect(sys.scanner.reschar_tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scanner.reschar_tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scanner.reschar_tower = defalut;
      print(sys.scanner.reschar_tower);
      expect(sys.scanner.reschar_tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scanner.reschar_tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00774_element_check_00751 **********\n\n");
    });

    test('00775_element_check_00752', () async {
      print("\n********** テスト実行：00775_element_check_00752 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scanner.reschar_add;
      print(sys.scanner.reschar_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scanner.reschar_add = testData1;
      print(sys.scanner.reschar_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scanner.reschar_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scanner.reschar_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scanner.reschar_add = testData2;
      print(sys.scanner.reschar_add);
      expect(sys.scanner.reschar_add == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scanner.reschar_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scanner.reschar_add = defalut;
      print(sys.scanner.reschar_add);
      expect(sys.scanner.reschar_add == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scanner.reschar_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00775_element_check_00752 **********\n\n");
    });

    test('00776_element_check_00753', () async {
      print("\n********** テスト実行：00776_element_check_00753 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu1.entry;
      print(sys.subcpu1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu1.entry = testData1s;
      print(sys.subcpu1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu1.entry = testData2s;
      print(sys.subcpu1.entry);
      expect(sys.subcpu1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu1.entry = defalut;
      print(sys.subcpu1.entry);
      expect(sys.subcpu1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00776_element_check_00753 **********\n\n");
    });

    test('00777_element_check_00754', () async {
      print("\n********** テスト実行：00777_element_check_00754 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu1.priority;
      print(sys.subcpu1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu1.priority = testData1;
      print(sys.subcpu1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu1.priority = testData2;
      print(sys.subcpu1.priority);
      expect(sys.subcpu1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu1.priority = defalut;
      print(sys.subcpu1.priority);
      expect(sys.subcpu1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00777_element_check_00754 **********\n\n");
    });

    test('00778_element_check_00755', () async {
      print("\n********** テスト実行：00778_element_check_00755 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu1.inifile;
      print(sys.subcpu1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu1.inifile = testData1s;
      print(sys.subcpu1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu1.inifile = testData2s;
      print(sys.subcpu1.inifile);
      expect(sys.subcpu1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu1.inifile = defalut;
      print(sys.subcpu1.inifile);
      expect(sys.subcpu1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00778_element_check_00755 **********\n\n");
    });

    test('00779_element_check_00756', () async {
      print("\n********** テスト実行：00779_element_check_00756 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk1.entry;
      print(sys.spk1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk1.entry = testData1s;
      print(sys.spk1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk1.entry = testData2s;
      print(sys.spk1.entry);
      expect(sys.spk1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.spk1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk1.entry = defalut;
      print(sys.spk1.entry);
      expect(sys.spk1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00779_element_check_00756 **********\n\n");
    });

    test('00780_element_check_00757', () async {
      print("\n********** テスト実行：00780_element_check_00757 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk1.priority;
      print(sys.spk1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk1.priority = testData1;
      print(sys.spk1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk1.priority = testData2;
      print(sys.spk1.priority);
      expect(sys.spk1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.spk1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk1.priority = defalut;
      print(sys.spk1.priority);
      expect(sys.spk1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00780_element_check_00757 **********\n\n");
    });

    test('00781_element_check_00758', () async {
      print("\n********** テスト実行：00781_element_check_00758 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk1.inifile;
      print(sys.spk1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk1.inifile = testData1s;
      print(sys.spk1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk1.inifile = testData2s;
      print(sys.spk1.inifile);
      expect(sys.spk1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.spk1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk1.inifile = defalut;
      print(sys.spk1.inifile);
      expect(sys.spk1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00781_element_check_00758 **********\n\n");
    });

    test('00782_element_check_00759', () async {
      print("\n********** テスト実行：00782_element_check_00759 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand1.entry;
      print(sys.wand1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand1.entry = testData1s;
      print(sys.wand1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand1.entry = testData2s;
      print(sys.wand1.entry);
      expect(sys.wand1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.wand1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand1.entry = defalut;
      print(sys.wand1.entry);
      expect(sys.wand1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00782_element_check_00759 **********\n\n");
    });

    test('00783_element_check_00760', () async {
      print("\n********** テスト実行：00783_element_check_00760 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand1.priority;
      print(sys.wand1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand1.priority = testData1;
      print(sys.wand1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand1.priority = testData2;
      print(sys.wand1.priority);
      expect(sys.wand1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.wand1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand1.priority = defalut;
      print(sys.wand1.priority);
      expect(sys.wand1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00783_element_check_00760 **********\n\n");
    });

    test('00784_element_check_00761', () async {
      print("\n********** テスト実行：00784_element_check_00761 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand1.inifile;
      print(sys.wand1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand1.inifile = testData1s;
      print(sys.wand1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand1.inifile = testData2s;
      print(sys.wand1.inifile);
      expect(sys.wand1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.wand1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand1.inifile = defalut;
      print(sys.wand1.inifile);
      expect(sys.wand1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00784_element_check_00761 **********\n\n");
    });

    test('00785_element_check_00762', () async {
      print("\n********** テスト実行：00785_element_check_00762 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand2.entry;
      print(sys.wand2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand2.entry = testData1s;
      print(sys.wand2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand2.entry = testData2s;
      print(sys.wand2.entry);
      expect(sys.wand2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.wand2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand2.entry = defalut;
      print(sys.wand2.entry);
      expect(sys.wand2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00785_element_check_00762 **********\n\n");
    });

    test('00786_element_check_00763', () async {
      print("\n********** テスト実行：00786_element_check_00763 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand2.priority;
      print(sys.wand2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand2.priority = testData1;
      print(sys.wand2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand2.priority = testData2;
      print(sys.wand2.priority);
      expect(sys.wand2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.wand2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand2.priority = defalut;
      print(sys.wand2.priority);
      expect(sys.wand2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00786_element_check_00763 **********\n\n");
    });

    test('00787_element_check_00764', () async {
      print("\n********** テスト実行：00787_element_check_00764 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand2.inifile;
      print(sys.wand2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand2.inifile = testData1s;
      print(sys.wand2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand2.inifile = testData2s;
      print(sys.wand2.inifile);
      expect(sys.wand2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.wand2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand2.inifile = defalut;
      print(sys.wand2.inifile);
      expect(sys.wand2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00787_element_check_00764 **********\n\n");
    });

    test('00788_element_check_00765', () async {
      print("\n********** テスト実行：00788_element_check_00765 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt1.entry;
      print(sys.lcdbrt1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt1.entry = testData1s;
      print(sys.lcdbrt1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt1.entry = testData2s;
      print(sys.lcdbrt1.entry);
      expect(sys.lcdbrt1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt1.entry = defalut;
      print(sys.lcdbrt1.entry);
      expect(sys.lcdbrt1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00788_element_check_00765 **********\n\n");
    });

    test('00789_element_check_00766', () async {
      print("\n********** テスト実行：00789_element_check_00766 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt1.priority;
      print(sys.lcdbrt1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt1.priority = testData1;
      print(sys.lcdbrt1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt1.priority = testData2;
      print(sys.lcdbrt1.priority);
      expect(sys.lcdbrt1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt1.priority = defalut;
      print(sys.lcdbrt1.priority);
      expect(sys.lcdbrt1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00789_element_check_00766 **********\n\n");
    });

    test('00790_element_check_00767', () async {
      print("\n********** テスト実行：00790_element_check_00767 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt1.inifile;
      print(sys.lcdbrt1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt1.inifile = testData1s;
      print(sys.lcdbrt1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt1.inifile = testData2s;
      print(sys.lcdbrt1.inifile);
      expect(sys.lcdbrt1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt1.inifile = defalut;
      print(sys.lcdbrt1.inifile);
      expect(sys.lcdbrt1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00790_element_check_00767 **********\n\n");
    });

    test('00791_element_check_00768', () async {
      print("\n********** テスト実行：00791_element_check_00768 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt2.entry;
      print(sys.lcdbrt2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt2.entry = testData1s;
      print(sys.lcdbrt2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt2.entry = testData2s;
      print(sys.lcdbrt2.entry);
      expect(sys.lcdbrt2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt2.entry = defalut;
      print(sys.lcdbrt2.entry);
      expect(sys.lcdbrt2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00791_element_check_00768 **********\n\n");
    });

    test('00792_element_check_00769', () async {
      print("\n********** テスト実行：00792_element_check_00769 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt2.priority;
      print(sys.lcdbrt2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt2.priority = testData1;
      print(sys.lcdbrt2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt2.priority = testData2;
      print(sys.lcdbrt2.priority);
      expect(sys.lcdbrt2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt2.priority = defalut;
      print(sys.lcdbrt2.priority);
      expect(sys.lcdbrt2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00792_element_check_00769 **********\n\n");
    });

    test('00793_element_check_00770', () async {
      print("\n********** テスト実行：00793_element_check_00770 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt2.inifile;
      print(sys.lcdbrt2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt2.inifile = testData1s;
      print(sys.lcdbrt2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt2.inifile = testData2s;
      print(sys.lcdbrt2.inifile);
      expect(sys.lcdbrt2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt2.inifile = defalut;
      print(sys.lcdbrt2.inifile);
      expect(sys.lcdbrt2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00793_element_check_00770 **********\n\n");
    });

    test('00794_element_check_00771', () async {
      print("\n********** テスト実行：00794_element_check_00771 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip1.entry;
      print(sys.fip1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip1.entry = testData1s;
      print(sys.fip1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip1.entry = testData2s;
      print(sys.fip1.entry);
      expect(sys.fip1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip1.entry = defalut;
      print(sys.fip1.entry);
      expect(sys.fip1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00794_element_check_00771 **********\n\n");
    });

    test('00795_element_check_00772', () async {
      print("\n********** テスト実行：00795_element_check_00772 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip1.priority;
      print(sys.fip1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip1.priority = testData1;
      print(sys.fip1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip1.priority = testData2;
      print(sys.fip1.priority);
      expect(sys.fip1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip1.priority = defalut;
      print(sys.fip1.priority);
      expect(sys.fip1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00795_element_check_00772 **********\n\n");
    });

    test('00796_element_check_00773', () async {
      print("\n********** テスト実行：00796_element_check_00773 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip1.inifile;
      print(sys.fip1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip1.inifile = testData1s;
      print(sys.fip1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip1.inifile = testData2s;
      print(sys.fip1.inifile);
      expect(sys.fip1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip1.inifile = defalut;
      print(sys.fip1.inifile);
      expect(sys.fip1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00796_element_check_00773 **********\n\n");
    });

    test('00797_element_check_00774', () async {
      print("\n********** テスト実行：00797_element_check_00774 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey1.entry;
      print(sys.mkey1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey1.entry = testData1s;
      print(sys.mkey1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey1.entry = testData2s;
      print(sys.mkey1.entry);
      expect(sys.mkey1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey1.entry = defalut;
      print(sys.mkey1.entry);
      expect(sys.mkey1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00797_element_check_00774 **********\n\n");
    });

    test('00798_element_check_00775', () async {
      print("\n********** テスト実行：00798_element_check_00775 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey1.priority;
      print(sys.mkey1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey1.priority = testData1;
      print(sys.mkey1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey1.priority = testData2;
      print(sys.mkey1.priority);
      expect(sys.mkey1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey1.priority = defalut;
      print(sys.mkey1.priority);
      expect(sys.mkey1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00798_element_check_00775 **********\n\n");
    });

    test('00799_element_check_00776', () async {
      print("\n********** テスト実行：00799_element_check_00776 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey1.inifile;
      print(sys.mkey1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey1.inifile = testData1s;
      print(sys.mkey1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey1.inifile = testData2s;
      print(sys.mkey1.inifile);
      expect(sys.mkey1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey1.inifile = defalut;
      print(sys.mkey1.inifile);
      expect(sys.mkey1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00799_element_check_00776 **********\n\n");
    });

    test('00800_element_check_00777', () async {
      print("\n********** テスト実行：00800_element_check_00777 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey2.entry;
      print(sys.mkey2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey2.entry = testData1s;
      print(sys.mkey2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey2.entry = testData2s;
      print(sys.mkey2.entry);
      expect(sys.mkey2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey2.entry = defalut;
      print(sys.mkey2.entry);
      expect(sys.mkey2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00800_element_check_00777 **********\n\n");
    });

    test('00801_element_check_00778', () async {
      print("\n********** テスト実行：00801_element_check_00778 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey2.priority;
      print(sys.mkey2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey2.priority = testData1;
      print(sys.mkey2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey2.priority = testData2;
      print(sys.mkey2.priority);
      expect(sys.mkey2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey2.priority = defalut;
      print(sys.mkey2.priority);
      expect(sys.mkey2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00801_element_check_00778 **********\n\n");
    });

    test('00802_element_check_00779', () async {
      print("\n********** テスト実行：00802_element_check_00779 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey2.inifile;
      print(sys.mkey2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey2.inifile = testData1s;
      print(sys.mkey2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey2.inifile = testData2s;
      print(sys.mkey2.inifile);
      expect(sys.mkey2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey2.inifile = defalut;
      print(sys.mkey2.inifile);
      expect(sys.mkey2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00802_element_check_00779 **********\n\n");
    });

    test('00803_element_check_00780', () async {
      print("\n********** テスト実行：00803_element_check_00780 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcd57.entry;
      print(sys.lcd57.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcd57.entry = testData1s;
      print(sys.lcd57.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcd57.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcd57.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcd57.entry = testData2s;
      print(sys.lcd57.entry);
      expect(sys.lcd57.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcd57.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcd57.entry = defalut;
      print(sys.lcd57.entry);
      expect(sys.lcd57.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcd57.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00803_element_check_00780 **********\n\n");
    });

    test('00804_element_check_00781', () async {
      print("\n********** テスト実行：00804_element_check_00781 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcd57.priority;
      print(sys.lcd57.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcd57.priority = testData1;
      print(sys.lcd57.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcd57.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcd57.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcd57.priority = testData2;
      print(sys.lcd57.priority);
      expect(sys.lcd57.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.lcd57.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcd57.priority = defalut;
      print(sys.lcd57.priority);
      expect(sys.lcd57.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcd57.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00804_element_check_00781 **********\n\n");
    });

    test('00805_element_check_00782', () async {
      print("\n********** テスト実行：00805_element_check_00782 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcd57.inifile;
      print(sys.lcd57.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcd57.inifile = testData1s;
      print(sys.lcd57.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcd57.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcd57.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcd57.inifile = testData2s;
      print(sys.lcd57.inifile);
      expect(sys.lcd57.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcd57.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcd57.inifile = defalut;
      print(sys.lcd57.inifile);
      expect(sys.lcd57.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcd57.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00805_element_check_00782 **********\n\n");
    });

    test('00806_element_check_00783', () async {
      print("\n********** テスト実行：00806_element_check_00783 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey1t.entry;
      print(sys.tkey1t.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey1t.entry = testData1s;
      print(sys.tkey1t.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey1t.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey1t.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey1t.entry = testData2s;
      print(sys.tkey1t.entry);
      expect(sys.tkey1t.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1t.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey1t.entry = defalut;
      print(sys.tkey1t.entry);
      expect(sys.tkey1t.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1t.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00806_element_check_00783 **********\n\n");
    });

    test('00807_element_check_00784', () async {
      print("\n********** テスト実行：00807_element_check_00784 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey1t.priority;
      print(sys.tkey1t.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey1t.priority = testData1;
      print(sys.tkey1t.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey1t.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey1t.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey1t.priority = testData2;
      print(sys.tkey1t.priority);
      expect(sys.tkey1t.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1t.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey1t.priority = defalut;
      print(sys.tkey1t.priority);
      expect(sys.tkey1t.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1t.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00807_element_check_00784 **********\n\n");
    });

    test('00808_element_check_00785', () async {
      print("\n********** テスト実行：00808_element_check_00785 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey1t.inifile;
      print(sys.tkey1t.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey1t.inifile = testData1s;
      print(sys.tkey1t.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey1t.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey1t.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey1t.inifile = testData2s;
      print(sys.tkey1t.inifile);
      expect(sys.tkey1t.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1t.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey1t.inifile = defalut;
      print(sys.tkey1t.inifile);
      expect(sys.tkey1t.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1t.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00808_element_check_00785 **********\n\n");
    });

    test('00809_element_check_00786', () async {
      print("\n********** テスト実行：00809_element_check_00786 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey1d.entry;
      print(sys.tkey1d.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey1d.entry = testData1s;
      print(sys.tkey1d.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey1d.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey1d.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey1d.entry = testData2s;
      print(sys.tkey1d.entry);
      expect(sys.tkey1d.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1d.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey1d.entry = defalut;
      print(sys.tkey1d.entry);
      expect(sys.tkey1d.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1d.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00809_element_check_00786 **********\n\n");
    });

    test('00810_element_check_00787', () async {
      print("\n********** テスト実行：00810_element_check_00787 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey1d.priority;
      print(sys.tkey1d.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey1d.priority = testData1;
      print(sys.tkey1d.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey1d.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey1d.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey1d.priority = testData2;
      print(sys.tkey1d.priority);
      expect(sys.tkey1d.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1d.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey1d.priority = defalut;
      print(sys.tkey1d.priority);
      expect(sys.tkey1d.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1d.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00810_element_check_00787 **********\n\n");
    });

    test('00811_element_check_00788', () async {
      print("\n********** テスト実行：00811_element_check_00788 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey1d.inifile;
      print(sys.tkey1d.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey1d.inifile = testData1s;
      print(sys.tkey1d.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey1d.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey1d.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey1d.inifile = testData2s;
      print(sys.tkey1d.inifile);
      expect(sys.tkey1d.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1d.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey1d.inifile = defalut;
      print(sys.tkey1d.inifile);
      expect(sys.tkey1d.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey1d.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00811_element_check_00788 **********\n\n");
    });

    test('00812_element_check_00789', () async {
      print("\n********** テスト実行：00812_element_check_00789 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr11.entry;
      print(sys.msr11.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr11.entry = testData1s;
      print(sys.msr11.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr11.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr11.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr11.entry = testData2s;
      print(sys.msr11.entry);
      expect(sys.msr11.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr11.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr11.entry = defalut;
      print(sys.msr11.entry);
      expect(sys.msr11.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr11.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00812_element_check_00789 **********\n\n");
    });

    test('00813_element_check_00790', () async {
      print("\n********** テスト実行：00813_element_check_00790 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr11.priority;
      print(sys.msr11.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr11.priority = testData1;
      print(sys.msr11.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr11.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr11.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr11.priority = testData2;
      print(sys.msr11.priority);
      expect(sys.msr11.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr11.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr11.priority = defalut;
      print(sys.msr11.priority);
      expect(sys.msr11.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr11.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00813_element_check_00790 **********\n\n");
    });

    test('00814_element_check_00791', () async {
      print("\n********** テスト実行：00814_element_check_00791 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr11.inifile;
      print(sys.msr11.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr11.inifile = testData1s;
      print(sys.msr11.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr11.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr11.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr11.inifile = testData2s;
      print(sys.msr11.inifile);
      expect(sys.msr11.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr11.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr11.inifile = defalut;
      print(sys.msr11.inifile);
      expect(sys.msr11.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr11.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00814_element_check_00791 **********\n\n");
    });

    test('00815_element_check_00792', () async {
      print("\n********** テスト実行：00815_element_check_00792 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr12.entry;
      print(sys.msr12.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr12.entry = testData1s;
      print(sys.msr12.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr12.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr12.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr12.entry = testData2s;
      print(sys.msr12.entry);
      expect(sys.msr12.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr12.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr12.entry = defalut;
      print(sys.msr12.entry);
      expect(sys.msr12.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr12.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00815_element_check_00792 **********\n\n");
    });

    test('00816_element_check_00793', () async {
      print("\n********** テスト実行：00816_element_check_00793 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr12.priority;
      print(sys.msr12.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr12.priority = testData1;
      print(sys.msr12.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr12.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr12.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr12.priority = testData2;
      print(sys.msr12.priority);
      expect(sys.msr12.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr12.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr12.priority = defalut;
      print(sys.msr12.priority);
      expect(sys.msr12.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr12.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00816_element_check_00793 **********\n\n");
    });

    test('00817_element_check_00794', () async {
      print("\n********** テスト実行：00817_element_check_00794 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr12.inifile;
      print(sys.msr12.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr12.inifile = testData1s;
      print(sys.msr12.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr12.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr12.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr12.inifile = testData2s;
      print(sys.msr12.inifile);
      expect(sys.msr12.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr12.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr12.inifile = defalut;
      print(sys.msr12.inifile);
      expect(sys.msr12.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr12.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00817_element_check_00794 **********\n\n");
    });

    test('00818_element_check_00795', () async {
      print("\n********** テスト実行：00818_element_check_00795 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr21.entry;
      print(sys.msr21.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr21.entry = testData1s;
      print(sys.msr21.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr21.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr21.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr21.entry = testData2s;
      print(sys.msr21.entry);
      expect(sys.msr21.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr21.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr21.entry = defalut;
      print(sys.msr21.entry);
      expect(sys.msr21.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr21.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00818_element_check_00795 **********\n\n");
    });

    test('00819_element_check_00796', () async {
      print("\n********** テスト実行：00819_element_check_00796 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr21.priority;
      print(sys.msr21.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr21.priority = testData1;
      print(sys.msr21.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr21.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr21.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr21.priority = testData2;
      print(sys.msr21.priority);
      expect(sys.msr21.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr21.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr21.priority = defalut;
      print(sys.msr21.priority);
      expect(sys.msr21.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr21.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00819_element_check_00796 **********\n\n");
    });

    test('00820_element_check_00797', () async {
      print("\n********** テスト実行：00820_element_check_00797 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr21.inifile;
      print(sys.msr21.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr21.inifile = testData1s;
      print(sys.msr21.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr21.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr21.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr21.inifile = testData2s;
      print(sys.msr21.inifile);
      expect(sys.msr21.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr21.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr21.inifile = defalut;
      print(sys.msr21.inifile);
      expect(sys.msr21.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr21.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00820_element_check_00797 **********\n\n");
    });

    test('00821_element_check_00798', () async {
      print("\n********** テスト実行：00821_element_check_00798 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr22.entry;
      print(sys.msr22.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr22.entry = testData1s;
      print(sys.msr22.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr22.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr22.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr22.entry = testData2s;
      print(sys.msr22.entry);
      expect(sys.msr22.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr22.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr22.entry = defalut;
      print(sys.msr22.entry);
      expect(sys.msr22.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr22.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00821_element_check_00798 **********\n\n");
    });

    test('00822_element_check_00799', () async {
      print("\n********** テスト実行：00822_element_check_00799 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr22.priority;
      print(sys.msr22.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr22.priority = testData1;
      print(sys.msr22.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr22.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr22.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr22.priority = testData2;
      print(sys.msr22.priority);
      expect(sys.msr22.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr22.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr22.priority = defalut;
      print(sys.msr22.priority);
      expect(sys.msr22.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr22.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00822_element_check_00799 **********\n\n");
    });

    test('00823_element_check_00800', () async {
      print("\n********** テスト実行：00823_element_check_00800 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr22.inifile;
      print(sys.msr22.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr22.inifile = testData1s;
      print(sys.msr22.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr22.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr22.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr22.inifile = testData2s;
      print(sys.msr22.inifile);
      expect(sys.msr22.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr22.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr22.inifile = defalut;
      print(sys.msr22.inifile);
      expect(sys.msr22.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr22.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00823_element_check_00800 **********\n\n");
    });

    test('00824_element_check_00801', () async {
      print("\n********** テスト実行：00824_element_check_00801 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu2.entry;
      print(sys.subcpu2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu2.entry = testData1s;
      print(sys.subcpu2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu2.entry = testData2s;
      print(sys.subcpu2.entry);
      expect(sys.subcpu2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu2.entry = defalut;
      print(sys.subcpu2.entry);
      expect(sys.subcpu2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00824_element_check_00801 **********\n\n");
    });

    test('00825_element_check_00802', () async {
      print("\n********** テスト実行：00825_element_check_00802 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu2.priority;
      print(sys.subcpu2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu2.priority = testData1;
      print(sys.subcpu2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu2.priority = testData2;
      print(sys.subcpu2.priority);
      expect(sys.subcpu2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu2.priority = defalut;
      print(sys.subcpu2.priority);
      expect(sys.subcpu2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00825_element_check_00802 **********\n\n");
    });

    test('00826_element_check_00803', () async {
      print("\n********** テスト実行：00826_element_check_00803 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu2.inifile;
      print(sys.subcpu2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu2.inifile = testData1s;
      print(sys.subcpu2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu2.inifile = testData2s;
      print(sys.subcpu2.inifile);
      expect(sys.subcpu2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu2.inifile = defalut;
      print(sys.subcpu2.inifile);
      expect(sys.subcpu2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00826_element_check_00803 **********\n\n");
    });

    test('00827_element_check_00804', () async {
      print("\n********** テスト実行：00827_element_check_00804 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk2.entry;
      print(sys.spk2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk2.entry = testData1s;
      print(sys.spk2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk2.entry = testData2s;
      print(sys.spk2.entry);
      expect(sys.spk2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.spk2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk2.entry = defalut;
      print(sys.spk2.entry);
      expect(sys.spk2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00827_element_check_00804 **********\n\n");
    });

    test('00828_element_check_00805', () async {
      print("\n********** テスト実行：00828_element_check_00805 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk2.priority;
      print(sys.spk2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk2.priority = testData1;
      print(sys.spk2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk2.priority = testData2;
      print(sys.spk2.priority);
      expect(sys.spk2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.spk2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk2.priority = defalut;
      print(sys.spk2.priority);
      expect(sys.spk2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00828_element_check_00805 **********\n\n");
    });

    test('00829_element_check_00806', () async {
      print("\n********** テスト実行：00829_element_check_00806 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk2.inifile;
      print(sys.spk2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk2.inifile = testData1s;
      print(sys.spk2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk2.inifile = testData2s;
      print(sys.spk2.inifile);
      expect(sys.spk2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.spk2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk2.inifile = defalut;
      print(sys.spk2.inifile);
      expect(sys.spk2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00829_element_check_00806 **********\n\n");
    });

    test('00830_element_check_00807', () async {
      print("\n********** テスト実行：00830_element_check_00807 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip2.entry;
      print(sys.fip2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip2.entry = testData1s;
      print(sys.fip2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip2.entry = testData2s;
      print(sys.fip2.entry);
      expect(sys.fip2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip2.entry = defalut;
      print(sys.fip2.entry);
      expect(sys.fip2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00830_element_check_00807 **********\n\n");
    });

    test('00831_element_check_00808', () async {
      print("\n********** テスト実行：00831_element_check_00808 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip2.priority;
      print(sys.fip2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip2.priority = testData1;
      print(sys.fip2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip2.priority = testData2;
      print(sys.fip2.priority);
      expect(sys.fip2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip2.priority = defalut;
      print(sys.fip2.priority);
      expect(sys.fip2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00831_element_check_00808 **********\n\n");
    });

    test('00832_element_check_00809', () async {
      print("\n********** テスト実行：00832_element_check_00809 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip2.inifile;
      print(sys.fip2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip2.inifile = testData1s;
      print(sys.fip2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip2.inifile = testData2s;
      print(sys.fip2.inifile);
      expect(sys.fip2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip2.inifile = defalut;
      print(sys.fip2.inifile);
      expect(sys.fip2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00832_element_check_00809 **********\n\n");
    });

    test('00833_element_check_00810', () async {
      print("\n********** テスト実行：00833_element_check_00810 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey2.entry;
      print(sys.tkey2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey2.entry = testData1s;
      print(sys.tkey2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey2.entry = testData2s;
      print(sys.tkey2.entry);
      expect(sys.tkey2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey2.entry = defalut;
      print(sys.tkey2.entry);
      expect(sys.tkey2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00833_element_check_00810 **********\n\n");
    });

    test('00834_element_check_00811', () async {
      print("\n********** テスト実行：00834_element_check_00811 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey2.priority;
      print(sys.tkey2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey2.priority = testData1;
      print(sys.tkey2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey2.priority = testData2;
      print(sys.tkey2.priority);
      expect(sys.tkey2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey2.priority = defalut;
      print(sys.tkey2.priority);
      expect(sys.tkey2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00834_element_check_00811 **********\n\n");
    });

    test('00835_element_check_00812', () async {
      print("\n********** テスト実行：00835_element_check_00812 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey2.inifile;
      print(sys.tkey2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey2.inifile = testData1s;
      print(sys.tkey2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey2.inifile = testData2s;
      print(sys.tkey2.inifile);
      expect(sys.tkey2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey2.inifile = defalut;
      print(sys.tkey2.inifile);
      expect(sys.tkey2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00835_element_check_00812 **********\n\n");
    });

    test('00836_element_check_00813', () async {
      print("\n********** テスト実行：00836_element_check_00813 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprt.entry;
      print(sys.tprt.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprt.entry = testData1s;
      print(sys.tprt.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprt.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprt.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprt.entry = testData2s;
      print(sys.tprt.entry);
      expect(sys.tprt.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprt.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprt.entry = defalut;
      print(sys.tprt.entry);
      expect(sys.tprt.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprt.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00836_element_check_00813 **********\n\n");
    });

    test('00837_element_check_00814', () async {
      print("\n********** テスト実行：00837_element_check_00814 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprt.priority;
      print(sys.tprt.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprt.priority = testData1;
      print(sys.tprt.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprt.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprt.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprt.priority = testData2;
      print(sys.tprt.priority);
      expect(sys.tprt.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprt.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprt.priority = defalut;
      print(sys.tprt.priority);
      expect(sys.tprt.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprt.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00837_element_check_00814 **********\n\n");
    });

    test('00838_element_check_00815', () async {
      print("\n********** テスト実行：00838_element_check_00815 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprt.inifile;
      print(sys.tprt.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprt.inifile = testData1s;
      print(sys.tprt.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprt.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprt.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprt.inifile = testData2s;
      print(sys.tprt.inifile);
      expect(sys.tprt.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprt.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprt.inifile = defalut;
      print(sys.tprt.inifile);
      expect(sys.tprt.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprt.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00838_element_check_00815 **********\n\n");
    });

    test('00839_element_check_00816', () async {
      print("\n********** テスト実行：00839_element_check_00816 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse1.entry;
      print(sys.pmouse1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse1.entry = testData1s;
      print(sys.pmouse1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse1.entry = testData2s;
      print(sys.pmouse1.entry);
      expect(sys.pmouse1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse1.entry = defalut;
      print(sys.pmouse1.entry);
      expect(sys.pmouse1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00839_element_check_00816 **********\n\n");
    });

    test('00840_element_check_00817', () async {
      print("\n********** テスト実行：00840_element_check_00817 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse1.priority;
      print(sys.pmouse1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse1.priority = testData1;
      print(sys.pmouse1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse1.priority = testData2;
      print(sys.pmouse1.priority);
      expect(sys.pmouse1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse1.priority = defalut;
      print(sys.pmouse1.priority);
      expect(sys.pmouse1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00840_element_check_00817 **********\n\n");
    });

    test('00841_element_check_00818', () async {
      print("\n********** テスト実行：00841_element_check_00818 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse1.inifile;
      print(sys.pmouse1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse1.inifile = testData1s;
      print(sys.pmouse1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse1.inifile = testData2s;
      print(sys.pmouse1.inifile);
      expect(sys.pmouse1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse1.inifile = defalut;
      print(sys.pmouse1.inifile);
      expect(sys.pmouse1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00841_element_check_00818 **********\n\n");
    });

    test('00842_element_check_00819', () async {
      print("\n********** テスト実行：00842_element_check_00819 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse2.entry;
      print(sys.pmouse2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse2.entry = testData1s;
      print(sys.pmouse2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse2.entry = testData2s;
      print(sys.pmouse2.entry);
      expect(sys.pmouse2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse2.entry = defalut;
      print(sys.pmouse2.entry);
      expect(sys.pmouse2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00842_element_check_00819 **********\n\n");
    });

    test('00843_element_check_00820', () async {
      print("\n********** テスト実行：00843_element_check_00820 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse2.priority;
      print(sys.pmouse2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse2.priority = testData1;
      print(sys.pmouse2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse2.priority = testData2;
      print(sys.pmouse2.priority);
      expect(sys.pmouse2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse2.priority = defalut;
      print(sys.pmouse2.priority);
      expect(sys.pmouse2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00843_element_check_00820 **********\n\n");
    });

    test('00844_element_check_00821', () async {
      print("\n********** テスト実行：00844_element_check_00821 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse2.inifile;
      print(sys.pmouse2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse2.inifile = testData1s;
      print(sys.pmouse2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse2.inifile = testData2s;
      print(sys.pmouse2.inifile);
      expect(sys.pmouse2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse2.inifile = defalut;
      print(sys.pmouse2.inifile);
      expect(sys.pmouse2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00844_element_check_00821 **********\n\n");
    });

    test('00845_element_check_00822', () async {
      print("\n********** テスト実行：00845_element_check_00822 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sprt.entry;
      print(sys.sprt.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sprt.entry = testData1s;
      print(sys.sprt.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sprt.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sprt.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sprt.entry = testData2s;
      print(sys.sprt.entry);
      expect(sys.sprt.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sprt.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sprt.entry = defalut;
      print(sys.sprt.entry);
      expect(sys.sprt.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sprt.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00845_element_check_00822 **********\n\n");
    });

    test('00846_element_check_00823', () async {
      print("\n********** テスト実行：00846_element_check_00823 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sprt.priority;
      print(sys.sprt.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sprt.priority = testData1;
      print(sys.sprt.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sprt.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sprt.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sprt.priority = testData2;
      print(sys.sprt.priority);
      expect(sys.sprt.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sprt.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sprt.priority = defalut;
      print(sys.sprt.priority);
      expect(sys.sprt.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sprt.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00846_element_check_00823 **********\n\n");
    });

    test('00847_element_check_00824', () async {
      print("\n********** テスト実行：00847_element_check_00824 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sprt.inifile;
      print(sys.sprt.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sprt.inifile = testData1s;
      print(sys.sprt.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sprt.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sprt.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sprt.inifile = testData2s;
      print(sys.sprt.inifile);
      expect(sys.sprt.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sprt.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sprt.inifile = defalut;
      print(sys.sprt.inifile);
      expect(sys.sprt.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sprt.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00847_element_check_00824 **********\n\n");
    });

    test('00848_element_check_00825', () async {
      print("\n********** テスト実行：00848_element_check_00825 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mupdate.entry;
      print(sys.mupdate.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mupdate.entry = testData1s;
      print(sys.mupdate.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mupdate.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mupdate.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mupdate.entry = testData2s;
      print(sys.mupdate.entry);
      expect(sys.mupdate.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mupdate.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mupdate.entry = defalut;
      print(sys.mupdate.entry);
      expect(sys.mupdate.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mupdate.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00848_element_check_00825 **********\n\n");
    });

    test('00849_element_check_00826', () async {
      print("\n********** テスト実行：00849_element_check_00826 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mupdate.priority;
      print(sys.mupdate.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mupdate.priority = testData1;
      print(sys.mupdate.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mupdate.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mupdate.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mupdate.priority = testData2;
      print(sys.mupdate.priority);
      expect(sys.mupdate.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mupdate.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mupdate.priority = defalut;
      print(sys.mupdate.priority);
      expect(sys.mupdate.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mupdate.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00849_element_check_00826 **********\n\n");
    });

    test('00850_element_check_00827', () async {
      print("\n********** テスト実行：00850_element_check_00827 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mupdate.inifile;
      print(sys.mupdate.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mupdate.inifile = testData1s;
      print(sys.mupdate.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mupdate.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mupdate.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mupdate.inifile = testData2s;
      print(sys.mupdate.inifile);
      expect(sys.mupdate.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mupdate.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mupdate.inifile = defalut;
      print(sys.mupdate.inifile);
      expect(sys.mupdate.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mupdate.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00850_element_check_00827 **********\n\n");
    });

    test('00851_element_check_00828', () async {
      print("\n********** テスト実行：00851_element_check_00828 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.history.entry;
      print(sys.history.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.history.entry = testData1s;
      print(sys.history.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.history.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.history.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.history.entry = testData2s;
      print(sys.history.entry);
      expect(sys.history.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.history.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.history.entry = defalut;
      print(sys.history.entry);
      expect(sys.history.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.history.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00851_element_check_00828 **********\n\n");
    });

    test('00852_element_check_00829', () async {
      print("\n********** テスト実行：00852_element_check_00829 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.history.priority;
      print(sys.history.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.history.priority = testData1;
      print(sys.history.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.history.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.history.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.history.priority = testData2;
      print(sys.history.priority);
      expect(sys.history.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.history.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.history.priority = defalut;
      print(sys.history.priority);
      expect(sys.history.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.history.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00852_element_check_00829 **********\n\n");
    });

    test('00853_element_check_00830', () async {
      print("\n********** テスト実行：00853_element_check_00830 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.history.inifile;
      print(sys.history.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.history.inifile = testData1s;
      print(sys.history.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.history.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.history.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.history.inifile = testData2s;
      print(sys.history.inifile);
      expect(sys.history.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.history.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.history.inifile = defalut;
      print(sys.history.inifile);
      expect(sys.history.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.history.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00853_element_check_00830 **********\n\n");
    });

    test('00854_element_check_00831', () async {
      print("\n********** テスト実行：00854_element_check_00831 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hist_csrv.entry;
      print(sys.hist_csrv.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hist_csrv.entry = testData1s;
      print(sys.hist_csrv.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hist_csrv.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hist_csrv.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hist_csrv.entry = testData2s;
      print(sys.hist_csrv.entry);
      expect(sys.hist_csrv.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hist_csrv.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hist_csrv.entry = defalut;
      print(sys.hist_csrv.entry);
      expect(sys.hist_csrv.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hist_csrv.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00854_element_check_00831 **********\n\n");
    });

    test('00855_element_check_00832', () async {
      print("\n********** テスト実行：00855_element_check_00832 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hist_csrv.priority;
      print(sys.hist_csrv.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hist_csrv.priority = testData1;
      print(sys.hist_csrv.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hist_csrv.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hist_csrv.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hist_csrv.priority = testData2;
      print(sys.hist_csrv.priority);
      expect(sys.hist_csrv.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.hist_csrv.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hist_csrv.priority = defalut;
      print(sys.hist_csrv.priority);
      expect(sys.hist_csrv.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hist_csrv.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00855_element_check_00832 **********\n\n");
    });

    test('00856_element_check_00833', () async {
      print("\n********** テスト実行：00856_element_check_00833 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hist_csrv.inifile;
      print(sys.hist_csrv.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hist_csrv.inifile = testData1s;
      print(sys.hist_csrv.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hist_csrv.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hist_csrv.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hist_csrv.inifile = testData2s;
      print(sys.hist_csrv.inifile);
      expect(sys.hist_csrv.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hist_csrv.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hist_csrv.inifile = defalut;
      print(sys.hist_csrv.inifile);
      expect(sys.hist_csrv.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hist_csrv.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00856_element_check_00833 **********\n\n");
    });

    test('00857_element_check_00834', () async {
      print("\n********** テスト実行：00857_element_check_00834 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tqrcd.entry;
      print(sys.tqrcd.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tqrcd.entry = testData1s;
      print(sys.tqrcd.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tqrcd.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tqrcd.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tqrcd.entry = testData2s;
      print(sys.tqrcd.entry);
      expect(sys.tqrcd.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tqrcd.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tqrcd.entry = defalut;
      print(sys.tqrcd.entry);
      expect(sys.tqrcd.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tqrcd.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00857_element_check_00834 **********\n\n");
    });

    test('00858_element_check_00835', () async {
      print("\n********** テスト実行：00858_element_check_00835 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tqrcd.priority;
      print(sys.tqrcd.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tqrcd.priority = testData1;
      print(sys.tqrcd.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tqrcd.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tqrcd.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tqrcd.priority = testData2;
      print(sys.tqrcd.priority);
      expect(sys.tqrcd.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tqrcd.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tqrcd.priority = defalut;
      print(sys.tqrcd.priority);
      expect(sys.tqrcd.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tqrcd.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00858_element_check_00835 **********\n\n");
    });

    test('00859_element_check_00836', () async {
      print("\n********** テスト実行：00859_element_check_00836 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tqrcd.inifile;
      print(sys.tqrcd.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tqrcd.inifile = testData1s;
      print(sys.tqrcd.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tqrcd.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tqrcd.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tqrcd.inifile = testData2s;
      print(sys.tqrcd.inifile);
      expect(sys.tqrcd.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tqrcd.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tqrcd.inifile = defalut;
      print(sys.tqrcd.inifile);
      expect(sys.tqrcd.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tqrcd.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00859_element_check_00836 **********\n\n");
    });

    test('00860_element_check_00837', () async {
      print("\n********** テスト実行：00860_element_check_00837 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqftp.entry;
      print(sys.hqftp.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqftp.entry = testData1s;
      print(sys.hqftp.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqftp.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqftp.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqftp.entry = testData2s;
      print(sys.hqftp.entry);
      expect(sys.hqftp.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hqftp.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqftp.entry = defalut;
      print(sys.hqftp.entry);
      expect(sys.hqftp.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqftp.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00860_element_check_00837 **********\n\n");
    });

    test('00861_element_check_00838', () async {
      print("\n********** テスト実行：00861_element_check_00838 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqftp.priority;
      print(sys.hqftp.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqftp.priority = testData1;
      print(sys.hqftp.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqftp.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqftp.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqftp.priority = testData2;
      print(sys.hqftp.priority);
      expect(sys.hqftp.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.hqftp.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqftp.priority = defalut;
      print(sys.hqftp.priority);
      expect(sys.hqftp.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqftp.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00861_element_check_00838 **********\n\n");
    });

    test('00862_element_check_00839', () async {
      print("\n********** テスト実行：00862_element_check_00839 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqftp.inifile;
      print(sys.hqftp.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqftp.inifile = testData1s;
      print(sys.hqftp.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqftp.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqftp.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqftp.inifile = testData2s;
      print(sys.hqftp.inifile);
      expect(sys.hqftp.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hqftp.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqftp.inifile = defalut;
      print(sys.hqftp.inifile);
      expect(sys.hqftp.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqftp.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00862_element_check_00839 **********\n\n");
    });

    test('00863_element_check_00840', () async {
      print("\n********** テスト実行：00863_element_check_00840 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.supdate.entry;
      print(sys.supdate.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.supdate.entry = testData1s;
      print(sys.supdate.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.supdate.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.supdate.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.supdate.entry = testData2s;
      print(sys.supdate.entry);
      expect(sys.supdate.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.supdate.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.supdate.entry = defalut;
      print(sys.supdate.entry);
      expect(sys.supdate.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.supdate.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00863_element_check_00840 **********\n\n");
    });

    test('00864_element_check_00841', () async {
      print("\n********** テスト実行：00864_element_check_00841 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.supdate.priority;
      print(sys.supdate.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.supdate.priority = testData1;
      print(sys.supdate.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.supdate.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.supdate.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.supdate.priority = testData2;
      print(sys.supdate.priority);
      expect(sys.supdate.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.supdate.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.supdate.priority = defalut;
      print(sys.supdate.priority);
      expect(sys.supdate.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.supdate.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00864_element_check_00841 **********\n\n");
    });

    test('00865_element_check_00842', () async {
      print("\n********** テスト実行：00865_element_check_00842 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.supdate.inifile;
      print(sys.supdate.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.supdate.inifile = testData1s;
      print(sys.supdate.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.supdate.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.supdate.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.supdate.inifile = testData2s;
      print(sys.supdate.inifile);
      expect(sys.supdate.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.supdate.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.supdate.inifile = defalut;
      print(sys.supdate.inifile);
      expect(sys.supdate.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.supdate.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00865_element_check_00842 **********\n\n");
    });

    test('00866_element_check_00843', () async {
      print("\n********** テスト実行：00866_element_check_00843 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqhist.entry;
      print(sys.hqhist.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqhist.entry = testData1s;
      print(sys.hqhist.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqhist.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqhist.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqhist.entry = testData2s;
      print(sys.hqhist.entry);
      expect(sys.hqhist.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hqhist.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqhist.entry = defalut;
      print(sys.hqhist.entry);
      expect(sys.hqhist.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqhist.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00866_element_check_00843 **********\n\n");
    });

    test('00867_element_check_00844', () async {
      print("\n********** テスト実行：00867_element_check_00844 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqhist.priority;
      print(sys.hqhist.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqhist.priority = testData1;
      print(sys.hqhist.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqhist.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqhist.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqhist.priority = testData2;
      print(sys.hqhist.priority);
      expect(sys.hqhist.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.hqhist.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqhist.priority = defalut;
      print(sys.hqhist.priority);
      expect(sys.hqhist.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqhist.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00867_element_check_00844 **********\n\n");
    });

    test('00868_element_check_00845', () async {
      print("\n********** テスト実行：00868_element_check_00845 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqhist.inifile;
      print(sys.hqhist.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqhist.inifile = testData1s;
      print(sys.hqhist.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqhist.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqhist.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqhist.inifile = testData2s;
      print(sys.hqhist.inifile);
      expect(sys.hqhist.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hqhist.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqhist.inifile = defalut;
      print(sys.hqhist.inifile);
      expect(sys.hqhist.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqhist.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00868_element_check_00845 **********\n\n");
    });

    test('00869_element_check_00846', () async {
      print("\n********** テスト実行：00869_element_check_00846 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqprod.entry;
      print(sys.hqprod.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqprod.entry = testData1s;
      print(sys.hqprod.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqprod.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqprod.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqprod.entry = testData2s;
      print(sys.hqprod.entry);
      expect(sys.hqprod.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hqprod.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqprod.entry = defalut;
      print(sys.hqprod.entry);
      expect(sys.hqprod.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqprod.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00869_element_check_00846 **********\n\n");
    });

    test('00870_element_check_00847', () async {
      print("\n********** テスト実行：00870_element_check_00847 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqprod.priority;
      print(sys.hqprod.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqprod.priority = testData1;
      print(sys.hqprod.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqprod.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqprod.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqprod.priority = testData2;
      print(sys.hqprod.priority);
      expect(sys.hqprod.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.hqprod.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqprod.priority = defalut;
      print(sys.hqprod.priority);
      expect(sys.hqprod.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqprod.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00870_element_check_00847 **********\n\n");
    });

    test('00871_element_check_00848', () async {
      print("\n********** テスト実行：00871_element_check_00848 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hqprod.inifile;
      print(sys.hqprod.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hqprod.inifile = testData1s;
      print(sys.hqprod.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hqprod.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hqprod.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hqprod.inifile = testData2s;
      print(sys.hqprod.inifile);
      expect(sys.hqprod.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hqprod.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hqprod.inifile = defalut;
      print(sys.hqprod.inifile);
      expect(sys.hqprod.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hqprod.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00871_element_check_00848 **********\n\n");
    });

    test('00872_element_check_00849', () async {
      print("\n********** テスト実行：00872_element_check_00849 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.signp.entry;
      print(sys.signp.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.signp.entry = testData1s;
      print(sys.signp.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.signp.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.signp.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.signp.entry = testData2s;
      print(sys.signp.entry);
      expect(sys.signp.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.signp.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.signp.entry = defalut;
      print(sys.signp.entry);
      expect(sys.signp.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.signp.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00872_element_check_00849 **********\n\n");
    });

    test('00873_element_check_00850', () async {
      print("\n********** テスト実行：00873_element_check_00850 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.signp.priority;
      print(sys.signp.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.signp.priority = testData1;
      print(sys.signp.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.signp.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.signp.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.signp.priority = testData2;
      print(sys.signp.priority);
      expect(sys.signp.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.signp.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.signp.priority = defalut;
      print(sys.signp.priority);
      expect(sys.signp.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.signp.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00873_element_check_00850 **********\n\n");
    });

    test('00874_element_check_00851', () async {
      print("\n********** テスト実行：00874_element_check_00851 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.signp.inifile;
      print(sys.signp.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.signp.inifile = testData1s;
      print(sys.signp.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.signp.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.signp.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.signp.inifile = testData2s;
      print(sys.signp.inifile);
      expect(sys.signp.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.signp.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.signp.inifile = defalut;
      print(sys.signp.inifile);
      expect(sys.signp.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.signp.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00874_element_check_00851 **********\n\n");
    });

    test('00875_element_check_00852', () async {
      print("\n********** テスト実行：00875_element_check_00852 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.detect.entry;
      print(sys.detect.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.detect.entry = testData1s;
      print(sys.detect.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.detect.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.detect.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.detect.entry = testData2s;
      print(sys.detect.entry);
      expect(sys.detect.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.detect.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.detect.entry = defalut;
      print(sys.detect.entry);
      expect(sys.detect.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.detect.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00875_element_check_00852 **********\n\n");
    });

    test('00876_element_check_00853', () async {
      print("\n********** テスト実行：00876_element_check_00853 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.detect.priority;
      print(sys.detect.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.detect.priority = testData1;
      print(sys.detect.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.detect.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.detect.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.detect.priority = testData2;
      print(sys.detect.priority);
      expect(sys.detect.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.detect.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.detect.priority = defalut;
      print(sys.detect.priority);
      expect(sys.detect.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.detect.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00876_element_check_00853 **********\n\n");
    });

    test('00877_element_check_00854', () async {
      print("\n********** テスト実行：00877_element_check_00854 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.detect.inifile;
      print(sys.detect.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.detect.inifile = testData1s;
      print(sys.detect.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.detect.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.detect.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.detect.inifile = testData2s;
      print(sys.detect.inifile);
      expect(sys.detect.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.detect.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.detect.inifile = defalut;
      print(sys.detect.inifile);
      expect(sys.detect.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.detect.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00877_element_check_00854 **********\n\n");
    });

    test('00878_element_check_00855', () async {
      print("\n********** テスト実行：00878_element_check_00855 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.callsw.entry;
      print(sys.callsw.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.callsw.entry = testData1s;
      print(sys.callsw.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.callsw.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.callsw.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.callsw.entry = testData2s;
      print(sys.callsw.entry);
      expect(sys.callsw.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.callsw.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.callsw.entry = defalut;
      print(sys.callsw.entry);
      expect(sys.callsw.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.callsw.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00878_element_check_00855 **********\n\n");
    });

    test('00879_element_check_00856', () async {
      print("\n********** テスト実行：00879_element_check_00856 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.callsw.priority;
      print(sys.callsw.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.callsw.priority = testData1;
      print(sys.callsw.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.callsw.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.callsw.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.callsw.priority = testData2;
      print(sys.callsw.priority);
      expect(sys.callsw.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.callsw.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.callsw.priority = defalut;
      print(sys.callsw.priority);
      expect(sys.callsw.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.callsw.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00879_element_check_00856 **********\n\n");
    });

    test('00880_element_check_00857', () async {
      print("\n********** テスト実行：00880_element_check_00857 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.callsw.inifile;
      print(sys.callsw.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.callsw.inifile = testData1s;
      print(sys.callsw.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.callsw.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.callsw.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.callsw.inifile = testData2s;
      print(sys.callsw.inifile);
      expect(sys.callsw.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.callsw.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.callsw.inifile = defalut;
      print(sys.callsw.inifile);
      expect(sys.callsw.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.callsw.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00880_element_check_00857 **********\n\n");
    });

    test('00881_element_check_00858', () async {
      print("\n********** テスト実行：00881_element_check_00858 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu3.entry;
      print(sys.subcpu3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu3.entry = testData1s;
      print(sys.subcpu3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu3.entry = testData2s;
      print(sys.subcpu3.entry);
      expect(sys.subcpu3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu3.entry = defalut;
      print(sys.subcpu3.entry);
      expect(sys.subcpu3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00881_element_check_00858 **********\n\n");
    });

    test('00882_element_check_00859', () async {
      print("\n********** テスト実行：00882_element_check_00859 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu3.priority;
      print(sys.subcpu3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu3.priority = testData1;
      print(sys.subcpu3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu3.priority = testData2;
      print(sys.subcpu3.priority);
      expect(sys.subcpu3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu3.priority = defalut;
      print(sys.subcpu3.priority);
      expect(sys.subcpu3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00882_element_check_00859 **********\n\n");
    });

    test('00883_element_check_00860', () async {
      print("\n********** テスト実行：00883_element_check_00860 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.subcpu3.inifile;
      print(sys.subcpu3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.subcpu3.inifile = testData1s;
      print(sys.subcpu3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.subcpu3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.subcpu3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.subcpu3.inifile = testData2s;
      print(sys.subcpu3.inifile);
      expect(sys.subcpu3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.subcpu3.inifile = defalut;
      print(sys.subcpu3.inifile);
      expect(sys.subcpu3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.subcpu3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00883_element_check_00860 **********\n\n");
    });

    test('00884_element_check_00861', () async {
      print("\n********** テスト実行：00884_element_check_00861 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk3.entry;
      print(sys.spk3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk3.entry = testData1s;
      print(sys.spk3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk3.entry = testData2s;
      print(sys.spk3.entry);
      expect(sys.spk3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.spk3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk3.entry = defalut;
      print(sys.spk3.entry);
      expect(sys.spk3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00884_element_check_00861 **********\n\n");
    });

    test('00885_element_check_00862', () async {
      print("\n********** テスト実行：00885_element_check_00862 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk3.priority;
      print(sys.spk3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk3.priority = testData1;
      print(sys.spk3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk3.priority = testData2;
      print(sys.spk3.priority);
      expect(sys.spk3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.spk3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk3.priority = defalut;
      print(sys.spk3.priority);
      expect(sys.spk3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00885_element_check_00862 **********\n\n");
    });

    test('00886_element_check_00863', () async {
      print("\n********** テスト実行：00886_element_check_00863 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.spk3.inifile;
      print(sys.spk3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.spk3.inifile = testData1s;
      print(sys.spk3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.spk3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.spk3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.spk3.inifile = testData2s;
      print(sys.spk3.inifile);
      expect(sys.spk3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.spk3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.spk3.inifile = defalut;
      print(sys.spk3.inifile);
      expect(sys.spk3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.spk3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00886_element_check_00863 **********\n\n");
    });

    test('00887_element_check_00864', () async {
      print("\n********** テスト実行：00887_element_check_00864 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey3d.entry;
      print(sys.tkey3d.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey3d.entry = testData1s;
      print(sys.tkey3d.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey3d.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey3d.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey3d.entry = testData2s;
      print(sys.tkey3d.entry);
      expect(sys.tkey3d.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey3d.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey3d.entry = defalut;
      print(sys.tkey3d.entry);
      expect(sys.tkey3d.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey3d.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00887_element_check_00864 **********\n\n");
    });

    test('00888_element_check_00865', () async {
      print("\n********** テスト実行：00888_element_check_00865 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey3d.priority;
      print(sys.tkey3d.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey3d.priority = testData1;
      print(sys.tkey3d.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey3d.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey3d.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey3d.priority = testData2;
      print(sys.tkey3d.priority);
      expect(sys.tkey3d.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey3d.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey3d.priority = defalut;
      print(sys.tkey3d.priority);
      expect(sys.tkey3d.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey3d.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00888_element_check_00865 **********\n\n");
    });

    test('00889_element_check_00866', () async {
      print("\n********** テスト実行：00889_element_check_00866 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tkey3d.inifile;
      print(sys.tkey3d.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tkey3d.inifile = testData1s;
      print(sys.tkey3d.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tkey3d.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tkey3d.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tkey3d.inifile = testData2s;
      print(sys.tkey3d.inifile);
      expect(sys.tkey3d.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey3d.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tkey3d.inifile = defalut;
      print(sys.tkey3d.inifile);
      expect(sys.tkey3d.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tkey3d.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00889_element_check_00866 **********\n\n");
    });

    test('00890_element_check_00867', () async {
      print("\n********** テスト実行：00890_element_check_00867 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.seg1.entry;
      print(sys.seg1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.seg1.entry = testData1s;
      print(sys.seg1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.seg1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.seg1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.seg1.entry = testData2s;
      print(sys.seg1.entry);
      expect(sys.seg1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.seg1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.seg1.entry = defalut;
      print(sys.seg1.entry);
      expect(sys.seg1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.seg1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00890_element_check_00867 **********\n\n");
    });

    test('00891_element_check_00868', () async {
      print("\n********** テスト実行：00891_element_check_00868 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.seg1.priority;
      print(sys.seg1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.seg1.priority = testData1;
      print(sys.seg1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.seg1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.seg1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.seg1.priority = testData2;
      print(sys.seg1.priority);
      expect(sys.seg1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.seg1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.seg1.priority = defalut;
      print(sys.seg1.priority);
      expect(sys.seg1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.seg1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00891_element_check_00868 **********\n\n");
    });

    test('00892_element_check_00869', () async {
      print("\n********** テスト実行：00892_element_check_00869 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.seg1.inifile;
      print(sys.seg1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.seg1.inifile = testData1s;
      print(sys.seg1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.seg1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.seg1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.seg1.inifile = testData2s;
      print(sys.seg1.inifile);
      expect(sys.seg1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.seg1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.seg1.inifile = defalut;
      print(sys.seg1.inifile);
      expect(sys.seg1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.seg1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00892_element_check_00869 **********\n\n");
    });

    test('00893_element_check_00870', () async {
      print("\n********** テスト実行：00893_element_check_00870 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.seg2.entry;
      print(sys.seg2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.seg2.entry = testData1s;
      print(sys.seg2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.seg2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.seg2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.seg2.entry = testData2s;
      print(sys.seg2.entry);
      expect(sys.seg2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.seg2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.seg2.entry = defalut;
      print(sys.seg2.entry);
      expect(sys.seg2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.seg2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00893_element_check_00870 **********\n\n");
    });

    test('00894_element_check_00871', () async {
      print("\n********** テスト実行：00894_element_check_00871 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.seg2.priority;
      print(sys.seg2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.seg2.priority = testData1;
      print(sys.seg2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.seg2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.seg2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.seg2.priority = testData2;
      print(sys.seg2.priority);
      expect(sys.seg2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.seg2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.seg2.priority = defalut;
      print(sys.seg2.priority);
      expect(sys.seg2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.seg2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00894_element_check_00871 **********\n\n");
    });

    test('00895_element_check_00872', () async {
      print("\n********** テスト実行：00895_element_check_00872 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.seg2.inifile;
      print(sys.seg2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.seg2.inifile = testData1s;
      print(sys.seg2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.seg2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.seg2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.seg2.inifile = testData2s;
      print(sys.seg2.inifile);
      expect(sys.seg2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.seg2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.seg2.inifile = defalut;
      print(sys.seg2.inifile);
      expect(sys.seg2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.seg2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00895_element_check_00872 **********\n\n");
    });

    test('00896_element_check_00873', () async {
      print("\n********** テスト実行：00896_element_check_00873 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand3.entry;
      print(sys.wand3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand3.entry = testData1s;
      print(sys.wand3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand3.entry = testData2s;
      print(sys.wand3.entry);
      expect(sys.wand3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.wand3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand3.entry = defalut;
      print(sys.wand3.entry);
      expect(sys.wand3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00896_element_check_00873 **********\n\n");
    });

    test('00897_element_check_00874', () async {
      print("\n********** テスト実行：00897_element_check_00874 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand3.priority;
      print(sys.wand3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand3.priority = testData1;
      print(sys.wand3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand3.priority = testData2;
      print(sys.wand3.priority);
      expect(sys.wand3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.wand3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand3.priority = defalut;
      print(sys.wand3.priority);
      expect(sys.wand3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00897_element_check_00874 **********\n\n");
    });

    test('00898_element_check_00875', () async {
      print("\n********** テスト実行：00898_element_check_00875 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.wand3.inifile;
      print(sys.wand3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.wand3.inifile = testData1s;
      print(sys.wand3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.wand3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.wand3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.wand3.inifile = testData2s;
      print(sys.wand3.inifile);
      expect(sys.wand3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.wand3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.wand3.inifile = defalut;
      print(sys.wand3.inifile);
      expect(sys.wand3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.wand3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00898_element_check_00875 **********\n\n");
    });

    test('00899_element_check_00876', () async {
      print("\n********** テスト実行：00899_element_check_00876 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt3.entry;
      print(sys.lcdbrt3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt3.entry = testData1s;
      print(sys.lcdbrt3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt3.entry = testData2s;
      print(sys.lcdbrt3.entry);
      expect(sys.lcdbrt3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt3.entry = defalut;
      print(sys.lcdbrt3.entry);
      expect(sys.lcdbrt3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00899_element_check_00876 **********\n\n");
    });

    test('00900_element_check_00877', () async {
      print("\n********** テスト実行：00900_element_check_00877 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt3.priority;
      print(sys.lcdbrt3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt3.priority = testData1;
      print(sys.lcdbrt3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt3.priority = testData2;
      print(sys.lcdbrt3.priority);
      expect(sys.lcdbrt3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt3.priority = defalut;
      print(sys.lcdbrt3.priority);
      expect(sys.lcdbrt3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00900_element_check_00877 **********\n\n");
    });

    test('00901_element_check_00878', () async {
      print("\n********** テスト実行：00901_element_check_00878 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.lcdbrt3.inifile;
      print(sys.lcdbrt3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.lcdbrt3.inifile = testData1s;
      print(sys.lcdbrt3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.lcdbrt3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.lcdbrt3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.lcdbrt3.inifile = testData2s;
      print(sys.lcdbrt3.inifile);
      expect(sys.lcdbrt3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.lcdbrt3.inifile = defalut;
      print(sys.lcdbrt3.inifile);
      expect(sys.lcdbrt3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.lcdbrt3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00901_element_check_00878 **********\n\n");
    });

    test('00902_element_check_00879', () async {
      print("\n********** テスト実行：00902_element_check_00879 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey3.entry;
      print(sys.mkey3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey3.entry = testData1s;
      print(sys.mkey3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey3.entry = testData2s;
      print(sys.mkey3.entry);
      expect(sys.mkey3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey3.entry = defalut;
      print(sys.mkey3.entry);
      expect(sys.mkey3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00902_element_check_00879 **********\n\n");
    });

    test('00903_element_check_00880', () async {
      print("\n********** テスト実行：00903_element_check_00880 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey3.priority;
      print(sys.mkey3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey3.priority = testData1;
      print(sys.mkey3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey3.priority = testData2;
      print(sys.mkey3.priority);
      expect(sys.mkey3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey3.priority = defalut;
      print(sys.mkey3.priority);
      expect(sys.mkey3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00903_element_check_00880 **********\n\n");
    });

    test('00904_element_check_00881', () async {
      print("\n********** テスト実行：00904_element_check_00881 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey3.inifile;
      print(sys.mkey3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey3.inifile = testData1s;
      print(sys.mkey3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey3.inifile = testData2s;
      print(sys.mkey3.inifile);
      expect(sys.mkey3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey3.inifile = defalut;
      print(sys.mkey3.inifile);
      expect(sys.mkey3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00904_element_check_00881 **********\n\n");
    });

    test('00905_element_check_00882', () async {
      print("\n********** テスト実行：00905_element_check_00882 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr31.entry;
      print(sys.msr31.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr31.entry = testData1s;
      print(sys.msr31.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr31.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr31.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr31.entry = testData2s;
      print(sys.msr31.entry);
      expect(sys.msr31.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr31.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr31.entry = defalut;
      print(sys.msr31.entry);
      expect(sys.msr31.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr31.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00905_element_check_00882 **********\n\n");
    });

    test('00906_element_check_00883', () async {
      print("\n********** テスト実行：00906_element_check_00883 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr31.priority;
      print(sys.msr31.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr31.priority = testData1;
      print(sys.msr31.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr31.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr31.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr31.priority = testData2;
      print(sys.msr31.priority);
      expect(sys.msr31.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr31.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr31.priority = defalut;
      print(sys.msr31.priority);
      expect(sys.msr31.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr31.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00906_element_check_00883 **********\n\n");
    });

    test('00907_element_check_00884', () async {
      print("\n********** テスト実行：00907_element_check_00884 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr31.inifile;
      print(sys.msr31.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr31.inifile = testData1s;
      print(sys.msr31.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr31.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr31.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr31.inifile = testData2s;
      print(sys.msr31.inifile);
      expect(sys.msr31.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr31.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr31.inifile = defalut;
      print(sys.msr31.inifile);
      expect(sys.msr31.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr31.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00907_element_check_00884 **********\n\n");
    });

    test('00908_element_check_00885', () async {
      print("\n********** テスト実行：00908_element_check_00885 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr32.entry;
      print(sys.msr32.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr32.entry = testData1s;
      print(sys.msr32.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr32.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr32.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr32.entry = testData2s;
      print(sys.msr32.entry);
      expect(sys.msr32.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr32.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr32.entry = defalut;
      print(sys.msr32.entry);
      expect(sys.msr32.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr32.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00908_element_check_00885 **********\n\n");
    });

    test('00909_element_check_00886', () async {
      print("\n********** テスト実行：00909_element_check_00886 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr32.priority;
      print(sys.msr32.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr32.priority = testData1;
      print(sys.msr32.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr32.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr32.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr32.priority = testData2;
      print(sys.msr32.priority);
      expect(sys.msr32.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr32.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr32.priority = defalut;
      print(sys.msr32.priority);
      expect(sys.msr32.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr32.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00909_element_check_00886 **********\n\n");
    });

    test('00910_element_check_00887', () async {
      print("\n********** テスト実行：00910_element_check_00887 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr32.inifile;
      print(sys.msr32.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr32.inifile = testData1s;
      print(sys.msr32.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr32.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr32.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr32.inifile = testData2s;
      print(sys.msr32.inifile);
      expect(sys.msr32.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr32.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr32.inifile = defalut;
      print(sys.msr32.inifile);
      expect(sys.msr32.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr32.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00910_element_check_00887 **********\n\n");
    });

    test('00911_element_check_00888', () async {
      print("\n********** テスト実行：00911_element_check_00888 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse3.entry;
      print(sys.pmouse3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse3.entry = testData1s;
      print(sys.pmouse3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse3.entry = testData2s;
      print(sys.pmouse3.entry);
      expect(sys.pmouse3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse3.entry = defalut;
      print(sys.pmouse3.entry);
      expect(sys.pmouse3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00911_element_check_00888 **********\n\n");
    });

    test('00912_element_check_00889', () async {
      print("\n********** テスト実行：00912_element_check_00889 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse3.priority;
      print(sys.pmouse3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse3.priority = testData1;
      print(sys.pmouse3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse3.priority = testData2;
      print(sys.pmouse3.priority);
      expect(sys.pmouse3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse3.priority = defalut;
      print(sys.pmouse3.priority);
      expect(sys.pmouse3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00912_element_check_00889 **********\n\n");
    });

    test('00913_element_check_00890', () async {
      print("\n********** テスト実行：00913_element_check_00890 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse3.inifile;
      print(sys.pmouse3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse3.inifile = testData1s;
      print(sys.pmouse3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse3.inifile = testData2s;
      print(sys.pmouse3.inifile);
      expect(sys.pmouse3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse3.inifile = defalut;
      print(sys.pmouse3.inifile);
      expect(sys.pmouse3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00913_element_check_00890 **********\n\n");
    });

    test('00914_element_check_00891', () async {
      print("\n********** テスト実行：00914_element_check_00891 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.schctrl.entry;
      print(sys.schctrl.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.schctrl.entry = testData1s;
      print(sys.schctrl.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.schctrl.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.schctrl.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.schctrl.entry = testData2s;
      print(sys.schctrl.entry);
      expect(sys.schctrl.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.schctrl.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.schctrl.entry = defalut;
      print(sys.schctrl.entry);
      expect(sys.schctrl.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.schctrl.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00914_element_check_00891 **********\n\n");
    });

    test('00915_element_check_00892', () async {
      print("\n********** テスト実行：00915_element_check_00892 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.schctrl.priority;
      print(sys.schctrl.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.schctrl.priority = testData1;
      print(sys.schctrl.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.schctrl.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.schctrl.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.schctrl.priority = testData2;
      print(sys.schctrl.priority);
      expect(sys.schctrl.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.schctrl.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.schctrl.priority = defalut;
      print(sys.schctrl.priority);
      expect(sys.schctrl.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.schctrl.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00915_element_check_00892 **********\n\n");
    });

    test('00916_element_check_00893', () async {
      print("\n********** テスト実行：00916_element_check_00893 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.schctrl.inifile;
      print(sys.schctrl.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.schctrl.inifile = testData1s;
      print(sys.schctrl.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.schctrl.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.schctrl.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.schctrl.inifile = testData2s;
      print(sys.schctrl.inifile);
      expect(sys.schctrl.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.schctrl.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.schctrl.inifile = defalut;
      print(sys.schctrl.inifile);
      expect(sys.schctrl.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.schctrl.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00916_element_check_00893 **********\n\n");
    });

    test('00917_element_check_00894', () async {
      print("\n********** テスト実行：00917_element_check_00894 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip3.entry;
      print(sys.fip3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip3.entry = testData1s;
      print(sys.fip3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip3.entry = testData2s;
      print(sys.fip3.entry);
      expect(sys.fip3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip3.entry = defalut;
      print(sys.fip3.entry);
      expect(sys.fip3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00917_element_check_00894 **********\n\n");
    });

    test('00918_element_check_00895', () async {
      print("\n********** テスト実行：00918_element_check_00895 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip3.priority;
      print(sys.fip3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip3.priority = testData1;
      print(sys.fip3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip3.priority = testData2;
      print(sys.fip3.priority);
      expect(sys.fip3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip3.priority = defalut;
      print(sys.fip3.priority);
      expect(sys.fip3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00918_element_check_00895 **********\n\n");
    });

    test('00919_element_check_00896', () async {
      print("\n********** テスト実行：00919_element_check_00896 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip3.inifile;
      print(sys.fip3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip3.inifile = testData1s;
      print(sys.fip3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip3.inifile = testData2s;
      print(sys.fip3.inifile);
      expect(sys.fip3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip3.inifile = defalut;
      print(sys.fip3.inifile);
      expect(sys.fip3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00919_element_check_00896 **********\n\n");
    });

    test('00920_element_check_00897', () async {
      print("\n********** テスト実行：00920_element_check_00897 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_3.entry;
      print(sys.vfd57_3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_3.entry = testData1s;
      print(sys.vfd57_3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_3.entry = testData2s;
      print(sys.vfd57_3.entry);
      expect(sys.vfd57_3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_3.entry = defalut;
      print(sys.vfd57_3.entry);
      expect(sys.vfd57_3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00920_element_check_00897 **********\n\n");
    });

    test('00921_element_check_00898', () async {
      print("\n********** テスト実行：00921_element_check_00898 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_3.priority;
      print(sys.vfd57_3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_3.priority = testData1;
      print(sys.vfd57_3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_3.priority = testData2;
      print(sys.vfd57_3.priority);
      expect(sys.vfd57_3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_3.priority = defalut;
      print(sys.vfd57_3.priority);
      expect(sys.vfd57_3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00921_element_check_00898 **********\n\n");
    });

    test('00922_element_check_00899', () async {
      print("\n********** テスト実行：00922_element_check_00899 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_3.inifile;
      print(sys.vfd57_3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_3.inifile = testData1s;
      print(sys.vfd57_3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_3.inifile = testData2s;
      print(sys.vfd57_3.inifile);
      expect(sys.vfd57_3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_3.inifile = defalut;
      print(sys.vfd57_3.inifile);
      expect(sys.vfd57_3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00922_element_check_00899 **********\n\n");
    });

    test('00923_element_check_00900', () async {
      print("\n********** テスト実行：00923_element_check_00900 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtf.entry;
      print(sys.tprtf.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtf.entry = testData1s;
      print(sys.tprtf.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtf.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtf.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtf.entry = testData2s;
      print(sys.tprtf.entry);
      expect(sys.tprtf.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtf.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtf.entry = defalut;
      print(sys.tprtf.entry);
      expect(sys.tprtf.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtf.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00923_element_check_00900 **********\n\n");
    });

    test('00924_element_check_00901', () async {
      print("\n********** テスト実行：00924_element_check_00901 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtf.priority;
      print(sys.tprtf.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtf.priority = testData1;
      print(sys.tprtf.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtf.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtf.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtf.priority = testData2;
      print(sys.tprtf.priority);
      expect(sys.tprtf.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtf.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtf.priority = defalut;
      print(sys.tprtf.priority);
      expect(sys.tprtf.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtf.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00924_element_check_00901 **********\n\n");
    });

    test('00925_element_check_00902', () async {
      print("\n********** テスト実行：00925_element_check_00902 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtf.inifile;
      print(sys.tprtf.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtf.inifile = testData1s;
      print(sys.tprtf.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtf.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtf.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtf.inifile = testData2s;
      print(sys.tprtf.inifile);
      expect(sys.tprtf.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtf.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtf.inifile = defalut;
      print(sys.tprtf.inifile);
      expect(sys.tprtf.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtf.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00925_element_check_00902 **********\n\n");
    });

    test('00926_element_check_00903', () async {
      print("\n********** テスト実行：00926_element_check_00903 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprts.entry;
      print(sys.tprts.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprts.entry = testData1s;
      print(sys.tprts.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprts.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprts.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprts.entry = testData2s;
      print(sys.tprts.entry);
      expect(sys.tprts.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprts.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprts.entry = defalut;
      print(sys.tprts.entry);
      expect(sys.tprts.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprts.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00926_element_check_00903 **********\n\n");
    });

    test('00927_element_check_00904', () async {
      print("\n********** テスト実行：00927_element_check_00904 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprts.priority;
      print(sys.tprts.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprts.priority = testData1;
      print(sys.tprts.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprts.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprts.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprts.priority = testData2;
      print(sys.tprts.priority);
      expect(sys.tprts.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprts.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprts.priority = defalut;
      print(sys.tprts.priority);
      expect(sys.tprts.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprts.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00927_element_check_00904 **********\n\n");
    });

    test('00928_element_check_00905', () async {
      print("\n********** テスト実行：00928_element_check_00905 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprts.inifile;
      print(sys.tprts.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprts.inifile = testData1s;
      print(sys.tprts.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprts.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprts.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprts.inifile = testData2s;
      print(sys.tprts.inifile);
      expect(sys.tprts.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprts.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprts.inifile = defalut;
      print(sys.tprts.inifile);
      expect(sys.tprts.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprts.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00928_element_check_00905 **********\n\n");
    });

    test('00929_element_check_00906', () async {
      print("\n********** テスト実行：00929_element_check_00906 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus_1.entry;
      print(sys.pmouse_plus_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus_1.entry = testData1s;
      print(sys.pmouse_plus_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus_1.entry = testData2s;
      print(sys.pmouse_plus_1.entry);
      expect(sys.pmouse_plus_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus_1.entry = defalut;
      print(sys.pmouse_plus_1.entry);
      expect(sys.pmouse_plus_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00929_element_check_00906 **********\n\n");
    });

    test('00930_element_check_00907', () async {
      print("\n********** テスト実行：00930_element_check_00907 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus_1.priority;
      print(sys.pmouse_plus_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus_1.priority = testData1;
      print(sys.pmouse_plus_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus_1.priority = testData2;
      print(sys.pmouse_plus_1.priority);
      expect(sys.pmouse_plus_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus_1.priority = defalut;
      print(sys.pmouse_plus_1.priority);
      expect(sys.pmouse_plus_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00930_element_check_00907 **********\n\n");
    });

    test('00931_element_check_00908', () async {
      print("\n********** テスト実行：00931_element_check_00908 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus_1.inifile;
      print(sys.pmouse_plus_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus_1.inifile = testData1s;
      print(sys.pmouse_plus_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus_1.inifile = testData2s;
      print(sys.pmouse_plus_1.inifile);
      expect(sys.pmouse_plus_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus_1.inifile = defalut;
      print(sys.pmouse_plus_1.inifile);
      expect(sys.pmouse_plus_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00931_element_check_00908 **********\n\n");
    });

    test('00932_element_check_00909', () async {
      print("\n********** テスト実行：00932_element_check_00909 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus_1.tower;
      print(sys.pmouse_plus_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus_1.tower = testData1;
      print(sys.pmouse_plus_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus_1.tower = testData2;
      print(sys.pmouse_plus_1.tower);
      expect(sys.pmouse_plus_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus_1.tower = defalut;
      print(sys.pmouse_plus_1.tower);
      expect(sys.pmouse_plus_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00932_element_check_00909 **********\n\n");
    });

    test('00933_element_check_00910', () async {
      print("\n********** テスト実行：00933_element_check_00910 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_1.entry;
      print(sys.pmouse_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_1.entry = testData1s;
      print(sys.pmouse_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_1.entry = testData2s;
      print(sys.pmouse_2300_1.entry);
      expect(sys.pmouse_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_1.entry = defalut;
      print(sys.pmouse_2300_1.entry);
      expect(sys.pmouse_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00933_element_check_00910 **********\n\n");
    });

    test('00934_element_check_00911', () async {
      print("\n********** テスト実行：00934_element_check_00911 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_1.priority;
      print(sys.pmouse_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_1.priority = testData1;
      print(sys.pmouse_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_1.priority = testData2;
      print(sys.pmouse_2300_1.priority);
      expect(sys.pmouse_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_1.priority = defalut;
      print(sys.pmouse_2300_1.priority);
      expect(sys.pmouse_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00934_element_check_00911 **********\n\n");
    });

    test('00935_element_check_00912', () async {
      print("\n********** テスト実行：00935_element_check_00912 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_1.inifile;
      print(sys.pmouse_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_1.inifile = testData1s;
      print(sys.pmouse_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_1.inifile = testData2s;
      print(sys.pmouse_2300_1.inifile);
      expect(sys.pmouse_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_1.inifile = defalut;
      print(sys.pmouse_2300_1.inifile);
      expect(sys.pmouse_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00935_element_check_00912 **********\n\n");
    });

    test('00936_element_check_00913', () async {
      print("\n********** テスト実行：00936_element_check_00913 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_1.tower;
      print(sys.pmouse_2300_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_1.tower = testData1;
      print(sys.pmouse_2300_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_1.tower = testData2;
      print(sys.pmouse_2300_1.tower);
      expect(sys.pmouse_2300_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_1.tower = defalut;
      print(sys.pmouse_2300_1.tower);
      expect(sys.pmouse_2300_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00936_element_check_00913 **********\n\n");
    });

    test('00937_element_check_00914', () async {
      print("\n********** テスト実行：00937_element_check_00914 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_2.entry;
      print(sys.pmouse_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_2.entry = testData1s;
      print(sys.pmouse_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_2.entry = testData2s;
      print(sys.pmouse_2300_2.entry);
      expect(sys.pmouse_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_2.entry = defalut;
      print(sys.pmouse_2300_2.entry);
      expect(sys.pmouse_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00937_element_check_00914 **********\n\n");
    });

    test('00938_element_check_00915', () async {
      print("\n********** テスト実行：00938_element_check_00915 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_2.priority;
      print(sys.pmouse_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_2.priority = testData1;
      print(sys.pmouse_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_2.priority = testData2;
      print(sys.pmouse_2300_2.priority);
      expect(sys.pmouse_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_2.priority = defalut;
      print(sys.pmouse_2300_2.priority);
      expect(sys.pmouse_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00938_element_check_00915 **********\n\n");
    });

    test('00939_element_check_00916', () async {
      print("\n********** テスト実行：00939_element_check_00916 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_2.inifile;
      print(sys.pmouse_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_2.inifile = testData1s;
      print(sys.pmouse_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_2.inifile = testData2s;
      print(sys.pmouse_2300_2.inifile);
      expect(sys.pmouse_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_2.inifile = defalut;
      print(sys.pmouse_2300_2.inifile);
      expect(sys.pmouse_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00939_element_check_00916 **********\n\n");
    });

    test('00940_element_check_00917', () async {
      print("\n********** テスト実行：00940_element_check_00917 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2300_2.tower;
      print(sys.pmouse_2300_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2300_2.tower = testData1;
      print(sys.pmouse_2300_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2300_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2300_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2300_2.tower = testData2;
      print(sys.pmouse_2300_2.tower);
      expect(sys.pmouse_2300_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2300_2.tower = defalut;
      print(sys.pmouse_2300_2.tower);
      expect(sys.pmouse_2300_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2300_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00940_element_check_00917 **********\n\n");
    });

    test('00941_element_check_00918', () async {
      print("\n********** テスト実行：00941_element_check_00918 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus_1.entry;
      print(sys.fip_plus_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus_1.entry = testData1s;
      print(sys.fip_plus_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus_1.entry = testData2s;
      print(sys.fip_plus_1.entry);
      expect(sys.fip_plus_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus_1.entry = defalut;
      print(sys.fip_plus_1.entry);
      expect(sys.fip_plus_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00941_element_check_00918 **********\n\n");
    });

    test('00942_element_check_00919', () async {
      print("\n********** テスト実行：00942_element_check_00919 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus_1.priority;
      print(sys.fip_plus_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus_1.priority = testData1;
      print(sys.fip_plus_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus_1.priority = testData2;
      print(sys.fip_plus_1.priority);
      expect(sys.fip_plus_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus_1.priority = defalut;
      print(sys.fip_plus_1.priority);
      expect(sys.fip_plus_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00942_element_check_00919 **********\n\n");
    });

    test('00943_element_check_00920', () async {
      print("\n********** テスト実行：00943_element_check_00920 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus_1.inifile;
      print(sys.fip_plus_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus_1.inifile = testData1s;
      print(sys.fip_plus_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus_1.inifile = testData2s;
      print(sys.fip_plus_1.inifile);
      expect(sys.fip_plus_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus_1.inifile = defalut;
      print(sys.fip_plus_1.inifile);
      expect(sys.fip_plus_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00943_element_check_00920 **********\n\n");
    });

    test('00944_element_check_00921', () async {
      print("\n********** テスト実行：00944_element_check_00921 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus_1.tower;
      print(sys.fip_plus_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus_1.tower = testData1;
      print(sys.fip_plus_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus_1.tower = testData2;
      print(sys.fip_plus_1.tower);
      expect(sys.fip_plus_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus_1.tower = defalut;
      print(sys.fip_plus_1.tower);
      expect(sys.fip_plus_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00944_element_check_00921 **********\n\n");
    });

    test('00945_element_check_00922', () async {
      print("\n********** テスト実行：00945_element_check_00922 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_1.entry;
      print(sys.fip_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_1.entry = testData1s;
      print(sys.fip_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_1.entry = testData2s;
      print(sys.fip_2300_1.entry);
      expect(sys.fip_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_1.entry = defalut;
      print(sys.fip_2300_1.entry);
      expect(sys.fip_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00945_element_check_00922 **********\n\n");
    });

    test('00946_element_check_00923', () async {
      print("\n********** テスト実行：00946_element_check_00923 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_1.priority;
      print(sys.fip_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_1.priority = testData1;
      print(sys.fip_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_1.priority = testData2;
      print(sys.fip_2300_1.priority);
      expect(sys.fip_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_1.priority = defalut;
      print(sys.fip_2300_1.priority);
      expect(sys.fip_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00946_element_check_00923 **********\n\n");
    });

    test('00947_element_check_00924', () async {
      print("\n********** テスト実行：00947_element_check_00924 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_1.inifile;
      print(sys.fip_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_1.inifile = testData1s;
      print(sys.fip_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_1.inifile = testData2s;
      print(sys.fip_2300_1.inifile);
      expect(sys.fip_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_1.inifile = defalut;
      print(sys.fip_2300_1.inifile);
      expect(sys.fip_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00947_element_check_00924 **********\n\n");
    });

    test('00948_element_check_00925', () async {
      print("\n********** テスト実行：00948_element_check_00925 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_1.tower;
      print(sys.fip_2300_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_1.tower = testData1;
      print(sys.fip_2300_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_1.tower = testData2;
      print(sys.fip_2300_1.tower);
      expect(sys.fip_2300_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_1.tower = defalut;
      print(sys.fip_2300_1.tower);
      expect(sys.fip_2300_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00948_element_check_00925 **********\n\n");
    });

    test('00949_element_check_00926', () async {
      print("\n********** テスト実行：00949_element_check_00926 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_2.entry;
      print(sys.fip_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_2.entry = testData1s;
      print(sys.fip_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_2.entry = testData2s;
      print(sys.fip_2300_2.entry);
      expect(sys.fip_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_2.entry = defalut;
      print(sys.fip_2300_2.entry);
      expect(sys.fip_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00949_element_check_00926 **********\n\n");
    });

    test('00950_element_check_00927', () async {
      print("\n********** テスト実行：00950_element_check_00927 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_2.priority;
      print(sys.fip_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_2.priority = testData1;
      print(sys.fip_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_2.priority = testData2;
      print(sys.fip_2300_2.priority);
      expect(sys.fip_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_2.priority = defalut;
      print(sys.fip_2300_2.priority);
      expect(sys.fip_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00950_element_check_00927 **********\n\n");
    });

    test('00951_element_check_00928', () async {
      print("\n********** テスト実行：00951_element_check_00928 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_2.inifile;
      print(sys.fip_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_2.inifile = testData1s;
      print(sys.fip_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_2.inifile = testData2s;
      print(sys.fip_2300_2.inifile);
      expect(sys.fip_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_2.inifile = defalut;
      print(sys.fip_2300_2.inifile);
      expect(sys.fip_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00951_element_check_00928 **********\n\n");
    });

    test('00952_element_check_00929', () async {
      print("\n********** テスト実行：00952_element_check_00929 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2300_2.tower;
      print(sys.fip_2300_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2300_2.tower = testData1;
      print(sys.fip_2300_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2300_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2300_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2300_2.tower = testData2;
      print(sys.fip_2300_2.tower);
      expect(sys.fip_2300_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2300_2.tower = defalut;
      print(sys.fip_2300_2.tower);
      expect(sys.fip_2300_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2300_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00952_element_check_00929 **********\n\n");
    });

    test('00953_element_check_00930', () async {
      print("\n********** テスト実行：00953_element_check_00930 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_plus_1.entry;
      print(sys.segd_plus_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_plus_1.entry = testData1s;
      print(sys.segd_plus_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_plus_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_plus_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_plus_1.entry = testData2s;
      print(sys.segd_plus_1.entry);
      expect(sys.segd_plus_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_plus_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_plus_1.entry = defalut;
      print(sys.segd_plus_1.entry);
      expect(sys.segd_plus_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_plus_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00953_element_check_00930 **********\n\n");
    });

    test('00954_element_check_00931', () async {
      print("\n********** テスト実行：00954_element_check_00931 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_plus_1.priority;
      print(sys.segd_plus_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_plus_1.priority = testData1;
      print(sys.segd_plus_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_plus_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_plus_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_plus_1.priority = testData2;
      print(sys.segd_plus_1.priority);
      expect(sys.segd_plus_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_plus_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_plus_1.priority = defalut;
      print(sys.segd_plus_1.priority);
      expect(sys.segd_plus_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_plus_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00954_element_check_00931 **********\n\n");
    });

    test('00955_element_check_00932', () async {
      print("\n********** テスト実行：00955_element_check_00932 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_plus_1.inifile;
      print(sys.segd_plus_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_plus_1.inifile = testData1s;
      print(sys.segd_plus_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_plus_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_plus_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_plus_1.inifile = testData2s;
      print(sys.segd_plus_1.inifile);
      expect(sys.segd_plus_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_plus_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_plus_1.inifile = defalut;
      print(sys.segd_plus_1.inifile);
      expect(sys.segd_plus_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_plus_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00955_element_check_00932 **********\n\n");
    });

    test('00956_element_check_00933', () async {
      print("\n********** テスト実行：00956_element_check_00933 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_2300_1.entry;
      print(sys.segd_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_2300_1.entry = testData1s;
      print(sys.segd_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_2300_1.entry = testData2s;
      print(sys.segd_2300_1.entry);
      expect(sys.segd_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_2300_1.entry = defalut;
      print(sys.segd_2300_1.entry);
      expect(sys.segd_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00956_element_check_00933 **********\n\n");
    });

    test('00957_element_check_00934', () async {
      print("\n********** テスト実行：00957_element_check_00934 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_2300_1.priority;
      print(sys.segd_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_2300_1.priority = testData1;
      print(sys.segd_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_2300_1.priority = testData2;
      print(sys.segd_2300_1.priority);
      expect(sys.segd_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_2300_1.priority = defalut;
      print(sys.segd_2300_1.priority);
      expect(sys.segd_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00957_element_check_00934 **********\n\n");
    });

    test('00958_element_check_00935', () async {
      print("\n********** テスト実行：00958_element_check_00935 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_2300_1.inifile;
      print(sys.segd_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_2300_1.inifile = testData1s;
      print(sys.segd_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_2300_1.inifile = testData2s;
      print(sys.segd_2300_1.inifile);
      expect(sys.segd_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_2300_1.inifile = defalut;
      print(sys.segd_2300_1.inifile);
      expect(sys.segd_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00958_element_check_00935 **********\n\n");
    });

    test('00959_element_check_00936', () async {
      print("\n********** テスト実行：00959_element_check_00936 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_2300_2.entry;
      print(sys.segd_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_2300_2.entry = testData1s;
      print(sys.segd_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_2300_2.entry = testData2s;
      print(sys.segd_2300_2.entry);
      expect(sys.segd_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_2300_2.entry = defalut;
      print(sys.segd_2300_2.entry);
      expect(sys.segd_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00959_element_check_00936 **********\n\n");
    });

    test('00960_element_check_00937', () async {
      print("\n********** テスト実行：00960_element_check_00937 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_2300_2.priority;
      print(sys.segd_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_2300_2.priority = testData1;
      print(sys.segd_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_2300_2.priority = testData2;
      print(sys.segd_2300_2.priority);
      expect(sys.segd_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_2300_2.priority = defalut;
      print(sys.segd_2300_2.priority);
      expect(sys.segd_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00960_element_check_00937 **********\n\n");
    });

    test('00961_element_check_00938', () async {
      print("\n********** テスト実行：00961_element_check_00938 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.segd_2300_2.inifile;
      print(sys.segd_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.segd_2300_2.inifile = testData1s;
      print(sys.segd_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.segd_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.segd_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.segd_2300_2.inifile = testData2s;
      print(sys.segd_2300_2.inifile);
      expect(sys.segd_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.segd_2300_2.inifile = defalut;
      print(sys.segd_2300_2.inifile);
      expect(sys.segd_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.segd_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00961_element_check_00938 **********\n\n");
    });

    test('00962_element_check_00939', () async {
      print("\n********** テスト実行：00962_element_check_00939 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_plus_1.entry;
      print(sys.vfd57_plus_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_plus_1.entry = testData1s;
      print(sys.vfd57_plus_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_plus_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_plus_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_plus_1.entry = testData2s;
      print(sys.vfd57_plus_1.entry);
      expect(sys.vfd57_plus_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_plus_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_plus_1.entry = defalut;
      print(sys.vfd57_plus_1.entry);
      expect(sys.vfd57_plus_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_plus_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00962_element_check_00939 **********\n\n");
    });

    test('00963_element_check_00940', () async {
      print("\n********** テスト実行：00963_element_check_00940 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_plus_1.priority;
      print(sys.vfd57_plus_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_plus_1.priority = testData1;
      print(sys.vfd57_plus_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_plus_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_plus_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_plus_1.priority = testData2;
      print(sys.vfd57_plus_1.priority);
      expect(sys.vfd57_plus_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_plus_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_plus_1.priority = defalut;
      print(sys.vfd57_plus_1.priority);
      expect(sys.vfd57_plus_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_plus_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00963_element_check_00940 **********\n\n");
    });

    test('00964_element_check_00941', () async {
      print("\n********** テスト実行：00964_element_check_00941 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_plus_1.inifile;
      print(sys.vfd57_plus_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_plus_1.inifile = testData1s;
      print(sys.vfd57_plus_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_plus_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_plus_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_plus_1.inifile = testData2s;
      print(sys.vfd57_plus_1.inifile);
      expect(sys.vfd57_plus_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_plus_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_plus_1.inifile = defalut;
      print(sys.vfd57_plus_1.inifile);
      expect(sys.vfd57_plus_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_plus_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00964_element_check_00941 **********\n\n");
    });

    test('00965_element_check_00942', () async {
      print("\n********** テスト実行：00965_element_check_00942 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_2300_1.entry;
      print(sys.vfd57_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_2300_1.entry = testData1s;
      print(sys.vfd57_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_2300_1.entry = testData2s;
      print(sys.vfd57_2300_1.entry);
      expect(sys.vfd57_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_2300_1.entry = defalut;
      print(sys.vfd57_2300_1.entry);
      expect(sys.vfd57_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00965_element_check_00942 **********\n\n");
    });

    test('00966_element_check_00943', () async {
      print("\n********** テスト実行：00966_element_check_00943 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_2300_1.priority;
      print(sys.vfd57_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_2300_1.priority = testData1;
      print(sys.vfd57_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_2300_1.priority = testData2;
      print(sys.vfd57_2300_1.priority);
      expect(sys.vfd57_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_2300_1.priority = defalut;
      print(sys.vfd57_2300_1.priority);
      expect(sys.vfd57_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00966_element_check_00943 **********\n\n");
    });

    test('00967_element_check_00944', () async {
      print("\n********** テスト実行：00967_element_check_00944 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_2300_1.inifile;
      print(sys.vfd57_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_2300_1.inifile = testData1s;
      print(sys.vfd57_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_2300_1.inifile = testData2s;
      print(sys.vfd57_2300_1.inifile);
      expect(sys.vfd57_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_2300_1.inifile = defalut;
      print(sys.vfd57_2300_1.inifile);
      expect(sys.vfd57_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00967_element_check_00944 **********\n\n");
    });

    test('00968_element_check_00945', () async {
      print("\n********** テスト実行：00968_element_check_00945 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_2300_2.entry;
      print(sys.vfd57_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_2300_2.entry = testData1s;
      print(sys.vfd57_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_2300_2.entry = testData2s;
      print(sys.vfd57_2300_2.entry);
      expect(sys.vfd57_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_2300_2.entry = defalut;
      print(sys.vfd57_2300_2.entry);
      expect(sys.vfd57_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00968_element_check_00945 **********\n\n");
    });

    test('00969_element_check_00946', () async {
      print("\n********** テスト実行：00969_element_check_00946 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_2300_2.priority;
      print(sys.vfd57_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_2300_2.priority = testData1;
      print(sys.vfd57_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_2300_2.priority = testData2;
      print(sys.vfd57_2300_2.priority);
      expect(sys.vfd57_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_2300_2.priority = defalut;
      print(sys.vfd57_2300_2.priority);
      expect(sys.vfd57_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00969_element_check_00946 **********\n\n");
    });

    test('00970_element_check_00947', () async {
      print("\n********** テスト実行：00970_element_check_00947 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vfd57_2300_2.inifile;
      print(sys.vfd57_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vfd57_2300_2.inifile = testData1s;
      print(sys.vfd57_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vfd57_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vfd57_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vfd57_2300_2.inifile = testData2s;
      print(sys.vfd57_2300_2.inifile);
      expect(sys.vfd57_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vfd57_2300_2.inifile = defalut;
      print(sys.vfd57_2300_2.inifile);
      expect(sys.vfd57_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vfd57_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00970_element_check_00947 **********\n\n");
    });

    test('00971_element_check_00948', () async {
      print("\n********** テスト実行：00971_element_check_00948 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_plus_1.entry;
      print(sys.mkey_plus_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_plus_1.entry = testData1s;
      print(sys.mkey_plus_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_plus_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_plus_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_plus_1.entry = testData2s;
      print(sys.mkey_plus_1.entry);
      expect(sys.mkey_plus_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_plus_1.entry = defalut;
      print(sys.mkey_plus_1.entry);
      expect(sys.mkey_plus_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00971_element_check_00948 **********\n\n");
    });

    test('00972_element_check_00949', () async {
      print("\n********** テスト実行：00972_element_check_00949 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_plus_1.priority;
      print(sys.mkey_plus_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_plus_1.priority = testData1;
      print(sys.mkey_plus_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_plus_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_plus_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_plus_1.priority = testData2;
      print(sys.mkey_plus_1.priority);
      expect(sys.mkey_plus_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_plus_1.priority = defalut;
      print(sys.mkey_plus_1.priority);
      expect(sys.mkey_plus_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00972_element_check_00949 **********\n\n");
    });

    test('00973_element_check_00950', () async {
      print("\n********** テスト実行：00973_element_check_00950 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_plus_1.inifile;
      print(sys.mkey_plus_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_plus_1.inifile = testData1s;
      print(sys.mkey_plus_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_plus_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_plus_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_plus_1.inifile = testData2s;
      print(sys.mkey_plus_1.inifile);
      expect(sys.mkey_plus_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_plus_1.inifile = defalut;
      print(sys.mkey_plus_1.inifile);
      expect(sys.mkey_plus_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00973_element_check_00950 **********\n\n");
    });

    test('00974_element_check_00951', () async {
      print("\n********** テスト実行：00974_element_check_00951 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_plus_1.tower;
      print(sys.mkey_plus_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_plus_1.tower = testData1;
      print(sys.mkey_plus_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_plus_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_plus_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_plus_1.tower = testData2;
      print(sys.mkey_plus_1.tower);
      expect(sys.mkey_plus_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_plus_1.tower = defalut;
      print(sys.mkey_plus_1.tower);
      expect(sys.mkey_plus_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_plus_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00974_element_check_00951 **********\n\n");
    });

    test('00975_element_check_00952', () async {
      print("\n********** テスト実行：00975_element_check_00952 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_1.entry;
      print(sys.mkey_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_1.entry = testData1s;
      print(sys.mkey_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_1.entry = testData2s;
      print(sys.mkey_2300_1.entry);
      expect(sys.mkey_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_1.entry = defalut;
      print(sys.mkey_2300_1.entry);
      expect(sys.mkey_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00975_element_check_00952 **********\n\n");
    });

    test('00976_element_check_00953', () async {
      print("\n********** テスト実行：00976_element_check_00953 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_1.priority;
      print(sys.mkey_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_1.priority = testData1;
      print(sys.mkey_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_1.priority = testData2;
      print(sys.mkey_2300_1.priority);
      expect(sys.mkey_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_1.priority = defalut;
      print(sys.mkey_2300_1.priority);
      expect(sys.mkey_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00976_element_check_00953 **********\n\n");
    });

    test('00977_element_check_00954', () async {
      print("\n********** テスト実行：00977_element_check_00954 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_1.inifile;
      print(sys.mkey_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_1.inifile = testData1s;
      print(sys.mkey_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_1.inifile = testData2s;
      print(sys.mkey_2300_1.inifile);
      expect(sys.mkey_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_1.inifile = defalut;
      print(sys.mkey_2300_1.inifile);
      expect(sys.mkey_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00977_element_check_00954 **********\n\n");
    });

    test('00978_element_check_00955', () async {
      print("\n********** テスト実行：00978_element_check_00955 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_1.tower;
      print(sys.mkey_2300_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_1.tower = testData1;
      print(sys.mkey_2300_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_1.tower = testData2;
      print(sys.mkey_2300_1.tower);
      expect(sys.mkey_2300_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_1.tower = defalut;
      print(sys.mkey_2300_1.tower);
      expect(sys.mkey_2300_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00978_element_check_00955 **********\n\n");
    });

    test('00979_element_check_00956', () async {
      print("\n********** テスト実行：00979_element_check_00956 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_2.entry;
      print(sys.mkey_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_2.entry = testData1s;
      print(sys.mkey_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_2.entry = testData2s;
      print(sys.mkey_2300_2.entry);
      expect(sys.mkey_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_2.entry = defalut;
      print(sys.mkey_2300_2.entry);
      expect(sys.mkey_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00979_element_check_00956 **********\n\n");
    });

    test('00980_element_check_00957', () async {
      print("\n********** テスト実行：00980_element_check_00957 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_2.priority;
      print(sys.mkey_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_2.priority = testData1;
      print(sys.mkey_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_2.priority = testData2;
      print(sys.mkey_2300_2.priority);
      expect(sys.mkey_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_2.priority = defalut;
      print(sys.mkey_2300_2.priority);
      expect(sys.mkey_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00980_element_check_00957 **********\n\n");
    });

    test('00981_element_check_00958', () async {
      print("\n********** テスト実行：00981_element_check_00958 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_2.inifile;
      print(sys.mkey_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_2.inifile = testData1s;
      print(sys.mkey_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_2.inifile = testData2s;
      print(sys.mkey_2300_2.inifile);
      expect(sys.mkey_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_2.inifile = defalut;
      print(sys.mkey_2300_2.inifile);
      expect(sys.mkey_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00981_element_check_00958 **********\n\n");
    });

    test('00982_element_check_00959', () async {
      print("\n********** テスト実行：00982_element_check_00959 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2300_2.tower;
      print(sys.mkey_2300_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2300_2.tower = testData1;
      print(sys.mkey_2300_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2300_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2300_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2300_2.tower = testData2;
      print(sys.mkey_2300_2.tower);
      expect(sys.mkey_2300_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2300_2.tower = defalut;
      print(sys.mkey_2300_2.tower);
      expect(sys.mkey_2300_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2300_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00982_element_check_00959 **********\n\n");
    });

    test('00983_element_check_00960', () async {
      print("\n********** テスト実行：00983_element_check_00960 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_1.entry;
      print(sys.scan_plus_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_1.entry = testData1s;
      print(sys.scan_plus_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_1.entry = testData2s;
      print(sys.scan_plus_1.entry);
      expect(sys.scan_plus_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_1.entry = defalut;
      print(sys.scan_plus_1.entry);
      expect(sys.scan_plus_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00983_element_check_00960 **********\n\n");
    });

    test('00984_element_check_00961', () async {
      print("\n********** テスト実行：00984_element_check_00961 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_1.priority;
      print(sys.scan_plus_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_1.priority = testData1;
      print(sys.scan_plus_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_1.priority = testData2;
      print(sys.scan_plus_1.priority);
      expect(sys.scan_plus_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_1.priority = defalut;
      print(sys.scan_plus_1.priority);
      expect(sys.scan_plus_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00984_element_check_00961 **********\n\n");
    });

    test('00985_element_check_00962', () async {
      print("\n********** テスト実行：00985_element_check_00962 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_1.inifile;
      print(sys.scan_plus_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_1.inifile = testData1s;
      print(sys.scan_plus_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_1.inifile = testData2s;
      print(sys.scan_plus_1.inifile);
      expect(sys.scan_plus_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_1.inifile = defalut;
      print(sys.scan_plus_1.inifile);
      expect(sys.scan_plus_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00985_element_check_00962 **********\n\n");
    });

    test('00986_element_check_00963', () async {
      print("\n********** テスト実行：00986_element_check_00963 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_1.tower;
      print(sys.scan_plus_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_1.tower = testData1;
      print(sys.scan_plus_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_1.tower = testData2;
      print(sys.scan_plus_1.tower);
      expect(sys.scan_plus_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_1.tower = defalut;
      print(sys.scan_plus_1.tower);
      expect(sys.scan_plus_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00986_element_check_00963 **********\n\n");
    });

    test('00987_element_check_00964', () async {
      print("\n********** テスト実行：00987_element_check_00964 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_2.entry;
      print(sys.scan_plus_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_2.entry = testData1s;
      print(sys.scan_plus_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_2.entry = testData2s;
      print(sys.scan_plus_2.entry);
      expect(sys.scan_plus_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_2.entry = defalut;
      print(sys.scan_plus_2.entry);
      expect(sys.scan_plus_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00987_element_check_00964 **********\n\n");
    });

    test('00988_element_check_00965', () async {
      print("\n********** テスト実行：00988_element_check_00965 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_2.priority;
      print(sys.scan_plus_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_2.priority = testData1;
      print(sys.scan_plus_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_2.priority = testData2;
      print(sys.scan_plus_2.priority);
      expect(sys.scan_plus_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_2.priority = defalut;
      print(sys.scan_plus_2.priority);
      expect(sys.scan_plus_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00988_element_check_00965 **********\n\n");
    });

    test('00989_element_check_00966', () async {
      print("\n********** テスト実行：00989_element_check_00966 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_2.inifile;
      print(sys.scan_plus_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_2.inifile = testData1s;
      print(sys.scan_plus_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_2.inifile = testData2s;
      print(sys.scan_plus_2.inifile);
      expect(sys.scan_plus_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_2.inifile = defalut;
      print(sys.scan_plus_2.inifile);
      expect(sys.scan_plus_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00989_element_check_00966 **********\n\n");
    });

    test('00990_element_check_00967', () async {
      print("\n********** テスト実行：00990_element_check_00967 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_plus_2.tower;
      print(sys.scan_plus_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_plus_2.tower = testData1;
      print(sys.scan_plus_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_plus_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_plus_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_plus_2.tower = testData2;
      print(sys.scan_plus_2.tower);
      expect(sys.scan_plus_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_plus_2.tower = defalut;
      print(sys.scan_plus_2.tower);
      expect(sys.scan_plus_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_plus_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00990_element_check_00967 **********\n\n");
    });

    test('00991_element_check_00968', () async {
      print("\n********** テスト実行：00991_element_check_00968 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_1.entry;
      print(sys.scan_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_1.entry = testData1s;
      print(sys.scan_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_1.entry = testData2s;
      print(sys.scan_2300_1.entry);
      expect(sys.scan_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_1.entry = defalut;
      print(sys.scan_2300_1.entry);
      expect(sys.scan_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00991_element_check_00968 **********\n\n");
    });

    test('00992_element_check_00969', () async {
      print("\n********** テスト実行：00992_element_check_00969 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_1.priority;
      print(sys.scan_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_1.priority = testData1;
      print(sys.scan_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_1.priority = testData2;
      print(sys.scan_2300_1.priority);
      expect(sys.scan_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_1.priority = defalut;
      print(sys.scan_2300_1.priority);
      expect(sys.scan_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00992_element_check_00969 **********\n\n");
    });

    test('00993_element_check_00970', () async {
      print("\n********** テスト実行：00993_element_check_00970 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_1.inifile;
      print(sys.scan_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_1.inifile = testData1s;
      print(sys.scan_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_1.inifile = testData2s;
      print(sys.scan_2300_1.inifile);
      expect(sys.scan_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_1.inifile = defalut;
      print(sys.scan_2300_1.inifile);
      expect(sys.scan_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00993_element_check_00970 **********\n\n");
    });

    test('00994_element_check_00971', () async {
      print("\n********** テスト実行：00994_element_check_00971 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_1.tower;
      print(sys.scan_2300_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_1.tower = testData1;
      print(sys.scan_2300_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_1.tower = testData2;
      print(sys.scan_2300_1.tower);
      expect(sys.scan_2300_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_1.tower = defalut;
      print(sys.scan_2300_1.tower);
      expect(sys.scan_2300_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00994_element_check_00971 **********\n\n");
    });

    test('00995_element_check_00972', () async {
      print("\n********** テスト実行：00995_element_check_00972 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_2.entry;
      print(sys.scan_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_2.entry = testData1s;
      print(sys.scan_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_2.entry = testData2s;
      print(sys.scan_2300_2.entry);
      expect(sys.scan_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_2.entry = defalut;
      print(sys.scan_2300_2.entry);
      expect(sys.scan_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00995_element_check_00972 **********\n\n");
    });

    test('00996_element_check_00973', () async {
      print("\n********** テスト実行：00996_element_check_00973 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_2.priority;
      print(sys.scan_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_2.priority = testData1;
      print(sys.scan_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_2.priority = testData2;
      print(sys.scan_2300_2.priority);
      expect(sys.scan_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_2.priority = defalut;
      print(sys.scan_2300_2.priority);
      expect(sys.scan_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00996_element_check_00973 **********\n\n");
    });

    test('00997_element_check_00974', () async {
      print("\n********** テスト実行：00997_element_check_00974 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_2.inifile;
      print(sys.scan_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_2.inifile = testData1s;
      print(sys.scan_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_2.inifile = testData2s;
      print(sys.scan_2300_2.inifile);
      expect(sys.scan_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_2.inifile = defalut;
      print(sys.scan_2300_2.inifile);
      expect(sys.scan_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00997_element_check_00974 **********\n\n");
    });

    test('00998_element_check_00975', () async {
      print("\n********** テスト実行：00998_element_check_00975 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2300_2.tower;
      print(sys.scan_2300_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2300_2.tower = testData1;
      print(sys.scan_2300_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2300_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2300_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2300_2.tower = testData2;
      print(sys.scan_2300_2.tower);
      expect(sys.scan_2300_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2300_2.tower = defalut;
      print(sys.scan_2300_2.tower);
      expect(sys.scan_2300_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2300_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00998_element_check_00975 **********\n\n");
    });

    test('00999_element_check_00976', () async {
      print("\n********** テスト実行：00999_element_check_00976 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_1.entry;
      print(sys.msr_2300_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_1.entry = testData1s;
      print(sys.msr_2300_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_1.entry = testData2s;
      print(sys.msr_2300_1.entry);
      expect(sys.msr_2300_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_1.entry = defalut;
      print(sys.msr_2300_1.entry);
      expect(sys.msr_2300_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：00999_element_check_00976 **********\n\n");
    });

    test('01000_element_check_00977', () async {
      print("\n********** テスト実行：01000_element_check_00977 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_1.priority;
      print(sys.msr_2300_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_1.priority = testData1;
      print(sys.msr_2300_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_1.priority = testData2;
      print(sys.msr_2300_1.priority);
      expect(sys.msr_2300_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_1.priority = defalut;
      print(sys.msr_2300_1.priority);
      expect(sys.msr_2300_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01000_element_check_00977 **********\n\n");
    });

    test('01001_element_check_00978', () async {
      print("\n********** テスト実行：01001_element_check_00978 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_1.inifile;
      print(sys.msr_2300_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_1.inifile = testData1s;
      print(sys.msr_2300_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_1.inifile = testData2s;
      print(sys.msr_2300_1.inifile);
      expect(sys.msr_2300_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_1.inifile = defalut;
      print(sys.msr_2300_1.inifile);
      expect(sys.msr_2300_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01001_element_check_00978 **********\n\n");
    });

    test('01002_element_check_00979', () async {
      print("\n********** テスト実行：01002_element_check_00979 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_1.tower;
      print(sys.msr_2300_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_1.tower = testData1;
      print(sys.msr_2300_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_1.tower = testData2;
      print(sys.msr_2300_1.tower);
      expect(sys.msr_2300_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_1.tower = defalut;
      print(sys.msr_2300_1.tower);
      expect(sys.msr_2300_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01002_element_check_00979 **********\n\n");
    });

    test('01003_element_check_00980', () async {
      print("\n********** テスト実行：01003_element_check_00980 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_2.entry;
      print(sys.msr_2300_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_2.entry = testData1s;
      print(sys.msr_2300_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_2.entry = testData2s;
      print(sys.msr_2300_2.entry);
      expect(sys.msr_2300_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_2.entry = defalut;
      print(sys.msr_2300_2.entry);
      expect(sys.msr_2300_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01003_element_check_00980 **********\n\n");
    });

    test('01004_element_check_00981', () async {
      print("\n********** テスト実行：01004_element_check_00981 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_2.priority;
      print(sys.msr_2300_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_2.priority = testData1;
      print(sys.msr_2300_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_2.priority = testData2;
      print(sys.msr_2300_2.priority);
      expect(sys.msr_2300_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_2.priority = defalut;
      print(sys.msr_2300_2.priority);
      expect(sys.msr_2300_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01004_element_check_00981 **********\n\n");
    });

    test('01005_element_check_00982', () async {
      print("\n********** テスト実行：01005_element_check_00982 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_2.inifile;
      print(sys.msr_2300_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_2.inifile = testData1s;
      print(sys.msr_2300_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_2.inifile = testData2s;
      print(sys.msr_2300_2.inifile);
      expect(sys.msr_2300_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_2.inifile = defalut;
      print(sys.msr_2300_2.inifile);
      expect(sys.msr_2300_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01005_element_check_00982 **********\n\n");
    });

    test('01006_element_check_00983', () async {
      print("\n********** テスト実行：01006_element_check_00983 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2300_2.tower;
      print(sys.msr_2300_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2300_2.tower = testData1;
      print(sys.msr_2300_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2300_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2300_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2300_2.tower = testData2;
      print(sys.msr_2300_2.tower);
      expect(sys.msr_2300_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2300_2.tower = defalut;
      print(sys.msr_2300_2.tower);
      expect(sys.msr_2300_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2300_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01006_element_check_00983 **********\n\n");
    });

    test('01007_element_check_00984', () async {
      print("\n********** テスト実行：01007_element_check_00984 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_1.entry;
      print(sys.mkey_2800_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_1.entry = testData1s;
      print(sys.mkey_2800_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_1.entry = testData2s;
      print(sys.mkey_2800_1.entry);
      expect(sys.mkey_2800_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_1.entry = defalut;
      print(sys.mkey_2800_1.entry);
      expect(sys.mkey_2800_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01007_element_check_00984 **********\n\n");
    });

    test('01008_element_check_00985', () async {
      print("\n********** テスト実行：01008_element_check_00985 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_1.priority;
      print(sys.mkey_2800_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_1.priority = testData1;
      print(sys.mkey_2800_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_1.priority = testData2;
      print(sys.mkey_2800_1.priority);
      expect(sys.mkey_2800_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_1.priority = defalut;
      print(sys.mkey_2800_1.priority);
      expect(sys.mkey_2800_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01008_element_check_00985 **********\n\n");
    });

    test('01009_element_check_00986', () async {
      print("\n********** テスト実行：01009_element_check_00986 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_1.inifile;
      print(sys.mkey_2800_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_1.inifile = testData1s;
      print(sys.mkey_2800_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_1.inifile = testData2s;
      print(sys.mkey_2800_1.inifile);
      expect(sys.mkey_2800_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_1.inifile = defalut;
      print(sys.mkey_2800_1.inifile);
      expect(sys.mkey_2800_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01009_element_check_00986 **********\n\n");
    });

    test('01010_element_check_00987', () async {
      print("\n********** テスト実行：01010_element_check_00987 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_1.tower;
      print(sys.mkey_2800_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_1.tower = testData1;
      print(sys.mkey_2800_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_1.tower = testData2;
      print(sys.mkey_2800_1.tower);
      expect(sys.mkey_2800_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_1.tower = defalut;
      print(sys.mkey_2800_1.tower);
      expect(sys.mkey_2800_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01010_element_check_00987 **********\n\n");
    });

    test('01011_element_check_00988', () async {
      print("\n********** テスト実行：01011_element_check_00988 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_2.entry;
      print(sys.mkey_2800_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_2.entry = testData1s;
      print(sys.mkey_2800_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_2.entry = testData2s;
      print(sys.mkey_2800_2.entry);
      expect(sys.mkey_2800_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_2.entry = defalut;
      print(sys.mkey_2800_2.entry);
      expect(sys.mkey_2800_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01011_element_check_00988 **********\n\n");
    });

    test('01012_element_check_00989', () async {
      print("\n********** テスト実行：01012_element_check_00989 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_2.priority;
      print(sys.mkey_2800_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_2.priority = testData1;
      print(sys.mkey_2800_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_2.priority = testData2;
      print(sys.mkey_2800_2.priority);
      expect(sys.mkey_2800_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_2.priority = defalut;
      print(sys.mkey_2800_2.priority);
      expect(sys.mkey_2800_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01012_element_check_00989 **********\n\n");
    });

    test('01013_element_check_00990', () async {
      print("\n********** テスト実行：01013_element_check_00990 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_2.inifile;
      print(sys.mkey_2800_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_2.inifile = testData1s;
      print(sys.mkey_2800_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_2.inifile = testData2s;
      print(sys.mkey_2800_2.inifile);
      expect(sys.mkey_2800_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_2.inifile = defalut;
      print(sys.mkey_2800_2.inifile);
      expect(sys.mkey_2800_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01013_element_check_00990 **********\n\n");
    });

    test('01014_element_check_00991', () async {
      print("\n********** テスト実行：01014_element_check_00991 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mkey_2800_2.tower;
      print(sys.mkey_2800_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mkey_2800_2.tower = testData1;
      print(sys.mkey_2800_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mkey_2800_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mkey_2800_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mkey_2800_2.tower = testData2;
      print(sys.mkey_2800_2.tower);
      expect(sys.mkey_2800_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mkey_2800_2.tower = defalut;
      print(sys.mkey_2800_2.tower);
      expect(sys.mkey_2800_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mkey_2800_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01014_element_check_00991 **********\n\n");
    });

    test('01015_element_check_00992', () async {
      print("\n********** テスト実行：01015_element_check_00992 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_1.entry;
      print(sys.pmouse_2800_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_1.entry = testData1s;
      print(sys.pmouse_2800_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_1.entry = testData2s;
      print(sys.pmouse_2800_1.entry);
      expect(sys.pmouse_2800_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_1.entry = defalut;
      print(sys.pmouse_2800_1.entry);
      expect(sys.pmouse_2800_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01015_element_check_00992 **********\n\n");
    });

    test('01016_element_check_00993', () async {
      print("\n********** テスト実行：01016_element_check_00993 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_1.priority;
      print(sys.pmouse_2800_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_1.priority = testData1;
      print(sys.pmouse_2800_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_1.priority = testData2;
      print(sys.pmouse_2800_1.priority);
      expect(sys.pmouse_2800_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_1.priority = defalut;
      print(sys.pmouse_2800_1.priority);
      expect(sys.pmouse_2800_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01016_element_check_00993 **********\n\n");
    });

    test('01017_element_check_00994', () async {
      print("\n********** テスト実行：01017_element_check_00994 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_1.inifile;
      print(sys.pmouse_2800_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_1.inifile = testData1s;
      print(sys.pmouse_2800_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_1.inifile = testData2s;
      print(sys.pmouse_2800_1.inifile);
      expect(sys.pmouse_2800_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_1.inifile = defalut;
      print(sys.pmouse_2800_1.inifile);
      expect(sys.pmouse_2800_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01017_element_check_00994 **********\n\n");
    });

    test('01018_element_check_00995', () async {
      print("\n********** テスト実行：01018_element_check_00995 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_1.inifile2;
      print(sys.pmouse_2800_1.inifile2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_1.inifile2 = testData1s;
      print(sys.pmouse_2800_1.inifile2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_1.inifile2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_1.inifile2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_1.inifile2 = testData2s;
      print(sys.pmouse_2800_1.inifile2);
      expect(sys.pmouse_2800_1.inifile2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.inifile2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_1.inifile2 = defalut;
      print(sys.pmouse_2800_1.inifile2);
      expect(sys.pmouse_2800_1.inifile2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.inifile2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01018_element_check_00995 **********\n\n");
    });

    test('01019_element_check_00996', () async {
      print("\n********** テスト実行：01019_element_check_00996 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_1.tower;
      print(sys.pmouse_2800_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_1.tower = testData1;
      print(sys.pmouse_2800_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_1.tower = testData2;
      print(sys.pmouse_2800_1.tower);
      expect(sys.pmouse_2800_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_1.tower = defalut;
      print(sys.pmouse_2800_1.tower);
      expect(sys.pmouse_2800_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01019_element_check_00996 **********\n\n");
    });

    test('01020_element_check_00997', () async {
      print("\n********** テスト実行：01020_element_check_00997 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_2.entry;
      print(sys.pmouse_2800_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_2.entry = testData1s;
      print(sys.pmouse_2800_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_2.entry = testData2s;
      print(sys.pmouse_2800_2.entry);
      expect(sys.pmouse_2800_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_2.entry = defalut;
      print(sys.pmouse_2800_2.entry);
      expect(sys.pmouse_2800_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01020_element_check_00997 **********\n\n");
    });

    test('01021_element_check_00998', () async {
      print("\n********** テスト実行：01021_element_check_00998 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_2.priority;
      print(sys.pmouse_2800_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_2.priority = testData1;
      print(sys.pmouse_2800_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_2.priority = testData2;
      print(sys.pmouse_2800_2.priority);
      expect(sys.pmouse_2800_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_2.priority = defalut;
      print(sys.pmouse_2800_2.priority);
      expect(sys.pmouse_2800_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01021_element_check_00998 **********\n\n");
    });

    test('01022_element_check_00999', () async {
      print("\n********** テスト実行：01022_element_check_00999 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_2.inifile;
      print(sys.pmouse_2800_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_2.inifile = testData1s;
      print(sys.pmouse_2800_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_2.inifile = testData2s;
      print(sys.pmouse_2800_2.inifile);
      expect(sys.pmouse_2800_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_2.inifile = defalut;
      print(sys.pmouse_2800_2.inifile);
      expect(sys.pmouse_2800_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01022_element_check_00999 **********\n\n");
    });

    test('01023_element_check_01000', () async {
      print("\n********** テスト実行：01023_element_check_01000 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_2.tower;
      print(sys.pmouse_2800_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_2.tower = testData1;
      print(sys.pmouse_2800_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_2.tower = testData2;
      print(sys.pmouse_2800_2.tower);
      expect(sys.pmouse_2800_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_2.tower = defalut;
      print(sys.pmouse_2800_2.tower);
      expect(sys.pmouse_2800_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01023_element_check_01000 **********\n\n");
    });

    test('01024_element_check_01001', () async {
      print("\n********** テスト実行：01024_element_check_01001 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_3.entry;
      print(sys.pmouse_2800_3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_3.entry = testData1s;
      print(sys.pmouse_2800_3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_3.entry = testData2s;
      print(sys.pmouse_2800_3.entry);
      expect(sys.pmouse_2800_3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_3.entry = defalut;
      print(sys.pmouse_2800_3.entry);
      expect(sys.pmouse_2800_3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01024_element_check_01001 **********\n\n");
    });

    test('01025_element_check_01002', () async {
      print("\n********** テスト実行：01025_element_check_01002 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_3.priority;
      print(sys.pmouse_2800_3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_3.priority = testData1;
      print(sys.pmouse_2800_3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_3.priority = testData2;
      print(sys.pmouse_2800_3.priority);
      expect(sys.pmouse_2800_3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_3.priority = defalut;
      print(sys.pmouse_2800_3.priority);
      expect(sys.pmouse_2800_3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01025_element_check_01002 **********\n\n");
    });

    test('01026_element_check_01003', () async {
      print("\n********** テスト実行：01026_element_check_01003 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_3.inifile;
      print(sys.pmouse_2800_3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_3.inifile = testData1s;
      print(sys.pmouse_2800_3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_3.inifile = testData2s;
      print(sys.pmouse_2800_3.inifile);
      expect(sys.pmouse_2800_3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_3.inifile = defalut;
      print(sys.pmouse_2800_3.inifile);
      expect(sys.pmouse_2800_3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01026_element_check_01003 **********\n\n");
    });

    test('01027_element_check_01004', () async {
      print("\n********** テスト実行：01027_element_check_01004 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_3.inifile2;
      print(sys.pmouse_2800_3.inifile2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_3.inifile2 = testData1s;
      print(sys.pmouse_2800_3.inifile2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_3.inifile2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_3.inifile2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_3.inifile2 = testData2s;
      print(sys.pmouse_2800_3.inifile2);
      expect(sys.pmouse_2800_3.inifile2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.inifile2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_3.inifile2 = defalut;
      print(sys.pmouse_2800_3.inifile2);
      expect(sys.pmouse_2800_3.inifile2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.inifile2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01027_element_check_01004 **********\n\n");
    });

    test('01028_element_check_01005', () async {
      print("\n********** テスト実行：01028_element_check_01005 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_3.inifile3;
      print(sys.pmouse_2800_3.inifile3);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_3.inifile3 = testData1s;
      print(sys.pmouse_2800_3.inifile3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_3.inifile3 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_3.inifile3 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_3.inifile3 = testData2s;
      print(sys.pmouse_2800_3.inifile3);
      expect(sys.pmouse_2800_3.inifile3 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.inifile3 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_3.inifile3 = defalut;
      print(sys.pmouse_2800_3.inifile3);
      expect(sys.pmouse_2800_3.inifile3 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.inifile3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01028_element_check_01005 **********\n\n");
    });

    test('01029_element_check_01006', () async {
      print("\n********** テスト実行：01029_element_check_01006 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_3.tower;
      print(sys.pmouse_2800_3.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_3.tower = testData1;
      print(sys.pmouse_2800_3.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_3.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_3.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_3.tower = testData2;
      print(sys.pmouse_2800_3.tower);
      expect(sys.pmouse_2800_3.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_3.tower = defalut;
      print(sys.pmouse_2800_3.tower);
      expect(sys.pmouse_2800_3.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_3.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01029_element_check_01006 **********\n\n");
    });

    test('01030_element_check_01007', () async {
      print("\n********** テスト実行：01030_element_check_01007 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_1.entry;
      print(sys.scan_2800_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_1.entry = testData1s;
      print(sys.scan_2800_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_1.entry = testData2s;
      print(sys.scan_2800_1.entry);
      expect(sys.scan_2800_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_1.entry = defalut;
      print(sys.scan_2800_1.entry);
      expect(sys.scan_2800_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01030_element_check_01007 **********\n\n");
    });

    test('01031_element_check_01008', () async {
      print("\n********** テスト実行：01031_element_check_01008 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_1.priority;
      print(sys.scan_2800_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_1.priority = testData1;
      print(sys.scan_2800_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_1.priority = testData2;
      print(sys.scan_2800_1.priority);
      expect(sys.scan_2800_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_1.priority = defalut;
      print(sys.scan_2800_1.priority);
      expect(sys.scan_2800_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01031_element_check_01008 **********\n\n");
    });

    test('01032_element_check_01009', () async {
      print("\n********** テスト実行：01032_element_check_01009 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_1.inifile;
      print(sys.scan_2800_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_1.inifile = testData1s;
      print(sys.scan_2800_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_1.inifile = testData2s;
      print(sys.scan_2800_1.inifile);
      expect(sys.scan_2800_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_1.inifile = defalut;
      print(sys.scan_2800_1.inifile);
      expect(sys.scan_2800_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01032_element_check_01009 **********\n\n");
    });

    test('01033_element_check_01010', () async {
      print("\n********** テスト実行：01033_element_check_01010 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_1.tower;
      print(sys.scan_2800_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_1.tower = testData1;
      print(sys.scan_2800_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_1.tower = testData2;
      print(sys.scan_2800_1.tower);
      expect(sys.scan_2800_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_1.tower = defalut;
      print(sys.scan_2800_1.tower);
      expect(sys.scan_2800_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01033_element_check_01010 **********\n\n");
    });

    test('01034_element_check_01011', () async {
      print("\n********** テスト実行：01034_element_check_01011 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_2.entry;
      print(sys.scan_2800_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_2.entry = testData1s;
      print(sys.scan_2800_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_2.entry = testData2s;
      print(sys.scan_2800_2.entry);
      expect(sys.scan_2800_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_2.entry = defalut;
      print(sys.scan_2800_2.entry);
      expect(sys.scan_2800_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01034_element_check_01011 **********\n\n");
    });

    test('01035_element_check_01012', () async {
      print("\n********** テスト実行：01035_element_check_01012 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_2.priority;
      print(sys.scan_2800_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_2.priority = testData1;
      print(sys.scan_2800_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_2.priority = testData2;
      print(sys.scan_2800_2.priority);
      expect(sys.scan_2800_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_2.priority = defalut;
      print(sys.scan_2800_2.priority);
      expect(sys.scan_2800_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01035_element_check_01012 **********\n\n");
    });

    test('01036_element_check_01013', () async {
      print("\n********** テスト実行：01036_element_check_01013 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_2.inifile;
      print(sys.scan_2800_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_2.inifile = testData1s;
      print(sys.scan_2800_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_2.inifile = testData2s;
      print(sys.scan_2800_2.inifile);
      expect(sys.scan_2800_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_2.inifile = defalut;
      print(sys.scan_2800_2.inifile);
      expect(sys.scan_2800_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01036_element_check_01013 **********\n\n");
    });

    test('01037_element_check_01014', () async {
      print("\n********** テスト実行：01037_element_check_01014 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_2.tower;
      print(sys.scan_2800_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_2.tower = testData1;
      print(sys.scan_2800_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_2.tower = testData2;
      print(sys.scan_2800_2.tower);
      expect(sys.scan_2800_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_2.tower = defalut;
      print(sys.scan_2800_2.tower);
      expect(sys.scan_2800_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01037_element_check_01014 **********\n\n");
    });

    test('01038_element_check_01015', () async {
      print("\n********** テスト実行：01038_element_check_01015 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_1.entry;
      print(sys.fip_2800_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_1.entry = testData1s;
      print(sys.fip_2800_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_1.entry = testData2s;
      print(sys.fip_2800_1.entry);
      expect(sys.fip_2800_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_1.entry = defalut;
      print(sys.fip_2800_1.entry);
      expect(sys.fip_2800_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01038_element_check_01015 **********\n\n");
    });

    test('01039_element_check_01016', () async {
      print("\n********** テスト実行：01039_element_check_01016 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_1.priority;
      print(sys.fip_2800_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_1.priority = testData1;
      print(sys.fip_2800_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_1.priority = testData2;
      print(sys.fip_2800_1.priority);
      expect(sys.fip_2800_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_1.priority = defalut;
      print(sys.fip_2800_1.priority);
      expect(sys.fip_2800_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01039_element_check_01016 **********\n\n");
    });

    test('01040_element_check_01017', () async {
      print("\n********** テスト実行：01040_element_check_01017 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_1.inifile;
      print(sys.fip_2800_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_1.inifile = testData1s;
      print(sys.fip_2800_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_1.inifile = testData2s;
      print(sys.fip_2800_1.inifile);
      expect(sys.fip_2800_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_1.inifile = defalut;
      print(sys.fip_2800_1.inifile);
      expect(sys.fip_2800_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01040_element_check_01017 **********\n\n");
    });

    test('01041_element_check_01018', () async {
      print("\n********** テスト実行：01041_element_check_01018 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_1.tower;
      print(sys.fip_2800_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_1.tower = testData1;
      print(sys.fip_2800_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_1.tower = testData2;
      print(sys.fip_2800_1.tower);
      expect(sys.fip_2800_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_1.tower = defalut;
      print(sys.fip_2800_1.tower);
      expect(sys.fip_2800_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01041_element_check_01018 **********\n\n");
    });

    test('01042_element_check_01019', () async {
      print("\n********** テスト実行：01042_element_check_01019 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_2.entry;
      print(sys.fip_2800_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_2.entry = testData1s;
      print(sys.fip_2800_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_2.entry = testData2s;
      print(sys.fip_2800_2.entry);
      expect(sys.fip_2800_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_2.entry = defalut;
      print(sys.fip_2800_2.entry);
      expect(sys.fip_2800_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01042_element_check_01019 **********\n\n");
    });

    test('01043_element_check_01020', () async {
      print("\n********** テスト実行：01043_element_check_01020 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_2.priority;
      print(sys.fip_2800_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_2.priority = testData1;
      print(sys.fip_2800_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_2.priority = testData2;
      print(sys.fip_2800_2.priority);
      expect(sys.fip_2800_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_2.priority = defalut;
      print(sys.fip_2800_2.priority);
      expect(sys.fip_2800_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01043_element_check_01020 **********\n\n");
    });

    test('01044_element_check_01021', () async {
      print("\n********** テスト実行：01044_element_check_01021 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_2.inifile;
      print(sys.fip_2800_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_2.inifile = testData1s;
      print(sys.fip_2800_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_2.inifile = testData2s;
      print(sys.fip_2800_2.inifile);
      expect(sys.fip_2800_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_2.inifile = defalut;
      print(sys.fip_2800_2.inifile);
      expect(sys.fip_2800_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01044_element_check_01021 **********\n\n");
    });

    test('01045_element_check_01022', () async {
      print("\n********** テスト実行：01045_element_check_01022 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_2.tower;
      print(sys.fip_2800_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_2.tower = testData1;
      print(sys.fip_2800_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_2.tower = testData2;
      print(sys.fip_2800_2.tower);
      expect(sys.fip_2800_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_2.tower = defalut;
      print(sys.fip_2800_2.tower);
      expect(sys.fip_2800_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01045_element_check_01022 **********\n\n");
    });

    test('01046_element_check_01023', () async {
      print("\n********** テスト実行：01046_element_check_01023 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_3.entry;
      print(sys.fip_2800_3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_3.entry = testData1s;
      print(sys.fip_2800_3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_3.entry = testData2s;
      print(sys.fip_2800_3.entry);
      expect(sys.fip_2800_3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_3.entry = defalut;
      print(sys.fip_2800_3.entry);
      expect(sys.fip_2800_3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01046_element_check_01023 **********\n\n");
    });

    test('01047_element_check_01024', () async {
      print("\n********** テスト実行：01047_element_check_01024 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_3.priority;
      print(sys.fip_2800_3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_3.priority = testData1;
      print(sys.fip_2800_3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_3.priority = testData2;
      print(sys.fip_2800_3.priority);
      expect(sys.fip_2800_3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_3.priority = defalut;
      print(sys.fip_2800_3.priority);
      expect(sys.fip_2800_3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01047_element_check_01024 **********\n\n");
    });

    test('01048_element_check_01025', () async {
      print("\n********** テスト実行：01048_element_check_01025 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_3.inifile;
      print(sys.fip_2800_3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_3.inifile = testData1s;
      print(sys.fip_2800_3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_3.inifile = testData2s;
      print(sys.fip_2800_3.inifile);
      expect(sys.fip_2800_3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_3.inifile = defalut;
      print(sys.fip_2800_3.inifile);
      expect(sys.fip_2800_3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01048_element_check_01025 **********\n\n");
    });

    test('01049_element_check_01026', () async {
      print("\n********** テスト実行：01049_element_check_01026 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800_3.tower;
      print(sys.fip_2800_3.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800_3.tower = testData1;
      print(sys.fip_2800_3.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800_3.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800_3.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800_3.tower = testData2;
      print(sys.fip_2800_3.tower);
      expect(sys.fip_2800_3.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800_3.tower = defalut;
      print(sys.fip_2800_3.tower);
      expect(sys.fip_2800_3.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800_3.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01049_element_check_01026 **********\n\n");
    });

    test('01050_element_check_01027', () async {
      print("\n********** テスト実行：01050_element_check_01027 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_1.entry;
      print(sys.drw_2800_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_1.entry = testData1s;
      print(sys.drw_2800_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_1.entry = testData2s;
      print(sys.drw_2800_1.entry);
      expect(sys.drw_2800_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_1.entry = defalut;
      print(sys.drw_2800_1.entry);
      expect(sys.drw_2800_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01050_element_check_01027 **********\n\n");
    });

    test('01051_element_check_01028', () async {
      print("\n********** テスト実行：01051_element_check_01028 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_1.priority;
      print(sys.drw_2800_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_1.priority = testData1;
      print(sys.drw_2800_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_1.priority = testData2;
      print(sys.drw_2800_1.priority);
      expect(sys.drw_2800_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_1.priority = defalut;
      print(sys.drw_2800_1.priority);
      expect(sys.drw_2800_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01051_element_check_01028 **********\n\n");
    });

    test('01052_element_check_01029', () async {
      print("\n********** テスト実行：01052_element_check_01029 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_1.inifile;
      print(sys.drw_2800_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_1.inifile = testData1s;
      print(sys.drw_2800_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_1.inifile = testData2s;
      print(sys.drw_2800_1.inifile);
      expect(sys.drw_2800_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_1.inifile = defalut;
      print(sys.drw_2800_1.inifile);
      expect(sys.drw_2800_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01052_element_check_01029 **********\n\n");
    });

    test('01053_element_check_01030', () async {
      print("\n********** テスト実行：01053_element_check_01030 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_1.tower;
      print(sys.drw_2800_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_1.tower = testData1;
      print(sys.drw_2800_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_1.tower = testData2;
      print(sys.drw_2800_1.tower);
      expect(sys.drw_2800_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_1.tower = defalut;
      print(sys.drw_2800_1.tower);
      expect(sys.drw_2800_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01053_element_check_01030 **********\n\n");
    });

    test('01054_element_check_01031', () async {
      print("\n********** テスト実行：01054_element_check_01031 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_2.entry;
      print(sys.drw_2800_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_2.entry = testData1s;
      print(sys.drw_2800_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_2.entry = testData2s;
      print(sys.drw_2800_2.entry);
      expect(sys.drw_2800_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_2.entry = defalut;
      print(sys.drw_2800_2.entry);
      expect(sys.drw_2800_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01054_element_check_01031 **********\n\n");
    });

    test('01055_element_check_01032', () async {
      print("\n********** テスト実行：01055_element_check_01032 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_2.priority;
      print(sys.drw_2800_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_2.priority = testData1;
      print(sys.drw_2800_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_2.priority = testData2;
      print(sys.drw_2800_2.priority);
      expect(sys.drw_2800_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_2.priority = defalut;
      print(sys.drw_2800_2.priority);
      expect(sys.drw_2800_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01055_element_check_01032 **********\n\n");
    });

    test('01056_element_check_01033', () async {
      print("\n********** テスト実行：01056_element_check_01033 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_2.inifile;
      print(sys.drw_2800_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_2.inifile = testData1s;
      print(sys.drw_2800_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_2.inifile = testData2s;
      print(sys.drw_2800_2.inifile);
      expect(sys.drw_2800_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_2.inifile = defalut;
      print(sys.drw_2800_2.inifile);
      expect(sys.drw_2800_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01056_element_check_01033 **********\n\n");
    });

    test('01057_element_check_01034', () async {
      print("\n********** テスト実行：01057_element_check_01034 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.drw_2800_2.tower;
      print(sys.drw_2800_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.drw_2800_2.tower = testData1;
      print(sys.drw_2800_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.drw_2800_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.drw_2800_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.drw_2800_2.tower = testData2;
      print(sys.drw_2800_2.tower);
      expect(sys.drw_2800_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.drw_2800_2.tower = defalut;
      print(sys.drw_2800_2.tower);
      expect(sys.drw_2800_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.drw_2800_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01057_element_check_01034 **********\n\n");
    });

    test('01058_element_check_01035', () async {
      print("\n********** テスト実行：01058_element_check_01035 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtss.entry;
      print(sys.tprtss.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtss.entry = testData1s;
      print(sys.tprtss.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtss.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtss.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtss.entry = testData2s;
      print(sys.tprtss.entry);
      expect(sys.tprtss.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtss.entry = defalut;
      print(sys.tprtss.entry);
      expect(sys.tprtss.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01058_element_check_01035 **********\n\n");
    });

    test('01059_element_check_01036', () async {
      print("\n********** テスト実行：01059_element_check_01036 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtss.priority;
      print(sys.tprtss.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtss.priority = testData1;
      print(sys.tprtss.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtss.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtss.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtss.priority = testData2;
      print(sys.tprtss.priority);
      expect(sys.tprtss.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtss.priority = defalut;
      print(sys.tprtss.priority);
      expect(sys.tprtss.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01059_element_check_01036 **********\n\n");
    });

    test('01060_element_check_01037', () async {
      print("\n********** テスト実行：01060_element_check_01037 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtss.inifile;
      print(sys.tprtss.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtss.inifile = testData1s;
      print(sys.tprtss.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtss.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtss.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtss.inifile = testData2s;
      print(sys.tprtss.inifile);
      expect(sys.tprtss.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtss.inifile = defalut;
      print(sys.tprtss.inifile);
      expect(sys.tprtss.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01060_element_check_01037 **********\n\n");
    });

    test('01061_element_check_01038', () async {
      print("\n********** テスト実行：01061_element_check_01038 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtss2.entry;
      print(sys.tprtss2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtss2.entry = testData1s;
      print(sys.tprtss2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtss2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtss2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtss2.entry = testData2s;
      print(sys.tprtss2.entry);
      expect(sys.tprtss2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtss2.entry = defalut;
      print(sys.tprtss2.entry);
      expect(sys.tprtss2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01061_element_check_01038 **********\n\n");
    });

    test('01062_element_check_01039', () async {
      print("\n********** テスト実行：01062_element_check_01039 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtss2.priority;
      print(sys.tprtss2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtss2.priority = testData1;
      print(sys.tprtss2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtss2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtss2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtss2.priority = testData2;
      print(sys.tprtss2.priority);
      expect(sys.tprtss2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtss2.priority = defalut;
      print(sys.tprtss2.priority);
      expect(sys.tprtss2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01062_element_check_01039 **********\n\n");
    });

    test('01063_element_check_01040', () async {
      print("\n********** テスト実行：01063_element_check_01040 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtss2.inifile;
      print(sys.tprtss2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtss2.inifile = testData1s;
      print(sys.tprtss2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtss2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtss2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtss2.inifile = testData2s;
      print(sys.tprtss2.inifile);
      expect(sys.tprtss2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtss2.inifile = defalut;
      print(sys.tprtss2.inifile);
      expect(sys.tprtss2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtss2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01063_element_check_01040 **********\n\n");
    });

    test('01064_element_check_01041', () async {
      print("\n********** テスト実行：01064_element_check_01041 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_1.entry;
      print(sys.pmouse_2500_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_1.entry = testData1s;
      print(sys.pmouse_2500_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_1.entry = testData2s;
      print(sys.pmouse_2500_1.entry);
      expect(sys.pmouse_2500_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_1.entry = defalut;
      print(sys.pmouse_2500_1.entry);
      expect(sys.pmouse_2500_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01064_element_check_01041 **********\n\n");
    });

    test('01065_element_check_01042', () async {
      print("\n********** テスト実行：01065_element_check_01042 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_1.priority;
      print(sys.pmouse_2500_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_1.priority = testData1;
      print(sys.pmouse_2500_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_1.priority = testData2;
      print(sys.pmouse_2500_1.priority);
      expect(sys.pmouse_2500_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_1.priority = defalut;
      print(sys.pmouse_2500_1.priority);
      expect(sys.pmouse_2500_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01065_element_check_01042 **********\n\n");
    });

    test('01066_element_check_01043', () async {
      print("\n********** テスト実行：01066_element_check_01043 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_1.inifile;
      print(sys.pmouse_2500_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_1.inifile = testData1s;
      print(sys.pmouse_2500_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_1.inifile = testData2s;
      print(sys.pmouse_2500_1.inifile);
      expect(sys.pmouse_2500_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_1.inifile = defalut;
      print(sys.pmouse_2500_1.inifile);
      expect(sys.pmouse_2500_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01066_element_check_01043 **********\n\n");
    });

    test('01067_element_check_01044', () async {
      print("\n********** テスト実行：01067_element_check_01044 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_1.inifile2;
      print(sys.pmouse_2500_1.inifile2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_1.inifile2 = testData1s;
      print(sys.pmouse_2500_1.inifile2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_1.inifile2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_1.inifile2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_1.inifile2 = testData2s;
      print(sys.pmouse_2500_1.inifile2);
      expect(sys.pmouse_2500_1.inifile2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.inifile2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_1.inifile2 = defalut;
      print(sys.pmouse_2500_1.inifile2);
      expect(sys.pmouse_2500_1.inifile2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.inifile2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01067_element_check_01044 **********\n\n");
    });

    test('01068_element_check_01045', () async {
      print("\n********** テスト実行：01068_element_check_01045 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_1.tower;
      print(sys.pmouse_2500_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_1.tower = testData1;
      print(sys.pmouse_2500_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_1.tower = testData2;
      print(sys.pmouse_2500_1.tower);
      expect(sys.pmouse_2500_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_1.tower = defalut;
      print(sys.pmouse_2500_1.tower);
      expect(sys.pmouse_2500_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01068_element_check_01045 **********\n\n");
    });

    test('01069_element_check_01046', () async {
      print("\n********** テスト実行：01069_element_check_01046 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_2.entry;
      print(sys.pmouse_2500_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_2.entry = testData1s;
      print(sys.pmouse_2500_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_2.entry = testData2s;
      print(sys.pmouse_2500_2.entry);
      expect(sys.pmouse_2500_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_2.entry = defalut;
      print(sys.pmouse_2500_2.entry);
      expect(sys.pmouse_2500_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01069_element_check_01046 **********\n\n");
    });

    test('01070_element_check_01047', () async {
      print("\n********** テスト実行：01070_element_check_01047 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_2.priority;
      print(sys.pmouse_2500_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_2.priority = testData1;
      print(sys.pmouse_2500_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_2.priority = testData2;
      print(sys.pmouse_2500_2.priority);
      expect(sys.pmouse_2500_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_2.priority = defalut;
      print(sys.pmouse_2500_2.priority);
      expect(sys.pmouse_2500_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01070_element_check_01047 **********\n\n");
    });

    test('01071_element_check_01048', () async {
      print("\n********** テスト実行：01071_element_check_01048 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_2.inifile;
      print(sys.pmouse_2500_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_2.inifile = testData1s;
      print(sys.pmouse_2500_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_2.inifile = testData2s;
      print(sys.pmouse_2500_2.inifile);
      expect(sys.pmouse_2500_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_2.inifile = defalut;
      print(sys.pmouse_2500_2.inifile);
      expect(sys.pmouse_2500_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01071_element_check_01048 **********\n\n");
    });

    test('01072_element_check_01049', () async {
      print("\n********** テスト実行：01072_element_check_01049 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2500_2.tower;
      print(sys.pmouse_2500_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2500_2.tower = testData1;
      print(sys.pmouse_2500_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2500_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2500_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2500_2.tower = testData2;
      print(sys.pmouse_2500_2.tower);
      expect(sys.pmouse_2500_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2500_2.tower = defalut;
      print(sys.pmouse_2500_2.tower);
      expect(sys.pmouse_2500_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2500_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01072_element_check_01049 **********\n\n");
    });

    test('01073_element_check_01050', () async {
      print("\n********** テスト実行：01073_element_check_01050 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_1.entry;
      print(sys.fip_2500_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_1.entry = testData1s;
      print(sys.fip_2500_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_1.entry = testData2s;
      print(sys.fip_2500_1.entry);
      expect(sys.fip_2500_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_1.entry = defalut;
      print(sys.fip_2500_1.entry);
      expect(sys.fip_2500_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01073_element_check_01050 **********\n\n");
    });

    test('01074_element_check_01051', () async {
      print("\n********** テスト実行：01074_element_check_01051 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_1.priority;
      print(sys.fip_2500_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_1.priority = testData1;
      print(sys.fip_2500_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_1.priority = testData2;
      print(sys.fip_2500_1.priority);
      expect(sys.fip_2500_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_1.priority = defalut;
      print(sys.fip_2500_1.priority);
      expect(sys.fip_2500_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01074_element_check_01051 **********\n\n");
    });

    test('01075_element_check_01052', () async {
      print("\n********** テスト実行：01075_element_check_01052 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_1.inifile;
      print(sys.fip_2500_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_1.inifile = testData1s;
      print(sys.fip_2500_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_1.inifile = testData2s;
      print(sys.fip_2500_1.inifile);
      expect(sys.fip_2500_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_1.inifile = defalut;
      print(sys.fip_2500_1.inifile);
      expect(sys.fip_2500_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01075_element_check_01052 **********\n\n");
    });

    test('01076_element_check_01053', () async {
      print("\n********** テスト実行：01076_element_check_01053 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_1.tower;
      print(sys.fip_2500_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_1.tower = testData1;
      print(sys.fip_2500_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_1.tower = testData2;
      print(sys.fip_2500_1.tower);
      expect(sys.fip_2500_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_1.tower = defalut;
      print(sys.fip_2500_1.tower);
      expect(sys.fip_2500_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01076_element_check_01053 **********\n\n");
    });

    test('01077_element_check_01054', () async {
      print("\n********** テスト実行：01077_element_check_01054 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_2.entry;
      print(sys.fip_2500_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_2.entry = testData1s;
      print(sys.fip_2500_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_2.entry = testData2s;
      print(sys.fip_2500_2.entry);
      expect(sys.fip_2500_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_2.entry = defalut;
      print(sys.fip_2500_2.entry);
      expect(sys.fip_2500_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01077_element_check_01054 **********\n\n");
    });

    test('01078_element_check_01055', () async {
      print("\n********** テスト実行：01078_element_check_01055 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_2.priority;
      print(sys.fip_2500_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_2.priority = testData1;
      print(sys.fip_2500_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_2.priority = testData2;
      print(sys.fip_2500_2.priority);
      expect(sys.fip_2500_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_2.priority = defalut;
      print(sys.fip_2500_2.priority);
      expect(sys.fip_2500_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01078_element_check_01055 **********\n\n");
    });

    test('01079_element_check_01056', () async {
      print("\n********** テスト実行：01079_element_check_01056 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_2.inifile;
      print(sys.fip_2500_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_2.inifile = testData1s;
      print(sys.fip_2500_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_2.inifile = testData2s;
      print(sys.fip_2500_2.inifile);
      expect(sys.fip_2500_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_2.inifile = defalut;
      print(sys.fip_2500_2.inifile);
      expect(sys.fip_2500_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01079_element_check_01056 **********\n\n");
    });

    test('01080_element_check_01057', () async {
      print("\n********** テスト実行：01080_element_check_01057 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2500_2.tower;
      print(sys.fip_2500_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2500_2.tower = testData1;
      print(sys.fip_2500_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2500_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2500_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2500_2.tower = testData2;
      print(sys.fip_2500_2.tower);
      expect(sys.fip_2500_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2500_2.tower = defalut;
      print(sys.fip_2500_2.tower);
      expect(sys.fip_2500_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2500_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01080_element_check_01057 **********\n\n");
    });

    test('01081_element_check_01058', () async {
      print("\n********** テスト実行：01081_element_check_01058 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_1.entry;
      print(sys.scan_2500_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_1.entry = testData1s;
      print(sys.scan_2500_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_1.entry = testData2s;
      print(sys.scan_2500_1.entry);
      expect(sys.scan_2500_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_1.entry = defalut;
      print(sys.scan_2500_1.entry);
      expect(sys.scan_2500_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01081_element_check_01058 **********\n\n");
    });

    test('01082_element_check_01059', () async {
      print("\n********** テスト実行：01082_element_check_01059 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_1.priority;
      print(sys.scan_2500_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_1.priority = testData1;
      print(sys.scan_2500_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_1.priority = testData2;
      print(sys.scan_2500_1.priority);
      expect(sys.scan_2500_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_1.priority = defalut;
      print(sys.scan_2500_1.priority);
      expect(sys.scan_2500_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01082_element_check_01059 **********\n\n");
    });

    test('01083_element_check_01060', () async {
      print("\n********** テスト実行：01083_element_check_01060 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_1.inifile;
      print(sys.scan_2500_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_1.inifile = testData1s;
      print(sys.scan_2500_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_1.inifile = testData2s;
      print(sys.scan_2500_1.inifile);
      expect(sys.scan_2500_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_1.inifile = defalut;
      print(sys.scan_2500_1.inifile);
      expect(sys.scan_2500_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01083_element_check_01060 **********\n\n");
    });

    test('01084_element_check_01061', () async {
      print("\n********** テスト実行：01084_element_check_01061 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_1.tower;
      print(sys.scan_2500_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_1.tower = testData1;
      print(sys.scan_2500_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_1.tower = testData2;
      print(sys.scan_2500_1.tower);
      expect(sys.scan_2500_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_1.tower = defalut;
      print(sys.scan_2500_1.tower);
      expect(sys.scan_2500_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01084_element_check_01061 **********\n\n");
    });

    test('01085_element_check_01062', () async {
      print("\n********** テスト実行：01085_element_check_01062 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_2.entry;
      print(sys.scan_2500_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_2.entry = testData1s;
      print(sys.scan_2500_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_2.entry = testData2s;
      print(sys.scan_2500_2.entry);
      expect(sys.scan_2500_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_2.entry = defalut;
      print(sys.scan_2500_2.entry);
      expect(sys.scan_2500_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01085_element_check_01062 **********\n\n");
    });

    test('01086_element_check_01063', () async {
      print("\n********** テスト実行：01086_element_check_01063 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_2.priority;
      print(sys.scan_2500_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_2.priority = testData1;
      print(sys.scan_2500_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_2.priority = testData2;
      print(sys.scan_2500_2.priority);
      expect(sys.scan_2500_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_2.priority = defalut;
      print(sys.scan_2500_2.priority);
      expect(sys.scan_2500_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01086_element_check_01063 **********\n\n");
    });

    test('01087_element_check_01064', () async {
      print("\n********** テスト実行：01087_element_check_01064 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_2.inifile;
      print(sys.scan_2500_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_2.inifile = testData1s;
      print(sys.scan_2500_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_2.inifile = testData2s;
      print(sys.scan_2500_2.inifile);
      expect(sys.scan_2500_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_2.inifile = defalut;
      print(sys.scan_2500_2.inifile);
      expect(sys.scan_2500_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01087_element_check_01064 **********\n\n");
    });

    test('01088_element_check_01065', () async {
      print("\n********** テスト実行：01088_element_check_01065 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2500_2.tower;
      print(sys.scan_2500_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2500_2.tower = testData1;
      print(sys.scan_2500_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2500_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2500_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2500_2.tower = testData2;
      print(sys.scan_2500_2.tower);
      expect(sys.scan_2500_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2500_2.tower = defalut;
      print(sys.scan_2500_2.tower);
      expect(sys.scan_2500_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2500_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01088_element_check_01065 **********\n\n");
    });

    test('01089_element_check_01066', () async {
      print("\n********** テスト実行：01089_element_check_01066 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_1.entry;
      print(sys.msr_2500_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_1.entry = testData1s;
      print(sys.msr_2500_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_1.entry = testData2s;
      print(sys.msr_2500_1.entry);
      expect(sys.msr_2500_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_1.entry = defalut;
      print(sys.msr_2500_1.entry);
      expect(sys.msr_2500_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01089_element_check_01066 **********\n\n");
    });

    test('01090_element_check_01067', () async {
      print("\n********** テスト実行：01090_element_check_01067 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_1.priority;
      print(sys.msr_2500_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_1.priority = testData1;
      print(sys.msr_2500_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_1.priority = testData2;
      print(sys.msr_2500_1.priority);
      expect(sys.msr_2500_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_1.priority = defalut;
      print(sys.msr_2500_1.priority);
      expect(sys.msr_2500_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01090_element_check_01067 **********\n\n");
    });

    test('01091_element_check_01068', () async {
      print("\n********** テスト実行：01091_element_check_01068 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_1.inifile;
      print(sys.msr_2500_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_1.inifile = testData1s;
      print(sys.msr_2500_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_1.inifile = testData2s;
      print(sys.msr_2500_1.inifile);
      expect(sys.msr_2500_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_1.inifile = defalut;
      print(sys.msr_2500_1.inifile);
      expect(sys.msr_2500_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01091_element_check_01068 **********\n\n");
    });

    test('01092_element_check_01069', () async {
      print("\n********** テスト実行：01092_element_check_01069 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_1.tower;
      print(sys.msr_2500_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_1.tower = testData1;
      print(sys.msr_2500_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_1.tower = testData2;
      print(sys.msr_2500_1.tower);
      expect(sys.msr_2500_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_1.tower = defalut;
      print(sys.msr_2500_1.tower);
      expect(sys.msr_2500_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01092_element_check_01069 **********\n\n");
    });

    test('01093_element_check_01070', () async {
      print("\n********** テスト実行：01093_element_check_01070 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_2.entry;
      print(sys.msr_2500_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_2.entry = testData1s;
      print(sys.msr_2500_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_2.entry = testData2s;
      print(sys.msr_2500_2.entry);
      expect(sys.msr_2500_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_2.entry = defalut;
      print(sys.msr_2500_2.entry);
      expect(sys.msr_2500_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01093_element_check_01070 **********\n\n");
    });

    test('01094_element_check_01071', () async {
      print("\n********** テスト実行：01094_element_check_01071 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_2.priority;
      print(sys.msr_2500_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_2.priority = testData1;
      print(sys.msr_2500_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_2.priority = testData2;
      print(sys.msr_2500_2.priority);
      expect(sys.msr_2500_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_2.priority = defalut;
      print(sys.msr_2500_2.priority);
      expect(sys.msr_2500_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01094_element_check_01071 **********\n\n");
    });

    test('01095_element_check_01072', () async {
      print("\n********** テスト実行：01095_element_check_01072 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_2.inifile;
      print(sys.msr_2500_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_2.inifile = testData1s;
      print(sys.msr_2500_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_2.inifile = testData2s;
      print(sys.msr_2500_2.inifile);
      expect(sys.msr_2500_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_2.inifile = defalut;
      print(sys.msr_2500_2.inifile);
      expect(sys.msr_2500_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01095_element_check_01072 **********\n\n");
    });

    test('01096_element_check_01073', () async {
      print("\n********** テスト実行：01096_element_check_01073 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_2500_2.tower;
      print(sys.msr_2500_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_2500_2.tower = testData1;
      print(sys.msr_2500_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_2500_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_2500_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_2500_2.tower = testData2;
      print(sys.msr_2500_2.tower);
      expect(sys.msr_2500_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_2500_2.tower = defalut;
      print(sys.msr_2500_2.tower);
      expect(sys.msr_2500_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_2500_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01096_element_check_01073 **********\n\n");
    });

    test('01097_element_check_01074', () async {
      print("\n********** テスト実行：01097_element_check_01074 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_1.entry;
      print(sys.pmouse_2350_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_1.entry = testData1s;
      print(sys.pmouse_2350_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_1.entry = testData2s;
      print(sys.pmouse_2350_1.entry);
      expect(sys.pmouse_2350_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_1.entry = defalut;
      print(sys.pmouse_2350_1.entry);
      expect(sys.pmouse_2350_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01097_element_check_01074 **********\n\n");
    });

    test('01098_element_check_01075', () async {
      print("\n********** テスト実行：01098_element_check_01075 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_1.priority;
      print(sys.pmouse_2350_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_1.priority = testData1;
      print(sys.pmouse_2350_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_1.priority = testData2;
      print(sys.pmouse_2350_1.priority);
      expect(sys.pmouse_2350_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_1.priority = defalut;
      print(sys.pmouse_2350_1.priority);
      expect(sys.pmouse_2350_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01098_element_check_01075 **********\n\n");
    });

    test('01099_element_check_01076', () async {
      print("\n********** テスト実行：01099_element_check_01076 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_1.inifile;
      print(sys.pmouse_2350_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_1.inifile = testData1s;
      print(sys.pmouse_2350_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_1.inifile = testData2s;
      print(sys.pmouse_2350_1.inifile);
      expect(sys.pmouse_2350_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_1.inifile = defalut;
      print(sys.pmouse_2350_1.inifile);
      expect(sys.pmouse_2350_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01099_element_check_01076 **********\n\n");
    });

    test('01100_element_check_01077', () async {
      print("\n********** テスト実行：01100_element_check_01077 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_1.tower;
      print(sys.pmouse_2350_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_1.tower = testData1;
      print(sys.pmouse_2350_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_1.tower = testData2;
      print(sys.pmouse_2350_1.tower);
      expect(sys.pmouse_2350_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_1.tower = defalut;
      print(sys.pmouse_2350_1.tower);
      expect(sys.pmouse_2350_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01100_element_check_01077 **********\n\n");
    });

    test('01101_element_check_01078', () async {
      print("\n********** テスト実行：01101_element_check_01078 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_2.entry;
      print(sys.pmouse_2350_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_2.entry = testData1s;
      print(sys.pmouse_2350_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_2.entry = testData2s;
      print(sys.pmouse_2350_2.entry);
      expect(sys.pmouse_2350_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_2.entry = defalut;
      print(sys.pmouse_2350_2.entry);
      expect(sys.pmouse_2350_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01101_element_check_01078 **********\n\n");
    });

    test('01102_element_check_01079', () async {
      print("\n********** テスト実行：01102_element_check_01079 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_2.priority;
      print(sys.pmouse_2350_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_2.priority = testData1;
      print(sys.pmouse_2350_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_2.priority = testData2;
      print(sys.pmouse_2350_2.priority);
      expect(sys.pmouse_2350_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_2.priority = defalut;
      print(sys.pmouse_2350_2.priority);
      expect(sys.pmouse_2350_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01102_element_check_01079 **********\n\n");
    });

    test('01103_element_check_01080', () async {
      print("\n********** テスト実行：01103_element_check_01080 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_2.inifile;
      print(sys.pmouse_2350_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_2.inifile = testData1s;
      print(sys.pmouse_2350_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_2.inifile = testData2s;
      print(sys.pmouse_2350_2.inifile);
      expect(sys.pmouse_2350_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_2.inifile = defalut;
      print(sys.pmouse_2350_2.inifile);
      expect(sys.pmouse_2350_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01103_element_check_01080 **********\n\n");
    });

    test('01104_element_check_01081', () async {
      print("\n********** テスト実行：01104_element_check_01081 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2350_2.tower;
      print(sys.pmouse_2350_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2350_2.tower = testData1;
      print(sys.pmouse_2350_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2350_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2350_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2350_2.tower = testData2;
      print(sys.pmouse_2350_2.tower);
      expect(sys.pmouse_2350_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2350_2.tower = defalut;
      print(sys.pmouse_2350_2.tower);
      expect(sys.pmouse_2350_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2350_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01104_element_check_01081 **********\n\n");
    });

    test('01105_element_check_01082', () async {
      print("\n********** テスト実行：01105_element_check_01082 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_1.entry;
      print(sys.scan_2800ip_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_1.entry = testData1s;
      print(sys.scan_2800ip_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_1.entry = testData2s;
      print(sys.scan_2800ip_1.entry);
      expect(sys.scan_2800ip_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_1.entry = defalut;
      print(sys.scan_2800ip_1.entry);
      expect(sys.scan_2800ip_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01105_element_check_01082 **********\n\n");
    });

    test('01106_element_check_01083', () async {
      print("\n********** テスト実行：01106_element_check_01083 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_1.priority;
      print(sys.scan_2800ip_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_1.priority = testData1;
      print(sys.scan_2800ip_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_1.priority = testData2;
      print(sys.scan_2800ip_1.priority);
      expect(sys.scan_2800ip_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_1.priority = defalut;
      print(sys.scan_2800ip_1.priority);
      expect(sys.scan_2800ip_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01106_element_check_01083 **********\n\n");
    });

    test('01107_element_check_01084', () async {
      print("\n********** テスト実行：01107_element_check_01084 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_1.inifile;
      print(sys.scan_2800ip_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_1.inifile = testData1s;
      print(sys.scan_2800ip_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_1.inifile = testData2s;
      print(sys.scan_2800ip_1.inifile);
      expect(sys.scan_2800ip_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_1.inifile = defalut;
      print(sys.scan_2800ip_1.inifile);
      expect(sys.scan_2800ip_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01107_element_check_01084 **********\n\n");
    });

    test('01108_element_check_01085', () async {
      print("\n********** テスト実行：01108_element_check_01085 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_1.tower;
      print(sys.scan_2800ip_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_1.tower = testData1;
      print(sys.scan_2800ip_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_1.tower = testData2;
      print(sys.scan_2800ip_1.tower);
      expect(sys.scan_2800ip_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_1.tower = defalut;
      print(sys.scan_2800ip_1.tower);
      expect(sys.scan_2800ip_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01108_element_check_01085 **********\n\n");
    });

    test('01109_element_check_01086', () async {
      print("\n********** テスト実行：01109_element_check_01086 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_2.entry;
      print(sys.scan_2800ip_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_2.entry = testData1s;
      print(sys.scan_2800ip_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_2.entry = testData2s;
      print(sys.scan_2800ip_2.entry);
      expect(sys.scan_2800ip_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_2.entry = defalut;
      print(sys.scan_2800ip_2.entry);
      expect(sys.scan_2800ip_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01109_element_check_01086 **********\n\n");
    });

    test('01110_element_check_01087', () async {
      print("\n********** テスト実行：01110_element_check_01087 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_2.priority;
      print(sys.scan_2800ip_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_2.priority = testData1;
      print(sys.scan_2800ip_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_2.priority = testData2;
      print(sys.scan_2800ip_2.priority);
      expect(sys.scan_2800ip_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_2.priority = defalut;
      print(sys.scan_2800ip_2.priority);
      expect(sys.scan_2800ip_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01110_element_check_01087 **********\n\n");
    });

    test('01111_element_check_01088', () async {
      print("\n********** テスト実行：01111_element_check_01088 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_2.inifile;
      print(sys.scan_2800ip_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_2.inifile = testData1s;
      print(sys.scan_2800ip_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_2.inifile = testData2s;
      print(sys.scan_2800ip_2.inifile);
      expect(sys.scan_2800ip_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_2.inifile = defalut;
      print(sys.scan_2800ip_2.inifile);
      expect(sys.scan_2800ip_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01111_element_check_01088 **********\n\n");
    });

    test('01112_element_check_01089', () async {
      print("\n********** テスト実行：01112_element_check_01089 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800ip_2.tower;
      print(sys.scan_2800ip_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800ip_2.tower = testData1;
      print(sys.scan_2800ip_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800ip_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800ip_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800ip_2.tower = testData2;
      print(sys.scan_2800ip_2.tower);
      expect(sys.scan_2800ip_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800ip_2.tower = defalut;
      print(sys.scan_2800ip_2.tower);
      expect(sys.scan_2800ip_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800ip_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01112_element_check_01089 **********\n\n");
    });

    test('01113_element_check_01090', () async {
      print("\n********** テスト実行：01113_element_check_01090 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtim.entry;
      print(sys.tprtim.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtim.entry = testData1s;
      print(sys.tprtim.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtim.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtim.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtim.entry = testData2s;
      print(sys.tprtim.entry);
      expect(sys.tprtim.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtim.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtim.entry = defalut;
      print(sys.tprtim.entry);
      expect(sys.tprtim.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtim.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01113_element_check_01090 **********\n\n");
    });

    test('01114_element_check_01091', () async {
      print("\n********** テスト実行：01114_element_check_01091 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtim.priority;
      print(sys.tprtim.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtim.priority = testData1;
      print(sys.tprtim.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtim.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtim.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtim.priority = testData2;
      print(sys.tprtim.priority);
      expect(sys.tprtim.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtim.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtim.priority = defalut;
      print(sys.tprtim.priority);
      expect(sys.tprtim.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtim.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01114_element_check_01091 **********\n\n");
    });

    test('01115_element_check_01092', () async {
      print("\n********** テスト実行：01115_element_check_01092 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtim.inifile;
      print(sys.tprtim.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtim.inifile = testData1s;
      print(sys.tprtim.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtim.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtim.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtim.inifile = testData2s;
      print(sys.tprtim.inifile);
      expect(sys.tprtim.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtim.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtim.inifile = defalut;
      print(sys.tprtim.inifile);
      expect(sys.tprtim.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtim.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01115_element_check_01092 **********\n\n");
    });

    test('01116_element_check_01093', () async {
      print("\n********** テスト実行：01116_element_check_01093 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_1.entry;
      print(sys.fip_2800im_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_1.entry = testData1s;
      print(sys.fip_2800im_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_1.entry = testData2s;
      print(sys.fip_2800im_1.entry);
      expect(sys.fip_2800im_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_1.entry = defalut;
      print(sys.fip_2800im_1.entry);
      expect(sys.fip_2800im_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01116_element_check_01093 **********\n\n");
    });

    test('01117_element_check_01094', () async {
      print("\n********** テスト実行：01117_element_check_01094 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_1.priority;
      print(sys.fip_2800im_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_1.priority = testData1;
      print(sys.fip_2800im_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_1.priority = testData2;
      print(sys.fip_2800im_1.priority);
      expect(sys.fip_2800im_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_1.priority = defalut;
      print(sys.fip_2800im_1.priority);
      expect(sys.fip_2800im_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01117_element_check_01094 **********\n\n");
    });

    test('01118_element_check_01095', () async {
      print("\n********** テスト実行：01118_element_check_01095 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_1.inifile;
      print(sys.fip_2800im_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_1.inifile = testData1s;
      print(sys.fip_2800im_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_1.inifile = testData2s;
      print(sys.fip_2800im_1.inifile);
      expect(sys.fip_2800im_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_1.inifile = defalut;
      print(sys.fip_2800im_1.inifile);
      expect(sys.fip_2800im_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01118_element_check_01095 **********\n\n");
    });

    test('01119_element_check_01096', () async {
      print("\n********** テスト実行：01119_element_check_01096 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_1.tower;
      print(sys.fip_2800im_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_1.tower = testData1;
      print(sys.fip_2800im_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_1.tower = testData2;
      print(sys.fip_2800im_1.tower);
      expect(sys.fip_2800im_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_1.tower = defalut;
      print(sys.fip_2800im_1.tower);
      expect(sys.fip_2800im_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01119_element_check_01096 **********\n\n");
    });

    test('01120_element_check_01097', () async {
      print("\n********** テスト実行：01120_element_check_01097 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_2.entry;
      print(sys.fip_2800im_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_2.entry = testData1s;
      print(sys.fip_2800im_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_2.entry = testData2s;
      print(sys.fip_2800im_2.entry);
      expect(sys.fip_2800im_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_2.entry = defalut;
      print(sys.fip_2800im_2.entry);
      expect(sys.fip_2800im_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01120_element_check_01097 **********\n\n");
    });

    test('01121_element_check_01098', () async {
      print("\n********** テスト実行：01121_element_check_01098 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_2.priority;
      print(sys.fip_2800im_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_2.priority = testData1;
      print(sys.fip_2800im_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_2.priority = testData2;
      print(sys.fip_2800im_2.priority);
      expect(sys.fip_2800im_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_2.priority = defalut;
      print(sys.fip_2800im_2.priority);
      expect(sys.fip_2800im_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01121_element_check_01098 **********\n\n");
    });

    test('01122_element_check_01099', () async {
      print("\n********** テスト実行：01122_element_check_01099 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_2.inifile;
      print(sys.fip_2800im_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_2.inifile = testData1s;
      print(sys.fip_2800im_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_2.inifile = testData2s;
      print(sys.fip_2800im_2.inifile);
      expect(sys.fip_2800im_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_2.inifile = defalut;
      print(sys.fip_2800im_2.inifile);
      expect(sys.fip_2800im_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01122_element_check_01099 **********\n\n");
    });

    test('01123_element_check_01100', () async {
      print("\n********** テスト実行：01123_element_check_01100 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_2.tower;
      print(sys.fip_2800im_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_2.tower = testData1;
      print(sys.fip_2800im_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_2.tower = testData2;
      print(sys.fip_2800im_2.tower);
      expect(sys.fip_2800im_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_2.tower = defalut;
      print(sys.fip_2800im_2.tower);
      expect(sys.fip_2800im_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01123_element_check_01100 **********\n\n");
    });

    test('01124_element_check_01101', () async {
      print("\n********** テスト実行：01124_element_check_01101 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_3.entry;
      print(sys.fip_2800im_3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_3.entry = testData1s;
      print(sys.fip_2800im_3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_3.entry = testData2s;
      print(sys.fip_2800im_3.entry);
      expect(sys.fip_2800im_3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_3.entry = defalut;
      print(sys.fip_2800im_3.entry);
      expect(sys.fip_2800im_3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01124_element_check_01101 **********\n\n");
    });

    test('01125_element_check_01102', () async {
      print("\n********** テスト実行：01125_element_check_01102 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_3.priority;
      print(sys.fip_2800im_3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_3.priority = testData1;
      print(sys.fip_2800im_3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_3.priority = testData2;
      print(sys.fip_2800im_3.priority);
      expect(sys.fip_2800im_3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_3.priority = defalut;
      print(sys.fip_2800im_3.priority);
      expect(sys.fip_2800im_3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01125_element_check_01102 **********\n\n");
    });

    test('01126_element_check_01103', () async {
      print("\n********** テスト実行：01126_element_check_01103 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_3.inifile;
      print(sys.fip_2800im_3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_3.inifile = testData1s;
      print(sys.fip_2800im_3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_3.inifile = testData2s;
      print(sys.fip_2800im_3.inifile);
      expect(sys.fip_2800im_3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_3.inifile = defalut;
      print(sys.fip_2800im_3.inifile);
      expect(sys.fip_2800im_3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01126_element_check_01103 **********\n\n");
    });

    test('01127_element_check_01104', () async {
      print("\n********** テスト実行：01127_element_check_01104 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_2800im_3.tower;
      print(sys.fip_2800im_3.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_2800im_3.tower = testData1;
      print(sys.fip_2800im_3.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_2800im_3.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_2800im_3.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_2800im_3.tower = testData2;
      print(sys.fip_2800im_3.tower);
      expect(sys.fip_2800im_3.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_2800im_3.tower = defalut;
      print(sys.fip_2800im_3.tower);
      expect(sys.fip_2800im_3.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_2800im_3.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01127_element_check_01104 **********\n\n");
    });

    test('01128_element_check_01105', () async {
      print("\n********** テスト実行：01128_element_check_01105 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_1.entry;
      print(sys.scan_2800im_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_1.entry = testData1s;
      print(sys.scan_2800im_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_1.entry = testData2s;
      print(sys.scan_2800im_1.entry);
      expect(sys.scan_2800im_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_1.entry = defalut;
      print(sys.scan_2800im_1.entry);
      expect(sys.scan_2800im_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01128_element_check_01105 **********\n\n");
    });

    test('01129_element_check_01106', () async {
      print("\n********** テスト実行：01129_element_check_01106 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_1.priority;
      print(sys.scan_2800im_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_1.priority = testData1;
      print(sys.scan_2800im_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_1.priority = testData2;
      print(sys.scan_2800im_1.priority);
      expect(sys.scan_2800im_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_1.priority = defalut;
      print(sys.scan_2800im_1.priority);
      expect(sys.scan_2800im_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01129_element_check_01106 **********\n\n");
    });

    test('01130_element_check_01107', () async {
      print("\n********** テスト実行：01130_element_check_01107 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_1.inifile;
      print(sys.scan_2800im_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_1.inifile = testData1s;
      print(sys.scan_2800im_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_1.inifile = testData2s;
      print(sys.scan_2800im_1.inifile);
      expect(sys.scan_2800im_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_1.inifile = defalut;
      print(sys.scan_2800im_1.inifile);
      expect(sys.scan_2800im_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01130_element_check_01107 **********\n\n");
    });

    test('01131_element_check_01108', () async {
      print("\n********** テスト実行：01131_element_check_01108 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_1.tower;
      print(sys.scan_2800im_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_1.tower = testData1;
      print(sys.scan_2800im_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_1.tower = testData2;
      print(sys.scan_2800im_1.tower);
      expect(sys.scan_2800im_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_1.tower = defalut;
      print(sys.scan_2800im_1.tower);
      expect(sys.scan_2800im_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01131_element_check_01108 **********\n\n");
    });

    test('01132_element_check_01109', () async {
      print("\n********** テスト実行：01132_element_check_01109 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_2.entry;
      print(sys.scan_2800im_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_2.entry = testData1s;
      print(sys.scan_2800im_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_2.entry = testData2s;
      print(sys.scan_2800im_2.entry);
      expect(sys.scan_2800im_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_2.entry = defalut;
      print(sys.scan_2800im_2.entry);
      expect(sys.scan_2800im_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01132_element_check_01109 **********\n\n");
    });

    test('01133_element_check_01110', () async {
      print("\n********** テスト実行：01133_element_check_01110 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_2.priority;
      print(sys.scan_2800im_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_2.priority = testData1;
      print(sys.scan_2800im_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_2.priority = testData2;
      print(sys.scan_2800im_2.priority);
      expect(sys.scan_2800im_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_2.priority = defalut;
      print(sys.scan_2800im_2.priority);
      expect(sys.scan_2800im_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01133_element_check_01110 **********\n\n");
    });

    test('01134_element_check_01111', () async {
      print("\n********** テスト実行：01134_element_check_01111 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_2.inifile;
      print(sys.scan_2800im_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_2.inifile = testData1s;
      print(sys.scan_2800im_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_2.inifile = testData2s;
      print(sys.scan_2800im_2.inifile);
      expect(sys.scan_2800im_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_2.inifile = defalut;
      print(sys.scan_2800im_2.inifile);
      expect(sys.scan_2800im_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01134_element_check_01111 **********\n\n");
    });

    test('01135_element_check_01112', () async {
      print("\n********** テスト実行：01135_element_check_01112 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800im_2.tower;
      print(sys.scan_2800im_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800im_2.tower = testData1;
      print(sys.scan_2800im_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800im_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800im_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800im_2.tower = testData2;
      print(sys.scan_2800im_2.tower);
      expect(sys.scan_2800im_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800im_2.tower = defalut;
      print(sys.scan_2800im_2.tower);
      expect(sys.scan_2800im_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800im_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01135_element_check_01112 **********\n\n");
    });

    test('01136_element_check_01113', () async {
      print("\n********** テスト実行：01136_element_check_01113 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus2_1.entry;
      print(sys.pmouse_plus2_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus2_1.entry = testData1s;
      print(sys.pmouse_plus2_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus2_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus2_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus2_1.entry = testData2s;
      print(sys.pmouse_plus2_1.entry);
      expect(sys.pmouse_plus2_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus2_1.entry = defalut;
      print(sys.pmouse_plus2_1.entry);
      expect(sys.pmouse_plus2_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01136_element_check_01113 **********\n\n");
    });

    test('01137_element_check_01114', () async {
      print("\n********** テスト実行：01137_element_check_01114 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus2_1.priority;
      print(sys.pmouse_plus2_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus2_1.priority = testData1;
      print(sys.pmouse_plus2_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus2_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus2_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus2_1.priority = testData2;
      print(sys.pmouse_plus2_1.priority);
      expect(sys.pmouse_plus2_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus2_1.priority = defalut;
      print(sys.pmouse_plus2_1.priority);
      expect(sys.pmouse_plus2_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01137_element_check_01114 **********\n\n");
    });

    test('01138_element_check_01115', () async {
      print("\n********** テスト実行：01138_element_check_01115 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus2_1.inifile;
      print(sys.pmouse_plus2_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus2_1.inifile = testData1s;
      print(sys.pmouse_plus2_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus2_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus2_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus2_1.inifile = testData2s;
      print(sys.pmouse_plus2_1.inifile);
      expect(sys.pmouse_plus2_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus2_1.inifile = defalut;
      print(sys.pmouse_plus2_1.inifile);
      expect(sys.pmouse_plus2_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01138_element_check_01115 **********\n\n");
    });

    test('01139_element_check_01116', () async {
      print("\n********** テスト実行：01139_element_check_01116 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_plus2_1.tower;
      print(sys.pmouse_plus2_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_plus2_1.tower = testData1;
      print(sys.pmouse_plus2_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_plus2_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_plus2_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_plus2_1.tower = testData2;
      print(sys.pmouse_plus2_1.tower);
      expect(sys.pmouse_plus2_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_plus2_1.tower = defalut;
      print(sys.pmouse_plus2_1.tower);
      expect(sys.pmouse_plus2_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_plus2_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01139_element_check_01116 **********\n\n");
    });

    test('01140_element_check_01117', () async {
      print("\n********** テスト実行：01140_element_check_01117 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_1.entry;
      print(sys.fip_plus2_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_1.entry = testData1s;
      print(sys.fip_plus2_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_1.entry = testData2s;
      print(sys.fip_plus2_1.entry);
      expect(sys.fip_plus2_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_1.entry = defalut;
      print(sys.fip_plus2_1.entry);
      expect(sys.fip_plus2_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01140_element_check_01117 **********\n\n");
    });

    test('01141_element_check_01118', () async {
      print("\n********** テスト実行：01141_element_check_01118 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_1.priority;
      print(sys.fip_plus2_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_1.priority = testData1;
      print(sys.fip_plus2_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_1.priority = testData2;
      print(sys.fip_plus2_1.priority);
      expect(sys.fip_plus2_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_1.priority = defalut;
      print(sys.fip_plus2_1.priority);
      expect(sys.fip_plus2_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01141_element_check_01118 **********\n\n");
    });

    test('01142_element_check_01119', () async {
      print("\n********** テスト実行：01142_element_check_01119 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_1.inifile;
      print(sys.fip_plus2_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_1.inifile = testData1s;
      print(sys.fip_plus2_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_1.inifile = testData2s;
      print(sys.fip_plus2_1.inifile);
      expect(sys.fip_plus2_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_1.inifile = defalut;
      print(sys.fip_plus2_1.inifile);
      expect(sys.fip_plus2_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01142_element_check_01119 **********\n\n");
    });

    test('01143_element_check_01120', () async {
      print("\n********** テスト実行：01143_element_check_01120 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_1.tower;
      print(sys.fip_plus2_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_1.tower = testData1;
      print(sys.fip_plus2_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_1.tower = testData2;
      print(sys.fip_plus2_1.tower);
      expect(sys.fip_plus2_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_1.tower = defalut;
      print(sys.fip_plus2_1.tower);
      expect(sys.fip_plus2_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01143_element_check_01120 **********\n\n");
    });

    test('01144_element_check_01121', () async {
      print("\n********** テスト実行：01144_element_check_01121 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_2.entry;
      print(sys.fip_plus2_2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_2.entry = testData1s;
      print(sys.fip_plus2_2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_2.entry = testData2s;
      print(sys.fip_plus2_2.entry);
      expect(sys.fip_plus2_2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_2.entry = defalut;
      print(sys.fip_plus2_2.entry);
      expect(sys.fip_plus2_2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01144_element_check_01121 **********\n\n");
    });

    test('01145_element_check_01122', () async {
      print("\n********** テスト実行：01145_element_check_01122 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_2.priority;
      print(sys.fip_plus2_2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_2.priority = testData1;
      print(sys.fip_plus2_2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_2.priority = testData2;
      print(sys.fip_plus2_2.priority);
      expect(sys.fip_plus2_2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_2.priority = defalut;
      print(sys.fip_plus2_2.priority);
      expect(sys.fip_plus2_2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01145_element_check_01122 **********\n\n");
    });

    test('01146_element_check_01123', () async {
      print("\n********** テスト実行：01146_element_check_01123 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_2.inifile;
      print(sys.fip_plus2_2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_2.inifile = testData1s;
      print(sys.fip_plus2_2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_2.inifile = testData2s;
      print(sys.fip_plus2_2.inifile);
      expect(sys.fip_plus2_2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_2.inifile = defalut;
      print(sys.fip_plus2_2.inifile);
      expect(sys.fip_plus2_2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01146_element_check_01123 **********\n\n");
    });

    test('01147_element_check_01124', () async {
      print("\n********** テスト実行：01147_element_check_01124 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_2.tower;
      print(sys.fip_plus2_2.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_2.tower = testData1;
      print(sys.fip_plus2_2.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_2.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_2.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_2.tower = testData2;
      print(sys.fip_plus2_2.tower);
      expect(sys.fip_plus2_2.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_2.tower = defalut;
      print(sys.fip_plus2_2.tower);
      expect(sys.fip_plus2_2.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_2.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01147_element_check_01124 **********\n\n");
    });

    test('01148_element_check_01125', () async {
      print("\n********** テスト実行：01148_element_check_01125 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_3.entry;
      print(sys.fip_plus2_3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_3.entry = testData1s;
      print(sys.fip_plus2_3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_3.entry = testData2s;
      print(sys.fip_plus2_3.entry);
      expect(sys.fip_plus2_3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_3.entry = defalut;
      print(sys.fip_plus2_3.entry);
      expect(sys.fip_plus2_3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01148_element_check_01125 **********\n\n");
    });

    test('01149_element_check_01126', () async {
      print("\n********** テスト実行：01149_element_check_01126 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_3.priority;
      print(sys.fip_plus2_3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_3.priority = testData1;
      print(sys.fip_plus2_3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_3.priority = testData2;
      print(sys.fip_plus2_3.priority);
      expect(sys.fip_plus2_3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_3.priority = defalut;
      print(sys.fip_plus2_3.priority);
      expect(sys.fip_plus2_3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01149_element_check_01126 **********\n\n");
    });

    test('01150_element_check_01127', () async {
      print("\n********** テスト実行：01150_element_check_01127 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_3.inifile;
      print(sys.fip_plus2_3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_3.inifile = testData1s;
      print(sys.fip_plus2_3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_3.inifile = testData2s;
      print(sys.fip_plus2_3.inifile);
      expect(sys.fip_plus2_3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_3.inifile = defalut;
      print(sys.fip_plus2_3.inifile);
      expect(sys.fip_plus2_3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01150_element_check_01127 **********\n\n");
    });

    test('01151_element_check_01128', () async {
      print("\n********** テスト実行：01151_element_check_01128 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fip_plus2_3.tower;
      print(sys.fip_plus2_3.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fip_plus2_3.tower = testData1;
      print(sys.fip_plus2_3.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fip_plus2_3.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fip_plus2_3.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fip_plus2_3.tower = testData2;
      print(sys.fip_plus2_3.tower);
      expect(sys.fip_plus2_3.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fip_plus2_3.tower = defalut;
      print(sys.fip_plus2_3.tower);
      expect(sys.fip_plus2_3.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fip_plus2_3.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01151_element_check_01128 **********\n\n");
    });

    test('01152_element_check_01129', () async {
      print("\n********** テスト実行：01152_element_check_01129 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_plus2_1.entry;
      print(sys.msr_plus2_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_plus2_1.entry = testData1s;
      print(sys.msr_plus2_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_plus2_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_plus2_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_plus2_1.entry = testData2s;
      print(sys.msr_plus2_1.entry);
      expect(sys.msr_plus2_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_plus2_1.entry = defalut;
      print(sys.msr_plus2_1.entry);
      expect(sys.msr_plus2_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01152_element_check_01129 **********\n\n");
    });

    test('01153_element_check_01130', () async {
      print("\n********** テスト実行：01153_element_check_01130 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_plus2_1.priority;
      print(sys.msr_plus2_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_plus2_1.priority = testData1;
      print(sys.msr_plus2_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_plus2_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_plus2_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_plus2_1.priority = testData2;
      print(sys.msr_plus2_1.priority);
      expect(sys.msr_plus2_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_plus2_1.priority = defalut;
      print(sys.msr_plus2_1.priority);
      expect(sys.msr_plus2_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01153_element_check_01130 **********\n\n");
    });

    test('01154_element_check_01131', () async {
      print("\n********** テスト実行：01154_element_check_01131 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_plus2_1.inifile;
      print(sys.msr_plus2_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_plus2_1.inifile = testData1s;
      print(sys.msr_plus2_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_plus2_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_plus2_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_plus2_1.inifile = testData2s;
      print(sys.msr_plus2_1.inifile);
      expect(sys.msr_plus2_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_plus2_1.inifile = defalut;
      print(sys.msr_plus2_1.inifile);
      expect(sys.msr_plus2_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01154_element_check_01131 **********\n\n");
    });

    test('01155_element_check_01132', () async {
      print("\n********** テスト実行：01155_element_check_01132 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_plus2_1.tower;
      print(sys.msr_plus2_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_plus2_1.tower = testData1;
      print(sys.msr_plus2_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_plus2_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_plus2_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_plus2_1.tower = testData2;
      print(sys.msr_plus2_1.tower);
      expect(sys.msr_plus2_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_plus2_1.tower = defalut;
      print(sys.msr_plus2_1.tower);
      expect(sys.msr_plus2_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_plus2_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01155_element_check_01132 **********\n\n");
    });

    test('01156_element_check_01133', () async {
      print("\n********** テスト実行：01156_element_check_01133 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800a3_1.entry;
      print(sys.scan_2800a3_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800a3_1.entry = testData1s;
      print(sys.scan_2800a3_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800a3_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800a3_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800a3_1.entry = testData2s;
      print(sys.scan_2800a3_1.entry);
      expect(sys.scan_2800a3_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800a3_1.entry = defalut;
      print(sys.scan_2800a3_1.entry);
      expect(sys.scan_2800a3_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01156_element_check_01133 **********\n\n");
    });

    test('01157_element_check_01134', () async {
      print("\n********** テスト実行：01157_element_check_01134 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800a3_1.priority;
      print(sys.scan_2800a3_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800a3_1.priority = testData1;
      print(sys.scan_2800a3_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800a3_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800a3_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800a3_1.priority = testData2;
      print(sys.scan_2800a3_1.priority);
      expect(sys.scan_2800a3_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800a3_1.priority = defalut;
      print(sys.scan_2800a3_1.priority);
      expect(sys.scan_2800a3_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01157_element_check_01134 **********\n\n");
    });

    test('01158_element_check_01135', () async {
      print("\n********** テスト実行：01158_element_check_01135 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800a3_1.inifile;
      print(sys.scan_2800a3_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800a3_1.inifile = testData1s;
      print(sys.scan_2800a3_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800a3_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800a3_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800a3_1.inifile = testData2s;
      print(sys.scan_2800a3_1.inifile);
      expect(sys.scan_2800a3_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800a3_1.inifile = defalut;
      print(sys.scan_2800a3_1.inifile);
      expect(sys.scan_2800a3_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01158_element_check_01135 **********\n\n");
    });

    test('01159_element_check_01136', () async {
      print("\n********** テスト実行：01159_element_check_01136 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800a3_1.tower;
      print(sys.scan_2800a3_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800a3_1.tower = testData1;
      print(sys.scan_2800a3_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800a3_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800a3_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800a3_1.tower = testData2;
      print(sys.scan_2800a3_1.tower);
      expect(sys.scan_2800a3_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800a3_1.tower = defalut;
      print(sys.scan_2800a3_1.tower);
      expect(sys.scan_2800a3_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800a3_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01159_element_check_01136 **********\n\n");
    });

    test('01160_element_check_01137', () async {
      print("\n********** テスト実行：01160_element_check_01137 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800i3_1.entry;
      print(sys.scan_2800i3_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800i3_1.entry = testData1s;
      print(sys.scan_2800i3_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800i3_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800i3_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800i3_1.entry = testData2s;
      print(sys.scan_2800i3_1.entry);
      expect(sys.scan_2800i3_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800i3_1.entry = defalut;
      print(sys.scan_2800i3_1.entry);
      expect(sys.scan_2800i3_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01160_element_check_01137 **********\n\n");
    });

    test('01161_element_check_01138', () async {
      print("\n********** テスト実行：01161_element_check_01138 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800i3_1.priority;
      print(sys.scan_2800i3_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800i3_1.priority = testData1;
      print(sys.scan_2800i3_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800i3_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800i3_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800i3_1.priority = testData2;
      print(sys.scan_2800i3_1.priority);
      expect(sys.scan_2800i3_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800i3_1.priority = defalut;
      print(sys.scan_2800i3_1.priority);
      expect(sys.scan_2800i3_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01161_element_check_01138 **********\n\n");
    });

    test('01162_element_check_01139', () async {
      print("\n********** テスト実行：01162_element_check_01139 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800i3_1.inifile;
      print(sys.scan_2800i3_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800i3_1.inifile = testData1s;
      print(sys.scan_2800i3_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800i3_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800i3_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800i3_1.inifile = testData2s;
      print(sys.scan_2800i3_1.inifile);
      expect(sys.scan_2800i3_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800i3_1.inifile = defalut;
      print(sys.scan_2800i3_1.inifile);
      expect(sys.scan_2800i3_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01162_element_check_01139 **********\n\n");
    });

    test('01163_element_check_01140', () async {
      print("\n********** テスト実行：01163_element_check_01140 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800i3_1.tower;
      print(sys.scan_2800i3_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800i3_1.tower = testData1;
      print(sys.scan_2800i3_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800i3_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800i3_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800i3_1.tower = testData2;
      print(sys.scan_2800i3_1.tower);
      expect(sys.scan_2800i3_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800i3_1.tower = defalut;
      print(sys.scan_2800i3_1.tower);
      expect(sys.scan_2800i3_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800i3_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01163_element_check_01140 **********\n\n");
    });

    test('01164_element_check_01141', () async {
      print("\n********** テスト実行：01164_element_check_01141 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_int_1.entry;
      print(sys.msr_int_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_int_1.entry = testData1s;
      print(sys.msr_int_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_int_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_int_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_int_1.entry = testData2s;
      print(sys.msr_int_1.entry);
      expect(sys.msr_int_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_int_1.entry = defalut;
      print(sys.msr_int_1.entry);
      expect(sys.msr_int_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01164_element_check_01141 **********\n\n");
    });

    test('01165_element_check_01142', () async {
      print("\n********** テスト実行：01165_element_check_01142 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_int_1.priority;
      print(sys.msr_int_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_int_1.priority = testData1;
      print(sys.msr_int_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_int_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_int_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_int_1.priority = testData2;
      print(sys.msr_int_1.priority);
      expect(sys.msr_int_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_int_1.priority = defalut;
      print(sys.msr_int_1.priority);
      expect(sys.msr_int_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01165_element_check_01142 **********\n\n");
    });

    test('01166_element_check_01143', () async {
      print("\n********** テスト実行：01166_element_check_01143 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_int_1.inifile;
      print(sys.msr_int_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_int_1.inifile = testData1s;
      print(sys.msr_int_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_int_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_int_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_int_1.inifile = testData2s;
      print(sys.msr_int_1.inifile);
      expect(sys.msr_int_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_int_1.inifile = defalut;
      print(sys.msr_int_1.inifile);
      expect(sys.msr_int_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01166_element_check_01143 **********\n\n");
    });

    test('01167_element_check_01144', () async {
      print("\n********** テスト実行：01167_element_check_01144 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.msr_int_1.tower;
      print(sys.msr_int_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.msr_int_1.tower = testData1;
      print(sys.msr_int_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.msr_int_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.msr_int_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.msr_int_1.tower = testData2;
      print(sys.msr_int_1.tower);
      expect(sys.msr_int_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.msr_int_1.tower = defalut;
      print(sys.msr_int_1.tower);
      expect(sys.msr_int_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.msr_int_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01167_element_check_01144 **********\n\n");
    });

    test('01168_element_check_01145', () async {
      print("\n********** テスト実行：01168_element_check_01145 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800g3_1.entry;
      print(sys.scan_2800g3_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800g3_1.entry = testData1s;
      print(sys.scan_2800g3_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800g3_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800g3_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800g3_1.entry = testData2s;
      print(sys.scan_2800g3_1.entry);
      expect(sys.scan_2800g3_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800g3_1.entry = defalut;
      print(sys.scan_2800g3_1.entry);
      expect(sys.scan_2800g3_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01168_element_check_01145 **********\n\n");
    });

    test('01169_element_check_01146', () async {
      print("\n********** テスト実行：01169_element_check_01146 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800g3_1.priority;
      print(sys.scan_2800g3_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800g3_1.priority = testData1;
      print(sys.scan_2800g3_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800g3_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800g3_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800g3_1.priority = testData2;
      print(sys.scan_2800g3_1.priority);
      expect(sys.scan_2800g3_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800g3_1.priority = defalut;
      print(sys.scan_2800g3_1.priority);
      expect(sys.scan_2800g3_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01169_element_check_01146 **********\n\n");
    });

    test('01170_element_check_01147', () async {
      print("\n********** テスト実行：01170_element_check_01147 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800g3_1.inifile;
      print(sys.scan_2800g3_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800g3_1.inifile = testData1s;
      print(sys.scan_2800g3_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800g3_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800g3_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800g3_1.inifile = testData2s;
      print(sys.scan_2800g3_1.inifile);
      expect(sys.scan_2800g3_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800g3_1.inifile = defalut;
      print(sys.scan_2800g3_1.inifile);
      expect(sys.scan_2800g3_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01170_element_check_01147 **********\n\n");
    });

    test('01171_element_check_01148', () async {
      print("\n********** テスト実行：01171_element_check_01148 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800g3_1.tower;
      print(sys.scan_2800g3_1.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800g3_1.tower = testData1;
      print(sys.scan_2800g3_1.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800g3_1.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800g3_1.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800g3_1.tower = testData2;
      print(sys.scan_2800g3_1.tower);
      expect(sys.scan_2800g3_1.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800g3_1.tower = defalut;
      print(sys.scan_2800g3_1.tower);
      expect(sys.scan_2800g3_1.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800g3_1.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01171_element_check_01148 **********\n\n");
    });

    test('01172_element_check_01149', () async {
      print("\n********** テスト実行：01172_element_check_01149 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_4.entry;
      print(sys.pmouse_2800_4.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_4.entry = testData1s;
      print(sys.pmouse_2800_4.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_4.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_4.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_4.entry = testData2s;
      print(sys.pmouse_2800_4.entry);
      expect(sys.pmouse_2800_4.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_4.entry = defalut;
      print(sys.pmouse_2800_4.entry);
      expect(sys.pmouse_2800_4.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01172_element_check_01149 **********\n\n");
    });

    test('01173_element_check_01150', () async {
      print("\n********** テスト実行：01173_element_check_01150 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_4.priority;
      print(sys.pmouse_2800_4.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_4.priority = testData1;
      print(sys.pmouse_2800_4.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_4.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_4.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_4.priority = testData2;
      print(sys.pmouse_2800_4.priority);
      expect(sys.pmouse_2800_4.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_4.priority = defalut;
      print(sys.pmouse_2800_4.priority);
      expect(sys.pmouse_2800_4.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01173_element_check_01150 **********\n\n");
    });

    test('01174_element_check_01151', () async {
      print("\n********** テスト実行：01174_element_check_01151 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_4.inifile;
      print(sys.pmouse_2800_4.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_4.inifile = testData1s;
      print(sys.pmouse_2800_4.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_4.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_4.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_4.inifile = testData2s;
      print(sys.pmouse_2800_4.inifile);
      expect(sys.pmouse_2800_4.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_4.inifile = defalut;
      print(sys.pmouse_2800_4.inifile);
      expect(sys.pmouse_2800_4.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01174_element_check_01151 **********\n\n");
    });

    test('01175_element_check_01152', () async {
      print("\n********** テスト実行：01175_element_check_01152 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_4.inifile2;
      print(sys.pmouse_2800_4.inifile2);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_4.inifile2 = testData1s;
      print(sys.pmouse_2800_4.inifile2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_4.inifile2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_4.inifile2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_4.inifile2 = testData2s;
      print(sys.pmouse_2800_4.inifile2);
      expect(sys.pmouse_2800_4.inifile2 == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.inifile2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_4.inifile2 = defalut;
      print(sys.pmouse_2800_4.inifile2);
      expect(sys.pmouse_2800_4.inifile2 == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.inifile2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01175_element_check_01152 **********\n\n");
    });

    test('01176_element_check_01153', () async {
      print("\n********** テスト実行：01176_element_check_01153 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pmouse_2800_4.tower;
      print(sys.pmouse_2800_4.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pmouse_2800_4.tower = testData1;
      print(sys.pmouse_2800_4.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pmouse_2800_4.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pmouse_2800_4.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pmouse_2800_4.tower = testData2;
      print(sys.pmouse_2800_4.tower);
      expect(sys.pmouse_2800_4.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pmouse_2800_4.tower = defalut;
      print(sys.pmouse_2800_4.tower);
      expect(sys.pmouse_2800_4.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pmouse_2800_4.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01176_element_check_01153 **********\n\n");
    });

    test('01177_element_check_01154', () async {
      print("\n********** テスト実行：01177_element_check_01154 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprthp.entry;
      print(sys.tprthp.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprthp.entry = testData1s;
      print(sys.tprthp.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprthp.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprthp.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprthp.entry = testData2s;
      print(sys.tprthp.entry);
      expect(sys.tprthp.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprthp.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprthp.entry = defalut;
      print(sys.tprthp.entry);
      expect(sys.tprthp.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprthp.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01177_element_check_01154 **********\n\n");
    });

    test('01178_element_check_01155', () async {
      print("\n********** テスト実行：01178_element_check_01155 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprthp.priority;
      print(sys.tprthp.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprthp.priority = testData1;
      print(sys.tprthp.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprthp.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprthp.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprthp.priority = testData2;
      print(sys.tprthp.priority);
      expect(sys.tprthp.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprthp.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprthp.priority = defalut;
      print(sys.tprthp.priority);
      expect(sys.tprthp.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprthp.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01178_element_check_01155 **********\n\n");
    });

    test('01179_element_check_01156', () async {
      print("\n********** テスト実行：01179_element_check_01156 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprthp.inifile;
      print(sys.tprthp.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprthp.inifile = testData1s;
      print(sys.tprthp.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprthp.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprthp.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprthp.inifile = testData2s;
      print(sys.tprthp.inifile);
      expect(sys.tprthp.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprthp.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprthp.inifile = defalut;
      print(sys.tprthp.inifile);
      expect(sys.tprthp.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprthp.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01179_element_check_01156 **********\n\n");
    });

    test('01180_element_check_01157', () async {
      print("\n********** テスト実行：01180_element_check_01157 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sprocket.entry;
      print(sys.sprocket.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sprocket.entry = testData1s;
      print(sys.sprocket.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sprocket.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sprocket.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sprocket.entry = testData2s;
      print(sys.sprocket.entry);
      expect(sys.sprocket.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sprocket.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sprocket.entry = defalut;
      print(sys.sprocket.entry);
      expect(sys.sprocket.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sprocket.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01180_element_check_01157 **********\n\n");
    });

    test('01181_element_check_01158', () async {
      print("\n********** テスト実行：01181_element_check_01158 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sprocket.priority;
      print(sys.sprocket.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sprocket.priority = testData1;
      print(sys.sprocket.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sprocket.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sprocket.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sprocket.priority = testData2;
      print(sys.sprocket.priority);
      expect(sys.sprocket.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sprocket.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sprocket.priority = defalut;
      print(sys.sprocket.priority);
      expect(sys.sprocket.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sprocket.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01181_element_check_01158 **********\n\n");
    });

    test('01182_element_check_01159', () async {
      print("\n********** テスト実行：01182_element_check_01159 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sprocket.inifile;
      print(sys.sprocket.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sprocket.inifile = testData1s;
      print(sys.sprocket.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sprocket.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sprocket.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sprocket.inifile = testData2s;
      print(sys.sprocket.inifile);
      expect(sys.sprocket.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sprocket.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sprocket.inifile = defalut;
      print(sys.sprocket.inifile);
      expect(sys.sprocket.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sprocket.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01182_element_check_01159 **********\n\n");
    });

    test('01183_element_check_01160', () async {
      print("\n********** テスト実行：01183_element_check_01160 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acr.entry;
      print(sys.acr.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acr.entry = testData1s;
      print(sys.acr.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acr.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acr.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acr.entry = testData2s;
      print(sys.acr.entry);
      expect(sys.acr.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acr.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acr.entry = defalut;
      print(sys.acr.entry);
      expect(sys.acr.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acr.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01183_element_check_01160 **********\n\n");
    });

    test('01184_element_check_01161', () async {
      print("\n********** テスト実行：01184_element_check_01161 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acr.priority;
      print(sys.acr.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acr.priority = testData1;
      print(sys.acr.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acr.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acr.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acr.priority = testData2;
      print(sys.acr.priority);
      expect(sys.acr.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.acr.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acr.priority = defalut;
      print(sys.acr.priority);
      expect(sys.acr.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acr.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01184_element_check_01161 **********\n\n");
    });

    test('01185_element_check_01162', () async {
      print("\n********** テスト実行：01185_element_check_01162 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acr.inifile;
      print(sys.acr.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acr.inifile = testData1s;
      print(sys.acr.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acr.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acr.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acr.inifile = testData2s;
      print(sys.acr.inifile);
      expect(sys.acr.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acr.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acr.inifile = defalut;
      print(sys.acr.inifile);
      expect(sys.acr.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acr.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01185_element_check_01162 **********\n\n");
    });

    test('01186_element_check_01163', () async {
      print("\n********** テスト実行：01186_element_check_01163 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb.entry;
      print(sys.acb.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb.entry = testData1s;
      print(sys.acb.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb.entry = testData2s;
      print(sys.acb.entry);
      expect(sys.acb.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acb.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb.entry = defalut;
      print(sys.acb.entry);
      expect(sys.acb.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01186_element_check_01163 **********\n\n");
    });

    test('01187_element_check_01164', () async {
      print("\n********** テスト実行：01187_element_check_01164 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb.priority;
      print(sys.acb.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb.priority = testData1;
      print(sys.acb.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb.priority = testData2;
      print(sys.acb.priority);
      expect(sys.acb.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.acb.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb.priority = defalut;
      print(sys.acb.priority);
      expect(sys.acb.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01187_element_check_01164 **********\n\n");
    });

    test('01188_element_check_01165', () async {
      print("\n********** テスト実行：01188_element_check_01165 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb.inifile;
      print(sys.acb.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb.inifile = testData1s;
      print(sys.acb.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb.inifile = testData2s;
      print(sys.acb.inifile);
      expect(sys.acb.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acb.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb.inifile = defalut;
      print(sys.acb.inifile);
      expect(sys.acb.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01188_element_check_01165 **********\n\n");
    });

    test('01189_element_check_01166', () async {
      print("\n********** テスト実行：01189_element_check_01166 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb20.entry;
      print(sys.acb20.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb20.entry = testData1s;
      print(sys.acb20.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb20.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb20.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb20.entry = testData2s;
      print(sys.acb20.entry);
      expect(sys.acb20.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acb20.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb20.entry = defalut;
      print(sys.acb20.entry);
      expect(sys.acb20.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb20.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01189_element_check_01166 **********\n\n");
    });

    test('01190_element_check_01167', () async {
      print("\n********** テスト実行：01190_element_check_01167 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb20.priority;
      print(sys.acb20.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb20.priority = testData1;
      print(sys.acb20.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb20.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb20.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb20.priority = testData2;
      print(sys.acb20.priority);
      expect(sys.acb20.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.acb20.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb20.priority = defalut;
      print(sys.acb20.priority);
      expect(sys.acb20.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb20.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01190_element_check_01167 **********\n\n");
    });

    test('01191_element_check_01168', () async {
      print("\n********** テスト実行：01191_element_check_01168 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb20.inifile;
      print(sys.acb20.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb20.inifile = testData1s;
      print(sys.acb20.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb20.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb20.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb20.inifile = testData2s;
      print(sys.acb20.inifile);
      expect(sys.acb20.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acb20.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb20.inifile = defalut;
      print(sys.acb20.inifile);
      expect(sys.acb20.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb20.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01191_element_check_01168 **********\n\n");
    });

    test('01192_element_check_01169', () async {
      print("\n********** テスト実行：01192_element_check_01169 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.rewrite.entry;
      print(sys.rewrite.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.rewrite.entry = testData1s;
      print(sys.rewrite.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.rewrite.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.rewrite.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.rewrite.entry = testData2s;
      print(sys.rewrite.entry);
      expect(sys.rewrite.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.rewrite.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.rewrite.entry = defalut;
      print(sys.rewrite.entry);
      expect(sys.rewrite.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.rewrite.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01192_element_check_01169 **********\n\n");
    });

    test('01193_element_check_01170', () async {
      print("\n********** テスト実行：01193_element_check_01170 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.rewrite.priority;
      print(sys.rewrite.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.rewrite.priority = testData1;
      print(sys.rewrite.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.rewrite.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.rewrite.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.rewrite.priority = testData2;
      print(sys.rewrite.priority);
      expect(sys.rewrite.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.rewrite.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.rewrite.priority = defalut;
      print(sys.rewrite.priority);
      expect(sys.rewrite.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.rewrite.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01193_element_check_01170 **********\n\n");
    });

    test('01194_element_check_01171', () async {
      print("\n********** テスト実行：01194_element_check_01171 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.rewrite.inifile;
      print(sys.rewrite.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.rewrite.inifile = testData1s;
      print(sys.rewrite.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.rewrite.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.rewrite.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.rewrite.inifile = testData2s;
      print(sys.rewrite.inifile);
      expect(sys.rewrite.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.rewrite.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.rewrite.inifile = defalut;
      print(sys.rewrite.inifile);
      expect(sys.rewrite.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.rewrite.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01194_element_check_01171 **********\n\n");
    });

    test('01195_element_check_01172', () async {
      print("\n********** テスト実行：01195_element_check_01172 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vismac.entry;
      print(sys.vismac.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vismac.entry = testData1s;
      print(sys.vismac.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vismac.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vismac.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vismac.entry = testData2s;
      print(sys.vismac.entry);
      expect(sys.vismac.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vismac.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vismac.entry = defalut;
      print(sys.vismac.entry);
      expect(sys.vismac.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vismac.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01195_element_check_01172 **********\n\n");
    });

    test('01196_element_check_01173', () async {
      print("\n********** テスト実行：01196_element_check_01173 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vismac.priority;
      print(sys.vismac.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vismac.priority = testData1;
      print(sys.vismac.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vismac.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vismac.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vismac.priority = testData2;
      print(sys.vismac.priority);
      expect(sys.vismac.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.vismac.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vismac.priority = defalut;
      print(sys.vismac.priority);
      expect(sys.vismac.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vismac.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01196_element_check_01173 **********\n\n");
    });

    test('01197_element_check_01174', () async {
      print("\n********** テスト実行：01197_element_check_01174 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vismac.inifile;
      print(sys.vismac.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vismac.inifile = testData1s;
      print(sys.vismac.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vismac.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vismac.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vismac.inifile = testData2s;
      print(sys.vismac.inifile);
      expect(sys.vismac.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vismac.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vismac.inifile = defalut;
      print(sys.vismac.inifile);
      expect(sys.vismac.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vismac.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01197_element_check_01174 **********\n\n");
    });

    test('01198_element_check_01175', () async {
      print("\n********** テスト実行：01198_element_check_01175 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gcat.entry;
      print(sys.gcat.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gcat.entry = testData1s;
      print(sys.gcat.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gcat.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gcat.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gcat.entry = testData2s;
      print(sys.gcat.entry);
      expect(sys.gcat.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gcat.entry = defalut;
      print(sys.gcat.entry);
      expect(sys.gcat.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01198_element_check_01175 **********\n\n");
    });

    test('01199_element_check_01176', () async {
      print("\n********** テスト実行：01199_element_check_01176 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gcat.priority;
      print(sys.gcat.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gcat.priority = testData1;
      print(sys.gcat.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gcat.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gcat.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gcat.priority = testData2;
      print(sys.gcat.priority);
      expect(sys.gcat.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gcat.priority = defalut;
      print(sys.gcat.priority);
      expect(sys.gcat.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01199_element_check_01176 **********\n\n");
    });

    test('01200_element_check_01177', () async {
      print("\n********** テスト実行：01200_element_check_01177 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gcat.inifile;
      print(sys.gcat.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gcat.inifile = testData1s;
      print(sys.gcat.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gcat.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gcat.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gcat.inifile = testData2s;
      print(sys.gcat.inifile);
      expect(sys.gcat.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gcat.inifile = defalut;
      print(sys.gcat.inifile);
      expect(sys.gcat.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01200_element_check_01177 **********\n\n");
    });

    test('01201_element_check_01178', () async {
      print("\n********** テスト実行：01201_element_check_01178 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.debit.entry;
      print(sys.debit.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.debit.entry = testData1s;
      print(sys.debit.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.debit.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.debit.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.debit.entry = testData2s;
      print(sys.debit.entry);
      expect(sys.debit.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.debit.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.debit.entry = defalut;
      print(sys.debit.entry);
      expect(sys.debit.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.debit.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01201_element_check_01178 **********\n\n");
    });

    test('01202_element_check_01179', () async {
      print("\n********** テスト実行：01202_element_check_01179 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.debit.priority;
      print(sys.debit.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.debit.priority = testData1;
      print(sys.debit.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.debit.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.debit.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.debit.priority = testData2;
      print(sys.debit.priority);
      expect(sys.debit.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.debit.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.debit.priority = defalut;
      print(sys.debit.priority);
      expect(sys.debit.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.debit.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01202_element_check_01179 **********\n\n");
    });

    test('01203_element_check_01180', () async {
      print("\n********** テスト実行：01203_element_check_01180 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.debit.inifile;
      print(sys.debit.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.debit.inifile = testData1s;
      print(sys.debit.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.debit.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.debit.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.debit.inifile = testData2s;
      print(sys.debit.inifile);
      expect(sys.debit.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.debit.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.debit.inifile = defalut;
      print(sys.debit.inifile);
      expect(sys.debit.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.debit.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01203_element_check_01180 **********\n\n");
    });

    test('01204_element_check_01181', () async {
      print("\n********** テスト実行：01204_element_check_01181 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scale.entry;
      print(sys.scale.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scale.entry = testData1s;
      print(sys.scale.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scale.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scale.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scale.entry = testData2s;
      print(sys.scale.entry);
      expect(sys.scale.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scale.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scale.entry = defalut;
      print(sys.scale.entry);
      expect(sys.scale.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scale.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01204_element_check_01181 **********\n\n");
    });

    test('01205_element_check_01182', () async {
      print("\n********** テスト実行：01205_element_check_01182 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scale.priority;
      print(sys.scale.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scale.priority = testData1;
      print(sys.scale.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scale.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scale.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scale.priority = testData2;
      print(sys.scale.priority);
      expect(sys.scale.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scale.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scale.priority = defalut;
      print(sys.scale.priority);
      expect(sys.scale.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scale.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01205_element_check_01182 **********\n\n");
    });

    test('01206_element_check_01183', () async {
      print("\n********** テスト実行：01206_element_check_01183 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scale.inifile;
      print(sys.scale.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scale.inifile = testData1s;
      print(sys.scale.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scale.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scale.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scale.inifile = testData2s;
      print(sys.scale.inifile);
      expect(sys.scale.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scale.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scale.inifile = defalut;
      print(sys.scale.inifile);
      expect(sys.scale.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scale.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01206_element_check_01183 **********\n\n");
    });

    test('01207_element_check_01184', () async {
      print("\n********** テスト実行：01207_element_check_01184 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.orc.entry;
      print(sys.orc.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.orc.entry = testData1s;
      print(sys.orc.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.orc.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.orc.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.orc.entry = testData2s;
      print(sys.orc.entry);
      expect(sys.orc.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.orc.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.orc.entry = defalut;
      print(sys.orc.entry);
      expect(sys.orc.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.orc.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01207_element_check_01184 **********\n\n");
    });

    test('01208_element_check_01185', () async {
      print("\n********** テスト実行：01208_element_check_01185 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.orc.priority;
      print(sys.orc.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.orc.priority = testData1;
      print(sys.orc.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.orc.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.orc.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.orc.priority = testData2;
      print(sys.orc.priority);
      expect(sys.orc.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.orc.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.orc.priority = defalut;
      print(sys.orc.priority);
      expect(sys.orc.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.orc.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01208_element_check_01185 **********\n\n");
    });

    test('01209_element_check_01186', () async {
      print("\n********** テスト実行：01209_element_check_01186 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.orc.inifile;
      print(sys.orc.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.orc.inifile = testData1s;
      print(sys.orc.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.orc.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.orc.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.orc.inifile = testData2s;
      print(sys.orc.inifile);
      expect(sys.orc.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.orc.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.orc.inifile = defalut;
      print(sys.orc.inifile);
      expect(sys.orc.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.orc.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01209_element_check_01186 **********\n\n");
    });

    test('01210_element_check_01187', () async {
      print("\n********** テスト実行：01210_element_check_01187 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sg_scale1.entry;
      print(sys.sg_scale1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sg_scale1.entry = testData1s;
      print(sys.sg_scale1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sg_scale1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sg_scale1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sg_scale1.entry = testData2s;
      print(sys.sg_scale1.entry);
      expect(sys.sg_scale1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sg_scale1.entry = defalut;
      print(sys.sg_scale1.entry);
      expect(sys.sg_scale1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01210_element_check_01187 **********\n\n");
    });

    test('01211_element_check_01188', () async {
      print("\n********** テスト実行：01211_element_check_01188 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sg_scale1.priority;
      print(sys.sg_scale1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sg_scale1.priority = testData1;
      print(sys.sg_scale1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sg_scale1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sg_scale1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sg_scale1.priority = testData2;
      print(sys.sg_scale1.priority);
      expect(sys.sg_scale1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sg_scale1.priority = defalut;
      print(sys.sg_scale1.priority);
      expect(sys.sg_scale1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01211_element_check_01188 **********\n\n");
    });

    test('01212_element_check_01189', () async {
      print("\n********** テスト実行：01212_element_check_01189 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sg_scale1.inifile;
      print(sys.sg_scale1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sg_scale1.inifile = testData1s;
      print(sys.sg_scale1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sg_scale1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sg_scale1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sg_scale1.inifile = testData2s;
      print(sys.sg_scale1.inifile);
      expect(sys.sg_scale1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sg_scale1.inifile = defalut;
      print(sys.sg_scale1.inifile);
      expect(sys.sg_scale1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01212_element_check_01189 **********\n\n");
    });

    test('01213_element_check_01190', () async {
      print("\n********** テスト実行：01213_element_check_01190 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sg_scale2.entry;
      print(sys.sg_scale2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sg_scale2.entry = testData1s;
      print(sys.sg_scale2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sg_scale2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sg_scale2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sg_scale2.entry = testData2s;
      print(sys.sg_scale2.entry);
      expect(sys.sg_scale2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sg_scale2.entry = defalut;
      print(sys.sg_scale2.entry);
      expect(sys.sg_scale2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01213_element_check_01190 **********\n\n");
    });

    test('01214_element_check_01191', () async {
      print("\n********** テスト実行：01214_element_check_01191 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sg_scale2.priority;
      print(sys.sg_scale2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sg_scale2.priority = testData1;
      print(sys.sg_scale2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sg_scale2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sg_scale2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sg_scale2.priority = testData2;
      print(sys.sg_scale2.priority);
      expect(sys.sg_scale2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sg_scale2.priority = defalut;
      print(sys.sg_scale2.priority);
      expect(sys.sg_scale2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01214_element_check_01191 **********\n\n");
    });

    test('01215_element_check_01192', () async {
      print("\n********** テスト実行：01215_element_check_01192 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sg_scale2.inifile;
      print(sys.sg_scale2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sg_scale2.inifile = testData1s;
      print(sys.sg_scale2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sg_scale2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sg_scale2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sg_scale2.inifile = testData2s;
      print(sys.sg_scale2.inifile);
      expect(sys.sg_scale2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sg_scale2.inifile = defalut;
      print(sys.sg_scale2.inifile);
      expect(sys.sg_scale2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sg_scale2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01215_element_check_01192 **********\n\n");
    });

    test('01216_element_check_01193', () async {
      print("\n********** テスト実行：01216_element_check_01193 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scale1.entry;
      print(sys.sm_scale1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scale1.entry = testData1s;
      print(sys.sm_scale1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scale1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scale1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scale1.entry = testData2s;
      print(sys.sm_scale1.entry);
      expect(sys.sm_scale1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scale1.entry = defalut;
      print(sys.sm_scale1.entry);
      expect(sys.sm_scale1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01216_element_check_01193 **********\n\n");
    });

    test('01217_element_check_01194', () async {
      print("\n********** テスト実行：01217_element_check_01194 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scale1.priority;
      print(sys.sm_scale1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scale1.priority = testData1;
      print(sys.sm_scale1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scale1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scale1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scale1.priority = testData2;
      print(sys.sm_scale1.priority);
      expect(sys.sm_scale1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scale1.priority = defalut;
      print(sys.sm_scale1.priority);
      expect(sys.sm_scale1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01217_element_check_01194 **********\n\n");
    });

    test('01218_element_check_01195', () async {
      print("\n********** テスト実行：01218_element_check_01195 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scale1.inifile;
      print(sys.sm_scale1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scale1.inifile = testData1s;
      print(sys.sm_scale1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scale1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scale1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scale1.inifile = testData2s;
      print(sys.sm_scale1.inifile);
      expect(sys.sm_scale1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scale1.inifile = defalut;
      print(sys.sm_scale1.inifile);
      expect(sys.sm_scale1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01218_element_check_01195 **********\n\n");
    });

    test('01219_element_check_01196', () async {
      print("\n********** テスト実行：01219_element_check_01196 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scale2.entry;
      print(sys.sm_scale2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scale2.entry = testData1s;
      print(sys.sm_scale2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scale2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scale2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scale2.entry = testData2s;
      print(sys.sm_scale2.entry);
      expect(sys.sm_scale2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scale2.entry = defalut;
      print(sys.sm_scale2.entry);
      expect(sys.sm_scale2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01219_element_check_01196 **********\n\n");
    });

    test('01220_element_check_01197', () async {
      print("\n********** テスト実行：01220_element_check_01197 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scale2.priority;
      print(sys.sm_scale2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scale2.priority = testData1;
      print(sys.sm_scale2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scale2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scale2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scale2.priority = testData2;
      print(sys.sm_scale2.priority);
      expect(sys.sm_scale2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scale2.priority = defalut;
      print(sys.sm_scale2.priority);
      expect(sys.sm_scale2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01220_element_check_01197 **********\n\n");
    });

    test('01221_element_check_01198', () async {
      print("\n********** テスト実行：01221_element_check_01198 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scale2.inifile;
      print(sys.sm_scale2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scale2.inifile = testData1s;
      print(sys.sm_scale2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scale2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scale2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scale2.inifile = testData2s;
      print(sys.sm_scale2.inifile);
      expect(sys.sm_scale2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scale2.inifile = defalut;
      print(sys.sm_scale2.inifile);
      expect(sys.sm_scale2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scale2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01221_element_check_01198 **********\n\n");
    });

    test('01222_element_check_01199', () async {
      print("\n********** テスト実行：01222_element_check_01199 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sip60.entry;
      print(sys.sip60.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sip60.entry = testData1s;
      print(sys.sip60.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sip60.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sip60.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sip60.entry = testData2s;
      print(sys.sip60.entry);
      expect(sys.sip60.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sip60.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sip60.entry = defalut;
      print(sys.sip60.entry);
      expect(sys.sip60.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sip60.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01222_element_check_01199 **********\n\n");
    });

    test('01223_element_check_01200', () async {
      print("\n********** テスト実行：01223_element_check_01200 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sip60.priority;
      print(sys.sip60.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sip60.priority = testData1;
      print(sys.sip60.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sip60.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sip60.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sip60.priority = testData2;
      print(sys.sip60.priority);
      expect(sys.sip60.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sip60.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sip60.priority = defalut;
      print(sys.sip60.priority);
      expect(sys.sip60.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sip60.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01223_element_check_01200 **********\n\n");
    });

    test('01224_element_check_01201', () async {
      print("\n********** テスト実行：01224_element_check_01201 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sip60.inifile;
      print(sys.sip60.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sip60.inifile = testData1s;
      print(sys.sip60.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sip60.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sip60.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sip60.inifile = testData2s;
      print(sys.sip60.inifile);
      expect(sys.sip60.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sip60.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sip60.inifile = defalut;
      print(sys.sip60.inifile);
      expect(sys.sip60.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sip60.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01224_element_check_01201 **********\n\n");
    });

    test('01225_element_check_01202', () async {
      print("\n********** テスト実行：01225_element_check_01202 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psp60.entry;
      print(sys.psp60.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psp60.entry = testData1s;
      print(sys.psp60.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psp60.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psp60.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psp60.entry = testData2s;
      print(sys.psp60.entry);
      expect(sys.psp60.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.psp60.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psp60.entry = defalut;
      print(sys.psp60.entry);
      expect(sys.psp60.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psp60.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01225_element_check_01202 **********\n\n");
    });

    test('01226_element_check_01203', () async {
      print("\n********** テスト実行：01226_element_check_01203 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psp60.priority;
      print(sys.psp60.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psp60.priority = testData1;
      print(sys.psp60.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psp60.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psp60.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psp60.priority = testData2;
      print(sys.psp60.priority);
      expect(sys.psp60.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.psp60.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psp60.priority = defalut;
      print(sys.psp60.priority);
      expect(sys.psp60.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psp60.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01226_element_check_01203 **********\n\n");
    });

    test('01227_element_check_01204', () async {
      print("\n********** テスト実行：01227_element_check_01204 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psp60.inifile;
      print(sys.psp60.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psp60.inifile = testData1s;
      print(sys.psp60.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psp60.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psp60.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psp60.inifile = testData2s;
      print(sys.psp60.inifile);
      expect(sys.psp60.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.psp60.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psp60.inifile = defalut;
      print(sys.psp60.inifile);
      expect(sys.psp60.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psp60.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01227_element_check_01204 **********\n\n");
    });

    test('01228_element_check_01205', () async {
      print("\n********** テスト実行：01228_element_check_01205 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.stpr.entry;
      print(sys.stpr.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.stpr.entry = testData1s;
      print(sys.stpr.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.stpr.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.stpr.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.stpr.entry = testData2s;
      print(sys.stpr.entry);
      expect(sys.stpr.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.stpr.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.stpr.entry = defalut;
      print(sys.stpr.entry);
      expect(sys.stpr.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.stpr.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01228_element_check_01205 **********\n\n");
    });

    test('01229_element_check_01206', () async {
      print("\n********** テスト実行：01229_element_check_01206 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.stpr.priority;
      print(sys.stpr.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.stpr.priority = testData1;
      print(sys.stpr.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.stpr.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.stpr.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.stpr.priority = testData2;
      print(sys.stpr.priority);
      expect(sys.stpr.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.stpr.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.stpr.priority = defalut;
      print(sys.stpr.priority);
      expect(sys.stpr.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.stpr.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01229_element_check_01206 **********\n\n");
    });

    test('01230_element_check_01207', () async {
      print("\n********** テスト実行：01230_element_check_01207 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.stpr.inifile;
      print(sys.stpr.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.stpr.inifile = testData1s;
      print(sys.stpr.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.stpr.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.stpr.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.stpr.inifile = testData2s;
      print(sys.stpr.inifile);
      expect(sys.stpr.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.stpr.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.stpr.inifile = defalut;
      print(sys.stpr.inifile);
      expect(sys.stpr.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.stpr.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01230_element_check_01207 **********\n\n");
    });

    test('01231_element_check_01208', () async {
      print("\n********** テスト実行：01231_element_check_01208 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pana.entry;
      print(sys.pana.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pana.entry = testData1s;
      print(sys.pana.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pana.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pana.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pana.entry = testData2s;
      print(sys.pana.entry);
      expect(sys.pana.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pana.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pana.entry = defalut;
      print(sys.pana.entry);
      expect(sys.pana.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pana.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01231_element_check_01208 **********\n\n");
    });

    test('01232_element_check_01209', () async {
      print("\n********** テスト実行：01232_element_check_01209 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pana.priority;
      print(sys.pana.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pana.priority = testData1;
      print(sys.pana.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pana.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pana.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pana.priority = testData2;
      print(sys.pana.priority);
      expect(sys.pana.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pana.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pana.priority = defalut;
      print(sys.pana.priority);
      expect(sys.pana.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pana.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01232_element_check_01209 **********\n\n");
    });

    test('01233_element_check_01210', () async {
      print("\n********** テスト実行：01233_element_check_01210 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pana.inifile;
      print(sys.pana.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pana.inifile = testData1s;
      print(sys.pana.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pana.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pana.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pana.inifile = testData2s;
      print(sys.pana.inifile);
      expect(sys.pana.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pana.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pana.inifile = defalut;
      print(sys.pana.inifile);
      expect(sys.pana.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pana.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01233_element_check_01210 **********\n\n");
    });

    test('01234_element_check_01211', () async {
      print("\n********** テスト実行：01234_element_check_01211 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gp.entry;
      print(sys.gp.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gp.entry = testData1s;
      print(sys.gp.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gp.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gp.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gp.entry = testData2s;
      print(sys.gp.entry);
      expect(sys.gp.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.gp.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gp.entry = defalut;
      print(sys.gp.entry);
      expect(sys.gp.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gp.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01234_element_check_01211 **********\n\n");
    });

    test('01235_element_check_01212', () async {
      print("\n********** テスト実行：01235_element_check_01212 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gp.priority;
      print(sys.gp.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gp.priority = testData1;
      print(sys.gp.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gp.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gp.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gp.priority = testData2;
      print(sys.gp.priority);
      expect(sys.gp.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.gp.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gp.priority = defalut;
      print(sys.gp.priority);
      expect(sys.gp.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gp.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01235_element_check_01212 **********\n\n");
    });

    test('01236_element_check_01213', () async {
      print("\n********** テスト実行：01236_element_check_01213 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gp.inifile;
      print(sys.gp.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gp.inifile = testData1s;
      print(sys.gp.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gp.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gp.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gp.inifile = testData2s;
      print(sys.gp.inifile);
      expect(sys.gp.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.gp.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gp.inifile = defalut;
      print(sys.gp.inifile);
      expect(sys.gp.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gp.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01236_element_check_01213 **********\n\n");
    });

    test('01237_element_check_01214', () async {
      print("\n********** テスト実行：01237_element_check_01214 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc.entry;
      print(sys.sm_scalesc.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc.entry = testData1s;
      print(sys.sm_scalesc.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc.entry = testData2s;
      print(sys.sm_scalesc.entry);
      expect(sys.sm_scalesc.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc.entry = defalut;
      print(sys.sm_scalesc.entry);
      expect(sys.sm_scalesc.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01237_element_check_01214 **********\n\n");
    });

    test('01238_element_check_01215', () async {
      print("\n********** テスト実行：01238_element_check_01215 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc.priority;
      print(sys.sm_scalesc.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc.priority = testData1;
      print(sys.sm_scalesc.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc.priority = testData2;
      print(sys.sm_scalesc.priority);
      expect(sys.sm_scalesc.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc.priority = defalut;
      print(sys.sm_scalesc.priority);
      expect(sys.sm_scalesc.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01238_element_check_01215 **********\n\n");
    });

    test('01239_element_check_01216', () async {
      print("\n********** テスト実行：01239_element_check_01216 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc.inifile;
      print(sys.sm_scalesc.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc.inifile = testData1s;
      print(sys.sm_scalesc.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc.inifile = testData2s;
      print(sys.sm_scalesc.inifile);
      expect(sys.sm_scalesc.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc.inifile = defalut;
      print(sys.sm_scalesc.inifile);
      expect(sys.sm_scalesc.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01239_element_check_01216 **********\n\n");
    });

    test('01240_element_check_01217', () async {
      print("\n********** テスト実行：01240_element_check_01217 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc_scl.entry;
      print(sys.sm_scalesc_scl.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc_scl.entry = testData1s;
      print(sys.sm_scalesc_scl.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc_scl.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc_scl.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc_scl.entry = testData2s;
      print(sys.sm_scalesc_scl.entry);
      expect(sys.sm_scalesc_scl.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_scl.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc_scl.entry = defalut;
      print(sys.sm_scalesc_scl.entry);
      expect(sys.sm_scalesc_scl.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_scl.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01240_element_check_01217 **********\n\n");
    });

    test('01241_element_check_01218', () async {
      print("\n********** テスト実行：01241_element_check_01218 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc_scl.priority;
      print(sys.sm_scalesc_scl.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc_scl.priority = testData1;
      print(sys.sm_scalesc_scl.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc_scl.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc_scl.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc_scl.priority = testData2;
      print(sys.sm_scalesc_scl.priority);
      expect(sys.sm_scalesc_scl.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_scl.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc_scl.priority = defalut;
      print(sys.sm_scalesc_scl.priority);
      expect(sys.sm_scalesc_scl.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_scl.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01241_element_check_01218 **********\n\n");
    });

    test('01242_element_check_01219', () async {
      print("\n********** テスト実行：01242_element_check_01219 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc_scl.inifile;
      print(sys.sm_scalesc_scl.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc_scl.inifile = testData1s;
      print(sys.sm_scalesc_scl.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc_scl.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc_scl.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc_scl.inifile = testData2s;
      print(sys.sm_scalesc_scl.inifile);
      expect(sys.sm_scalesc_scl.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_scl.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc_scl.inifile = defalut;
      print(sys.sm_scalesc_scl.inifile);
      expect(sys.sm_scalesc_scl.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_scl.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01242_element_check_01219 **********\n\n");
    });

    test('01243_element_check_01220', () async {
      print("\n********** テスト実行：01243_element_check_01220 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc_signp.entry;
      print(sys.sm_scalesc_signp.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc_signp.entry = testData1s;
      print(sys.sm_scalesc_signp.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc_signp.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc_signp.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc_signp.entry = testData2s;
      print(sys.sm_scalesc_signp.entry);
      expect(sys.sm_scalesc_signp.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_signp.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc_signp.entry = defalut;
      print(sys.sm_scalesc_signp.entry);
      expect(sys.sm_scalesc_signp.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_signp.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01243_element_check_01220 **********\n\n");
    });

    test('01244_element_check_01221', () async {
      print("\n********** テスト実行：01244_element_check_01221 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc_signp.priority;
      print(sys.sm_scalesc_signp.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc_signp.priority = testData1;
      print(sys.sm_scalesc_signp.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc_signp.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc_signp.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc_signp.priority = testData2;
      print(sys.sm_scalesc_signp.priority);
      expect(sys.sm_scalesc_signp.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_signp.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc_signp.priority = defalut;
      print(sys.sm_scalesc_signp.priority);
      expect(sys.sm_scalesc_signp.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_signp.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01244_element_check_01221 **********\n\n");
    });

    test('01245_element_check_01222', () async {
      print("\n********** テスト実行：01245_element_check_01222 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sm_scalesc_signp.inifile;
      print(sys.sm_scalesc_signp.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sm_scalesc_signp.inifile = testData1s;
      print(sys.sm_scalesc_signp.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sm_scalesc_signp.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sm_scalesc_signp.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sm_scalesc_signp.inifile = testData2s;
      print(sys.sm_scalesc_signp.inifile);
      expect(sys.sm_scalesc_signp.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_signp.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sm_scalesc_signp.inifile = defalut;
      print(sys.sm_scalesc_signp.inifile);
      expect(sys.sm_scalesc_signp.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sm_scalesc_signp.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01245_element_check_01222 **********\n\n");
    });

    test('01246_element_check_01223', () async {
      print("\n********** テスト実行：01246_element_check_01223 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.s2pr.entry;
      print(sys.s2pr.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.s2pr.entry = testData1s;
      print(sys.s2pr.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.s2pr.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.s2pr.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.s2pr.entry = testData2s;
      print(sys.s2pr.entry);
      expect(sys.s2pr.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.s2pr.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.s2pr.entry = defalut;
      print(sys.s2pr.entry);
      expect(sys.s2pr.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.s2pr.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01246_element_check_01223 **********\n\n");
    });

    test('01247_element_check_01224', () async {
      print("\n********** テスト実行：01247_element_check_01224 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.s2pr.priority;
      print(sys.s2pr.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.s2pr.priority = testData1;
      print(sys.s2pr.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.s2pr.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.s2pr.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.s2pr.priority = testData2;
      print(sys.s2pr.priority);
      expect(sys.s2pr.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.s2pr.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.s2pr.priority = defalut;
      print(sys.s2pr.priority);
      expect(sys.s2pr.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.s2pr.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01247_element_check_01224 **********\n\n");
    });

    test('01248_element_check_01225', () async {
      print("\n********** テスト実行：01248_element_check_01225 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.s2pr.inifile;
      print(sys.s2pr.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.s2pr.inifile = testData1s;
      print(sys.s2pr.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.s2pr.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.s2pr.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.s2pr.inifile = testData2s;
      print(sys.s2pr.inifile);
      expect(sys.s2pr.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.s2pr.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.s2pr.inifile = defalut;
      print(sys.s2pr.inifile);
      expect(sys.s2pr.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.s2pr.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01248_element_check_01225 **********\n\n");
    });

    test('01249_element_check_01226', () async {
      print("\n********** テスト実行：01249_element_check_01226 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb50.entry;
      print(sys.acb50.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb50.entry = testData1s;
      print(sys.acb50.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb50.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb50.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb50.entry = testData2s;
      print(sys.acb50.entry);
      expect(sys.acb50.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acb50.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb50.entry = defalut;
      print(sys.acb50.entry);
      expect(sys.acb50.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb50.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01249_element_check_01226 **********\n\n");
    });

    test('01250_element_check_01227', () async {
      print("\n********** テスト実行：01250_element_check_01227 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb50.priority;
      print(sys.acb50.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb50.priority = testData1;
      print(sys.acb50.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb50.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb50.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb50.priority = testData2;
      print(sys.acb50.priority);
      expect(sys.acb50.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.acb50.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb50.priority = defalut;
      print(sys.acb50.priority);
      expect(sys.acb50.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb50.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01250_element_check_01227 **********\n\n");
    });

    test('01251_element_check_01228', () async {
      print("\n********** テスト実行：01251_element_check_01228 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.acb50.inifile;
      print(sys.acb50.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.acb50.inifile = testData1s;
      print(sys.acb50.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.acb50.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.acb50.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.acb50.inifile = testData2s;
      print(sys.acb50.inifile);
      expect(sys.acb50.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.acb50.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.acb50.inifile = defalut;
      print(sys.acb50.inifile);
      expect(sys.acb50.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.acb50.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01251_element_check_01228 **********\n\n");
    });

    test('01252_element_check_01229', () async {
      print("\n********** テスト実行：01252_element_check_01229 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pwrctrl.entry;
      print(sys.pwrctrl.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pwrctrl.entry = testData1s;
      print(sys.pwrctrl.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pwrctrl.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pwrctrl.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pwrctrl.entry = testData2s;
      print(sys.pwrctrl.entry);
      expect(sys.pwrctrl.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pwrctrl.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pwrctrl.entry = defalut;
      print(sys.pwrctrl.entry);
      expect(sys.pwrctrl.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pwrctrl.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01252_element_check_01229 **********\n\n");
    });

    test('01253_element_check_01230', () async {
      print("\n********** テスト実行：01253_element_check_01230 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pwrctrl.priority;
      print(sys.pwrctrl.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pwrctrl.priority = testData1;
      print(sys.pwrctrl.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pwrctrl.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pwrctrl.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pwrctrl.priority = testData2;
      print(sys.pwrctrl.priority);
      expect(sys.pwrctrl.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pwrctrl.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pwrctrl.priority = defalut;
      print(sys.pwrctrl.priority);
      expect(sys.pwrctrl.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pwrctrl.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01253_element_check_01230 **********\n\n");
    });

    test('01254_element_check_01231', () async {
      print("\n********** テスト実行：01254_element_check_01231 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pwrctrl.inifile;
      print(sys.pwrctrl.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pwrctrl.inifile = testData1s;
      print(sys.pwrctrl.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pwrctrl.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pwrctrl.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pwrctrl.inifile = testData2s;
      print(sys.pwrctrl.inifile);
      expect(sys.pwrctrl.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pwrctrl.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pwrctrl.inifile = defalut;
      print(sys.pwrctrl.inifile);
      expect(sys.pwrctrl.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pwrctrl.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01254_element_check_01231 **********\n\n");
    });

    test('01255_element_check_01232', () async {
      print("\n********** テスト実行：01255_element_check_01232 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pw410.entry;
      print(sys.pw410.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pw410.entry = testData1s;
      print(sys.pw410.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pw410.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pw410.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pw410.entry = testData2s;
      print(sys.pw410.entry);
      expect(sys.pw410.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pw410.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pw410.entry = defalut;
      print(sys.pw410.entry);
      expect(sys.pw410.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pw410.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01255_element_check_01232 **********\n\n");
    });

    test('01256_element_check_01233', () async {
      print("\n********** テスト実行：01256_element_check_01233 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pw410.priority;
      print(sys.pw410.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pw410.priority = testData1;
      print(sys.pw410.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pw410.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pw410.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pw410.priority = testData2;
      print(sys.pw410.priority);
      expect(sys.pw410.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pw410.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pw410.priority = defalut;
      print(sys.pw410.priority);
      expect(sys.pw410.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pw410.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01256_element_check_01233 **********\n\n");
    });

    test('01257_element_check_01234', () async {
      print("\n********** テスト実行：01257_element_check_01234 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pw410.inifile;
      print(sys.pw410.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pw410.inifile = testData1s;
      print(sys.pw410.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pw410.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pw410.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pw410.inifile = testData2s;
      print(sys.pw410.inifile);
      expect(sys.pw410.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pw410.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pw410.inifile = defalut;
      print(sys.pw410.inifile);
      expect(sys.pw410.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pw410.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01257_element_check_01234 **********\n\n");
    });

    test('01258_element_check_01235', () async {
      print("\n********** テスト実行：01258_element_check_01235 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ccr.entry;
      print(sys.ccr.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ccr.entry = testData1s;
      print(sys.ccr.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ccr.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ccr.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ccr.entry = testData2s;
      print(sys.ccr.entry);
      expect(sys.ccr.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ccr.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ccr.entry = defalut;
      print(sys.ccr.entry);
      expect(sys.ccr.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ccr.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01258_element_check_01235 **********\n\n");
    });

    test('01259_element_check_01236', () async {
      print("\n********** テスト実行：01259_element_check_01236 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ccr.priority;
      print(sys.ccr.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ccr.priority = testData1;
      print(sys.ccr.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ccr.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ccr.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ccr.priority = testData2;
      print(sys.ccr.priority);
      expect(sys.ccr.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.ccr.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ccr.priority = defalut;
      print(sys.ccr.priority);
      expect(sys.ccr.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ccr.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01259_element_check_01236 **********\n\n");
    });

    test('01260_element_check_01237', () async {
      print("\n********** テスト実行：01260_element_check_01237 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ccr.inifile;
      print(sys.ccr.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ccr.inifile = testData1s;
      print(sys.ccr.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ccr.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ccr.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ccr.inifile = testData2s;
      print(sys.ccr.inifile);
      expect(sys.ccr.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ccr.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ccr.inifile = defalut;
      print(sys.ccr.inifile);
      expect(sys.ccr.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ccr.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01260_element_check_01237 **********\n\n");
    });

    test('01261_element_check_01238', () async {
      print("\n********** テスト実行：01261_element_check_01238 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psp70.entry;
      print(sys.psp70.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psp70.entry = testData1s;
      print(sys.psp70.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psp70.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psp70.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psp70.entry = testData2s;
      print(sys.psp70.entry);
      expect(sys.psp70.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.psp70.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psp70.entry = defalut;
      print(sys.psp70.entry);
      expect(sys.psp70.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psp70.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01261_element_check_01238 **********\n\n");
    });

    test('01262_element_check_01239', () async {
      print("\n********** テスト実行：01262_element_check_01239 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psp70.priority;
      print(sys.psp70.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psp70.priority = testData1;
      print(sys.psp70.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psp70.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psp70.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psp70.priority = testData2;
      print(sys.psp70.priority);
      expect(sys.psp70.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.psp70.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psp70.priority = defalut;
      print(sys.psp70.priority);
      expect(sys.psp70.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psp70.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01262_element_check_01239 **********\n\n");
    });

    test('01263_element_check_01240', () async {
      print("\n********** テスト実行：01263_element_check_01240 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psp70.inifile;
      print(sys.psp70.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psp70.inifile = testData1s;
      print(sys.psp70.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psp70.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psp70.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psp70.inifile = testData2s;
      print(sys.psp70.inifile);
      expect(sys.psp70.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.psp70.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psp70.inifile = defalut;
      print(sys.psp70.inifile);
      expect(sys.psp70.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psp70.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01263_element_check_01240 **********\n\n");
    });

    test('01264_element_check_01241', () async {
      print("\n********** テスト実行：01264_element_check_01241 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.dish.entry;
      print(sys.dish.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.dish.entry = testData1s;
      print(sys.dish.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.dish.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.dish.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.dish.entry = testData2s;
      print(sys.dish.entry);
      expect(sys.dish.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.dish.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.dish.entry = defalut;
      print(sys.dish.entry);
      expect(sys.dish.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.dish.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01264_element_check_01241 **********\n\n");
    });

    test('01265_element_check_01242', () async {
      print("\n********** テスト実行：01265_element_check_01242 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.dish.priority;
      print(sys.dish.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.dish.priority = testData1;
      print(sys.dish.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.dish.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.dish.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.dish.priority = testData2;
      print(sys.dish.priority);
      expect(sys.dish.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.dish.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.dish.priority = defalut;
      print(sys.dish.priority);
      expect(sys.dish.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.dish.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01265_element_check_01242 **********\n\n");
    });

    test('01266_element_check_01243', () async {
      print("\n********** テスト実行：01266_element_check_01243 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.dish.inifile;
      print(sys.dish.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.dish.inifile = testData1s;
      print(sys.dish.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.dish.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.dish.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.dish.inifile = testData2s;
      print(sys.dish.inifile);
      expect(sys.dish.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.dish.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.dish.inifile = defalut;
      print(sys.dish.inifile);
      expect(sys.dish.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.dish.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01266_element_check_01243 **********\n\n");
    });

    test('01267_element_check_01244', () async {
      print("\n********** テスト実行：01267_element_check_01244 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.aiv.entry;
      print(sys.aiv.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.aiv.entry = testData1s;
      print(sys.aiv.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.aiv.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.aiv.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.aiv.entry = testData2s;
      print(sys.aiv.entry);
      expect(sys.aiv.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.aiv.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.aiv.entry = defalut;
      print(sys.aiv.entry);
      expect(sys.aiv.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.aiv.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01267_element_check_01244 **********\n\n");
    });

    test('01268_element_check_01245', () async {
      print("\n********** テスト実行：01268_element_check_01245 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.aiv.priority;
      print(sys.aiv.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.aiv.priority = testData1;
      print(sys.aiv.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.aiv.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.aiv.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.aiv.priority = testData2;
      print(sys.aiv.priority);
      expect(sys.aiv.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.aiv.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.aiv.priority = defalut;
      print(sys.aiv.priority);
      expect(sys.aiv.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.aiv.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01268_element_check_01245 **********\n\n");
    });

    test('01269_element_check_01246', () async {
      print("\n********** テスト実行：01269_element_check_01246 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.aiv.inifile;
      print(sys.aiv.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.aiv.inifile = testData1s;
      print(sys.aiv.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.aiv.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.aiv.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.aiv.inifile = testData2s;
      print(sys.aiv.inifile);
      expect(sys.aiv.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.aiv.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.aiv.inifile = defalut;
      print(sys.aiv.inifile);
      expect(sys.aiv.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.aiv.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01269_element_check_01246 **********\n\n");
    });

    test('01270_element_check_01247', () async {
      print("\n********** テスト実行：01270_element_check_01247 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ar_stts_01.entry;
      print(sys.ar_stts_01.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ar_stts_01.entry = testData1s;
      print(sys.ar_stts_01.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ar_stts_01.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ar_stts_01.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ar_stts_01.entry = testData2s;
      print(sys.ar_stts_01.entry);
      expect(sys.ar_stts_01.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ar_stts_01.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ar_stts_01.entry = defalut;
      print(sys.ar_stts_01.entry);
      expect(sys.ar_stts_01.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ar_stts_01.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01270_element_check_01247 **********\n\n");
    });

    test('01271_element_check_01248', () async {
      print("\n********** テスト実行：01271_element_check_01248 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ar_stts_01.priority;
      print(sys.ar_stts_01.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ar_stts_01.priority = testData1;
      print(sys.ar_stts_01.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ar_stts_01.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ar_stts_01.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ar_stts_01.priority = testData2;
      print(sys.ar_stts_01.priority);
      expect(sys.ar_stts_01.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.ar_stts_01.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ar_stts_01.priority = defalut;
      print(sys.ar_stts_01.priority);
      expect(sys.ar_stts_01.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ar_stts_01.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01271_element_check_01248 **********\n\n");
    });

    test('01272_element_check_01249', () async {
      print("\n********** テスト実行：01272_element_check_01249 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ar_stts_01.inifile;
      print(sys.ar_stts_01.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ar_stts_01.inifile = testData1s;
      print(sys.ar_stts_01.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ar_stts_01.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ar_stts_01.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ar_stts_01.inifile = testData2s;
      print(sys.ar_stts_01.inifile);
      expect(sys.ar_stts_01.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ar_stts_01.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ar_stts_01.inifile = defalut;
      print(sys.ar_stts_01.inifile);
      expect(sys.ar_stts_01.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ar_stts_01.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01272_element_check_01249 **********\n\n");
    });

    test('01273_element_check_01250', () async {
      print("\n********** テスト実行：01273_element_check_01250 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gcat_cnct.entry;
      print(sys.gcat_cnct.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gcat_cnct.entry = testData1s;
      print(sys.gcat_cnct.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gcat_cnct.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gcat_cnct.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gcat_cnct.entry = testData2s;
      print(sys.gcat_cnct.entry);
      expect(sys.gcat_cnct.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat_cnct.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gcat_cnct.entry = defalut;
      print(sys.gcat_cnct.entry);
      expect(sys.gcat_cnct.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat_cnct.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01273_element_check_01250 **********\n\n");
    });

    test('01274_element_check_01251', () async {
      print("\n********** テスト実行：01274_element_check_01251 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gcat_cnct.priority;
      print(sys.gcat_cnct.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gcat_cnct.priority = testData1;
      print(sys.gcat_cnct.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gcat_cnct.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gcat_cnct.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gcat_cnct.priority = testData2;
      print(sys.gcat_cnct.priority);
      expect(sys.gcat_cnct.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat_cnct.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gcat_cnct.priority = defalut;
      print(sys.gcat_cnct.priority);
      expect(sys.gcat_cnct.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat_cnct.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01274_element_check_01251 **********\n\n");
    });

    test('01275_element_check_01252', () async {
      print("\n********** テスト実行：01275_element_check_01252 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.gcat_cnct.inifile;
      print(sys.gcat_cnct.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.gcat_cnct.inifile = testData1s;
      print(sys.gcat_cnct.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.gcat_cnct.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.gcat_cnct.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.gcat_cnct.inifile = testData2s;
      print(sys.gcat_cnct.inifile);
      expect(sys.gcat_cnct.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat_cnct.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.gcat_cnct.inifile = defalut;
      print(sys.gcat_cnct.inifile);
      expect(sys.gcat_cnct.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.gcat_cnct.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01275_element_check_01252 **********\n\n");
    });

    test('01276_element_check_01253', () async {
      print("\n********** テスト実行：01276_element_check_01253 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.yomoca.entry;
      print(sys.yomoca.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.yomoca.entry = testData1s;
      print(sys.yomoca.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.yomoca.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.yomoca.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.yomoca.entry = testData2s;
      print(sys.yomoca.entry);
      expect(sys.yomoca.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.yomoca.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.yomoca.entry = defalut;
      print(sys.yomoca.entry);
      expect(sys.yomoca.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.yomoca.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01276_element_check_01253 **********\n\n");
    });

    test('01277_element_check_01254', () async {
      print("\n********** テスト実行：01277_element_check_01254 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.yomoca.priority;
      print(sys.yomoca.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.yomoca.priority = testData1;
      print(sys.yomoca.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.yomoca.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.yomoca.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.yomoca.priority = testData2;
      print(sys.yomoca.priority);
      expect(sys.yomoca.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.yomoca.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.yomoca.priority = defalut;
      print(sys.yomoca.priority);
      expect(sys.yomoca.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.yomoca.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01277_element_check_01254 **********\n\n");
    });

    test('01278_element_check_01255', () async {
      print("\n********** テスト実行：01278_element_check_01255 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.yomoca.inifile;
      print(sys.yomoca.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.yomoca.inifile = testData1s;
      print(sys.yomoca.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.yomoca.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.yomoca.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.yomoca.inifile = testData2s;
      print(sys.yomoca.inifile);
      expect(sys.yomoca.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.yomoca.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.yomoca.inifile = defalut;
      print(sys.yomoca.inifile);
      expect(sys.yomoca.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.yomoca.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01278_element_check_01255 **********\n\n");
    });

    test('01279_element_check_01256', () async {
      print("\n********** テスト実行：01279_element_check_01256 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.smtplus.entry;
      print(sys.smtplus.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.smtplus.entry = testData1s;
      print(sys.smtplus.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.smtplus.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.smtplus.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.smtplus.entry = testData2s;
      print(sys.smtplus.entry);
      expect(sys.smtplus.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.smtplus.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.smtplus.entry = defalut;
      print(sys.smtplus.entry);
      expect(sys.smtplus.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.smtplus.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01279_element_check_01256 **********\n\n");
    });

    test('01280_element_check_01257', () async {
      print("\n********** テスト実行：01280_element_check_01257 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.smtplus.priority;
      print(sys.smtplus.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.smtplus.priority = testData1;
      print(sys.smtplus.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.smtplus.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.smtplus.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.smtplus.priority = testData2;
      print(sys.smtplus.priority);
      expect(sys.smtplus.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.smtplus.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.smtplus.priority = defalut;
      print(sys.smtplus.priority);
      expect(sys.smtplus.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.smtplus.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01280_element_check_01257 **********\n\n");
    });

    test('01281_element_check_01258', () async {
      print("\n********** テスト実行：01281_element_check_01258 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.smtplus.inifile;
      print(sys.smtplus.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.smtplus.inifile = testData1s;
      print(sys.smtplus.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.smtplus.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.smtplus.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.smtplus.inifile = testData2s;
      print(sys.smtplus.inifile);
      expect(sys.smtplus.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.smtplus.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.smtplus.inifile = defalut;
      print(sys.smtplus.inifile);
      expect(sys.smtplus.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.smtplus.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01281_element_check_01258 **********\n\n");
    });

    test('01282_element_check_01259', () async {
      print("\n********** テスト実行：01282_element_check_01259 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.suica.entry;
      print(sys.suica.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.suica.entry = testData1s;
      print(sys.suica.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.suica.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.suica.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.suica.entry = testData2s;
      print(sys.suica.entry);
      expect(sys.suica.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.suica.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.suica.entry = defalut;
      print(sys.suica.entry);
      expect(sys.suica.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.suica.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01282_element_check_01259 **********\n\n");
    });

    test('01283_element_check_01260', () async {
      print("\n********** テスト実行：01283_element_check_01260 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.suica.priority;
      print(sys.suica.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.suica.priority = testData1;
      print(sys.suica.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.suica.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.suica.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.suica.priority = testData2;
      print(sys.suica.priority);
      expect(sys.suica.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.suica.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.suica.priority = defalut;
      print(sys.suica.priority);
      expect(sys.suica.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.suica.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01283_element_check_01260 **********\n\n");
    });

    test('01284_element_check_01261', () async {
      print("\n********** テスト実行：01284_element_check_01261 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.suica.inifile;
      print(sys.suica.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.suica.inifile = testData1s;
      print(sys.suica.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.suica.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.suica.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.suica.inifile = testData2s;
      print(sys.suica.inifile);
      expect(sys.suica.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.suica.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.suica.inifile = defalut;
      print(sys.suica.inifile);
      expect(sys.suica.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.suica.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01284_element_check_01261 **********\n\n");
    });

    test('01285_element_check_01262', () async {
      print("\n********** テスト実行：01285_element_check_01262 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.rfid.entry;
      print(sys.rfid.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.rfid.entry = testData1s;
      print(sys.rfid.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.rfid.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.rfid.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.rfid.entry = testData2s;
      print(sys.rfid.entry);
      expect(sys.rfid.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.rfid.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.rfid.entry = defalut;
      print(sys.rfid.entry);
      expect(sys.rfid.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.rfid.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01285_element_check_01262 **********\n\n");
    });

    test('01286_element_check_01263', () async {
      print("\n********** テスト実行：01286_element_check_01263 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.rfid.priority;
      print(sys.rfid.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.rfid.priority = testData1;
      print(sys.rfid.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.rfid.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.rfid.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.rfid.priority = testData2;
      print(sys.rfid.priority);
      expect(sys.rfid.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.rfid.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.rfid.priority = defalut;
      print(sys.rfid.priority);
      expect(sys.rfid.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.rfid.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01286_element_check_01263 **********\n\n");
    });

    test('01287_element_check_01264', () async {
      print("\n********** テスト実行：01287_element_check_01264 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.rfid.inifile;
      print(sys.rfid.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.rfid.inifile = testData1s;
      print(sys.rfid.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.rfid.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.rfid.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.rfid.inifile = testData2s;
      print(sys.rfid.inifile);
      expect(sys.rfid.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.rfid.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.rfid.inifile = defalut;
      print(sys.rfid.inifile);
      expect(sys.rfid.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.rfid.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01287_element_check_01264 **********\n\n");
    });

    test('01288_element_check_01265', () async {
      print("\n********** テスト実行：01288_element_check_01265 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.disht.entry;
      print(sys.disht.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.disht.entry = testData1s;
      print(sys.disht.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.disht.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.disht.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.disht.entry = testData2s;
      print(sys.disht.entry);
      expect(sys.disht.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.disht.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.disht.entry = defalut;
      print(sys.disht.entry);
      expect(sys.disht.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.disht.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01288_element_check_01265 **********\n\n");
    });

    test('01289_element_check_01266', () async {
      print("\n********** テスト実行：01289_element_check_01266 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.disht.priority;
      print(sys.disht.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.disht.priority = testData1;
      print(sys.disht.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.disht.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.disht.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.disht.priority = testData2;
      print(sys.disht.priority);
      expect(sys.disht.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.disht.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.disht.priority = defalut;
      print(sys.disht.priority);
      expect(sys.disht.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.disht.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01289_element_check_01266 **********\n\n");
    });

    test('01290_element_check_01267', () async {
      print("\n********** テスト実行：01290_element_check_01267 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.disht.inifile;
      print(sys.disht.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.disht.inifile = testData1s;
      print(sys.disht.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.disht.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.disht.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.disht.inifile = testData2s;
      print(sys.disht.inifile);
      expect(sys.disht.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.disht.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.disht.inifile = defalut;
      print(sys.disht.inifile);
      expect(sys.disht.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.disht.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01290_element_check_01267 **********\n\n");
    });

    test('01291_element_check_01268', () async {
      print("\n********** テスト実行：01291_element_check_01268 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mcp200.entry;
      print(sys.mcp200.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mcp200.entry = testData1s;
      print(sys.mcp200.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mcp200.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mcp200.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mcp200.entry = testData2s;
      print(sys.mcp200.entry);
      expect(sys.mcp200.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mcp200.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mcp200.entry = defalut;
      print(sys.mcp200.entry);
      expect(sys.mcp200.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mcp200.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01291_element_check_01268 **********\n\n");
    });

    test('01292_element_check_01269', () async {
      print("\n********** テスト実行：01292_element_check_01269 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mcp200.priority;
      print(sys.mcp200.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mcp200.priority = testData1;
      print(sys.mcp200.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mcp200.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mcp200.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mcp200.priority = testData2;
      print(sys.mcp200.priority);
      expect(sys.mcp200.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mcp200.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mcp200.priority = defalut;
      print(sys.mcp200.priority);
      expect(sys.mcp200.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mcp200.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01292_element_check_01269 **********\n\n");
    });

    test('01293_element_check_01270', () async {
      print("\n********** テスト実行：01293_element_check_01270 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mcp200.inifile;
      print(sys.mcp200.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mcp200.inifile = testData1s;
      print(sys.mcp200.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mcp200.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mcp200.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mcp200.inifile = testData2s;
      print(sys.mcp200.inifile);
      expect(sys.mcp200.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mcp200.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mcp200.inifile = defalut;
      print(sys.mcp200.inifile);
      expect(sys.mcp200.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mcp200.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01293_element_check_01270 **********\n\n");
    });

    test('01294_element_check_01271', () async {
      print("\n********** テスト実行：01294_element_check_01271 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fcl.entry;
      print(sys.fcl.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fcl.entry = testData1s;
      print(sys.fcl.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fcl.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fcl.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fcl.entry = testData2s;
      print(sys.fcl.entry);
      expect(sys.fcl.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fcl.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fcl.entry = defalut;
      print(sys.fcl.entry);
      expect(sys.fcl.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fcl.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01294_element_check_01271 **********\n\n");
    });

    test('01295_element_check_01272', () async {
      print("\n********** テスト実行：01295_element_check_01272 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fcl.priority;
      print(sys.fcl.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fcl.priority = testData1;
      print(sys.fcl.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fcl.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fcl.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fcl.priority = testData2;
      print(sys.fcl.priority);
      expect(sys.fcl.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fcl.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fcl.priority = defalut;
      print(sys.fcl.priority);
      expect(sys.fcl.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fcl.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01295_element_check_01272 **********\n\n");
    });

    test('01296_element_check_01273', () async {
      print("\n********** テスト実行：01296_element_check_01273 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fcl.inifile;
      print(sys.fcl.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fcl.inifile = testData1s;
      print(sys.fcl.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fcl.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fcl.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fcl.inifile = testData2s;
      print(sys.fcl.inifile);
      expect(sys.fcl.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fcl.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fcl.inifile = defalut;
      print(sys.fcl.inifile);
      expect(sys.fcl.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fcl.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01296_element_check_01273 **********\n\n");
    });

    test('01297_element_check_01274', () async {
      print("\n********** テスト実行：01297_element_check_01274 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.jrw_multi.entry;
      print(sys.jrw_multi.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.jrw_multi.entry = testData1s;
      print(sys.jrw_multi.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.jrw_multi.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.jrw_multi.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.jrw_multi.entry = testData2s;
      print(sys.jrw_multi.entry);
      expect(sys.jrw_multi.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.jrw_multi.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.jrw_multi.entry = defalut;
      print(sys.jrw_multi.entry);
      expect(sys.jrw_multi.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.jrw_multi.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01297_element_check_01274 **********\n\n");
    });

    test('01298_element_check_01275', () async {
      print("\n********** テスト実行：01298_element_check_01275 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.jrw_multi.priority;
      print(sys.jrw_multi.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.jrw_multi.priority = testData1;
      print(sys.jrw_multi.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.jrw_multi.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.jrw_multi.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.jrw_multi.priority = testData2;
      print(sys.jrw_multi.priority);
      expect(sys.jrw_multi.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.jrw_multi.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.jrw_multi.priority = defalut;
      print(sys.jrw_multi.priority);
      expect(sys.jrw_multi.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.jrw_multi.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01298_element_check_01275 **********\n\n");
    });

    test('01299_element_check_01276', () async {
      print("\n********** テスト実行：01299_element_check_01276 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.jrw_multi.inifile;
      print(sys.jrw_multi.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.jrw_multi.inifile = testData1s;
      print(sys.jrw_multi.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.jrw_multi.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.jrw_multi.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.jrw_multi.inifile = testData2s;
      print(sys.jrw_multi.inifile);
      expect(sys.jrw_multi.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.jrw_multi.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.jrw_multi.inifile = defalut;
      print(sys.jrw_multi.inifile);
      expect(sys.jrw_multi.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.jrw_multi.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01299_element_check_01276 **********\n\n");
    });

    test('01300_element_check_01277', () async {
      print("\n********** テスト実行：01300_element_check_01277 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ht2980.entry;
      print(sys.ht2980.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ht2980.entry = testData1s;
      print(sys.ht2980.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ht2980.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ht2980.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ht2980.entry = testData2s;
      print(sys.ht2980.entry);
      expect(sys.ht2980.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ht2980.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ht2980.entry = defalut;
      print(sys.ht2980.entry);
      expect(sys.ht2980.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ht2980.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01300_element_check_01277 **********\n\n");
    });

    test('01301_element_check_01278', () async {
      print("\n********** テスト実行：01301_element_check_01278 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ht2980.priority;
      print(sys.ht2980.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ht2980.priority = testData1;
      print(sys.ht2980.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ht2980.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ht2980.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ht2980.priority = testData2;
      print(sys.ht2980.priority);
      expect(sys.ht2980.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.ht2980.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ht2980.priority = defalut;
      print(sys.ht2980.priority);
      expect(sys.ht2980.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ht2980.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01301_element_check_01278 **********\n\n");
    });

    test('01302_element_check_01279', () async {
      print("\n********** テスト実行：01302_element_check_01279 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ht2980.inifile;
      print(sys.ht2980.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ht2980.inifile = testData1s;
      print(sys.ht2980.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ht2980.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ht2980.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ht2980.inifile = testData2s;
      print(sys.ht2980.inifile);
      expect(sys.ht2980.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ht2980.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ht2980.inifile = defalut;
      print(sys.ht2980.inifile);
      expect(sys.ht2980.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ht2980.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01302_element_check_01279 **********\n\n");
    });

    test('01303_element_check_01280', () async {
      print("\n********** テスト実行：01303_element_check_01280 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.absv31.entry;
      print(sys.absv31.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.absv31.entry = testData1s;
      print(sys.absv31.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.absv31.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.absv31.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.absv31.entry = testData2s;
      print(sys.absv31.entry);
      expect(sys.absv31.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.absv31.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.absv31.entry = defalut;
      print(sys.absv31.entry);
      expect(sys.absv31.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.absv31.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01303_element_check_01280 **********\n\n");
    });

    test('01304_element_check_01281', () async {
      print("\n********** テスト実行：01304_element_check_01281 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.absv31.priority;
      print(sys.absv31.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.absv31.priority = testData1;
      print(sys.absv31.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.absv31.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.absv31.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.absv31.priority = testData2;
      print(sys.absv31.priority);
      expect(sys.absv31.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.absv31.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.absv31.priority = defalut;
      print(sys.absv31.priority);
      expect(sys.absv31.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.absv31.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01304_element_check_01281 **********\n\n");
    });

    test('01305_element_check_01282', () async {
      print("\n********** テスト実行：01305_element_check_01282 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.absv31.inifile;
      print(sys.absv31.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.absv31.inifile = testData1s;
      print(sys.absv31.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.absv31.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.absv31.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.absv31.inifile = testData2s;
      print(sys.absv31.inifile);
      expect(sys.absv31.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.absv31.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.absv31.inifile = defalut;
      print(sys.absv31.inifile);
      expect(sys.absv31.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.absv31.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01305_element_check_01282 **********\n\n");
    });

    test('01306_element_check_01283', () async {
      print("\n********** テスト実行：01306_element_check_01283 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.yamato.entry;
      print(sys.yamato.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.yamato.entry = testData1s;
      print(sys.yamato.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.yamato.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.yamato.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.yamato.entry = testData2s;
      print(sys.yamato.entry);
      expect(sys.yamato.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.yamato.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.yamato.entry = defalut;
      print(sys.yamato.entry);
      expect(sys.yamato.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.yamato.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01306_element_check_01283 **********\n\n");
    });

    test('01307_element_check_01284', () async {
      print("\n********** テスト実行：01307_element_check_01284 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.yamato.priority;
      print(sys.yamato.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.yamato.priority = testData1;
      print(sys.yamato.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.yamato.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.yamato.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.yamato.priority = testData2;
      print(sys.yamato.priority);
      expect(sys.yamato.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.yamato.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.yamato.priority = defalut;
      print(sys.yamato.priority);
      expect(sys.yamato.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.yamato.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01307_element_check_01284 **********\n\n");
    });

    test('01308_element_check_01285', () async {
      print("\n********** テスト実行：01308_element_check_01285 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.yamato.inifile;
      print(sys.yamato.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.yamato.inifile = testData1s;
      print(sys.yamato.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.yamato.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.yamato.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.yamato.inifile = testData2s;
      print(sys.yamato.inifile);
      expect(sys.yamato.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.yamato.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.yamato.inifile = defalut;
      print(sys.yamato.inifile);
      expect(sys.yamato.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.yamato.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01308_element_check_01285 **********\n\n");
    });

    test('01309_element_check_01286', () async {
      print("\n********** テスト実行：01309_element_check_01286 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.cct.entry;
      print(sys.cct.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.cct.entry = testData1s;
      print(sys.cct.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.cct.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.cct.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.cct.entry = testData2s;
      print(sys.cct.entry);
      expect(sys.cct.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.cct.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.cct.entry = defalut;
      print(sys.cct.entry);
      expect(sys.cct.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.cct.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01309_element_check_01286 **********\n\n");
    });

    test('01310_element_check_01287', () async {
      print("\n********** テスト実行：01310_element_check_01287 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.cct.priority;
      print(sys.cct.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.cct.priority = testData1;
      print(sys.cct.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.cct.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.cct.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.cct.priority = testData2;
      print(sys.cct.priority);
      expect(sys.cct.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.cct.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.cct.priority = defalut;
      print(sys.cct.priority);
      expect(sys.cct.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.cct.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01310_element_check_01287 **********\n\n");
    });

    test('01311_element_check_01288', () async {
      print("\n********** テスト実行：01311_element_check_01288 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.cct.inifile;
      print(sys.cct.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.cct.inifile = testData1s;
      print(sys.cct.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.cct.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.cct.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.cct.inifile = testData2s;
      print(sys.cct.inifile);
      expect(sys.cct.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.cct.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.cct.inifile = defalut;
      print(sys.cct.inifile);
      expect(sys.cct.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.cct.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01311_element_check_01288 **********\n\n");
    });

    test('01312_element_check_01289', () async {
      print("\n********** テスト実行：01312_element_check_01289 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.castles.entry;
      print(sys.castles.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.castles.entry = testData1s;
      print(sys.castles.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.castles.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.castles.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.castles.entry = testData2s;
      print(sys.castles.entry);
      expect(sys.castles.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.castles.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.castles.entry = defalut;
      print(sys.castles.entry);
      expect(sys.castles.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.castles.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01312_element_check_01289 **********\n\n");
    });

    test('01313_element_check_01290', () async {
      print("\n********** テスト実行：01313_element_check_01290 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.castles.priority;
      print(sys.castles.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.castles.priority = testData1;
      print(sys.castles.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.castles.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.castles.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.castles.priority = testData2;
      print(sys.castles.priority);
      expect(sys.castles.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.castles.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.castles.priority = defalut;
      print(sys.castles.priority);
      expect(sys.castles.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.castles.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01313_element_check_01290 **********\n\n");
    });

    test('01314_element_check_01291', () async {
      print("\n********** テスト実行：01314_element_check_01291 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.castles.inifile;
      print(sys.castles.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.castles.inifile = testData1s;
      print(sys.castles.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.castles.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.castles.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.castles.inifile = testData2s;
      print(sys.castles.inifile);
      expect(sys.castles.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.castles.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.castles.inifile = defalut;
      print(sys.castles.inifile);
      expect(sys.castles.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.castles.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01314_element_check_01291 **********\n\n");
    });

    test('01315_element_check_01292', () async {
      print("\n********** テスト実行：01315_element_check_01292 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.usbcam.entry;
      print(sys.usbcam.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.usbcam.entry = testData1s;
      print(sys.usbcam.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.usbcam.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.usbcam.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.usbcam.entry = testData2s;
      print(sys.usbcam.entry);
      expect(sys.usbcam.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.usbcam.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.usbcam.entry = defalut;
      print(sys.usbcam.entry);
      expect(sys.usbcam.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.usbcam.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01315_element_check_01292 **********\n\n");
    });

    test('01316_element_check_01293', () async {
      print("\n********** テスト実行：01316_element_check_01293 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.usbcam.priority;
      print(sys.usbcam.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.usbcam.priority = testData1;
      print(sys.usbcam.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.usbcam.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.usbcam.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.usbcam.priority = testData2;
      print(sys.usbcam.priority);
      expect(sys.usbcam.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.usbcam.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.usbcam.priority = defalut;
      print(sys.usbcam.priority);
      expect(sys.usbcam.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.usbcam.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01316_element_check_01293 **********\n\n");
    });

    test('01317_element_check_01294', () async {
      print("\n********** テスト実行：01317_element_check_01294 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.usbcam.inifile;
      print(sys.usbcam.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.usbcam.inifile = testData1s;
      print(sys.usbcam.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.usbcam.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.usbcam.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.usbcam.inifile = testData2s;
      print(sys.usbcam.inifile);
      expect(sys.usbcam.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.usbcam.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.usbcam.inifile = defalut;
      print(sys.usbcam.inifile);
      expect(sys.usbcam.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.usbcam.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01317_element_check_01294 **********\n\n");
    });

    test('01318_element_check_01295', () async {
      print("\n********** テスト実行：01318_element_check_01295 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.masr.entry;
      print(sys.masr.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.masr.entry = testData1s;
      print(sys.masr.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.masr.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.masr.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.masr.entry = testData2s;
      print(sys.masr.entry);
      expect(sys.masr.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.masr.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.masr.entry = defalut;
      print(sys.masr.entry);
      expect(sys.masr.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.masr.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01318_element_check_01295 **********\n\n");
    });

    test('01319_element_check_01296', () async {
      print("\n********** テスト実行：01319_element_check_01296 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.masr.priority;
      print(sys.masr.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.masr.priority = testData1;
      print(sys.masr.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.masr.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.masr.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.masr.priority = testData2;
      print(sys.masr.priority);
      expect(sys.masr.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.masr.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.masr.priority = defalut;
      print(sys.masr.priority);
      expect(sys.masr.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.masr.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01319_element_check_01296 **********\n\n");
    });

    test('01320_element_check_01297', () async {
      print("\n********** テスト実行：01320_element_check_01297 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.masr.inifile;
      print(sys.masr.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.masr.inifile = testData1s;
      print(sys.masr.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.masr.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.masr.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.masr.inifile = testData2s;
      print(sys.masr.inifile);
      expect(sys.masr.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.masr.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.masr.inifile = defalut;
      print(sys.masr.inifile);
      expect(sys.masr.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.masr.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01320_element_check_01297 **********\n\n");
    });

    test('01321_element_check_01298', () async {
      print("\n********** テスト実行：01321_element_check_01298 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.jmups.entry;
      print(sys.jmups.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.jmups.entry = testData1s;
      print(sys.jmups.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.jmups.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.jmups.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.jmups.entry = testData2s;
      print(sys.jmups.entry);
      expect(sys.jmups.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.jmups.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.jmups.entry = defalut;
      print(sys.jmups.entry);
      expect(sys.jmups.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.jmups.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01321_element_check_01298 **********\n\n");
    });

    test('01322_element_check_01299', () async {
      print("\n********** テスト実行：01322_element_check_01299 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.jmups.priority;
      print(sys.jmups.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.jmups.priority = testData1;
      print(sys.jmups.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.jmups.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.jmups.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.jmups.priority = testData2;
      print(sys.jmups.priority);
      expect(sys.jmups.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.jmups.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.jmups.priority = defalut;
      print(sys.jmups.priority);
      expect(sys.jmups.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.jmups.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01322_element_check_01299 **********\n\n");
    });

    test('01323_element_check_01300', () async {
      print("\n********** テスト実行：01323_element_check_01300 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.jmups.inifile;
      print(sys.jmups.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.jmups.inifile = testData1s;
      print(sys.jmups.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.jmups.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.jmups.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.jmups.inifile = testData2s;
      print(sys.jmups.inifile);
      expect(sys.jmups.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.jmups.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.jmups.inifile = defalut;
      print(sys.jmups.inifile);
      expect(sys.jmups.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.jmups.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01323_element_check_01300 **********\n\n");
    });

    test('01324_element_check_01301', () async {
      print("\n********** テスト実行：01324_element_check_01301 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fal2.entry;
      print(sys.fal2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fal2.entry = testData1s;
      print(sys.fal2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fal2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fal2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fal2.entry = testData2s;
      print(sys.fal2.entry);
      expect(sys.fal2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fal2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fal2.entry = defalut;
      print(sys.fal2.entry);
      expect(sys.fal2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fal2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01324_element_check_01301 **********\n\n");
    });

    test('01325_element_check_01302', () async {
      print("\n********** テスト実行：01325_element_check_01302 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fal2.priority;
      print(sys.fal2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fal2.priority = testData1;
      print(sys.fal2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fal2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fal2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fal2.priority = testData2;
      print(sys.fal2.priority);
      expect(sys.fal2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.fal2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fal2.priority = defalut;
      print(sys.fal2.priority);
      expect(sys.fal2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fal2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01325_element_check_01302 **********\n\n");
    });

    test('01326_element_check_01303', () async {
      print("\n********** テスト実行：01326_element_check_01303 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.fal2.inifile;
      print(sys.fal2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.fal2.inifile = testData1s;
      print(sys.fal2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.fal2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.fal2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.fal2.inifile = testData2s;
      print(sys.fal2.inifile);
      expect(sys.fal2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.fal2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.fal2.inifile = defalut;
      print(sys.fal2.inifile);
      expect(sys.fal2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.fal2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01326_element_check_01303 **********\n\n");
    });

    test('01327_element_check_01304', () async {
      print("\n********** テスト実行：01327_element_check_01304 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sqrc.entry;
      print(sys.sqrc.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sqrc.entry = testData1s;
      print(sys.sqrc.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sqrc.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sqrc.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sqrc.entry = testData2s;
      print(sys.sqrc.entry);
      expect(sys.sqrc.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sqrc.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sqrc.entry = defalut;
      print(sys.sqrc.entry);
      expect(sys.sqrc.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sqrc.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01327_element_check_01304 **********\n\n");
    });

    test('01328_element_check_01305', () async {
      print("\n********** テスト実行：01328_element_check_01305 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sqrc.priority;
      print(sys.sqrc.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sqrc.priority = testData1;
      print(sys.sqrc.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sqrc.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sqrc.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sqrc.priority = testData2;
      print(sys.sqrc.priority);
      expect(sys.sqrc.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.sqrc.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sqrc.priority = defalut;
      print(sys.sqrc.priority);
      expect(sys.sqrc.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sqrc.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01328_element_check_01305 **********\n\n");
    });

    test('01329_element_check_01306', () async {
      print("\n********** テスト実行：01329_element_check_01306 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.sqrc.inifile;
      print(sys.sqrc.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.sqrc.inifile = testData1s;
      print(sys.sqrc.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.sqrc.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.sqrc.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.sqrc.inifile = testData2s;
      print(sys.sqrc.inifile);
      expect(sys.sqrc.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.sqrc.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.sqrc.inifile = defalut;
      print(sys.sqrc.inifile);
      expect(sys.sqrc.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.sqrc.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01329_element_check_01306 **********\n\n");
    });

    test('01330_element_check_01307', () async {
      print("\n********** テスト実行：01330_element_check_01307 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtrp.entry;
      print(sys.tprtrp.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtrp.entry = testData1s;
      print(sys.tprtrp.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtrp.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtrp.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtrp.entry = testData2s;
      print(sys.tprtrp.entry);
      expect(sys.tprtrp.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtrp.entry = defalut;
      print(sys.tprtrp.entry);
      expect(sys.tprtrp.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01330_element_check_01307 **********\n\n");
    });

    test('01331_element_check_01308', () async {
      print("\n********** テスト実行：01331_element_check_01308 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtrp.priority;
      print(sys.tprtrp.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtrp.priority = testData1;
      print(sys.tprtrp.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtrp.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtrp.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtrp.priority = testData2;
      print(sys.tprtrp.priority);
      expect(sys.tprtrp.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtrp.priority = defalut;
      print(sys.tprtrp.priority);
      expect(sys.tprtrp.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01331_element_check_01308 **********\n\n");
    });

    test('01332_element_check_01309', () async {
      print("\n********** テスト実行：01332_element_check_01309 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtrp.inifile;
      print(sys.tprtrp.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtrp.inifile = testData1s;
      print(sys.tprtrp.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtrp.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtrp.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtrp.inifile = testData2s;
      print(sys.tprtrp.inifile);
      expect(sys.tprtrp.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtrp.inifile = defalut;
      print(sys.tprtrp.inifile);
      expect(sys.tprtrp.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01332_element_check_01309 **********\n\n");
    });

    test('01333_element_check_01310', () async {
      print("\n********** テスト実行：01333_element_check_01310 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtrp2.entry;
      print(sys.tprtrp2.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtrp2.entry = testData1s;
      print(sys.tprtrp2.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtrp2.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtrp2.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtrp2.entry = testData2s;
      print(sys.tprtrp2.entry);
      expect(sys.tprtrp2.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp2.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtrp2.entry = defalut;
      print(sys.tprtrp2.entry);
      expect(sys.tprtrp2.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp2.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01333_element_check_01310 **********\n\n");
    });

    test('01334_element_check_01311', () async {
      print("\n********** テスト実行：01334_element_check_01311 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtrp2.priority;
      print(sys.tprtrp2.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtrp2.priority = testData1;
      print(sys.tprtrp2.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtrp2.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtrp2.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtrp2.priority = testData2;
      print(sys.tprtrp2.priority);
      expect(sys.tprtrp2.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp2.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtrp2.priority = defalut;
      print(sys.tprtrp2.priority);
      expect(sys.tprtrp2.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp2.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01334_element_check_01311 **********\n\n");
    });

    test('01335_element_check_01312', () async {
      print("\n********** テスト実行：01335_element_check_01312 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.tprtrp2.inifile;
      print(sys.tprtrp2.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.tprtrp2.inifile = testData1s;
      print(sys.tprtrp2.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.tprtrp2.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.tprtrp2.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.tprtrp2.inifile = testData2s;
      print(sys.tprtrp2.inifile);
      expect(sys.tprtrp2.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp2.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.tprtrp2.inifile = defalut;
      print(sys.tprtrp2.inifile);
      expect(sys.tprtrp2.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.tprtrp2.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01335_element_check_01312 **********\n\n");
    });

    test('01336_element_check_01313', () async {
      print("\n********** テスト実行：01336_element_check_01313 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.iccard.entry;
      print(sys.iccard.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.iccard.entry = testData1s;
      print(sys.iccard.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.iccard.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.iccard.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.iccard.entry = testData2s;
      print(sys.iccard.entry);
      expect(sys.iccard.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.iccard.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.iccard.entry = defalut;
      print(sys.iccard.entry);
      expect(sys.iccard.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.iccard.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01336_element_check_01313 **********\n\n");
    });

    test('01337_element_check_01314', () async {
      print("\n********** テスト実行：01337_element_check_01314 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.iccard.priority;
      print(sys.iccard.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.iccard.priority = testData1;
      print(sys.iccard.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.iccard.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.iccard.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.iccard.priority = testData2;
      print(sys.iccard.priority);
      expect(sys.iccard.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.iccard.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.iccard.priority = defalut;
      print(sys.iccard.priority);
      expect(sys.iccard.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.iccard.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01337_element_check_01314 **********\n\n");
    });

    test('01338_element_check_01315', () async {
      print("\n********** テスト実行：01338_element_check_01315 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.iccard.inifile;
      print(sys.iccard.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.iccard.inifile = testData1s;
      print(sys.iccard.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.iccard.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.iccard.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.iccard.inifile = testData2s;
      print(sys.iccard.inifile);
      expect(sys.iccard.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.iccard.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.iccard.inifile = defalut;
      print(sys.iccard.inifile);
      expect(sys.iccard.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.iccard.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01338_element_check_01315 **********\n\n");
    });

    test('01339_element_check_01316', () async {
      print("\n********** テスト実行：01339_element_check_01316 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mst.entry;
      print(sys.mst.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mst.entry = testData1s;
      print(sys.mst.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mst.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mst.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mst.entry = testData2s;
      print(sys.mst.entry);
      expect(sys.mst.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mst.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mst.entry = defalut;
      print(sys.mst.entry);
      expect(sys.mst.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mst.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01339_element_check_01316 **********\n\n");
    });

    test('01340_element_check_01317', () async {
      print("\n********** テスト実行：01340_element_check_01317 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mst.priority;
      print(sys.mst.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mst.priority = testData1;
      print(sys.mst.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mst.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mst.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mst.priority = testData2;
      print(sys.mst.priority);
      expect(sys.mst.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.mst.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mst.priority = defalut;
      print(sys.mst.priority);
      expect(sys.mst.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mst.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01340_element_check_01317 **********\n\n");
    });

    test('01341_element_check_01318', () async {
      print("\n********** テスト実行：01341_element_check_01318 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.mst.inifile;
      print(sys.mst.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.mst.inifile = testData1s;
      print(sys.mst.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.mst.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.mst.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.mst.inifile = testData2s;
      print(sys.mst.inifile);
      expect(sys.mst.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.mst.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.mst.inifile = defalut;
      print(sys.mst.inifile);
      expect(sys.mst.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.mst.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01341_element_check_01318 **********\n\n");
    });

    test('01342_element_check_01319', () async {
      print("\n********** テスト実行：01342_element_check_01319 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_3.entry;
      print(sys.scan_2800_3.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_3.entry = testData1s;
      print(sys.scan_2800_3.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_3.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_3.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_3.entry = testData2s;
      print(sys.scan_2800_3.entry);
      expect(sys.scan_2800_3.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_3.entry = defalut;
      print(sys.scan_2800_3.entry);
      expect(sys.scan_2800_3.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01342_element_check_01319 **********\n\n");
    });

    test('01343_element_check_01320', () async {
      print("\n********** テスト実行：01343_element_check_01320 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_3.priority;
      print(sys.scan_2800_3.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_3.priority = testData1;
      print(sys.scan_2800_3.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_3.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_3.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_3.priority = testData2;
      print(sys.scan_2800_3.priority);
      expect(sys.scan_2800_3.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_3.priority = defalut;
      print(sys.scan_2800_3.priority);
      expect(sys.scan_2800_3.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01343_element_check_01320 **********\n\n");
    });

    test('01344_element_check_01321', () async {
      print("\n********** テスト実行：01344_element_check_01321 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_3.inifile;
      print(sys.scan_2800_3.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_3.inifile = testData1s;
      print(sys.scan_2800_3.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_3.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_3.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_3.inifile = testData2s;
      print(sys.scan_2800_3.inifile);
      expect(sys.scan_2800_3.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_3.inifile = defalut;
      print(sys.scan_2800_3.inifile);
      expect(sys.scan_2800_3.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01344_element_check_01321 **********\n\n");
    });

    test('01345_element_check_01322', () async {
      print("\n********** テスト実行：01345_element_check_01322 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_3.tower;
      print(sys.scan_2800_3.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_3.tower = testData1;
      print(sys.scan_2800_3.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_3.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_3.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_3.tower = testData2;
      print(sys.scan_2800_3.tower);
      expect(sys.scan_2800_3.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_3.tower = defalut;
      print(sys.scan_2800_3.tower);
      expect(sys.scan_2800_3.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_3.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01345_element_check_01322 **********\n\n");
    });

    test('01346_element_check_01323', () async {
      print("\n********** テスト実行：01346_element_check_01323 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vega3000.entry;
      print(sys.vega3000.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vega3000.entry = testData1s;
      print(sys.vega3000.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vega3000.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vega3000.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vega3000.entry = testData2s;
      print(sys.vega3000.entry);
      expect(sys.vega3000.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vega3000.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vega3000.entry = defalut;
      print(sys.vega3000.entry);
      expect(sys.vega3000.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vega3000.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01346_element_check_01323 **********\n\n");
    });

    test('01347_element_check_01324', () async {
      print("\n********** テスト実行：01347_element_check_01324 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vega3000.priority;
      print(sys.vega3000.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vega3000.priority = testData1;
      print(sys.vega3000.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vega3000.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vega3000.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vega3000.priority = testData2;
      print(sys.vega3000.priority);
      expect(sys.vega3000.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.vega3000.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vega3000.priority = defalut;
      print(sys.vega3000.priority);
      expect(sys.vega3000.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vega3000.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01347_element_check_01324 **********\n\n");
    });

    test('01348_element_check_01325', () async {
      print("\n********** テスト実行：01348_element_check_01325 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.vega3000.inifile;
      print(sys.vega3000.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.vega3000.inifile = testData1s;
      print(sys.vega3000.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.vega3000.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.vega3000.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.vega3000.inifile = testData2s;
      print(sys.vega3000.inifile);
      expect(sys.vega3000.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.vega3000.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.vega3000.inifile = defalut;
      print(sys.vega3000.inifile);
      expect(sys.vega3000.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.vega3000.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01348_element_check_01325 **********\n\n");
    });

    test('01349_element_check_01326', () async {
      print("\n********** テスト実行：01349_element_check_01326 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.powli.entry;
      print(sys.powli.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.powli.entry = testData1s;
      print(sys.powli.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.powli.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.powli.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.powli.entry = testData2s;
      print(sys.powli.entry);
      expect(sys.powli.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.powli.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.powli.entry = defalut;
      print(sys.powli.entry);
      expect(sys.powli.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.powli.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01349_element_check_01326 **********\n\n");
    });

    test('01350_element_check_01327', () async {
      print("\n********** テスト実行：01350_element_check_01327 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.powli.priority;
      print(sys.powli.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.powli.priority = testData1;
      print(sys.powli.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.powli.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.powli.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.powli.priority = testData2;
      print(sys.powli.priority);
      expect(sys.powli.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.powli.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.powli.priority = defalut;
      print(sys.powli.priority);
      expect(sys.powli.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.powli.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01350_element_check_01327 **********\n\n");
    });

    test('01351_element_check_01328', () async {
      print("\n********** テスト実行：01351_element_check_01328 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.powli.inifile;
      print(sys.powli.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.powli.inifile = testData1s;
      print(sys.powli.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.powli.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.powli.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.powli.inifile = testData2s;
      print(sys.powli.inifile);
      expect(sys.powli.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.powli.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.powli.inifile = defalut;
      print(sys.powli.inifile);
      expect(sys.powli.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.powli.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01351_element_check_01328 **********\n\n");
    });

    test('01352_element_check_01329', () async {
      print("\n********** テスト実行：01352_element_check_01329 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_4.entry;
      print(sys.scan_2800_4.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_4.entry = testData1s;
      print(sys.scan_2800_4.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_4.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_4.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_4.entry = testData2s;
      print(sys.scan_2800_4.entry);
      expect(sys.scan_2800_4.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_4.entry = defalut;
      print(sys.scan_2800_4.entry);
      expect(sys.scan_2800_4.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01352_element_check_01329 **********\n\n");
    });

    test('01353_element_check_01330', () async {
      print("\n********** テスト実行：01353_element_check_01330 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_4.priority;
      print(sys.scan_2800_4.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_4.priority = testData1;
      print(sys.scan_2800_4.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_4.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_4.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_4.priority = testData2;
      print(sys.scan_2800_4.priority);
      expect(sys.scan_2800_4.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_4.priority = defalut;
      print(sys.scan_2800_4.priority);
      expect(sys.scan_2800_4.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01353_element_check_01330 **********\n\n");
    });

    test('01354_element_check_01331', () async {
      print("\n********** テスト実行：01354_element_check_01331 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_4.inifile;
      print(sys.scan_2800_4.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_4.inifile = testData1s;
      print(sys.scan_2800_4.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_4.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_4.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_4.inifile = testData2s;
      print(sys.scan_2800_4.inifile);
      expect(sys.scan_2800_4.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_4.inifile = defalut;
      print(sys.scan_2800_4.inifile);
      expect(sys.scan_2800_4.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01354_element_check_01331 **********\n\n");
    });

    test('01355_element_check_01332', () async {
      print("\n********** テスト実行：01355_element_check_01332 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scan_2800_4.tower;
      print(sys.scan_2800_4.tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scan_2800_4.tower = testData1;
      print(sys.scan_2800_4.tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scan_2800_4.tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scan_2800_4.tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scan_2800_4.tower = testData2;
      print(sys.scan_2800_4.tower);
      expect(sys.scan_2800_4.tower == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scan_2800_4.tower = defalut;
      print(sys.scan_2800_4.tower);
      expect(sys.scan_2800_4.tower == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scan_2800_4.tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01355_element_check_01332 **********\n\n");
    });

    test('01356_element_check_01333', () async {
      print("\n********** テスト実行：01356_element_check_01333 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psensor_1.entry;
      print(sys.psensor_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psensor_1.entry = testData1s;
      print(sys.psensor_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psensor_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psensor_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psensor_1.entry = testData2s;
      print(sys.psensor_1.entry);
      expect(sys.psensor_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.psensor_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psensor_1.entry = defalut;
      print(sys.psensor_1.entry);
      expect(sys.psensor_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psensor_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01356_element_check_01333 **********\n\n");
    });

    test('01357_element_check_01334', () async {
      print("\n********** テスト実行：01357_element_check_01334 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psensor_1.priority;
      print(sys.psensor_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psensor_1.priority = testData1;
      print(sys.psensor_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psensor_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psensor_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psensor_1.priority = testData2;
      print(sys.psensor_1.priority);
      expect(sys.psensor_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.psensor_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psensor_1.priority = defalut;
      print(sys.psensor_1.priority);
      expect(sys.psensor_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psensor_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01357_element_check_01334 **********\n\n");
    });

    test('01358_element_check_01335', () async {
      print("\n********** テスト実行：01358_element_check_01335 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.psensor_1.inifile;
      print(sys.psensor_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.psensor_1.inifile = testData1s;
      print(sys.psensor_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.psensor_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.psensor_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.psensor_1.inifile = testData2s;
      print(sys.psensor_1.inifile);
      expect(sys.psensor_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.psensor_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.psensor_1.inifile = defalut;
      print(sys.psensor_1.inifile);
      expect(sys.psensor_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.psensor_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01358_element_check_01335 **********\n\n");
    });

    test('01359_element_check_01336', () async {
      print("\n********** テスト実行：01359_element_check_01336 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.apbf_1.entry;
      print(sys.apbf_1.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.apbf_1.entry = testData1s;
      print(sys.apbf_1.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.apbf_1.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.apbf_1.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.apbf_1.entry = testData2s;
      print(sys.apbf_1.entry);
      expect(sys.apbf_1.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.apbf_1.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.apbf_1.entry = defalut;
      print(sys.apbf_1.entry);
      expect(sys.apbf_1.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.apbf_1.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01359_element_check_01336 **********\n\n");
    });

    test('01360_element_check_01337', () async {
      print("\n********** テスト実行：01360_element_check_01337 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.apbf_1.priority;
      print(sys.apbf_1.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.apbf_1.priority = testData1;
      print(sys.apbf_1.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.apbf_1.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.apbf_1.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.apbf_1.priority = testData2;
      print(sys.apbf_1.priority);
      expect(sys.apbf_1.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.apbf_1.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.apbf_1.priority = defalut;
      print(sys.apbf_1.priority);
      expect(sys.apbf_1.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.apbf_1.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01360_element_check_01337 **********\n\n");
    });

    test('01361_element_check_01338', () async {
      print("\n********** テスト実行：01361_element_check_01338 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.apbf_1.inifile;
      print(sys.apbf_1.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.apbf_1.inifile = testData1s;
      print(sys.apbf_1.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.apbf_1.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.apbf_1.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.apbf_1.inifile = testData2s;
      print(sys.apbf_1.inifile);
      expect(sys.apbf_1.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.apbf_1.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.apbf_1.inifile = defalut;
      print(sys.apbf_1.inifile);
      expect(sys.apbf_1.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.apbf_1.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01361_element_check_01338 **********\n\n");
    });

    test('01362_element_check_01339', () async {
      print("\n********** テスト実行：01362_element_check_01339 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scalerm.entry;
      print(sys.scalerm.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scalerm.entry = testData1s;
      print(sys.scalerm.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scalerm.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scalerm.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scalerm.entry = testData2s;
      print(sys.scalerm.entry);
      expect(sys.scalerm.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scalerm.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scalerm.entry = defalut;
      print(sys.scalerm.entry);
      expect(sys.scalerm.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scalerm.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01362_element_check_01339 **********\n\n");
    });

    test('01363_element_check_01340', () async {
      print("\n********** テスト実行：01363_element_check_01340 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scalerm.priority;
      print(sys.scalerm.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scalerm.priority = testData1;
      print(sys.scalerm.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scalerm.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scalerm.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scalerm.priority = testData2;
      print(sys.scalerm.priority);
      expect(sys.scalerm.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scalerm.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scalerm.priority = defalut;
      print(sys.scalerm.priority);
      expect(sys.scalerm.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scalerm.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01363_element_check_01340 **********\n\n");
    });

    test('01364_element_check_01341', () async {
      print("\n********** テスト実行：01364_element_check_01341 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scalerm.inifile;
      print(sys.scalerm.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scalerm.inifile = testData1s;
      print(sys.scalerm.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scalerm.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scalerm.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scalerm.inifile = testData2s;
      print(sys.scalerm.inifile);
      expect(sys.scalerm.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scalerm.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scalerm.inifile = defalut;
      print(sys.scalerm.inifile);
      expect(sys.scalerm.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scalerm.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01364_element_check_01341 **********\n\n");
    });

    test('01365_element_check_01342', () async {
      print("\n********** テスト実行：01365_element_check_01342 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.exc.entry;
      print(sys.exc.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.exc.entry = testData1s;
      print(sys.exc.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.exc.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.exc.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.exc.entry = testData2s;
      print(sys.exc.entry);
      expect(sys.exc.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.exc.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.exc.entry = defalut;
      print(sys.exc.entry);
      expect(sys.exc.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.exc.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01365_element_check_01342 **********\n\n");
    });

    test('01366_element_check_01343', () async {
      print("\n********** テスト実行：01366_element_check_01343 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.exc.priority;
      print(sys.exc.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.exc.priority = testData1;
      print(sys.exc.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.exc.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.exc.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.exc.priority = testData2;
      print(sys.exc.priority);
      expect(sys.exc.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.exc.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.exc.priority = defalut;
      print(sys.exc.priority);
      expect(sys.exc.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.exc.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01366_element_check_01343 **********\n\n");
    });

    test('01367_element_check_01344', () async {
      print("\n********** テスト実行：01367_element_check_01344 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.exc.inifile;
      print(sys.exc.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.exc.inifile = testData1s;
      print(sys.exc.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.exc.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.exc.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.exc.inifile = testData2s;
      print(sys.exc.inifile);
      expect(sys.exc.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.exc.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.exc.inifile = defalut;
      print(sys.exc.inifile);
      expect(sys.exc.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.exc.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01367_element_check_01344 **********\n\n");
    });

    test('01368_element_check_01345', () async {
      print("\n********** テスト実行：01368_element_check_01345 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pct.entry;
      print(sys.pct.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pct.entry = testData1s;
      print(sys.pct.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pct.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pct.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pct.entry = testData2s;
      print(sys.pct.entry);
      expect(sys.pct.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pct.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pct.entry = defalut;
      print(sys.pct.entry);
      expect(sys.pct.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pct.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01368_element_check_01345 **********\n\n");
    });

    test('01369_element_check_01346', () async {
      print("\n********** テスト実行：01369_element_check_01346 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pct.priority;
      print(sys.pct.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pct.priority = testData1;
      print(sys.pct.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pct.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pct.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pct.priority = testData2;
      print(sys.pct.priority);
      expect(sys.pct.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.pct.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pct.priority = defalut;
      print(sys.pct.priority);
      expect(sys.pct.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pct.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01369_element_check_01346 **********\n\n");
    });

    test('01370_element_check_01347', () async {
      print("\n********** テスト実行：01370_element_check_01347 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.pct.inifile;
      print(sys.pct.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.pct.inifile = testData1s;
      print(sys.pct.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.pct.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.pct.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.pct.inifile = testData2s;
      print(sys.pct.inifile);
      expect(sys.pct.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.pct.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.pct.inifile = defalut;
      print(sys.pct.inifile);
      expect(sys.pct.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.pct.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01370_element_check_01347 **********\n\n");
    });

    test('01371_element_check_01348', () async {
      print("\n********** テスト実行：01371_element_check_01348 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hitouch.entry;
      print(sys.hitouch.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hitouch.entry = testData1s;
      print(sys.hitouch.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hitouch.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hitouch.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hitouch.entry = testData2s;
      print(sys.hitouch.entry);
      expect(sys.hitouch.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hitouch.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hitouch.entry = defalut;
      print(sys.hitouch.entry);
      expect(sys.hitouch.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hitouch.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01371_element_check_01348 **********\n\n");
    });

    test('01372_element_check_01349', () async {
      print("\n********** テスト実行：01372_element_check_01349 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hitouch.priority;
      print(sys.hitouch.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hitouch.priority = testData1;
      print(sys.hitouch.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hitouch.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hitouch.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hitouch.priority = testData2;
      print(sys.hitouch.priority);
      expect(sys.hitouch.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.hitouch.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hitouch.priority = defalut;
      print(sys.hitouch.priority);
      expect(sys.hitouch.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hitouch.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01372_element_check_01349 **********\n\n");
    });

    test('01373_element_check_01350', () async {
      print("\n********** テスト実行：01373_element_check_01350 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.hitouch.inifile;
      print(sys.hitouch.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.hitouch.inifile = testData1s;
      print(sys.hitouch.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.hitouch.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.hitouch.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.hitouch.inifile = testData2s;
      print(sys.hitouch.inifile);
      expect(sys.hitouch.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.hitouch.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.hitouch.inifile = defalut;
      print(sys.hitouch.inifile);
      expect(sys.hitouch.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.hitouch.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01373_element_check_01350 **********\n\n");
    });

    test('01374_element_check_01351', () async {
      print("\n********** テスト実行：01374_element_check_01351 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ami.entry;
      print(sys.ami.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ami.entry = testData1s;
      print(sys.ami.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ami.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ami.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ami.entry = testData2s;
      print(sys.ami.entry);
      expect(sys.ami.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ami.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ami.entry = defalut;
      print(sys.ami.entry);
      expect(sys.ami.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ami.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01374_element_check_01351 **********\n\n");
    });

    test('01375_element_check_01352', () async {
      print("\n********** テスト実行：01375_element_check_01352 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ami.priority;
      print(sys.ami.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ami.priority = testData1;
      print(sys.ami.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ami.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ami.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ami.priority = testData2;
      print(sys.ami.priority);
      expect(sys.ami.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.ami.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ami.priority = defalut;
      print(sys.ami.priority);
      expect(sys.ami.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ami.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01375_element_check_01352 **********\n\n");
    });

    test('01376_element_check_01353', () async {
      print("\n********** テスト実行：01376_element_check_01353 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.ami.inifile;
      print(sys.ami.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.ami.inifile = testData1s;
      print(sys.ami.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.ami.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.ami.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.ami.inifile = testData2s;
      print(sys.ami.inifile);
      expect(sys.ami.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.ami.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.ami.inifile = defalut;
      print(sys.ami.inifile);
      expect(sys.ami.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.ami.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01376_element_check_01353 **********\n\n");
    });

    test('01377_element_check_01354', () async {
      print("\n********** テスト実行：01377_element_check_01354 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scale_sks.entry;
      print(sys.scale_sks.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scale_sks.entry = testData1s;
      print(sys.scale_sks.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scale_sks.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scale_sks.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scale_sks.entry = testData2s;
      print(sys.scale_sks.entry);
      expect(sys.scale_sks.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scale_sks.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scale_sks.entry = defalut;
      print(sys.scale_sks.entry);
      expect(sys.scale_sks.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scale_sks.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01377_element_check_01354 **********\n\n");
    });

    test('01378_element_check_01355', () async {
      print("\n********** テスト実行：01378_element_check_01355 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scale_sks.priority;
      print(sys.scale_sks.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scale_sks.priority = testData1;
      print(sys.scale_sks.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scale_sks.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scale_sks.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scale_sks.priority = testData2;
      print(sys.scale_sks.priority);
      expect(sys.scale_sks.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.scale_sks.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scale_sks.priority = defalut;
      print(sys.scale_sks.priority);
      expect(sys.scale_sks.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scale_sks.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01378_element_check_01355 **********\n\n");
    });

    test('01379_element_check_01356', () async {
      print("\n********** テスト実行：01379_element_check_01356 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.scale_sks.inifile;
      print(sys.scale_sks.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.scale_sks.inifile = testData1s;
      print(sys.scale_sks.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.scale_sks.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.scale_sks.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.scale_sks.inifile = testData2s;
      print(sys.scale_sks.inifile);
      expect(sys.scale_sks.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.scale_sks.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.scale_sks.inifile = defalut;
      print(sys.scale_sks.inifile);
      expect(sys.scale_sks.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.scale_sks.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01379_element_check_01356 **********\n\n");
    });

    test('01380_element_check_01357', () async {
      print("\n********** テスト実行：01380_element_check_01357 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.aibox.entry;
      print(sys.aibox.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.aibox.entry = testData1s;
      print(sys.aibox.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.aibox.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.aibox.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.aibox.entry = testData2s;
      print(sys.aibox.entry);
      expect(sys.aibox.entry == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.aibox.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.aibox.entry = defalut;
      print(sys.aibox.entry);
      expect(sys.aibox.entry == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.aibox.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01380_element_check_01357 **********\n\n");
    });

    test('01381_element_check_01358', () async {
      print("\n********** テスト実行：01381_element_check_01358 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.aibox.priority;
      print(sys.aibox.priority);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.aibox.priority = testData1;
      print(sys.aibox.priority);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.aibox.priority == testData1, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.aibox.priority == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.aibox.priority = testData2;
      print(sys.aibox.priority);
      expect(sys.aibox.priority == testData2, true);
      await sys.save();
      await sys.load();
      expect(sys.aibox.priority == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.aibox.priority = defalut;
      print(sys.aibox.priority);
      expect(sys.aibox.priority == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.aibox.priority == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01381_element_check_01358 **********\n\n");
    });

    test('01382_element_check_01359', () async {
      print("\n********** テスト実行：01382_element_check_01359 **********");

      sys = SysJsonFile();
      allPropatyCheckInit(sys);

      // ①loadを実行する。
      await sys.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = sys.aibox.inifile;
      print(sys.aibox.inifile);

      // ②指定したプロパティにテストデータ1を書き込む。
      sys.aibox.inifile = testData1s;
      print(sys.aibox.inifile);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(sys.aibox.inifile == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await sys.save();
      await sys.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(sys.aibox.inifile == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      sys.aibox.inifile = testData2s;
      print(sys.aibox.inifile);
      expect(sys.aibox.inifile == testData2s, true);
      await sys.save();
      await sys.load();
      expect(sys.aibox.inifile == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      sys.aibox.inifile = defalut;
      print(sys.aibox.inifile);
      expect(sys.aibox.inifile == defalut, true);
      await sys.save();
      await sys.load();
      expect(sys.aibox.inifile == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(sys, true);

      print("********** テスト終了：01382_element_check_01359 **********\n\n");
    });

  });
}

void allPropatyCheckInit(SysJsonFile test)
{
  expect(test.info.version, "");
  expect(test.info.comment, "");
  expect(test.type.dual, "");
  expect(test.type.webjr, "");
  expect(test.type.web2300, "");
  expect(test.type.webplus, "");
  expect(test.type.web2800, "");
  expect(test.type.web2350, "");
  expect(test.type.web2500, "");
  expect(test.type.webplus2, "");
  expect(test.type.tower, "");
  expect(test.type.mskind, "");
  expect(test.type.standalone, "");
  expect(test.type.membersystem, "");
  expect(test.type.memberpoint, "");
  expect(test.type.memberfsp, "");
  expect(test.type.creditsystem, "");
  expect(test.type.special_receipt, "");
  expect(test.type.disc_barcode, "");
  expect(test.type.iwaisystem, "");
  expect(test.type.self_gate, "");
  expect(test.type.vismacsystem, "");
  expect(test.type.sys_24hour, "");
  expect(test.type.hq_asp, "");
  expect(test.type.jasaitama_sys, "");
  expect(test.type.promsystem, "");
  expect(test.type.edysystem, "");
  expect(test.type.fresh_barcode, "");
  expect(test.type.sugi_sys, "");
  expect(test.type.hesokurisystem, "");
  expect(test.type.greenstamp_sys, "");
  expect(test.type.coopsystem, "");
  expect(test.type.pointcardsystem, "");
  expect(test.type.mobilesystem, "");
  expect(test.type.hq_other, "");
  expect(test.type.regconnectsystem, "");
  expect(test.type.clothes_barcode, "");
  expect(test.type.fjss, "");
  expect(test.type.mcsystem, "");
  expect(test.type.network_prn, "");
  expect(test.type.poppy_print, "");
  expect(test.type.tag_print, "");
  expect(test.type.taurus, "");
  expect(test.type.ntt_asp, "");
  expect(test.type.eat_in, "");
  expect(test.type.mobilesystem2, "");
  expect(test.type.magazine_barcode, "");
  expect(test.type.hq_other_real, "");
  expect(test.type.pw410system, "");
  expect(test.type.nsc_credit, "");
  expect(test.type.hq_prod, "");
  expect(test.type.felicasystem, "");
  expect(test.type.psp70system, "");
  expect(test.type.ntt_bcom, "");
  expect(test.type.catalinasystem, "");
  expect(test.type.prcchkr, "");
  expect(test.type.dishcalcsystem, "");
  expect(test.type.itf_barcode, "");
  expect(test.type.css_act, "");
  expect(test.type.cust_detail, "");
  expect(test.type.custrealsvr, "");
  expect(test.type.suica_cat, "");
  expect(test.type.yomocasystem, "");
  expect(test.type.smartplussystem, "");
  expect(test.type.duty, "");
  expect(test.type.ecoasystem, "");
  expect(test.type.iccardsystem, "");
  expect(test.type.sub_ticket, "");
  expect(test.type.quicpaysystem, "");
  expect(test.type.idsystem, "");
  expect(test.type.revival_receipt, "");
  expect(test.type.quick_self, "");
  expect(test.type.quick_self_chg, "");
  expect(test.type.assist_monitor, "");
  expect(test.type.mp1_print, "");
  expect(test.type.realitmsend, "");
  expect(test.type.rainbowcard, "");
  expect(test.type.gramx, "");
  expect(test.type.mm_abj, "");
  expect(test.type.cat_point, "");
  expect(test.type.tagrdwt, "");
  expect(test.type.department_store, "");
  expect(test.type.edyno_mbr, "");
  expect(test.type.fcf_card, "");
  expect(test.type.panamembersystem, "");
  expect(test.type.landisk, "");
  expect(test.type.pitapasystem, "");
  expect(test.type.tuocardsystem, "");
  expect(test.type.sallmtbar, "");
  expect(test.type.business_mode, "");
  expect(test.type.mcp200system, "");
  expect(test.type.spvtsystem, "");
  expect(test.type.remotesystem, "");
  expect(test.type.order_mode, "");
  expect(test.type.jrem_multisystem, "");
  expect(test.type.media_info, "");
  expect(test.type.gs1_barcode, "");
  expect(test.type.assortsystem, "");
  expect(test.type.center_server, "");
  expect(test.type.reservsystem, "");
  expect(test.type.drug_rev, "");
  expect(test.type.gincardsystem, "");
  expect(test.type.fclqpsystem, "");
  expect(test.type.fcledysystem, "");
  expect(test.type.caps_cafis, "");
  expect(test.type.fclidsystem, "");
  expect(test.type.ptcktissusystem, "");
  expect(test.type.abs_prepaid, "");
  expect(test.type.prod_item_autoset, "");
  expect(test.type.prod_itf14_barcode, "");
  expect(test.type.special_coupon, "");
  expect(test.type.bluechip_server, "");
  expect(test.type.hitachi_bluechip, "");
  expect(test.type.hq_other_cantevole, "");
  expect(test.type.qcashier_system, "");
  expect(test.type.receipt_qr_system, "");
  expect(test.type.visatouch_infox, "");
  expect(test.type.pbchg_system, "");
  expect(test.type.hc1_system, "");
  expect(test.type.caps_hc1_cafis, "");
  expect(test.type.remoteserver, "");
  expect(test.type.mrycardsystem, "");
  expect(test.type.sp_department, "");
  expect(test.type.decimalitmsend, "");
  expect(test.type.wiz_cnct, "");
  expect(test.type.absv31_rwt, "");
  expect(test.type.pluralqr_system, "");
  expect(test.type.netdoareserv, "");
  expect(test.type.selpluadj, "");
  expect(test.type.custreal_webser, "");
  expect(test.type.wiz_abj, "");
  expect(test.type.custreal_uid, "");
  expect(test.type.bdlitmsend, "");
  expect(test.type.custreal_netdoa, "");
  expect(test.type.ut_cnct, "");
  expect(test.type.caps_pqvic, "");
  expect(test.type.yamato_system, "");
  expect(test.type.caps_cafis_standard, "");
  expect(test.type.nttd_preca, "");
  expect(test.type.usbcam_cnct, "");
  expect(test.type.drugstore, "");
  expect(test.type.custreal_nec, "");
  expect(test.type.custreal_op, "");
  expect(test.type.dummy_crdt, "");
  expect(test.type.hc2_system, "");
  expect(test.type.price_sound, "");
  expect(test.type.dummy_preca, "");
  expect(test.type.monitored_system, "");
  expect(test.type.jmups_system, "");
  expect(test.type.ut1qpsystem, "");
  expect(test.type.ut1idsystem, "");
  expect(test.type.brain_system, "");
  expect(test.type.pfmpitapasystem, "");
  expect(test.type.pfmjricsystem, "");
  expect(test.type.chargeslip_system, "");
  expect(test.type.pfmjricchargesystem, "");
  expect(test.type.itemprc_reduction_coupon, "");
  expect(test.type.cat_jmups_system, "");
  expect(test.type.sqrc_ticket_system, "");
  expect(test.type.cct_connect_system, "");
  expect(test.type.cct_emoney_system, "");
  expect(test.type.tec_infox_jet_s_system, "");
  expect(test.type.prod_instore_zero_flg, "");
  expect(test.type.front_self_system, "");
  expect(test.type.trk_preca, "");
  expect(test.type.desktop_cashier_system, "");
  expect(test.type.suica_charge_system, "");
  expect(test.type.nimoca_point_system, "");
  expect(test.type.custreal_pointartist, "");
  expect(test.type.tb1_system, "");
  expect(test.type.tax_free_system, "");
  expect(test.type.repica_system, "");
  expect(test.type.caps_cardnet_system, "");
  expect(test.type.yumeca_system, "");
  expect(test.type.dummy_suica, "");
  expect(test.type.payment_mng, "");
  expect(test.type.custreal_tpoint, "");
  expect(test.type.mammy_system, "");
  expect(test.type.itemtyp_send, "");
  expect(test.type.yumeca_pol_system, "");
  expect(test.type.custreal_hps, "");
  expect(test.type.maruto_system, "");
  expect(test.type.hc3_system, "");
  expect(test.type.sm3_marui_system, "");
  expect(test.type.kitchen_print, "");
  expect(test.type.cogca_system, "");
  expect(test.type.bdl_multi_select_system, "");
  expect(test.type.sallmtbar26, "");
  expect(test.type.purchase_ticket_system, "");
  expect(test.type.custreal_uni_system, "");
  expect(test.type.ej_animation_system, "");
  expect(test.type.value_card_system, "");
  expect(test.type.sm4_comodi_system, "");
  expect(test.type.sm5_itoku_system, "");
  expect(test.type.cct_pointuse_system, "");
  expect(test.type.zhq_system, "");
  expect(test.type.rpoint_system, "");
  expect(test.type.vesca_system, "");
  expect(test.type.ajs_emoney_system, "");
  expect(test.type.sm16_taiyo_toyocho_system, "");
  expect(test.type.infox_detail_send_system, "");
  expect(test.type.self_medication_system, "");
  expect(test.type.sm20_maeda_system, "");
  expect(test.type.pana_waon_system, "");
  expect(test.type.onepay_system, "");
  expect(test.type.happyself_system, "");
  expect(test.type.happyself_smile_system, "");
  expect(test.type.linepay_system, "");
  expect(test.type.staff_release_system, "");
  expect(test.type.wiz_base_system, "");
  expect(test.type.pack_on_time_system, "");
  expect(test.type.shop_and_go_system, "");
  expect(test.type.staffid1_ymss_system, "");
  expect(test.type.sm33_nishizawa_system, "");
  expect(test.type.ds2_godai_system, "");
  expect(test.type.taxfree_passportinfo_system, "");
  expect(test.type.sm36_sanpraza_system, "");
  expect(test.type.cr50_system, "");
  expect(test.type.case_clothes_barcode_system, "");
  expect(test.type.custreal_dummy_system, "");
  expect(test.type.reason_select_std_system, "");
  expect(test.type.barcode_pay1_system, "");
  expect(test.type.custreal_ptactix, "");
  expect(test.type.cr3_sharp_system, "");
  expect(test.type.game_barcode_system, "");
  expect(test.type.cct_codepay_system, "");
  expect(test.type.ws_system, "");
  expect(test.type.custreal_pointinfinity, "");
  expect(test.type.toy_system, "");
  expect(test.type.canal_payment_service_system, "");
  expect(test.type.multi_vega_system, "");
  expect(test.type.dispensing_pharmacy_system, "");
  expect(test.type.sm41_bellejois_system, "");
  expect(test.type.sm42_kanesue_system, "");
  expect(test.type.dpoint_system, "");
  expect(test.type.public_barcode_pay_system, "");
  expect(test.type.ts_indiv_setting_system, "");
  expect(test.type.sm44_ja_tsuruoka_system, "");
  expect(test.type.stera_terminal_system, "");
  expect(test.type.repica_point_system, "");
  expect(test.type.sm45_ocean_system, "");
  expect(test.type.fujitsu_fip_codepay_system, "");
  expect(test.type.sm49_itochain_system, "");
  expect(test.type.taxfree_server_system, "");
  expect(test.type.employee_card_payment_system, "");
  expect(test.type.net_receipt_system, "");
  expect(test.type.public_barcode_pay2_system, "");
  expect(test.type.sm52_palette_system, "");
  expect(test.type.public_barcode_pay3_system, "");
  expect(test.type.svscls2_stlpdsc_system, "");
  expect(test.type.sm55_takayanagi_system, "");
  expect(test.type.mail_send_system, "");
  expect(test.type.netstars_codepay_system, "");
  expect(test.type.sm56_kobebussan_system, "");
  expect(test.type.hys1_seria_system, "");
  expect(test.type.liqr_taxfree_system, "");
  expect(test.type.custreal_gyomuca_system, "");
  expect(test.type.sm59_takaramc_system, "");
  expect(test.type.detail_noprn_system, "");
  expect(test.type.sm61_fujifilm_system, "");
  expect(test.type.department2_system, "");
  expect(test.type.custreal_crosspoint, "");
  expect(test.type.hc12_joyful_honda_system, "");
  expect(test.type.sm62_maruichi_system, "");
  expect(test.type.sm65_ryubo_system, "");
  expect(test.type.tomoIF_system, "");
  expect(test.type.sm66_fresta_system, "");
  expect(test.type.cosme1_istyle_system, "");
  expect(test.type.sm71_selection_system, "");
  expect(test.type.kitchen_print_recipt, "");
  expect(test.type.miyazaki_city_system, "");
  expect(test.type.public_barcode_pay4_system, "");
  expect(test.type.sp1_qr_read_system, "");
  expect(test.type.aibox_alignment_system, "");
  expect(test.type.cashonly_keyopt_system, "");
  expect(test.type.sm74_ozeki_system, "");
  expect(test.type.carparking_qr_system, "");
  expect(test.type.olc_system, "");
  expect(test.type.quiz_payment_system, "");
  expect(test.type.jets_lane_system, "");
  expect(test.type.rf1_hs_system, "");
  expect(test.dip_sw.subcpu1, "");
  expect(test.dip_sw.subcpu2, "");
  expect(test.boot_webplus2_desktop.drivers01, "");
  expect(test.boot_webplus2_desktop.drivers02, "");
  expect(test.boot_webplus2_desktop.drivers03, "");
  expect(test.boot_webplus2_desktop.drivers04, "");
  expect(test.boot_webplus2_desktop.drivers05, "");
  expect(test.boot_webplus2_desktop.drivers06, "");
  expect(test.boot_webplus2_desktop.drivers07, "");
  expect(test.boot_webplus2_desktop.drivers08, "");
  expect(test.boot_webplus2_desktop.drivers09, "");
  expect(test.boot_webplus2_desktop.drivers10, "");
  expect(test.boot_webplus2_desktop.drivers11, "");
  expect(test.boot_webplus2_desktop.drivers12, "");
  expect(test.boot_webplus2_desktop.drivers13, "");
  expect(test.boot_webplus2_desktop.drivers14, "");
  expect(test.boot_webplus2_desktop.drivers15, "");
  expect(test.boot_webplus2_desktop.drivers16, "");
  expect(test.boot_webplus2_desktop.drivers17, "");
  expect(test.boot_webplus2_desktop.drivers18, "");
  expect(test.boot_webplus2_desktop.drivers36, "");
  expect(test.boot_webplus2_desktop.drivers37, "");
  expect(test.boot_webplus2_desktop.drivers38, "");
  expect(test.boot_webplus2_desktop.drivers39, "");
  expect(test.boot_web2350_tower.drivers01, "");
  expect(test.boot_web2350_tower.drivers02, "");
  expect(test.boot_web2350_tower.drivers03, "");
  expect(test.boot_web2350_tower.drivers04, "");
  expect(test.boot_web2350_tower.drivers05, "");
  expect(test.boot_web2350_tower.drivers06, "");
  expect(test.boot_web2350_tower.drivers07, "");
  expect(test.boot_web2350_tower.drivers08, "");
  expect(test.boot_web2350_tower.drivers09, "");
  expect(test.boot_web2350_tower.drivers10, "");
  expect(test.boot_web2350_tower.drivers11, "");
  expect(test.boot_web2350_tower.drivers12, "");
  expect(test.boot_web2350_tower.drivers13, "");
  expect(test.boot_web2350_tower.drivers14, "");
  expect(test.boot_web2350_tower.drivers15, "");
  expect(test.boot_web2350_tower.drivers16, "");
  expect(test.boot_web2350_tower.drivers17, "");
  expect(test.boot_web2350_tower.drivers18, "");
  expect(test.boot_web2350_tower.drivers19, "");
  expect(test.boot_web2350_tower.drivers20, "");
  expect(test.boot_web2350_tower.drivers21, "");
  expect(test.boot_web2350_tower.drivers22, "");
  expect(test.boot_web2350_tower.drivers23, "");
  expect(test.boot_web2350_tower.drivers24, "");
  expect(test.boot_web2350_tower.drivers36, "");
  expect(test.boot_web2350_tower.drivers37, "");
  expect(test.boot_web2350_tower.drivers38, "");
  expect(test.boot_web2350_tower.drivers39, "");
  expect(test.boot_web2350_desktop.drivers01, "");
  expect(test.boot_web2350_desktop.drivers02, "");
  expect(test.boot_web2350_desktop.drivers03, "");
  expect(test.boot_web2350_desktop.drivers04, "");
  expect(test.boot_web2350_desktop.drivers05, "");
  expect(test.boot_web2350_desktop.drivers06, "");
  expect(test.boot_web2350_desktop.drivers07, "");
  expect(test.boot_web2350_desktop.drivers08, "");
  expect(test.boot_web2350_desktop.drivers09, "");
  expect(test.boot_web2350_desktop.drivers10, "");
  expect(test.boot_web2350_desktop.drivers11, "");
  expect(test.boot_web2350_desktop.drivers12, "");
  expect(test.boot_web2350_desktop.drivers13, "");
  expect(test.boot_web2350_desktop.drivers14, "");
  expect(test.boot_web2350_desktop.drivers36, "");
  expect(test.boot_web2350_desktop.drivers37, "");
  expect(test.boot_web2350_desktop.drivers38, "");
  expect(test.boot_web2350_desktop.drivers39, "");
  expect(test.boot_web2500_tower.drivers01, "");
  expect(test.boot_web2500_tower.drivers02, "");
  expect(test.boot_web2500_tower.drivers03, "");
  expect(test.boot_web2500_tower.drivers04, "");
  expect(test.boot_web2500_tower.drivers05, "");
  expect(test.boot_web2500_tower.drivers06, "");
  expect(test.boot_web2500_tower.drivers07, "");
  expect(test.boot_web2500_tower.drivers08, "");
  expect(test.boot_web2500_tower.drivers09, "");
  expect(test.boot_web2500_tower.drivers10, "");
  expect(test.boot_web2500_tower.drivers11, "");
  expect(test.boot_web2500_tower.drivers12, "");
  expect(test.boot_web2500_tower.drivers13, "");
  expect(test.boot_web2500_tower.drivers14, "");
  expect(test.boot_web2500_tower.drivers15, "");
  expect(test.boot_web2500_tower.drivers16, "");
  expect(test.boot_web2500_tower.drivers17, "");
  expect(test.boot_web2500_tower.drivers18, "");
  expect(test.boot_web2500_tower.drivers19, "");
  expect(test.boot_web2500_tower.drivers20, "");
  expect(test.boot_web2500_tower.drivers21, "");
  expect(test.boot_web2500_tower.drivers22, "");
  expect(test.boot_web2500_tower.drivers23, "");
  expect(test.boot_web2500_tower.drivers24, "");
  expect(test.boot_web2500_tower.drivers25, "");
  expect(test.boot_web2500_tower.drivers26, "");
  expect(test.boot_web2500_tower.drivers27, "");
  expect(test.boot_web2500_tower.drivers28, "");
  expect(test.boot_web2500_tower.drivers36, "");
  expect(test.boot_web2500_tower.drivers37, "");
  expect(test.boot_web2500_tower.drivers38, "");
  expect(test.boot_web2500_tower.drivers39, "");
  expect(test.boot_web2500_desktop.drivers01, "");
  expect(test.boot_web2500_desktop.drivers02, "");
  expect(test.boot_web2500_desktop.drivers03, "");
  expect(test.boot_web2500_desktop.drivers04, "");
  expect(test.boot_web2500_desktop.drivers05, "");
  expect(test.boot_web2500_desktop.drivers06, "");
  expect(test.boot_web2500_desktop.drivers07, "");
  expect(test.boot_web2500_desktop.drivers08, "");
  expect(test.boot_web2500_desktop.drivers09, "");
  expect(test.boot_web2500_desktop.drivers10, "");
  expect(test.boot_web2500_desktop.drivers11, "");
  expect(test.boot_web2500_desktop.drivers12, "");
  expect(test.boot_web2500_desktop.drivers13, "");
  expect(test.boot_web2500_desktop.drivers14, "");
  expect(test.boot_web2500_desktop.drivers15, "");
  expect(test.boot_web2500_desktop.drivers16, "");
  expect(test.boot_web2500_desktop.drivers17, "");
  expect(test.boot_web2500_desktop.drivers18, "");
  expect(test.boot_web2500_desktop.drivers19, "");
  expect(test.boot_web2500_desktop.drivers20, "");
  expect(test.boot_web2500_desktop.drivers36, "");
  expect(test.boot_web2500_desktop.drivers37, "");
  expect(test.boot_web2500_desktop.drivers38, "");
  expect(test.boot_web2500_desktop.drivers39, "");
  expect(test.boot_web2800_tower.drivers01, "");
  expect(test.boot_web2800_tower.drivers02, "");
  expect(test.boot_web2800_tower.drivers03, "");
  expect(test.boot_web2800_tower.drivers04, "");
  expect(test.boot_web2800_tower.drivers05, "");
  expect(test.boot_web2800_tower.drivers06, "");
  expect(test.boot_web2800_tower.drivers07, "");
  expect(test.boot_web2800_tower.drivers08, "");
  expect(test.boot_web2800_tower.drivers09, "");
  expect(test.boot_web2800_tower.drivers10, "");
  expect(test.boot_web2800_tower.drivers11, "");
  expect(test.boot_web2800_tower.drivers12, "");
  expect(test.boot_web2800_tower.drivers13, "");
  expect(test.boot_web2800_tower.drivers14, "");
  expect(test.boot_web2800_tower.drivers15, "");
  expect(test.boot_web2800_tower.drivers16, "");
  expect(test.boot_web2800_tower.drivers17, "");
  expect(test.boot_web2800_tower.drivers18, "");
  expect(test.boot_web2800_tower.drivers19, "");
  expect(test.boot_web2800_tower.drivers20, "");
  expect(test.boot_web2800_tower.drivers21, "");
  expect(test.boot_web2800_tower.drivers22, "");
  expect(test.boot_web2800_tower.drivers23, "");
  expect(test.boot_web2800_tower.drivers24, "");
  expect(test.boot_web2800_tower.drivers25, "");
  expect(test.boot_web2800_tower.drivers26, "");
  expect(test.boot_web2800_tower.drivers27, "");
  expect(test.boot_web2800_tower.drivers28, "");
  expect(test.boot_web2800_tower.drivers29, "");
  expect(test.boot_web2800_tower.drivers30, "");
  expect(test.boot_web2800_tower.drivers31, "");
  expect(test.boot_web2800_tower.drivers32, "");
  expect(test.boot_web2800_tower.drivers33, "");
  expect(test.boot_web2800_tower.drivers34, "");
  expect(test.boot_web2800_tower.drivers36, "");
  expect(test.boot_web2800_tower.drivers37, "");
  expect(test.boot_web2800_tower.drivers38, "");
  expect(test.boot_web2800_tower.drivers39, "");
  expect(test.boot_web2800_desktop.drivers01, "");
  expect(test.boot_web2800_desktop.drivers02, "");
  expect(test.boot_web2800_desktop.drivers03, "");
  expect(test.boot_web2800_desktop.drivers04, "");
  expect(test.boot_web2800_desktop.drivers05, "");
  expect(test.boot_web2800_desktop.drivers06, "");
  expect(test.boot_web2800_desktop.drivers07, "");
  expect(test.boot_web2800_desktop.drivers08, "");
  expect(test.boot_web2800_desktop.drivers09, "");
  expect(test.boot_web2800_desktop.drivers10, "");
  expect(test.boot_web2800_desktop.drivers11, "");
  expect(test.boot_web2800_desktop.drivers12, "");
  expect(test.boot_web2800_desktop.drivers13, "");
  expect(test.boot_web2800_desktop.drivers14, "");
  expect(test.boot_web2800_desktop.drivers15, "");
  expect(test.boot_web2800_desktop.drivers16, "");
  expect(test.boot_web2800_desktop.drivers17, "");
  expect(test.boot_web2800_desktop.drivers18, "");
  expect(test.boot_web2800_desktop.drivers19, "");
  expect(test.boot_web2800_desktop.drivers20, "");
  expect(test.boot_web2800_desktop.drivers21, "");
  expect(test.boot_web2800_desktop.drivers22, "");
  expect(test.boot_web2800_desktop.drivers23, "");
  expect(test.boot_web2800_desktop.drivers24, "");
  expect(test.boot_web2800_desktop.drivers25, "");
  expect(test.boot_web2800_desktop.drivers26, "");
  expect(test.boot_web2800_desktop.drivers27, "");
  expect(test.boot_web2800_desktop.drivers28, "");
  expect(test.boot_web2800_desktop.drivers29, "");
  expect(test.boot_web2800_desktop.drivers30, "");
  expect(test.boot_web2800_desktop.drivers31, "");
  expect(test.boot_web2800_desktop.drivers32, "");
  expect(test.boot_web2800_desktop.drivers33, "");
  expect(test.boot_web2800_desktop.drivers34, "");
  expect(test.boot_web2800_desktop.drivers36, "");
  expect(test.boot_web2800_desktop.drivers37, "");
  expect(test.boot_web2800_desktop.drivers38, "");
  expect(test.boot_web2800_desktop.drivers39, "");
  expect(test.boot_web2300_tower.drivers01, "");
  expect(test.boot_web2300_tower.drivers02, "");
  expect(test.boot_web2300_tower.drivers03, "");
  expect(test.boot_web2300_tower.drivers04, "");
  expect(test.boot_web2300_tower.drivers05, "");
  expect(test.boot_web2300_tower.drivers06, "");
  expect(test.boot_web2300_tower.drivers07, "");
  expect(test.boot_web2300_tower.drivers08, "");
  expect(test.boot_web2300_tower.drivers09, "");
  expect(test.boot_web2300_tower.drivers10, "");
  expect(test.boot_web2300_tower.drivers11, "");
  expect(test.boot_web2300_tower.drivers12, "");
  expect(test.boot_web2300_tower.drivers13, "");
  expect(test.boot_web2300_tower.drivers14, "");
  expect(test.boot_web2300_tower.drivers15, "");
  expect(test.boot_web2300_tower.drivers16, "");
  expect(test.boot_web2300_tower.drivers17, "");
  expect(test.boot_web2300_tower.drivers18, "");
  expect(test.boot_web2300_tower.drivers19, "");
  expect(test.boot_web2300_tower.drivers20, "");
  expect(test.boot_web2300_tower.drivers21, "");
  expect(test.boot_web2300_tower.drivers22, "");
  expect(test.boot_web2300_tower.drivers23, "");
  expect(test.boot_web2300_tower.drivers24, "");
  expect(test.boot_web2300_tower.drivers36, "");
  expect(test.boot_web2300_tower.drivers37, "");
  expect(test.boot_web2300_tower.drivers38, "");
  expect(test.boot_web2300_tower.drivers39, "");
  expect(test.boot_web2300_desktop.drivers01, "");
  expect(test.boot_web2300_desktop.drivers02, "");
  expect(test.boot_web2300_desktop.drivers03, "");
  expect(test.boot_web2300_desktop.drivers04, "");
  expect(test.boot_web2300_desktop.drivers05, "");
  expect(test.boot_web2300_desktop.drivers06, "");
  expect(test.boot_web2300_desktop.drivers07, "");
  expect(test.boot_web2300_desktop.drivers08, "");
  expect(test.boot_web2300_desktop.drivers09, "");
  expect(test.boot_web2300_desktop.drivers10, "");
  expect(test.boot_web2300_desktop.drivers11, "");
  expect(test.boot_web2300_desktop.drivers12, "");
  expect(test.boot_web2300_desktop.drivers13, "");
  expect(test.boot_web2300_desktop.drivers14, "");
  expect(test.boot_web2300_desktop.drivers36, "");
  expect(test.boot_web2300_desktop.drivers37, "");
  expect(test.boot_web2300_desktop.drivers38, "");
  expect(test.boot_web2300_desktop.drivers39, "");
  expect(test.boot_webplus_desktop.drivers01, "");
  expect(test.boot_webplus_desktop.drivers02, "");
  expect(test.boot_webplus_desktop.drivers03, "");
  expect(test.boot_webplus_desktop.drivers04, "");
  expect(test.boot_webplus_desktop.drivers05, "");
  expect(test.boot_webplus_desktop.drivers06, "");
  expect(test.boot_webplus_desktop.drivers07, "");
  expect(test.boot_webplus_desktop.drivers08, "");
  expect(test.boot_webplus_desktop.drivers09, "");
  expect(test.boot_webplus_desktop.drivers10, "");
  expect(test.boot_webplus_desktop.drivers11, "");
  expect(test.boot_webplus_desktop.drivers12, "");
  expect(test.boot_webplus_desktop.drivers13, "");
  expect(test.boot_webplus_desktop.drivers14, "");
  expect(test.boot_webplus_desktop.drivers15, "");
  expect(test.boot_webplus_desktop.drivers16, "");
  expect(test.boot_webplus_desktop.drivers36, "");
  expect(test.boot_webplus_desktop.drivers37, "");
  expect(test.boot_webplus_desktop.drivers38, "");
  expect(test.boot_webplus_desktop.drivers39, "");
  expect(test.boot_dual_tower.drivers01, "");
  expect(test.boot_dual_tower.drivers02, "");
  expect(test.boot_dual_tower.drivers03, "");
  expect(test.boot_dual_tower.drivers04, "");
  expect(test.boot_dual_tower.drivers05, "");
  expect(test.boot_dual_tower.drivers06, "");
  expect(test.boot_dual_tower.drivers07, "");
  expect(test.boot_dual_tower.drivers08, "");
  expect(test.boot_dual_tower.drivers09, "");
  expect(test.boot_dual_tower.drivers10, "");
  expect(test.boot_dual_tower.drivers11, "");
  expect(test.boot_dual_tower.drivers12, "");
  expect(test.boot_dual_tower.drivers13, "");
  expect(test.boot_dual_tower.drivers14, "");
  expect(test.boot_dual_tower.drivers15, "");
  expect(test.boot_dual_tower.drivers16, "");
  expect(test.boot_dual_tower.drivers17, "");
  expect(test.boot_dual_tower.drivers18, "");
  expect(test.boot_dual_tower.drivers19, "");
  expect(test.boot_dual_tower.drivers20, "");
  expect(test.boot_dual_tower.drivers21, "");
  expect(test.boot_dual_tower.drivers22, "");
  expect(test.boot_dual_tower.drivers23, "");
  expect(test.boot_dual_tower.drivers24, "");
  expect(test.boot_dual_tower.drivers25, "");
  expect(test.boot_dual_tower.drivers26, "");
  expect(test.boot_dual_tower.drivers27, "");
  expect(test.boot_dual_tower.drivers28, "");
  expect(test.boot_dual_tower.drivers29, "");
  expect(test.boot_dual_tower.drivers30, "");
  expect(test.boot_dual_tower.drivers31, "");
  expect(test.boot_dual_tower.drivers32, "");
  expect(test.boot_dual_tower.drivers36, "");
  expect(test.boot_dual_tower.drivers37, "");
  expect(test.boot_dual_tower.drivers38, "");
  expect(test.boot_dual_tower.drivers39, "");
  expect(test.boot_dual_desktop.drivers01, "");
  expect(test.boot_dual_desktop.drivers02, "");
  expect(test.boot_dual_desktop.drivers03, "");
  expect(test.boot_dual_desktop.drivers04, "");
  expect(test.boot_dual_desktop.drivers05, "");
  expect(test.boot_dual_desktop.drivers06, "");
  expect(test.boot_dual_desktop.drivers07, "");
  expect(test.boot_dual_desktop.drivers08, "");
  expect(test.boot_dual_desktop.drivers09, "");
  expect(test.boot_dual_desktop.drivers10, "");
  expect(test.boot_dual_desktop.drivers11, "");
  expect(test.boot_dual_desktop.drivers12, "");
  expect(test.boot_dual_desktop.drivers13, "");
  expect(test.boot_dual_desktop.drivers14, "");
  expect(test.boot_dual_desktop.drivers15, "");
  expect(test.boot_dual_desktop.drivers16, "");
  expect(test.boot_dual_desktop.drivers17, "");
  expect(test.boot_dual_desktop.drivers18, "");
  expect(test.boot_dual_desktop.drivers19, "");
  expect(test.boot_dual_desktop.drivers20, "");
  expect(test.boot_dual_desktop.drivers21, "");
  expect(test.boot_dual_desktop.drivers22, "");
  expect(test.boot_dual_desktop.drivers23, "");
  expect(test.boot_dual_desktop.drivers24, "");
  expect(test.boot_dual_desktop.drivers36, "");
  expect(test.boot_dual_desktop.drivers37, "");
  expect(test.boot_dual_desktop.drivers38, "");
  expect(test.boot_dual_desktop.drivers39, "");
  expect(test.boot_jr.drivers01, "");
  expect(test.boot_jr.drivers02, "");
  expect(test.boot_jr.drivers03, "");
  expect(test.boot_jr.drivers04, "");
  expect(test.boot_jr.drivers05, "");
  expect(test.boot_jr.drivers06, "");
  expect(test.boot_jr.drivers07, "");
  expect(test.boot_jr.drivers08, "");
  expect(test.boot_jr.drivers09, "");
  expect(test.boot_jr.drivers10, "");
  expect(test.boot_jr.drivers11, "");
  expect(test.boot_jr.drivers12, "");
  expect(test.boot_jr.drivers13, "");
  expect(test.boot_jr.drivers14, "");
  expect(test.boot_jr.drivers15, "");
  expect(test.boot_jr.drivers16, "");
  expect(test.boot_jr.drivers17, "");
  expect(test.boot_jr.drivers18, "");
  expect(test.boot_jr.drivers19, "");
  expect(test.boot_jr.drivers20, "");
  expect(test.boot_jr.drivers21, "");
  expect(test.boot_jr.drivers22, "");
  expect(test.boot_jr.drivers36, "");
  expect(test.boot_jr.drivers37, "");
  expect(test.boot_jr.drivers38, "");
  expect(test.boot_jr.drivers39, "");
  expect(test.boot_jr_tower.drivers01, "");
  expect(test.boot_jr_tower.drivers02, "");
  expect(test.boot_jr_tower.drivers03, "");
  expect(test.boot_jr_tower.drivers04, "");
  expect(test.boot_jr_tower.drivers05, "");
  expect(test.boot_jr_tower.drivers06, "");
  expect(test.boot_jr_tower.drivers07, "");
  expect(test.boot_jr_tower.drivers08, "");
  expect(test.boot_jr_tower.drivers09, "");
  expect(test.boot_jr_tower.drivers10, "");
  expect(test.boot_jr_tower.drivers11, "");
  expect(test.boot_jr_tower.drivers12, "");
  expect(test.boot_jr_tower.drivers13, "");
  expect(test.boot_jr_tower.drivers14, "");
  expect(test.boot_jr_tower.drivers15, "");
  expect(test.boot_jr_tower.drivers16, "");
  expect(test.boot_jr_tower.drivers17, "");
  expect(test.boot_jr_tower.drivers18, "");
  expect(test.boot_jr_tower.drivers19, "");
  expect(test.boot_jr_tower.drivers20, "");
  expect(test.boot_jr_tower.drivers21, "");
  expect(test.boot_jr_tower.drivers22, "");
  expect(test.boot_jr_tower.drivers23, "");
  expect(test.boot_jr_tower.drivers24, "");
  expect(test.boot_jr_tower.drivers25, "");
  expect(test.boot_jr_tower.drivers26, "");
  expect(test.boot_jr_tower.drivers27, "");
  expect(test.boot_jr_tower.drivers28, "");
  expect(test.boot_jr_tower.drivers36, "");
  expect(test.boot_jr_tower.drivers37, "");
  expect(test.boot_jr_tower.drivers38, "");
  expect(test.boot_jr_tower.drivers39, "");
  expect(test.boot_tower.drivers01, "");
  expect(test.boot_tower.drivers02, "");
  expect(test.boot_tower.drivers03, "");
  expect(test.boot_tower.drivers04, "");
  expect(test.boot_tower.drivers05, "");
  expect(test.boot_tower.drivers06, "");
  expect(test.boot_tower.drivers07, "");
  expect(test.boot_tower.drivers08, "");
  expect(test.boot_tower.drivers09, "");
  expect(test.boot_tower.drivers10, "");
  expect(test.boot_tower.drivers11, "");
  expect(test.boot_tower.drivers12, "");
  expect(test.boot_tower.drivers13, "");
  expect(test.boot_tower.drivers14, "");
  expect(test.boot_tower.drivers15, "");
  expect(test.boot_tower.drivers16, "");
  expect(test.boot_tower.drivers17, "");
  expect(test.boot_tower.drivers18, "");
  expect(test.boot_tower.drivers19, "");
  expect(test.boot_tower.drivers20, "");
  expect(test.boot_tower.drivers21, "");
  expect(test.boot_tower.drivers22, "");
  expect(test.boot_tower.drivers23, "");
  expect(test.boot_tower.drivers24, "");
  expect(test.boot_tower.drivers25, "");
  expect(test.boot_tower.drivers26, "");
  expect(test.boot_tower.drivers27, "");
  expect(test.boot_tower.drivers28, "");
  expect(test.boot_tower.drivers29, "");
  expect(test.boot_tower.drivers30, "");
  expect(test.boot_tower.drivers31, "");
  expect(test.boot_tower.drivers32, "");
  expect(test.boot_tower.drivers36, "");
  expect(test.boot_tower.drivers37, "");
  expect(test.boot_tower.drivers38, "");
  expect(test.boot_tower.drivers39, "");
  expect(test.boot_desktop.drivers01, "");
  expect(test.boot_desktop.drivers02, "");
  expect(test.boot_desktop.drivers03, "");
  expect(test.boot_desktop.drivers04, "");
  expect(test.boot_desktop.drivers05, "");
  expect(test.boot_desktop.drivers06, "");
  expect(test.boot_desktop.drivers07, "");
  expect(test.boot_desktop.drivers08, "");
  expect(test.boot_desktop.drivers09, "");
  expect(test.boot_desktop.drivers10, "");
  expect(test.boot_desktop.drivers11, "");
  expect(test.boot_desktop.drivers12, "");
  expect(test.boot_desktop.drivers13, "");
  expect(test.boot_desktop.drivers14, "");
  expect(test.boot_desktop.drivers15, "");
  expect(test.boot_desktop.drivers16, "");
  expect(test.boot_desktop.drivers17, "");
  expect(test.boot_desktop.drivers18, "");
  expect(test.boot_desktop.drivers19, "");
  expect(test.boot_desktop.drivers20, "");
  expect(test.boot_desktop.drivers21, "");
  expect(test.boot_desktop.drivers36, "");
  expect(test.boot_desktop.drivers37, "");
  expect(test.boot_desktop.drivers38, "");
  expect(test.boot_desktop.drivers39, "");
  expect(test.verup.verup, "");
  expect(test.verup.date, "");
  expect(test.verup.time, "");
  expect(test.verup.command, "");
  expect(test.verup.param, "");
  expect(test.speaker.keyvol1, 0);
  expect(test.speaker.keytone1, 0);
  expect(test.speaker.scanvol1, 0);
  expect(test.speaker.scantone1, 0);
  expect(test.speaker.keyvol2, 0);
  expect(test.speaker.keytone2, 0);
  expect(test.speaker.scanvol2, 0);
  expect(test.speaker.scantone2, 0);
  expect(test.lcdbright.lcdbright1, 0);
  expect(test.lcdbright.lcdbright2, 0);
  expect(test.logging.maxsize, 0);
  expect(test.logging.level, 0);
  expect(test.scanner.reschar, 0);
  expect(test.scanner.reschar_tower, 0);
  expect(test.scanner.reschar_add, 0);
  expect(test.subcpu1.entry, "");
  expect(test.subcpu1.priority, 0);
  expect(test.subcpu1.inifile, "");
  expect(test.spk1.entry, "");
  expect(test.spk1.priority, 0);
  expect(test.spk1.inifile, "");
  expect(test.wand1.entry, "");
  expect(test.wand1.priority, 0);
  expect(test.wand1.inifile, "");
  expect(test.wand2.entry, "");
  expect(test.wand2.priority, 0);
  expect(test.wand2.inifile, "");
  expect(test.lcdbrt1.entry, "");
  expect(test.lcdbrt1.priority, 0);
  expect(test.lcdbrt1.inifile, "");
  expect(test.lcdbrt2.entry, "");
  expect(test.lcdbrt2.priority, 0);
  expect(test.lcdbrt2.inifile, "");
  expect(test.fip1.entry, "");
  expect(test.fip1.priority, 0);
  expect(test.fip1.inifile, "");
  expect(test.mkey1.entry, "");
  expect(test.mkey1.priority, 0);
  expect(test.mkey1.inifile, "");
  expect(test.mkey2.entry, "");
  expect(test.mkey2.priority, 0);
  expect(test.mkey2.inifile, "");
  expect(test.lcd57.entry, "");
  expect(test.lcd57.priority, 0);
  expect(test.lcd57.inifile, "");
  expect(test.tkey1t.entry, "");
  expect(test.tkey1t.priority, 0);
  expect(test.tkey1t.inifile, "");
  expect(test.tkey1d.entry, "");
  expect(test.tkey1d.priority, 0);
  expect(test.tkey1d.inifile, "");
  expect(test.msr11.entry, "");
  expect(test.msr11.priority, 0);
  expect(test.msr11.inifile, "");
  expect(test.msr12.entry, "");
  expect(test.msr12.priority, 0);
  expect(test.msr12.inifile, "");
  expect(test.msr21.entry, "");
  expect(test.msr21.priority, 0);
  expect(test.msr21.inifile, "");
  expect(test.msr22.entry, "");
  expect(test.msr22.priority, 0);
  expect(test.msr22.inifile, "");
  expect(test.subcpu2.entry, "");
  expect(test.subcpu2.priority, 0);
  expect(test.subcpu2.inifile, "");
  expect(test.spk2.entry, "");
  expect(test.spk2.priority, 0);
  expect(test.spk2.inifile, "");
  expect(test.fip2.entry, "");
  expect(test.fip2.priority, 0);
  expect(test.fip2.inifile, "");
  expect(test.tkey2.entry, "");
  expect(test.tkey2.priority, 0);
  expect(test.tkey2.inifile, "");
  expect(test.tprt.entry, "");
  expect(test.tprt.priority, 0);
  expect(test.tprt.inifile, "");
  expect(test.pmouse1.entry, "");
  expect(test.pmouse1.priority, 0);
  expect(test.pmouse1.inifile, "");
  expect(test.pmouse2.entry, "");
  expect(test.pmouse2.priority, 0);
  expect(test.pmouse2.inifile, "");
  expect(test.sprt.entry, "");
  expect(test.sprt.priority, 0);
  expect(test.sprt.inifile, "");
  expect(test.mupdate.entry, "");
  expect(test.mupdate.priority, 0);
  expect(test.mupdate.inifile, "");
  expect(test.history.entry, "");
  expect(test.history.priority, 0);
  expect(test.history.inifile, "");
  expect(test.hist_csrv.entry, "");
  expect(test.hist_csrv.priority, 0);
  expect(test.hist_csrv.inifile, "");
  expect(test.tqrcd.entry, "");
  expect(test.tqrcd.priority, 0);
  expect(test.tqrcd.inifile, "");
  expect(test.hqftp.entry, "");
  expect(test.hqftp.priority, 0);
  expect(test.hqftp.inifile, "");
  expect(test.supdate.entry, "");
  expect(test.supdate.priority, 0);
  expect(test.supdate.inifile, "");
  expect(test.hqhist.entry, "");
  expect(test.hqhist.priority, 0);
  expect(test.hqhist.inifile, "");
  expect(test.hqprod.entry, "");
  expect(test.hqprod.priority, 0);
  expect(test.hqprod.inifile, "");
  expect(test.signp.entry, "");
  expect(test.signp.priority, 0);
  expect(test.signp.inifile, "");
  expect(test.detect.entry, "");
  expect(test.detect.priority, 0);
  expect(test.detect.inifile, "");
  expect(test.callsw.entry, "");
  expect(test.callsw.priority, 0);
  expect(test.callsw.inifile, "");
  expect(test.subcpu3.entry, "");
  expect(test.subcpu3.priority, 0);
  expect(test.subcpu3.inifile, "");
  expect(test.spk3.entry, "");
  expect(test.spk3.priority, 0);
  expect(test.spk3.inifile, "");
  expect(test.tkey3d.entry, "");
  expect(test.tkey3d.priority, 0);
  expect(test.tkey3d.inifile, "");
  expect(test.seg1.entry, "");
  expect(test.seg1.priority, 0);
  expect(test.seg1.inifile, "");
  expect(test.seg2.entry, "");
  expect(test.seg2.priority, 0);
  expect(test.seg2.inifile, "");
  expect(test.wand3.entry, "");
  expect(test.wand3.priority, 0);
  expect(test.wand3.inifile, "");
  expect(test.lcdbrt3.entry, "");
  expect(test.lcdbrt3.priority, 0);
  expect(test.lcdbrt3.inifile, "");
  expect(test.mkey3.entry, "");
  expect(test.mkey3.priority, 0);
  expect(test.mkey3.inifile, "");
  expect(test.msr31.entry, "");
  expect(test.msr31.priority, 0);
  expect(test.msr31.inifile, "");
  expect(test.msr32.entry, "");
  expect(test.msr32.priority, 0);
  expect(test.msr32.inifile, "");
  expect(test.pmouse3.entry, "");
  expect(test.pmouse3.priority, 0);
  expect(test.pmouse3.inifile, "");
  expect(test.schctrl.entry, "");
  expect(test.schctrl.priority, 0);
  expect(test.schctrl.inifile, "");
  expect(test.fip3.entry, "");
  expect(test.fip3.priority, 0);
  expect(test.fip3.inifile, "");
  expect(test.vfd57_3.entry, "");
  expect(test.vfd57_3.priority, 0);
  expect(test.vfd57_3.inifile, "");
  expect(test.tprtf.entry, "");
  expect(test.tprtf.priority, 0);
  expect(test.tprtf.inifile, "");
  expect(test.tprts.entry, "");
  expect(test.tprts.priority, 0);
  expect(test.tprts.inifile, "");
  expect(test.pmouse_plus_1.entry, "");
  expect(test.pmouse_plus_1.priority, 0);
  expect(test.pmouse_plus_1.inifile, "");
  expect(test.pmouse_plus_1.tower, 0);
  expect(test.pmouse_2300_1.entry, "");
  expect(test.pmouse_2300_1.priority, 0);
  expect(test.pmouse_2300_1.inifile, "");
  expect(test.pmouse_2300_1.tower, 0);
  expect(test.pmouse_2300_2.entry, "");
  expect(test.pmouse_2300_2.priority, 0);
  expect(test.pmouse_2300_2.inifile, "");
  expect(test.pmouse_2300_2.tower, 0);
  expect(test.fip_plus_1.entry, "");
  expect(test.fip_plus_1.priority, 0);
  expect(test.fip_plus_1.inifile, "");
  expect(test.fip_plus_1.tower, 0);
  expect(test.fip_2300_1.entry, "");
  expect(test.fip_2300_1.priority, 0);
  expect(test.fip_2300_1.inifile, "");
  expect(test.fip_2300_1.tower, 0);
  expect(test.fip_2300_2.entry, "");
  expect(test.fip_2300_2.priority, 0);
  expect(test.fip_2300_2.inifile, "");
  expect(test.fip_2300_2.tower, 0);
  expect(test.segd_plus_1.entry, "");
  expect(test.segd_plus_1.priority, 0);
  expect(test.segd_plus_1.inifile, "");
  expect(test.segd_2300_1.entry, "");
  expect(test.segd_2300_1.priority, 0);
  expect(test.segd_2300_1.inifile, "");
  expect(test.segd_2300_2.entry, "");
  expect(test.segd_2300_2.priority, 0);
  expect(test.segd_2300_2.inifile, "");
  expect(test.vfd57_plus_1.entry, "");
  expect(test.vfd57_plus_1.priority, 0);
  expect(test.vfd57_plus_1.inifile, "");
  expect(test.vfd57_2300_1.entry, "");
  expect(test.vfd57_2300_1.priority, 0);
  expect(test.vfd57_2300_1.inifile, "");
  expect(test.vfd57_2300_2.entry, "");
  expect(test.vfd57_2300_2.priority, 0);
  expect(test.vfd57_2300_2.inifile, "");
  expect(test.mkey_plus_1.entry, "");
  expect(test.mkey_plus_1.priority, 0);
  expect(test.mkey_plus_1.inifile, "");
  expect(test.mkey_plus_1.tower, 0);
  expect(test.mkey_2300_1.entry, "");
  expect(test.mkey_2300_1.priority, 0);
  expect(test.mkey_2300_1.inifile, "");
  expect(test.mkey_2300_1.tower, 0);
  expect(test.mkey_2300_2.entry, "");
  expect(test.mkey_2300_2.priority, 0);
  expect(test.mkey_2300_2.inifile, "");
  expect(test.mkey_2300_2.tower, 0);
  expect(test.scan_plus_1.entry, "");
  expect(test.scan_plus_1.priority, 0);
  expect(test.scan_plus_1.inifile, "");
  expect(test.scan_plus_1.tower, 0);
  expect(test.scan_plus_2.entry, "");
  expect(test.scan_plus_2.priority, 0);
  expect(test.scan_plus_2.inifile, "");
  expect(test.scan_plus_2.tower, 0);
  expect(test.scan_2300_1.entry, "");
  expect(test.scan_2300_1.priority, 0);
  expect(test.scan_2300_1.inifile, "");
  expect(test.scan_2300_1.tower, 0);
  expect(test.scan_2300_2.entry, "");
  expect(test.scan_2300_2.priority, 0);
  expect(test.scan_2300_2.inifile, "");
  expect(test.scan_2300_2.tower, 0);
  expect(test.msr_2300_1.entry, "");
  expect(test.msr_2300_1.priority, 0);
  expect(test.msr_2300_1.inifile, "");
  expect(test.msr_2300_1.tower, 0);
  expect(test.msr_2300_2.entry, "");
  expect(test.msr_2300_2.priority, 0);
  expect(test.msr_2300_2.inifile, "");
  expect(test.msr_2300_2.tower, 0);
  expect(test.mkey_2800_1.entry, "");
  expect(test.mkey_2800_1.priority, 0);
  expect(test.mkey_2800_1.inifile, "");
  expect(test.mkey_2800_1.tower, 0);
  expect(test.mkey_2800_2.entry, "");
  expect(test.mkey_2800_2.priority, 0);
  expect(test.mkey_2800_2.inifile, "");
  expect(test.mkey_2800_2.tower, 0);
  expect(test.pmouse_2800_1.entry, "");
  expect(test.pmouse_2800_1.priority, 0);
  expect(test.pmouse_2800_1.inifile, "");
  expect(test.pmouse_2800_1.inifile2, "");
  expect(test.pmouse_2800_1.tower, 0);
  expect(test.pmouse_2800_2.entry, "");
  expect(test.pmouse_2800_2.priority, 0);
  expect(test.pmouse_2800_2.inifile, "");
  expect(test.pmouse_2800_2.tower, 0);
  expect(test.pmouse_2800_3.entry, "");
  expect(test.pmouse_2800_3.priority, 0);
  expect(test.pmouse_2800_3.inifile, "");
  expect(test.pmouse_2800_3.inifile2, "");
  expect(test.pmouse_2800_3.inifile3, "");
  expect(test.pmouse_2800_3.tower, 0);
  expect(test.scan_2800_1.entry, "");
  expect(test.scan_2800_1.priority, 0);
  expect(test.scan_2800_1.inifile, "");
  expect(test.scan_2800_1.tower, 0);
  expect(test.scan_2800_2.entry, "");
  expect(test.scan_2800_2.priority, 0);
  expect(test.scan_2800_2.inifile, "");
  expect(test.scan_2800_2.tower, 0);
  expect(test.fip_2800_1.entry, "");
  expect(test.fip_2800_1.priority, 0);
  expect(test.fip_2800_1.inifile, "");
  expect(test.fip_2800_1.tower, 0);
  expect(test.fip_2800_2.entry, "");
  expect(test.fip_2800_2.priority, 0);
  expect(test.fip_2800_2.inifile, "");
  expect(test.fip_2800_2.tower, 0);
  expect(test.fip_2800_3.entry, "");
  expect(test.fip_2800_3.priority, 0);
  expect(test.fip_2800_3.inifile, "");
  expect(test.fip_2800_3.tower, 0);
  expect(test.drw_2800_1.entry, "");
  expect(test.drw_2800_1.priority, 0);
  expect(test.drw_2800_1.inifile, "");
  expect(test.drw_2800_1.tower, 0);
  expect(test.drw_2800_2.entry, "");
  expect(test.drw_2800_2.priority, 0);
  expect(test.drw_2800_2.inifile, "");
  expect(test.drw_2800_2.tower, 0);
  expect(test.tprtss.entry, "");
  expect(test.tprtss.priority, 0);
  expect(test.tprtss.inifile, "");
  expect(test.tprtss2.entry, "");
  expect(test.tprtss2.priority, 0);
  expect(test.tprtss2.inifile, "");
  expect(test.pmouse_2500_1.entry, "");
  expect(test.pmouse_2500_1.priority, 0);
  expect(test.pmouse_2500_1.inifile, "");
  expect(test.pmouse_2500_1.inifile2, "");
  expect(test.pmouse_2500_1.tower, 0);
  expect(test.pmouse_2500_2.entry, "");
  expect(test.pmouse_2500_2.priority, 0);
  expect(test.pmouse_2500_2.inifile, "");
  expect(test.pmouse_2500_2.tower, 0);
  expect(test.fip_2500_1.entry, "");
  expect(test.fip_2500_1.priority, 0);
  expect(test.fip_2500_1.inifile, "");
  expect(test.fip_2500_1.tower, 0);
  expect(test.fip_2500_2.entry, "");
  expect(test.fip_2500_2.priority, 0);
  expect(test.fip_2500_2.inifile, "");
  expect(test.fip_2500_2.tower, 0);
  expect(test.scan_2500_1.entry, "");
  expect(test.scan_2500_1.priority, 0);
  expect(test.scan_2500_1.inifile, "");
  expect(test.scan_2500_1.tower, 0);
  expect(test.scan_2500_2.entry, "");
  expect(test.scan_2500_2.priority, 0);
  expect(test.scan_2500_2.inifile, "");
  expect(test.scan_2500_2.tower, 0);
  expect(test.msr_2500_1.entry, "");
  expect(test.msr_2500_1.priority, 0);
  expect(test.msr_2500_1.inifile, "");
  expect(test.msr_2500_1.tower, 0);
  expect(test.msr_2500_2.entry, "");
  expect(test.msr_2500_2.priority, 0);
  expect(test.msr_2500_2.inifile, "");
  expect(test.msr_2500_2.tower, 0);
  expect(test.pmouse_2350_1.entry, "");
  expect(test.pmouse_2350_1.priority, 0);
  expect(test.pmouse_2350_1.inifile, "");
  expect(test.pmouse_2350_1.tower, 0);
  expect(test.pmouse_2350_2.entry, "");
  expect(test.pmouse_2350_2.priority, 0);
  expect(test.pmouse_2350_2.inifile, "");
  expect(test.pmouse_2350_2.tower, 0);
  expect(test.scan_2800ip_1.entry, "");
  expect(test.scan_2800ip_1.priority, 0);
  expect(test.scan_2800ip_1.inifile, "");
  expect(test.scan_2800ip_1.tower, 0);
  expect(test.scan_2800ip_2.entry, "");
  expect(test.scan_2800ip_2.priority, 0);
  expect(test.scan_2800ip_2.inifile, "");
  expect(test.scan_2800ip_2.tower, 0);
  expect(test.tprtim.entry, "");
  expect(test.tprtim.priority, 0);
  expect(test.tprtim.inifile, "");
  expect(test.fip_2800im_1.entry, "");
  expect(test.fip_2800im_1.priority, 0);
  expect(test.fip_2800im_1.inifile, "");
  expect(test.fip_2800im_1.tower, 0);
  expect(test.fip_2800im_2.entry, "");
  expect(test.fip_2800im_2.priority, 0);
  expect(test.fip_2800im_2.inifile, "");
  expect(test.fip_2800im_2.tower, 0);
  expect(test.fip_2800im_3.entry, "");
  expect(test.fip_2800im_3.priority, 0);
  expect(test.fip_2800im_3.inifile, "");
  expect(test.fip_2800im_3.tower, 0);
  expect(test.scan_2800im_1.entry, "");
  expect(test.scan_2800im_1.priority, 0);
  expect(test.scan_2800im_1.inifile, "");
  expect(test.scan_2800im_1.tower, 0);
  expect(test.scan_2800im_2.entry, "");
  expect(test.scan_2800im_2.priority, 0);
  expect(test.scan_2800im_2.inifile, "");
  expect(test.scan_2800im_2.tower, 0);
  expect(test.pmouse_plus2_1.entry, "");
  expect(test.pmouse_plus2_1.priority, 0);
  expect(test.pmouse_plus2_1.inifile, "");
  expect(test.pmouse_plus2_1.tower, 0);
  expect(test.fip_plus2_1.entry, "");
  expect(test.fip_plus2_1.priority, 0);
  expect(test.fip_plus2_1.inifile, "");
  expect(test.fip_plus2_1.tower, 0);
  expect(test.fip_plus2_2.entry, "");
  expect(test.fip_plus2_2.priority, 0);
  expect(test.fip_plus2_2.inifile, "");
  expect(test.fip_plus2_2.tower, 0);
  expect(test.fip_plus2_3.entry, "");
  expect(test.fip_plus2_3.priority, 0);
  expect(test.fip_plus2_3.inifile, "");
  expect(test.fip_plus2_3.tower, 0);
  expect(test.msr_plus2_1.entry, "");
  expect(test.msr_plus2_1.priority, 0);
  expect(test.msr_plus2_1.inifile, "");
  expect(test.msr_plus2_1.tower, 0);
  expect(test.scan_2800a3_1.entry, "");
  expect(test.scan_2800a3_1.priority, 0);
  expect(test.scan_2800a3_1.inifile, "");
  expect(test.scan_2800a3_1.tower, 0);
  expect(test.scan_2800i3_1.entry, "");
  expect(test.scan_2800i3_1.priority, 0);
  expect(test.scan_2800i3_1.inifile, "");
  expect(test.scan_2800i3_1.tower, 0);
  expect(test.msr_int_1.entry, "");
  expect(test.msr_int_1.priority, 0);
  expect(test.msr_int_1.inifile, "");
  expect(test.msr_int_1.tower, 0);
  expect(test.scan_2800g3_1.entry, "");
  expect(test.scan_2800g3_1.priority, 0);
  expect(test.scan_2800g3_1.inifile, "");
  expect(test.scan_2800g3_1.tower, 0);
  expect(test.pmouse_2800_4.entry, "");
  expect(test.pmouse_2800_4.priority, 0);
  expect(test.pmouse_2800_4.inifile, "");
  expect(test.pmouse_2800_4.inifile2, "");
  expect(test.pmouse_2800_4.tower, 0);
  expect(test.tprthp.entry, "");
  expect(test.tprthp.priority, 0);
  expect(test.tprthp.inifile, "");
  expect(test.sprocket.entry, "");
  expect(test.sprocket.priority, 0);
  expect(test.sprocket.inifile, "");
  expect(test.acr.entry, "");
  expect(test.acr.priority, 0);
  expect(test.acr.inifile, "");
  expect(test.acb.entry, "");
  expect(test.acb.priority, 0);
  expect(test.acb.inifile, "");
  expect(test.acb20.entry, "");
  expect(test.acb20.priority, 0);
  expect(test.acb20.inifile, "");
  expect(test.rewrite.entry, "");
  expect(test.rewrite.priority, 0);
  expect(test.rewrite.inifile, "");
  expect(test.vismac.entry, "");
  expect(test.vismac.priority, 0);
  expect(test.vismac.inifile, "");
  expect(test.gcat.entry, "");
  expect(test.gcat.priority, 0);
  expect(test.gcat.inifile, "");
  expect(test.debit.entry, "");
  expect(test.debit.priority, 0);
  expect(test.debit.inifile, "");
  expect(test.scale.entry, "");
  expect(test.scale.priority, 0);
  expect(test.scale.inifile, "");
  expect(test.orc.entry, "");
  expect(test.orc.priority, 0);
  expect(test.orc.inifile, "");
  expect(test.sg_scale1.entry, "");
  expect(test.sg_scale1.priority, 0);
  expect(test.sg_scale1.inifile, "");
  expect(test.sg_scale2.entry, "");
  expect(test.sg_scale2.priority, 0);
  expect(test.sg_scale2.inifile, "");
  expect(test.sm_scale1.entry, "");
  expect(test.sm_scale1.priority, 0);
  expect(test.sm_scale1.inifile, "");
  expect(test.sm_scale2.entry, "");
  expect(test.sm_scale2.priority, 0);
  expect(test.sm_scale2.inifile, "");
  expect(test.sip60.entry, "");
  expect(test.sip60.priority, 0);
  expect(test.sip60.inifile, "");
  expect(test.psp60.entry, "");
  expect(test.psp60.priority, 0);
  expect(test.psp60.inifile, "");
  expect(test.stpr.entry, "");
  expect(test.stpr.priority, 0);
  expect(test.stpr.inifile, "");
  expect(test.pana.entry, "");
  expect(test.pana.priority, 0);
  expect(test.pana.inifile, "");
  expect(test.gp.entry, "");
  expect(test.gp.priority, 0);
  expect(test.gp.inifile, "");
  expect(test.sm_scalesc.entry, "");
  expect(test.sm_scalesc.priority, 0);
  expect(test.sm_scalesc.inifile, "");
  expect(test.sm_scalesc_scl.entry, "");
  expect(test.sm_scalesc_scl.priority, 0);
  expect(test.sm_scalesc_scl.inifile, "");
  expect(test.sm_scalesc_signp.entry, "");
  expect(test.sm_scalesc_signp.priority, 0);
  expect(test.sm_scalesc_signp.inifile, "");
  expect(test.s2pr.entry, "");
  expect(test.s2pr.priority, 0);
  expect(test.s2pr.inifile, "");
  expect(test.acb50.entry, "");
  expect(test.acb50.priority, 0);
  expect(test.acb50.inifile, "");
  expect(test.pwrctrl.entry, "");
  expect(test.pwrctrl.priority, 0);
  expect(test.pwrctrl.inifile, "");
  expect(test.pw410.entry, "");
  expect(test.pw410.priority, 0);
  expect(test.pw410.inifile, "");
  expect(test.ccr.entry, "");
  expect(test.ccr.priority, 0);
  expect(test.ccr.inifile, "");
  expect(test.psp70.entry, "");
  expect(test.psp70.priority, 0);
  expect(test.psp70.inifile, "");
  expect(test.dish.entry, "");
  expect(test.dish.priority, 0);
  expect(test.dish.inifile, "");
  expect(test.aiv.entry, "");
  expect(test.aiv.priority, 0);
  expect(test.aiv.inifile, "");
  expect(test.ar_stts_01.entry, "");
  expect(test.ar_stts_01.priority, 0);
  expect(test.ar_stts_01.inifile, "");
  expect(test.gcat_cnct.entry, "");
  expect(test.gcat_cnct.priority, 0);
  expect(test.gcat_cnct.inifile, "");
  expect(test.yomoca.entry, "");
  expect(test.yomoca.priority, 0);
  expect(test.yomoca.inifile, "");
  expect(test.smtplus.entry, "");
  expect(test.smtplus.priority, 0);
  expect(test.smtplus.inifile, "");
  expect(test.suica.entry, "");
  expect(test.suica.priority, 0);
  expect(test.suica.inifile, "");
  expect(test.rfid.entry, "");
  expect(test.rfid.priority, 0);
  expect(test.rfid.inifile, "");
  expect(test.disht.entry, "");
  expect(test.disht.priority, 0);
  expect(test.disht.inifile, "");
  expect(test.mcp200.entry, "");
  expect(test.mcp200.priority, 0);
  expect(test.mcp200.inifile, "");
  expect(test.fcl.entry, "");
  expect(test.fcl.priority, 0);
  expect(test.fcl.inifile, "");
  expect(test.jrw_multi.entry, "");
  expect(test.jrw_multi.priority, 0);
  expect(test.jrw_multi.inifile, "");
  expect(test.ht2980.entry, "");
  expect(test.ht2980.priority, 0);
  expect(test.ht2980.inifile, "");
  expect(test.absv31.entry, "");
  expect(test.absv31.priority, 0);
  expect(test.absv31.inifile, "");
  expect(test.yamato.entry, "");
  expect(test.yamato.priority, 0);
  expect(test.yamato.inifile, "");
  expect(test.cct.entry, "");
  expect(test.cct.priority, 0);
  expect(test.cct.inifile, "");
  expect(test.castles.entry, "");
  expect(test.castles.priority, 0);
  expect(test.castles.inifile, "");
  expect(test.usbcam.entry, "");
  expect(test.usbcam.priority, 0);
  expect(test.usbcam.inifile, "");
  expect(test.masr.entry, "");
  expect(test.masr.priority, 0);
  expect(test.masr.inifile, "");
  expect(test.jmups.entry, "");
  expect(test.jmups.priority, 0);
  expect(test.jmups.inifile, "");
  expect(test.fal2.entry, "");
  expect(test.fal2.priority, 0);
  expect(test.fal2.inifile, "");
  expect(test.sqrc.entry, "");
  expect(test.sqrc.priority, 0);
  expect(test.sqrc.inifile, "");
  expect(test.tprtrp.entry, "");
  expect(test.tprtrp.priority, 0);
  expect(test.tprtrp.inifile, "");
  expect(test.tprtrp2.entry, "");
  expect(test.tprtrp2.priority, 0);
  expect(test.tprtrp2.inifile, "");
  expect(test.iccard.entry, "");
  expect(test.iccard.priority, 0);
  expect(test.iccard.inifile, "");
  expect(test.mst.entry, "");
  expect(test.mst.priority, 0);
  expect(test.mst.inifile, "");
  expect(test.scan_2800_3.entry, "");
  expect(test.scan_2800_3.priority, 0);
  expect(test.scan_2800_3.inifile, "");
  expect(test.scan_2800_3.tower, 0);
  expect(test.vega3000.entry, "");
  expect(test.vega3000.priority, 0);
  expect(test.vega3000.inifile, "");
  expect(test.powli.entry, "");
  expect(test.powli.priority, 0);
  expect(test.powli.inifile, "");
  expect(test.scan_2800_4.entry, "");
  expect(test.scan_2800_4.priority, 0);
  expect(test.scan_2800_4.inifile, "");
  expect(test.scan_2800_4.tower, 0);
  expect(test.psensor_1.entry, "");
  expect(test.psensor_1.priority, 0);
  expect(test.psensor_1.inifile, "");
  expect(test.apbf_1.entry, "");
  expect(test.apbf_1.priority, 0);
  expect(test.apbf_1.inifile, "");
  expect(test.scalerm.entry, "");
  expect(test.scalerm.priority, 0);
  expect(test.scalerm.inifile, "");
  expect(test.exc.entry, "");
  expect(test.exc.priority, 0);
  expect(test.exc.inifile, "");
  expect(test.pct.entry, "");
  expect(test.pct.priority, 0);
  expect(test.pct.inifile, "");
  expect(test.hitouch.entry, "");
  expect(test.hitouch.priority, 0);
  expect(test.hitouch.inifile, "");
  expect(test.ami.entry, "");
  expect(test.ami.priority, 0);
  expect(test.ami.inifile, "");
  expect(test.scale_sks.entry, "");
  expect(test.scale_sks.priority, 0);
  expect(test.scale_sks.inifile, "");
  expect(test.aibox.entry, "");
  expect(test.aibox.priority, 0);
  expect(test.aibox.inifile, "");
}

void allPropatyCheck(SysJsonFile test, bool firstItemCheck)
{
  if(firstItemCheck == true) {
    expect(test.info.version, "00.00.85");
  }
  expect(test.info.comment, "release version for fsiabc");
  expect(test.type.dual, "no");
  expect(test.type.webjr, "no");
  expect(test.type.web2300, "no");
  expect(test.type.webplus, "no");
  expect(test.type.web2800, "yes");
  expect(test.type.web2350, "no");
  expect(test.type.web2500, "no");
  expect(test.type.webplus2, "no");
  expect(test.type.tower, "no");
  expect(test.type.mskind, "m");
  expect(test.type.standalone, "no");
  expect(test.type.membersystem, "no");
  expect(test.type.memberpoint, "no");
  expect(test.type.memberfsp, "no");
  expect(test.type.creditsystem, "no");
  expect(test.type.special_receipt, "no");
  expect(test.type.disc_barcode, "no");
  expect(test.type.iwaisystem, "no");
  expect(test.type.self_gate, "no");
  expect(test.type.vismacsystem, "no");
  expect(test.type.sys_24hour, "no");
  expect(test.type.hq_asp, "no");
  expect(test.type.jasaitama_sys, "no");
  expect(test.type.promsystem, "no");
  expect(test.type.edysystem, "no");
  expect(test.type.fresh_barcode, "no");
  expect(test.type.sugi_sys, "no");
  expect(test.type.hesokurisystem, "no");
  expect(test.type.greenstamp_sys, "no");
  expect(test.type.coopsystem, "no");
  expect(test.type.pointcardsystem, "no");
  expect(test.type.mobilesystem, "no");
  expect(test.type.hq_other, "no");
  expect(test.type.regconnectsystem, "no");
  expect(test.type.clothes_barcode, "no");
  expect(test.type.fjss, "no");
  expect(test.type.mcsystem, "no");
  expect(test.type.network_prn, "no");
  expect(test.type.poppy_print, "no");
  expect(test.type.tag_print, "no");
  expect(test.type.taurus, "no");
  expect(test.type.ntt_asp, "no");
  expect(test.type.eat_in, "no");
  expect(test.type.mobilesystem2, "no");
  expect(test.type.magazine_barcode, "no");
  expect(test.type.hq_other_real, "no");
  expect(test.type.pw410system, "no");
  expect(test.type.nsc_credit, "no");
  expect(test.type.hq_prod, "no");
  expect(test.type.felicasystem, "no");
  expect(test.type.psp70system, "no");
  expect(test.type.ntt_bcom, "no");
  expect(test.type.catalinasystem, "no");
  expect(test.type.prcchkr, "no");
  expect(test.type.dishcalcsystem, "no");
  expect(test.type.itf_barcode, "no");
  expect(test.type.css_act, "no");
  expect(test.type.cust_detail, "no");
  expect(test.type.custrealsvr, "no");
  expect(test.type.suica_cat, "no");
  expect(test.type.yomocasystem, "no");
  expect(test.type.smartplussystem, "no");
  expect(test.type.duty, "no");
  expect(test.type.ecoasystem, "no");
  expect(test.type.iccardsystem, "no");
  expect(test.type.sub_ticket, "no");
  expect(test.type.quicpaysystem, "no");
  expect(test.type.idsystem, "no");
  expect(test.type.revival_receipt, "no");
  expect(test.type.quick_self, "no");
  expect(test.type.quick_self_chg, "no");
  expect(test.type.assist_monitor, "no");
  expect(test.type.mp1_print, "no");
  expect(test.type.realitmsend, "no");
  expect(test.type.rainbowcard, "no");
  expect(test.type.gramx, "no");
  expect(test.type.mm_abj, "no");
  expect(test.type.cat_point, "no");
  expect(test.type.tagrdwt, "no");
  expect(test.type.department_store, "no");
  expect(test.type.edyno_mbr, "no");
  expect(test.type.fcf_card, "no");
  expect(test.type.panamembersystem, "no");
  expect(test.type.landisk, "no");
  expect(test.type.pitapasystem, "no");
  expect(test.type.tuocardsystem, "no");
  expect(test.type.sallmtbar, "no");
  expect(test.type.business_mode, "no");
  expect(test.type.mcp200system, "no");
  expect(test.type.spvtsystem, "no");
  expect(test.type.remotesystem, "no");
  expect(test.type.order_mode, "no");
  expect(test.type.jrem_multisystem, "no");
  expect(test.type.media_info, "no");
  expect(test.type.gs1_barcode, "no");
  expect(test.type.assortsystem, "no");
  expect(test.type.center_server, "no");
  expect(test.type.reservsystem, "no");
  expect(test.type.drug_rev, "no");
  expect(test.type.gincardsystem, "no");
  expect(test.type.fclqpsystem, "no");
  expect(test.type.fcledysystem, "no");
  expect(test.type.caps_cafis, "no");
  expect(test.type.fclidsystem, "no");
  expect(test.type.ptcktissusystem, "no");
  expect(test.type.abs_prepaid, "no");
  expect(test.type.prod_item_autoset, "no");
  expect(test.type.prod_itf14_barcode, "no");
  expect(test.type.special_coupon, "no");
  expect(test.type.bluechip_server, "no");
  expect(test.type.hitachi_bluechip, "no");
  expect(test.type.hq_other_cantevole, "no");
  expect(test.type.qcashier_system, "no");
  expect(test.type.receipt_qr_system, "no");
  expect(test.type.visatouch_infox, "no");
  expect(test.type.pbchg_system, "no");
  expect(test.type.hc1_system, "no");
  expect(test.type.caps_hc1_cafis, "no");
  expect(test.type.remoteserver, "no");
  expect(test.type.mrycardsystem, "no");
  expect(test.type.sp_department, "no");
  expect(test.type.decimalitmsend, "no");
  expect(test.type.wiz_cnct, "no");
  expect(test.type.absv31_rwt, "no");
  expect(test.type.pluralqr_system, "no");
  expect(test.type.netdoareserv, "no");
  expect(test.type.selpluadj, "no");
  expect(test.type.custreal_webser, "no");
  expect(test.type.wiz_abj, "no");
  expect(test.type.custreal_uid, "no");
  expect(test.type.bdlitmsend, "no");
  expect(test.type.custreal_netdoa, "no");
  expect(test.type.ut_cnct, "no");
  expect(test.type.caps_pqvic, "no");
  expect(test.type.yamato_system, "no");
  expect(test.type.caps_cafis_standard, "no");
  expect(test.type.nttd_preca, "no");
  expect(test.type.usbcam_cnct, "no");
  expect(test.type.drugstore, "no");
  expect(test.type.custreal_nec, "no");
  expect(test.type.custreal_op, "no");
  expect(test.type.dummy_crdt, "no");
  expect(test.type.hc2_system, "no");
  expect(test.type.price_sound, "no");
  expect(test.type.dummy_preca, "no");
  expect(test.type.monitored_system, "no");
  expect(test.type.jmups_system, "no");
  expect(test.type.ut1qpsystem, "no");
  expect(test.type.ut1idsystem, "no");
  expect(test.type.brain_system, "no");
  expect(test.type.pfmpitapasystem, "no");
  expect(test.type.pfmjricsystem, "no");
  expect(test.type.chargeslip_system, "no");
  expect(test.type.pfmjricchargesystem, "no");
  expect(test.type.itemprc_reduction_coupon, "no");
  expect(test.type.cat_jmups_system, "no");
  expect(test.type.sqrc_ticket_system, "no");
  expect(test.type.cct_connect_system, "no");
  expect(test.type.cct_emoney_system, "no");
  expect(test.type.tec_infox_jet_s_system, "no");
  expect(test.type.prod_instore_zero_flg, "no");
  expect(test.type.front_self_system, "no");
  expect(test.type.trk_preca, "no");
  expect(test.type.desktop_cashier_system, "no");
  expect(test.type.suica_charge_system, "no");
  expect(test.type.nimoca_point_system, "no");
  expect(test.type.custreal_pointartist, "no");
  expect(test.type.tb1_system, "no");
  expect(test.type.tax_free_system, "no");
  expect(test.type.repica_system, "no");
  expect(test.type.caps_cardnet_system, "no");
  expect(test.type.yumeca_system, "no");
  expect(test.type.dummy_suica, "no");
  expect(test.type.payment_mng, "no");
  expect(test.type.custreal_tpoint, "no");
  expect(test.type.mammy_system, "no");
  expect(test.type.itemtyp_send, "no");
  expect(test.type.yumeca_pol_system, "no");
  expect(test.type.custreal_hps, "no");
  expect(test.type.maruto_system, "no");
  expect(test.type.hc3_system, "no");
  expect(test.type.sm3_marui_system, "no");
  expect(test.type.kitchen_print, "no");
  expect(test.type.cogca_system, "no");
  expect(test.type.bdl_multi_select_system, "no");
  expect(test.type.sallmtbar26, "no");
  expect(test.type.purchase_ticket_system, "no");
  expect(test.type.custreal_uni_system, "no");
  expect(test.type.ej_animation_system, "no");
  expect(test.type.value_card_system, "no");
  expect(test.type.sm4_comodi_system, "no");
  expect(test.type.sm5_itoku_system, "no");
  expect(test.type.cct_pointuse_system, "no");
  expect(test.type.zhq_system, "no");
  expect(test.type.rpoint_system, "no");
  expect(test.type.vesca_system, "no");
  expect(test.type.ajs_emoney_system, "no");
  expect(test.type.sm16_taiyo_toyocho_system, "no");
  expect(test.type.infox_detail_send_system, "no");
  expect(test.type.self_medication_system, "no");
  expect(test.type.sm20_maeda_system, "no");
  expect(test.type.pana_waon_system, "no");
  expect(test.type.onepay_system, "no");
  expect(test.type.happyself_system, "no");
  expect(test.type.happyself_smile_system, "no");
  expect(test.type.linepay_system, "no");
  expect(test.type.staff_release_system, "no");
  expect(test.type.wiz_base_system, "no");
  expect(test.type.pack_on_time_system, "no");
  expect(test.type.shop_and_go_system, "no");
  expect(test.type.staffid1_ymss_system, "no");
  expect(test.type.sm33_nishizawa_system, "no");
  expect(test.type.ds2_godai_system, "no");
  expect(test.type.taxfree_passportinfo_system, "no");
  expect(test.type.sm36_sanpraza_system, "no");
  expect(test.type.cr50_system, "no");
  expect(test.type.case_clothes_barcode_system, "no");
  expect(test.type.custreal_dummy_system, "no");
  expect(test.type.reason_select_std_system, "no");
  expect(test.type.barcode_pay1_system, "no");
  expect(test.type.custreal_ptactix, "no");
  expect(test.type.cr3_sharp_system, "no");
  expect(test.type.game_barcode_system, "no");
  expect(test.type.cct_codepay_system, "no");
  expect(test.type.ws_system, "no");
  expect(test.type.custreal_pointinfinity, "no");
  expect(test.type.toy_system, "no");
  expect(test.type.canal_payment_service_system, "no");
  expect(test.type.multi_vega_system, "no");
  expect(test.type.dispensing_pharmacy_system, "no");
  expect(test.type.sm41_bellejois_system, "no");
  expect(test.type.sm42_kanesue_system, "no");
  expect(test.type.dpoint_system, "no");
  expect(test.type.public_barcode_pay_system, "no");
  expect(test.type.ts_indiv_setting_system, "no");
  expect(test.type.sm44_ja_tsuruoka_system, "no");
  expect(test.type.stera_terminal_system, "no");
  expect(test.type.repica_point_system, "no");
  expect(test.type.sm45_ocean_system, "no");
  expect(test.type.fujitsu_fip_codepay_system, "no");
  expect(test.type.sm49_itochain_system, "no");
  expect(test.type.taxfree_server_system, "no");
  expect(test.type.employee_card_payment_system, "no");
  expect(test.type.net_receipt_system, "no");
  expect(test.type.public_barcode_pay2_system, "no");
  expect(test.type.sm52_palette_system, "no");
  expect(test.type.public_barcode_pay3_system, "no");
  expect(test.type.svscls2_stlpdsc_system, "no");
  expect(test.type.sm55_takayanagi_system, "no");
  expect(test.type.mail_send_system, "no");
  expect(test.type.netstars_codepay_system, "no");
  expect(test.type.sm56_kobebussan_system, "no");
  expect(test.type.hys1_seria_system, "no");
  expect(test.type.liqr_taxfree_system, "no");
  expect(test.type.custreal_gyomuca_system, "no");
  expect(test.type.sm59_takaramc_system, "no");
  expect(test.type.detail_noprn_system, "no");
  expect(test.type.sm61_fujifilm_system, "no");
  expect(test.type.department2_system, "no");
  expect(test.type.custreal_crosspoint, "no");
  expect(test.type.hc12_joyful_honda_system, "no");
  expect(test.type.sm62_maruichi_system, "no");
  expect(test.type.sm65_ryubo_system, "no");
  expect(test.type.tomoIF_system, "no");
  expect(test.type.sm66_fresta_system, "no");
  expect(test.type.cosme1_istyle_system, "no");
  expect(test.type.sm71_selection_system, "no");
  expect(test.type.kitchen_print_recipt, "no");
  expect(test.type.miyazaki_city_system, "no");
  expect(test.type.public_barcode_pay4_system, "no");
  expect(test.type.sp1_qr_read_system, "no");
  expect(test.type.aibox_alignment_system, "no");
  expect(test.type.cashonly_keyopt_system, "no");
  expect(test.type.sm74_ozeki_system, "no");
  expect(test.type.carparking_qr_system, "no");
  expect(test.type.olc_system, "no");
  expect(test.type.quiz_payment_system, "no");
  expect(test.type.jets_lane_system, "no");
  expect(test.type.rf1_hs_system, "no");
  expect(test.dip_sw.subcpu1, "");
  expect(test.dip_sw.subcpu2, "");
  expect(test.boot_webplus2_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_webplus2_desktop.drivers02, "pmouse_plus2_1");
  expect(test.boot_webplus2_desktop.drivers03, "fip_plus2_1");
  expect(test.boot_webplus2_desktop.drivers04, "mupdate");
  expect(test.boot_webplus2_desktop.drivers05, "history");
  expect(test.boot_webplus2_desktop.drivers06, "hqftp");
  expect(test.boot_webplus2_desktop.drivers07, "supdate");
  expect(test.boot_webplus2_desktop.drivers08, "hqhist");
  expect(test.boot_webplus2_desktop.drivers09, "schctrl");
  expect(test.boot_webplus2_desktop.drivers10, "hqprod");
  expect(test.boot_webplus2_desktop.drivers11, "tprtss");
  expect(test.boot_webplus2_desktop.drivers12, "msr_plus2_1");
  expect(test.boot_webplus2_desktop.drivers13, "fip_plus2_2");
  expect(test.boot_webplus2_desktop.drivers14, "fip_plus2_3");
  expect(test.boot_webplus2_desktop.drivers15, "hist_csrv");
  expect(test.boot_webplus2_desktop.drivers16, "tprtrp");
  expect(test.boot_webplus2_desktop.drivers17, "tprtrp2");
  expect(test.boot_webplus2_desktop.drivers18, "iccard");
  expect(test.boot_webplus2_desktop.drivers36, "");
  expect(test.boot_webplus2_desktop.drivers37, "");
  expect(test.boot_webplus2_desktop.drivers38, "");
  expect(test.boot_webplus2_desktop.drivers39, "");
  expect(test.boot_web2350_tower.drivers01, "mkey_2800_1");
  expect(test.boot_web2350_tower.drivers02, "mkey_2800_2");
  expect(test.boot_web2350_tower.drivers03, "pmouse_2350_1");
  expect(test.boot_web2350_tower.drivers04, "pmouse_2350_2");
  expect(test.boot_web2350_tower.drivers05, "mupdate");
  expect(test.boot_web2350_tower.drivers06, "history");
  expect(test.boot_web2350_tower.drivers07, "hqftp");
  expect(test.boot_web2350_tower.drivers08, "supdate");
  expect(test.boot_web2350_tower.drivers09, "hqhist");
  expect(test.boot_web2350_tower.drivers10, "schctrl");
  expect(test.boot_web2350_tower.drivers11, "hqprod");
  expect(test.boot_web2350_tower.drivers12, "fip_2500_1");
  expect(test.boot_web2350_tower.drivers13, "fip_2500_2");
  expect(test.boot_web2350_tower.drivers14, "tprts");
  expect(test.boot_web2350_tower.drivers15, "scan_2500_1");
  expect(test.boot_web2350_tower.drivers16, "scan_2500_2");
  expect(test.boot_web2350_tower.drivers17, "msr_2500_1");
  expect(test.boot_web2350_tower.drivers18, "msr_2500_2");
  expect(test.boot_web2350_tower.drivers19, "signp");
  expect(test.boot_web2350_tower.drivers20, "detect");
  expect(test.boot_web2350_tower.drivers21, "callsw");
  expect(test.boot_web2350_tower.drivers22, "sm_scalesc_scl");
  expect(test.boot_web2350_tower.drivers23, "sm_scalesc_signp");
  expect(test.boot_web2350_tower.drivers24, "hist_csrv");
  expect(test.boot_web2350_tower.drivers36, "");
  expect(test.boot_web2350_tower.drivers37, "");
  expect(test.boot_web2350_tower.drivers38, "");
  expect(test.boot_web2350_tower.drivers39, "");
  expect(test.boot_web2350_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_web2350_desktop.drivers02, "pmouse_2350_1");
  expect(test.boot_web2350_desktop.drivers03, "scan_2500_1");
  expect(test.boot_web2350_desktop.drivers04, "fip_2500_1");
  expect(test.boot_web2350_desktop.drivers05, "msr_2500_1");
  expect(test.boot_web2350_desktop.drivers06, "mupdate");
  expect(test.boot_web2350_desktop.drivers07, "history");
  expect(test.boot_web2350_desktop.drivers08, "hqftp");
  expect(test.boot_web2350_desktop.drivers09, "supdate");
  expect(test.boot_web2350_desktop.drivers10, "hqhist");
  expect(test.boot_web2350_desktop.drivers11, "schctrl");
  expect(test.boot_web2350_desktop.drivers12, "hqprod");
  expect(test.boot_web2350_desktop.drivers13, "tprts");
  expect(test.boot_web2350_desktop.drivers14, "hist_csrv");
  expect(test.boot_web2350_desktop.drivers36, "");
  expect(test.boot_web2350_desktop.drivers37, "");
  expect(test.boot_web2350_desktop.drivers38, "");
  expect(test.boot_web2350_desktop.drivers39, "");
  expect(test.boot_web2500_tower.drivers01, "mkey_2800_1");
  expect(test.boot_web2500_tower.drivers02, "mkey_2800_2");
  expect(test.boot_web2500_tower.drivers03, "pmouse_2500_1");
  expect(test.boot_web2500_tower.drivers04, "pmouse_2500_2");
  expect(test.boot_web2500_tower.drivers05, "mupdate");
  expect(test.boot_web2500_tower.drivers06, "history");
  expect(test.boot_web2500_tower.drivers07, "hqftp");
  expect(test.boot_web2500_tower.drivers08, "supdate");
  expect(test.boot_web2500_tower.drivers09, "hqhist");
  expect(test.boot_web2500_tower.drivers10, "schctrl");
  expect(test.boot_web2500_tower.drivers11, "hqprod");
  expect(test.boot_web2500_tower.drivers12, "fip_2500_1");
  expect(test.boot_web2500_tower.drivers13, "fip_2500_2");
  expect(test.boot_web2500_tower.drivers14, "tprts");
  expect(test.boot_web2500_tower.drivers15, "scan_2500_1");
  expect(test.boot_web2500_tower.drivers16, "scan_2500_2");
  expect(test.boot_web2500_tower.drivers17, "signp");
  expect(test.boot_web2500_tower.drivers18, "detect");
  expect(test.boot_web2500_tower.drivers19, "callsw");
  expect(test.boot_web2500_tower.drivers20, "sm_scalesc_scl");
  expect(test.boot_web2500_tower.drivers21, "sm_scalesc_signp");
  expect(test.boot_web2500_tower.drivers22, "hist_csrv");
  expect(test.boot_web2500_tower.drivers23, "drw_2800_1");
  expect(test.boot_web2500_tower.drivers24, "msr_2500_1");
  expect(test.boot_web2500_tower.drivers25, "msr_2500_2");
  expect(test.boot_web2500_tower.drivers26, "usbcam");
  expect(test.boot_web2500_tower.drivers27, "iccard");
  expect(test.boot_web2500_tower.drivers28, "tprtrp");
  expect(test.boot_web2500_tower.drivers36, "");
  expect(test.boot_web2500_tower.drivers37, "");
  expect(test.boot_web2500_tower.drivers38, "");
  expect(test.boot_web2500_tower.drivers39, "");
  expect(test.boot_web2500_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_web2500_desktop.drivers02, "pmouse_2500_1");
  expect(test.boot_web2500_desktop.drivers03, "scan_2500_1");
  expect(test.boot_web2500_desktop.drivers04, "fip_2500_1");
  expect(test.boot_web2500_desktop.drivers05, "mupdate");
  expect(test.boot_web2500_desktop.drivers06, "history");
  expect(test.boot_web2500_desktop.drivers07, "hqftp");
  expect(test.boot_web2500_desktop.drivers08, "supdate");
  expect(test.boot_web2500_desktop.drivers09, "hqhist");
  expect(test.boot_web2500_desktop.drivers10, "schctrl");
  expect(test.boot_web2500_desktop.drivers11, "hqprod");
  expect(test.boot_web2500_desktop.drivers12, "tprts");
  expect(test.boot_web2500_desktop.drivers13, "hist_csrv");
  expect(test.boot_web2500_desktop.drivers14, "drw_2800_1");
  expect(test.boot_web2500_desktop.drivers15, "msr_2500_1");
  expect(test.boot_web2500_desktop.drivers16, "usbcam");
  expect(test.boot_web2500_desktop.drivers17, "iccard");
  expect(test.boot_web2500_desktop.drivers18, "tprtrp");
  expect(test.boot_web2500_desktop.drivers19, "scalerm");
  expect(test.boot_web2500_desktop.drivers20, "hitouch");
  expect(test.boot_web2500_desktop.drivers36, "");
  expect(test.boot_web2500_desktop.drivers37, "");
  expect(test.boot_web2500_desktop.drivers38, "");
  expect(test.boot_web2500_desktop.drivers39, "");
  expect(test.boot_web2800_tower.drivers01, "mkey_2800_1");
  expect(test.boot_web2800_tower.drivers02, "mkey_2800_2");
  expect(test.boot_web2800_tower.drivers03, "pmouse_2800_1");
  expect(test.boot_web2800_tower.drivers04, "pmouse_2800_2");
  expect(test.boot_web2800_tower.drivers05, "scan_2800_1");
  expect(test.boot_web2800_tower.drivers06, "scan_2800_2");
  expect(test.boot_web2800_tower.drivers07, "fip_2800_1");
  expect(test.boot_web2800_tower.drivers08, "fip_2800_2");
  expect(test.boot_web2800_tower.drivers09, "drw_2800_1");
  expect(test.boot_web2800_tower.drivers10, "tprtss");
  expect(test.boot_web2800_tower.drivers11, "mupdate");
  expect(test.boot_web2800_tower.drivers12, "history");
  expect(test.boot_web2800_tower.drivers13, "hqftp");
  expect(test.boot_web2800_tower.drivers14, "supdate");
  expect(test.boot_web2800_tower.drivers15, "hqhist");
  expect(test.boot_web2800_tower.drivers16, "schctrl");
  expect(test.boot_web2800_tower.drivers17, "hqprod");
  expect(test.boot_web2800_tower.drivers18, "hist_csrv");
  expect(test.boot_web2800_tower.drivers19, "sm_scalesc_scl");
  expect(test.boot_web2800_tower.drivers20, "sm_scalesc_signp");
  expect(test.boot_web2800_tower.drivers21, "usbcam");
  expect(test.boot_web2800_tower.drivers22, "tprtss2");
  expect(test.boot_web2800_tower.drivers23, "sqrc");
  expect(test.boot_web2800_tower.drivers24, "pmouse_2800_3");
  expect(test.boot_web2800_tower.drivers25, "tprtrp");
  expect(test.boot_web2800_tower.drivers26, "tprtrp2");
  expect(test.boot_web2800_tower.drivers27, "iccard");
  expect(test.boot_web2800_tower.drivers28, "msr_int_1");
  expect(test.boot_web2800_tower.drivers29, "powli");
  expect(test.boot_web2800_tower.drivers30, "scan_2800_4");
  expect(test.boot_web2800_tower.drivers31, "apbf_1");
  expect(test.boot_web2800_tower.drivers32, "exc");
  expect(test.boot_web2800_tower.drivers33, "ami");
  expect(test.boot_web2800_tower.drivers34, "aibox");
  expect(test.boot_web2800_tower.drivers36, "");
  expect(test.boot_web2800_tower.drivers37, "");
  expect(test.boot_web2800_tower.drivers38, "");
  expect(test.boot_web2800_tower.drivers39, "");
  expect(test.boot_web2800_desktop.drivers01, "mkey_2800_1");
  expect(test.boot_web2800_desktop.drivers02, "pmouse_2800_1");
  expect(test.boot_web2800_desktop.drivers03, "scan_2800_1");
  expect(test.boot_web2800_desktop.drivers04, "fip_2800_1");
  expect(test.boot_web2800_desktop.drivers05, "drw_2800_1");
  expect(test.boot_web2800_desktop.drivers06, "mupdate");
  expect(test.boot_web2800_desktop.drivers07, "history");
  expect(test.boot_web2800_desktop.drivers08, "hqftp");
  expect(test.boot_web2800_desktop.drivers09, "supdate");
  expect(test.boot_web2800_desktop.drivers10, "hqhist");
  expect(test.boot_web2800_desktop.drivers11, "schctrl");
  expect(test.boot_web2800_desktop.drivers12, "hqprod");
  expect(test.boot_web2800_desktop.drivers13, "tprtss");
  expect(test.boot_web2800_desktop.drivers14, "fip_2800_2");
  expect(test.boot_web2800_desktop.drivers15, "fip_2800_3");
  expect(test.boot_web2800_desktop.drivers16, "hist_csrv");
  expect(test.boot_web2800_desktop.drivers17, "sm_scalesc_scl");
  expect(test.boot_web2800_desktop.drivers18, "sm_scalesc_signp");
  expect(test.boot_web2800_desktop.drivers19, "usbcam");
  expect(test.boot_web2800_desktop.drivers20, "sqrc");
  expect(test.boot_web2800_desktop.drivers21, "pmouse_2800_3");
  expect(test.boot_web2800_desktop.drivers22, "tprtrp");
  expect(test.boot_web2800_desktop.drivers23, "tprtrp2");
  expect(test.boot_web2800_desktop.drivers24, "iccard");
  expect(test.boot_web2800_desktop.drivers25, "msr_plus2_1");
  expect(test.boot_web2800_desktop.drivers26, "scan_2800_3");
  expect(test.boot_web2800_desktop.drivers27, "powli");
  expect(test.boot_web2800_desktop.drivers28, "scan_2800_4");
  expect(test.boot_web2800_desktop.drivers29, "psensor_1");
  expect(test.boot_web2800_desktop.drivers30, "apbf_1");
  expect(test.boot_web2800_desktop.drivers31, "pmouse_2800_4");
  expect(test.boot_web2800_desktop.drivers32, "exc");
  expect(test.boot_web2800_desktop.drivers33, "ami");
  expect(test.boot_web2800_desktop.drivers34, "aibox");
  expect(test.boot_web2800_desktop.drivers36, "");
  expect(test.boot_web2800_desktop.drivers37, "");
  expect(test.boot_web2800_desktop.drivers38, "");
  expect(test.boot_web2800_desktop.drivers39, "");
  expect(test.boot_web2300_tower.drivers01, "pmouse_2300_2");
  expect(test.boot_web2300_tower.drivers02, "mkey_2300_1");
  expect(test.boot_web2300_tower.drivers03, "mkey_2300_2");
  expect(test.boot_web2300_tower.drivers04, "pmouse_2300_1");
  expect(test.boot_web2300_tower.drivers05, "mupdate");
  expect(test.boot_web2300_tower.drivers06, "history");
  expect(test.boot_web2300_tower.drivers07, "hqftp");
  expect(test.boot_web2300_tower.drivers08, "supdate");
  expect(test.boot_web2300_tower.drivers09, "hqhist");
  expect(test.boot_web2300_tower.drivers10, "schctrl");
  expect(test.boot_web2300_tower.drivers11, "hqprod");
  expect(test.boot_web2300_tower.drivers12, "fip_2300_1");
  expect(test.boot_web2300_tower.drivers13, "fip_2300_2");
  expect(test.boot_web2300_tower.drivers14, "tprts");
  expect(test.boot_web2300_tower.drivers15, "scan_2300_1");
  expect(test.boot_web2300_tower.drivers16, "scan_2300_2");
  expect(test.boot_web2300_tower.drivers17, "msr_2300_1");
  expect(test.boot_web2300_tower.drivers18, "msr_2300_2");
  expect(test.boot_web2300_tower.drivers19, "signp");
  expect(test.boot_web2300_tower.drivers20, "detect");
  expect(test.boot_web2300_tower.drivers21, "callsw");
  expect(test.boot_web2300_tower.drivers22, "sm_scalesc_scl");
  expect(test.boot_web2300_tower.drivers23, "sm_scalesc_signp");
  expect(test.boot_web2300_tower.drivers24, "hist_csrv");
  expect(test.boot_web2300_tower.drivers36, "");
  expect(test.boot_web2300_tower.drivers37, "");
  expect(test.boot_web2300_tower.drivers38, "");
  expect(test.boot_web2300_tower.drivers39, "");
  expect(test.boot_web2300_desktop.drivers01, "mkey_2300_1");
  expect(test.boot_web2300_desktop.drivers02, "pmouse_2300_1");
  expect(test.boot_web2300_desktop.drivers03, "scan_2300_1");
  expect(test.boot_web2300_desktop.drivers04, "fip_2300_1");
  expect(test.boot_web2300_desktop.drivers05, "msr_2300_1");
  expect(test.boot_web2300_desktop.drivers06, "mupdate");
  expect(test.boot_web2300_desktop.drivers07, "history");
  expect(test.boot_web2300_desktop.drivers08, "hqftp");
  expect(test.boot_web2300_desktop.drivers09, "supdate");
  expect(test.boot_web2300_desktop.drivers10, "hqhist");
  expect(test.boot_web2300_desktop.drivers11, "schctrl");
  expect(test.boot_web2300_desktop.drivers12, "hqprod");
  expect(test.boot_web2300_desktop.drivers13, "tprts");
  expect(test.boot_web2300_desktop.drivers14, "hist_csrv");
  expect(test.boot_web2300_desktop.drivers36, "");
  expect(test.boot_web2300_desktop.drivers37, "");
  expect(test.boot_web2300_desktop.drivers38, "");
  expect(test.boot_web2300_desktop.drivers39, "");
  expect(test.boot_webplus_desktop.drivers01, "mupdate");
  expect(test.boot_webplus_desktop.drivers02, "history");
  expect(test.boot_webplus_desktop.drivers03, "hqftp");
  expect(test.boot_webplus_desktop.drivers04, "supdate");
  expect(test.boot_webplus_desktop.drivers05, "hqhist");
  expect(test.boot_webplus_desktop.drivers06, "schctrl");
  expect(test.boot_webplus_desktop.drivers07, "hqprod");
  expect(test.boot_webplus_desktop.drivers08, "pmouse_plus_1");
  expect(test.boot_webplus_desktop.drivers09, "segd_plus_1");
  expect(test.boot_webplus_desktop.drivers10, "tprtf");
  expect(test.boot_webplus_desktop.drivers11, "mkey_plus_1");
  expect(test.boot_webplus_desktop.drivers12, "msr_2300_1");
  expect(test.boot_webplus_desktop.drivers13, "sm_scalesc_scl");
  expect(test.boot_webplus_desktop.drivers14, "sm_scalesc_signp");
  expect(test.boot_webplus_desktop.drivers15, "fip_plus_1");
  expect(test.boot_webplus_desktop.drivers16, "hist_csrv");
  expect(test.boot_webplus_desktop.drivers36, "");
  expect(test.boot_webplus_desktop.drivers37, "");
  expect(test.boot_webplus_desktop.drivers38, "scan_plus_1");
  expect(test.boot_webplus_desktop.drivers39, "");
  expect(test.boot_dual_tower.drivers01, "subcpu2");
  expect(test.boot_dual_tower.drivers02, "subcpu1");
  expect(test.boot_dual_tower.drivers03, "spk1");
  expect(test.boot_dual_tower.drivers04, "fip1");
  expect(test.boot_dual_tower.drivers05, "lcdbrt1");
  expect(test.boot_dual_tower.drivers06, "mkey1");
  expect(test.boot_dual_tower.drivers07, "wand1");
  expect(test.boot_dual_tower.drivers08, "msr11");
  expect(test.boot_dual_tower.drivers09, "msr12");
  expect(test.boot_dual_tower.drivers10, "tkey1d");
  expect(test.boot_dual_tower.drivers11, "spk2");
  expect(test.boot_dual_tower.drivers12, "fip2");
  expect(test.boot_dual_tower.drivers13, "lcdbrt2");
  expect(test.boot_dual_tower.drivers14, "wand2");
  expect(test.boot_dual_tower.drivers15, "tkey2");
  expect(test.boot_dual_tower.drivers16, "mkey2");
  expect(test.boot_dual_tower.drivers17, "tprt");
  expect(test.boot_dual_tower.drivers18, "pmouse2");
  expect(test.boot_dual_tower.drivers19, "pmouse1");
  expect(test.boot_dual_tower.drivers20, "mupdate");
  expect(test.boot_dual_tower.drivers21, "history");
  expect(test.boot_dual_tower.drivers22, "msr21");
  expect(test.boot_dual_tower.drivers23, "msr22");
  expect(test.boot_dual_tower.drivers24, "hqftp");
  expect(test.boot_dual_tower.drivers25, "supdate");
  expect(test.boot_dual_tower.drivers26, "hqhist");
  expect(test.boot_dual_tower.drivers27, "signp");
  expect(test.boot_dual_tower.drivers28, "detect");
  expect(test.boot_dual_tower.drivers29, "callsw");
  expect(test.boot_dual_tower.drivers30, "schctrl");
  expect(test.boot_dual_tower.drivers31, "hqprod");
  expect(test.boot_dual_tower.drivers32, "hist_csrv");
  expect(test.boot_dual_tower.drivers36, "");
  expect(test.boot_dual_tower.drivers37, "");
  expect(test.boot_dual_tower.drivers38, "");
  expect(test.boot_dual_tower.drivers39, "");
  expect(test.boot_dual_desktop.drivers01, "subcpu2");
  expect(test.boot_dual_desktop.drivers02, "subcpu1");
  expect(test.boot_dual_desktop.drivers03, "spk1");
  expect(test.boot_dual_desktop.drivers04, "spk2");
  expect(test.boot_dual_desktop.drivers05, "fip1");
  expect(test.boot_dual_desktop.drivers06, "lcdbrt1");
  expect(test.boot_dual_desktop.drivers07, "lcdbrt2");
  expect(test.boot_dual_desktop.drivers08, "mkey1");
  expect(test.boot_dual_desktop.drivers09, "wand1");
  expect(test.boot_dual_desktop.drivers10, "msr11");
  expect(test.boot_dual_desktop.drivers11, "msr12");
  expect(test.boot_dual_desktop.drivers12, "tkey1d");
  expect(test.boot_dual_desktop.drivers13, "tkey2");
  expect(test.boot_dual_desktop.drivers14, "tprt");
  expect(test.boot_dual_desktop.drivers15, "pmouse2");
  expect(test.boot_dual_desktop.drivers16, "pmouse1");
  expect(test.boot_dual_desktop.drivers17, "mupdate");
  expect(test.boot_dual_desktop.drivers18, "history");
  expect(test.boot_dual_desktop.drivers19, "hqftp");
  expect(test.boot_dual_desktop.drivers20, "supdate");
  expect(test.boot_dual_desktop.drivers21, "hqhist");
  expect(test.boot_dual_desktop.drivers22, "schctrl");
  expect(test.boot_dual_desktop.drivers23, "hqprod");
  expect(test.boot_dual_desktop.drivers24, "hist_csrv");
  expect(test.boot_dual_desktop.drivers36, "");
  expect(test.boot_dual_desktop.drivers37, "");
  expect(test.boot_dual_desktop.drivers38, "");
  expect(test.boot_dual_desktop.drivers39, "");
  expect(test.boot_jr.drivers01, "subcpu3");
  expect(test.boot_jr.drivers02, "spk3");
  expect(test.boot_jr.drivers03, "seg1");
  expect(test.boot_jr.drivers04, "lcdbrt3");
  expect(test.boot_jr.drivers05, "mkey3");
  expect(test.boot_jr.drivers06, "lcd57");
  expect(test.boot_jr.drivers07, "wand3");
  expect(test.boot_jr.drivers08, "msr31");
  expect(test.boot_jr.drivers09, "msr32");
  expect(test.boot_jr.drivers10, "tkey3d");
  expect(test.boot_jr.drivers11, "tprt");
  expect(test.boot_jr.drivers12, "pmouse3");
  expect(test.boot_jr.drivers13, "mupdate");
  expect(test.boot_jr.drivers14, "history");
  expect(test.boot_jr.drivers15, "hqftp");
  expect(test.boot_jr.drivers16, "supdate");
  expect(test.boot_jr.drivers17, "hqhist");
  expect(test.boot_jr.drivers18, "schctrl");
  expect(test.boot_jr.drivers19, "fip3");
  expect(test.boot_jr.drivers20, "hqprod");
  expect(test.boot_jr.drivers21, "vfd57_3");
  expect(test.boot_jr.drivers22, "hist_csrv");
  expect(test.boot_jr.drivers36, "");
  expect(test.boot_jr.drivers37, "");
  expect(test.boot_jr.drivers38, "");
  expect(test.boot_jr.drivers39, "");
  expect(test.boot_jr_tower.drivers01, "subcpu3");
  expect(test.boot_jr_tower.drivers02, "subcpu2");
  expect(test.boot_jr_tower.drivers03, "spk3");
  expect(test.boot_jr_tower.drivers04, "seg1");
  expect(test.boot_jr_tower.drivers05, "mkey3");
  expect(test.boot_jr_tower.drivers06, "wand3");
  expect(test.boot_jr_tower.drivers07, "msr31");
  expect(test.boot_jr_tower.drivers08, "msr32");
  expect(test.boot_jr_tower.drivers09, "spk2");
  expect(test.boot_jr_tower.drivers10, "seg2");
  expect(test.boot_jr_tower.drivers11, "lcdbrt2");
  expect(test.boot_jr_tower.drivers12, "mkey2");
  expect(test.boot_jr_tower.drivers13, "wand2");
  expect(test.boot_jr_tower.drivers14, "msr21");
  expect(test.boot_jr_tower.drivers15, "msr22");
  expect(test.boot_jr_tower.drivers16, "tkey2");
  expect(test.boot_jr_tower.drivers17, "tprt");
  expect(test.boot_jr_tower.drivers18, "pmouse2");
  expect(test.boot_jr_tower.drivers19, "mupdate");
  expect(test.boot_jr_tower.drivers20, "history");
  expect(test.boot_jr_tower.drivers21, "hqftp");
  expect(test.boot_jr_tower.drivers22, "supdate");
  expect(test.boot_jr_tower.drivers23, "hqhist");
  expect(test.boot_jr_tower.drivers24, "schctrl");
  expect(test.boot_jr_tower.drivers25, "fip2");
  expect(test.boot_jr_tower.drivers26, "fip3");
  expect(test.boot_jr_tower.drivers27, "hqprod");
  expect(test.boot_jr_tower.drivers28, "hist_csrv");
  expect(test.boot_jr_tower.drivers36, "");
  expect(test.boot_jr_tower.drivers37, "");
  expect(test.boot_jr_tower.drivers38, "");
  expect(test.boot_jr_tower.drivers39, "");
  expect(test.boot_tower.drivers01, "subcpu2");
  expect(test.boot_tower.drivers02, "subcpu1");
  expect(test.boot_tower.drivers03, "spk1");
  expect(test.boot_tower.drivers04, "fip1");
  expect(test.boot_tower.drivers05, "lcdbrt1");
  expect(test.boot_tower.drivers06, "mkey1");
  expect(test.boot_tower.drivers07, "lcd57");
  expect(test.boot_tower.drivers08, "wand1");
  expect(test.boot_tower.drivers09, "msr11");
  expect(test.boot_tower.drivers10, "msr12");
  expect(test.boot_tower.drivers11, "tkey1t");
  expect(test.boot_tower.drivers12, "spk2");
  expect(test.boot_tower.drivers13, "fip2");
  expect(test.boot_tower.drivers14, "lcdbrt2");
  expect(test.boot_tower.drivers15, "wand2");
  expect(test.boot_tower.drivers16, "tkey2");
  expect(test.boot_tower.drivers17, "mkey2");
  expect(test.boot_tower.drivers18, "tprt");
  expect(test.boot_tower.drivers19, "pmouse2");
  expect(test.boot_tower.drivers20, "mupdate");
  expect(test.boot_tower.drivers21, "history");
  expect(test.boot_tower.drivers22, "msr21");
  expect(test.boot_tower.drivers23, "msr22");
  expect(test.boot_tower.drivers24, "hqftp");
  expect(test.boot_tower.drivers25, "supdate");
  expect(test.boot_tower.drivers26, "hqhist");
  expect(test.boot_tower.drivers27, "signp");
  expect(test.boot_tower.drivers28, "detect");
  expect(test.boot_tower.drivers29, "callsw");
  expect(test.boot_tower.drivers30, "schctrl");
  expect(test.boot_tower.drivers31, "hqprod");
  expect(test.boot_tower.drivers32, "hist_csrv");
  expect(test.boot_tower.drivers36, "");
  expect(test.boot_tower.drivers37, "");
  expect(test.boot_tower.drivers38, "");
  expect(test.boot_tower.drivers39, "");
  expect(test.boot_desktop.drivers01, "subcpu2");
  expect(test.boot_desktop.drivers02, "subcpu1");
  expect(test.boot_desktop.drivers03, "spk1");
  expect(test.boot_desktop.drivers04, "fip1");
  expect(test.boot_desktop.drivers05, "lcdbrt1");
  expect(test.boot_desktop.drivers06, "mkey1");
  expect(test.boot_desktop.drivers07, "lcd57");
  expect(test.boot_desktop.drivers08, "wand1");
  expect(test.boot_desktop.drivers09, "msr11");
  expect(test.boot_desktop.drivers10, "msr12");
  expect(test.boot_desktop.drivers11, "tkey1d");
  expect(test.boot_desktop.drivers12, "tprt");
  expect(test.boot_desktop.drivers13, "pmouse1");
  expect(test.boot_desktop.drivers14, "mupdate");
  expect(test.boot_desktop.drivers15, "history");
  expect(test.boot_desktop.drivers16, "hqftp");
  expect(test.boot_desktop.drivers17, "supdate");
  expect(test.boot_desktop.drivers18, "hqhist");
  expect(test.boot_desktop.drivers19, "schctrl");
  expect(test.boot_desktop.drivers20, "hqprod");
  expect(test.boot_desktop.drivers21, "hist_csrv");
  expect(test.boot_desktop.drivers36, "");
  expect(test.boot_desktop.drivers37, "");
  expect(test.boot_desktop.drivers38, "");
  expect(test.boot_desktop.drivers39, "");
  expect(test.verup.verup, "no");
  expect(test.verup.date, "");
  expect(test.verup.time, "");
  expect(test.verup.command, "vup/xxxxx.cmd");
  expect(test.verup.param, "-Uvh --nodeps --force");
  expect(test.speaker.keyvol1, 7);
  expect(test.speaker.keytone1, 1);
  expect(test.speaker.scanvol1, 6);
  expect(test.speaker.scantone1, 6);
  expect(test.speaker.keyvol2, 7);
  expect(test.speaker.keytone2, 4);
  expect(test.speaker.scanvol2, 6);
  expect(test.speaker.scantone2, 6);
  expect(test.lcdbright.lcdbright1, 4);
  expect(test.lcdbright.lcdbright2, 2);
  expect(test.logging.maxsize, 10000);
  expect(test.logging.level, 5);
  expect(test.scanner.reschar, 0);
  expect(test.scanner.reschar_tower, 0);
  expect(test.scanner.reschar_add, 0);
  expect(test.subcpu1.entry, "tprdrv_scpu");
  expect(test.subcpu1.priority, 10);
  expect(test.subcpu1.inifile, "conf/subcpu1.json");
  expect(test.spk1.entry, "tprdrv_scpuspkd");
  expect(test.spk1.priority, 10);
  expect(test.spk1.inifile, "conf/speaker1.json");
  expect(test.wand1.entry, "tprdrv_scan");
  expect(test.wand1.priority, 10);
  expect(test.wand1.inifile, "conf/scanner1.json");
  expect(test.wand2.entry, "tprdrv_scan");
  expect(test.wand2.priority, 10);
  expect(test.wand2.inifile, "conf/scanner2.json");
  expect(test.lcdbrt1.entry, "tprdrv_scpulcdd");
  expect(test.lcdbrt1.priority, 10);
  expect(test.lcdbrt1.inifile, "conf/lcdbrt1.json");
  expect(test.lcdbrt2.entry, "tprdrv_scpulcdd");
  expect(test.lcdbrt2.priority, 10);
  expect(test.lcdbrt2.inifile, "conf/lcdbrt2.json");
  expect(test.fip1.entry, "tprdrv_scpufipd");
  expect(test.fip1.priority, 10);
  expect(test.fip1.inifile, "conf/fip1.json");
  expect(test.mkey1.entry, "tprdrv_mkey");
  expect(test.mkey1.priority, 10);
  expect(test.mkey1.inifile, "conf/mkey1.json");
  expect(test.mkey2.entry, "tprdrv_mkey");
  expect(test.mkey2.priority, 10);
  expect(test.mkey2.inifile, "conf/mkey2.json");
  expect(test.lcd57.entry, "tprdrv_lcd57");
  expect(test.lcd57.priority, 10);
  expect(test.lcd57.inifile, "conf/lcd57.json");
  expect(test.tkey1t.entry, "tprdrv_tkey");
  expect(test.tkey1t.priority, 10);
  expect(test.tkey1t.inifile, "conf/tkey1t.json");
  expect(test.tkey1d.entry, "tprdrv_tkey");
  expect(test.tkey1d.priority, 10);
  expect(test.tkey1d.inifile, "conf/tkey1d.json");
  expect(test.msr11.entry, "tprdrv_msr");
  expect(test.msr11.priority, 10);
  expect(test.msr11.inifile, "conf/msr1jis1.json");
  expect(test.msr12.entry, "tprdrv_msr");
  expect(test.msr12.priority, 10);
  expect(test.msr12.inifile, "conf/msr1jis2.json");
  expect(test.msr21.entry, "tprdrv_msr");
  expect(test.msr21.priority, 10);
  expect(test.msr21.inifile, "conf/msr2jis1.json");
  expect(test.msr22.entry, "tprdrv_msr");
  expect(test.msr22.priority, 10);
  expect(test.msr22.inifile, "conf/msr2jis2.json");
  expect(test.subcpu2.entry, "tprdrv_scpu");
  expect(test.subcpu2.priority, 10);
  expect(test.subcpu2.inifile, "conf/subcpu2.json");
  expect(test.spk2.entry, "tprdrv_scpuspkd");
  expect(test.spk2.priority, 10);
  expect(test.spk2.inifile, "conf/speaker2.json");
  expect(test.fip2.entry, "tprdrv_scpufipd");
  expect(test.fip2.priority, 10);
  expect(test.fip2.inifile, "conf/fip2.json");
  expect(test.tkey2.entry, "tprdrv_tkey");
  expect(test.tkey2.priority, 10);
  expect(test.tkey2.inifile, "conf/tkey2.json");
  expect(test.tprt.entry, "tprdrv_tprt");
  expect(test.tprt.priority, 10);
  expect(test.tprt.inifile, "conf/tprt.json");
  expect(test.pmouse1.entry, "tprdrv_pmouse");
  expect(test.pmouse1.priority, 10);
  expect(test.pmouse1.inifile, "conf/pmouse1.json");
  expect(test.pmouse2.entry, "tprdrv_pmouse");
  expect(test.pmouse2.priority, 10);
  expect(test.pmouse2.inifile, "conf/pmouse2.json");
  expect(test.sprt.entry, "tprdrv_sprt");
  expect(test.sprt.priority, 10);
  expect(test.sprt.inifile, "conf/sprt.json");
  expect(test.mupdate.entry, "mupdate");
  expect(test.mupdate.priority, 10);
  expect(test.mupdate.inifile, "conf/sprt.json");
  expect(test.history.entry, "history");
  expect(test.history.priority, 10);
  expect(test.history.inifile, "conf/sprt.json");
  expect(test.hist_csrv.entry, "hist_csrv");
  expect(test.hist_csrv.priority, 10);
  expect(test.hist_csrv.inifile, "conf/sprt.json");
  expect(test.tqrcd.entry, "tprdrv_tqrcd");
  expect(test.tqrcd.priority, 10);
  expect(test.tqrcd.inifile, "conf/tqrcd.json");
  expect(test.hqftp.entry, "hqftp");
  expect(test.hqftp.priority, 10);
  expect(test.hqftp.inifile, "conf/sprt.json");
  expect(test.supdate.entry, "supdate");
  expect(test.supdate.priority, 10);
  expect(test.supdate.inifile, "conf/sprt.json");
  expect(test.hqhist.entry, "hqhist");
  expect(test.hqhist.priority, 10);
  expect(test.hqhist.inifile, "conf/sprt.json");
  expect(test.hqprod.entry, "hqprod");
  expect(test.hqprod.priority, 10);
  expect(test.hqprod.inifile, "conf/sprt.json");
  expect(test.signp.entry, "tprdrv_signp");
  expect(test.signp.priority, 10);
  expect(test.signp.inifile, "conf/signp.json");
  expect(test.detect.entry, "tprdrv_detect");
  expect(test.detect.priority, 10);
  expect(test.detect.inifile, "conf/detect.json");
  expect(test.callsw.entry, "tprdrv_callsw");
  expect(test.callsw.priority, 10);
  expect(test.callsw.inifile, "conf/callsw.json");
  expect(test.subcpu3.entry, "tprdrv_scpu");
  expect(test.subcpu3.priority, 10);
  expect(test.subcpu3.inifile, "conf/subcpu3.json");
  expect(test.spk3.entry, "tprdrv_scpuspkd");
  expect(test.spk3.priority, 10);
  expect(test.spk3.inifile, "conf/speaker3.json");
  expect(test.tkey3d.entry, "tprdrv_tkey");
  expect(test.tkey3d.priority, 10);
  expect(test.tkey3d.inifile, "conf/tkey3d.json");
  expect(test.seg1.entry, "tprdrv_segment");
  expect(test.seg1.priority, 10);
  expect(test.seg1.inifile, "conf/seg1.json");
  expect(test.seg2.entry, "tprdrv_segment");
  expect(test.seg2.priority, 10);
  expect(test.seg2.inifile, "conf/seg2.json");
  expect(test.wand3.entry, "tprdrv_scan");
  expect(test.wand3.priority, 10);
  expect(test.wand3.inifile, "conf/scanner3.json");
  expect(test.lcdbrt3.entry, "tprdrv_scpulcdd");
  expect(test.lcdbrt3.priority, 10);
  expect(test.lcdbrt3.inifile, "conf/lcdbrt3.json");
  expect(test.mkey3.entry, "tprdrv_mkey");
  expect(test.mkey3.priority, 10);
  expect(test.mkey3.inifile, "conf/mkey3.json");
  expect(test.msr31.entry, "tprdrv_msr");
  expect(test.msr31.priority, 10);
  expect(test.msr31.inifile, "conf/msr3jis1.json");
  expect(test.msr32.entry, "tprdrv_msr");
  expect(test.msr32.priority, 10);
  expect(test.msr32.inifile, "conf/msr3jis2.json");
  expect(test.pmouse3.entry, "tprdrv_pmouse");
  expect(test.pmouse3.priority, 10);
  expect(test.pmouse3.inifile, "conf/pmouse3.json");
  expect(test.schctrl.entry, "schctrl");
  expect(test.schctrl.priority, 10);
  expect(test.schctrl.inifile, "conf/sprt.json");
  expect(test.fip3.entry, "tprdrv_scpufipd");
  expect(test.fip3.priority, 10);
  expect(test.fip3.inifile, "conf/fip3.json");
  expect(test.vfd57_3.entry, "tprdrv_scpu57vfd");
  expect(test.vfd57_3.priority, 10);
  expect(test.vfd57_3.inifile, "conf/vfd57_3.json");
  expect(test.tprtf.entry, "tprdrv_tprtf");
  expect(test.tprtf.priority, 10);
  expect(test.tprtf.inifile, "conf/tprtf.json");
  expect(test.tprts.entry, "tprdrv_tprts");
  expect(test.tprts.priority, 10);
  expect(test.tprts.inifile, "conf/tprts.json");
  expect(test.pmouse_plus_1.entry, "tprdrv_pmouse_plus");
  expect(test.pmouse_plus_1.priority, 10);
  expect(test.pmouse_plus_1.inifile, "conf/pmouse_plus_1.json");
  expect(test.pmouse_plus_1.tower, 0);
  expect(test.pmouse_2300_1.entry, "tprdrv_pmouse_plus");
  expect(test.pmouse_2300_1.priority, 10);
  expect(test.pmouse_2300_1.inifile, "conf/pmouse_2300_1.json");
  expect(test.pmouse_2300_1.tower, 0);
  expect(test.pmouse_2300_2.entry, "tprdrv_pmouse_plus");
  expect(test.pmouse_2300_2.priority, 10);
  expect(test.pmouse_2300_2.inifile, "conf/pmouse_2300_2.json");
  expect(test.pmouse_2300_2.tower, 1);
  expect(test.fip_plus_1.entry, "tprdrv_fip_plus");
  expect(test.fip_plus_1.priority, 10);
  expect(test.fip_plus_1.inifile, "conf/fip_plus_1.json");
  expect(test.fip_plus_1.tower, 0);
  expect(test.fip_2300_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2300_1.priority, 10);
  expect(test.fip_2300_1.inifile, "conf/fip_2300_1.json");
  expect(test.fip_2300_1.tower, 0);
  expect(test.fip_2300_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2300_2.priority, 10);
  expect(test.fip_2300_2.inifile, "conf/fip_2300_2.json");
  expect(test.fip_2300_2.tower, 1);
  expect(test.segd_plus_1.entry, "tprdrv_segd_plus");
  expect(test.segd_plus_1.priority, 10);
  expect(test.segd_plus_1.inifile, "conf/segd_plus_1.json");
  expect(test.segd_2300_1.entry, "tprdrv_segd_plus");
  expect(test.segd_2300_1.priority, 10);
  expect(test.segd_2300_1.inifile, "conf/segd_2300_1.json");
  expect(test.segd_2300_2.entry, "tprdrv_segd_plus");
  expect(test.segd_2300_2.priority, 10);
  expect(test.segd_2300_2.inifile, "conf/segd_2300_2.json");
  expect(test.vfd57_plus_1.entry, "tprdrv_vfd57_plus");
  expect(test.vfd57_plus_1.priority, 10);
  expect(test.vfd57_plus_1.inifile, "conf/vfd57_plus_1.json");
  expect(test.vfd57_2300_1.entry, "tprdrv_vfd57_plus");
  expect(test.vfd57_2300_1.priority, 10);
  expect(test.vfd57_2300_1.inifile, "conf/vfd57_2300_1.json");
  expect(test.vfd57_2300_2.entry, "tprdrv_vfd57_plus");
  expect(test.vfd57_2300_2.priority, 10);
  expect(test.vfd57_2300_2.inifile, "conf/vfd57_2300_2.json");
  expect(test.mkey_plus_1.entry, "tprdrv_mkey_plus");
  expect(test.mkey_plus_1.priority, 10);
  expect(test.mkey_plus_1.inifile, "conf/mkey_plus_1.json");
  expect(test.mkey_plus_1.tower, 0);
  expect(test.mkey_2300_1.entry, "tprdrv_mkey_plus");
  expect(test.mkey_2300_1.priority, 10);
  expect(test.mkey_2300_1.inifile, "conf/mkey_2300_1.json");
  expect(test.mkey_2300_1.tower, 0);
  expect(test.mkey_2300_2.entry, "tprdrv_mkey_plus");
  expect(test.mkey_2300_2.priority, 10);
  expect(test.mkey_2300_2.inifile, "conf/mkey_2300_2.json");
  expect(test.mkey_2300_2.tower, 1);
  expect(test.scan_plus_1.entry, "tprdrv_scan_plus");
  expect(test.scan_plus_1.priority, 10);
  expect(test.scan_plus_1.inifile, "conf/scan_plus_1.json");
  expect(test.scan_plus_1.tower, 0);
  expect(test.scan_plus_2.entry, "tprdrv_scan_plus");
  expect(test.scan_plus_2.priority, 10);
  expect(test.scan_plus_2.inifile, "conf/scan_plus_2.json");
  expect(test.scan_plus_2.tower, 0);
  expect(test.scan_2300_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2300_1.priority, 10);
  expect(test.scan_2300_1.inifile, "conf/scan_2300_1.json");
  expect(test.scan_2300_1.tower, 0);
  expect(test.scan_2300_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2300_2.priority, 10);
  expect(test.scan_2300_2.inifile, "conf/scan_2300_2.json");
  expect(test.scan_2300_2.tower, 1);
  expect(test.msr_2300_1.entry, "tprdrv_msr_2300");
  expect(test.msr_2300_1.priority, 10);
  expect(test.msr_2300_1.inifile, "conf/msr_2300_1.json");
  expect(test.msr_2300_1.tower, 0);
  expect(test.msr_2300_2.entry, "tprdrv_msr_2300");
  expect(test.msr_2300_2.priority, 10);
  expect(test.msr_2300_2.inifile, "conf/msr_2300_2.json");
  expect(test.msr_2300_2.tower, 1);
  expect(test.mkey_2800_1.entry, "tprdrv_mkey_2800");
  expect(test.mkey_2800_1.priority, 10);
  expect(test.mkey_2800_1.inifile, "conf/mkey_2800_1.json");
  expect(test.mkey_2800_1.tower, 0);
  expect(test.mkey_2800_2.entry, "tprdrv_mkey_2800");
  expect(test.mkey_2800_2.priority, 10);
  expect(test.mkey_2800_2.inifile, "conf/mkey_2800_2.json");
  expect(test.mkey_2800_2.tower, 1);
  expect(test.pmouse_2800_1.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_1.priority, 10);
  expect(test.pmouse_2800_1.inifile, "conf/pmouse_2800_1.json");
  expect(test.pmouse_2800_1.inifile2, "conf/pmouse_2800_5.json");
  expect(test.pmouse_2800_1.tower, 0);
  expect(test.pmouse_2800_2.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_2.priority, 10);
  expect(test.pmouse_2800_2.inifile, "conf/pmouse_2800_2.json");
  expect(test.pmouse_2800_2.tower, 1);
  expect(test.pmouse_2800_3.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_3.priority, 10);
  expect(test.pmouse_2800_3.inifile, "conf/pmouse_2800_3.json");
  expect(test.pmouse_2800_3.inifile2, "conf/pmouse_2800_4.json");
  expect(test.pmouse_2800_3.inifile3, "conf/pmouse_2800_5.json");
  expect(test.pmouse_2800_3.tower, 2);
  expect(test.scan_2800_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_1.priority, 10);
  expect(test.scan_2800_1.inifile, "conf/scan_2800_1.json");
  expect(test.scan_2800_1.tower, 0);
  expect(test.scan_2800_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_2.priority, 10);
  expect(test.scan_2800_2.inifile, "conf/scan_2800_2.json");
  expect(test.scan_2800_2.tower, 1);
  expect(test.fip_2800_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2800_1.priority, 10);
  expect(test.fip_2800_1.inifile, "conf/fip_2800_1.json");
  expect(test.fip_2800_1.tower, 0);
  expect(test.fip_2800_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2800_2.priority, 10);
  expect(test.fip_2800_2.inifile, "conf/fip_2800_2.json");
  expect(test.fip_2800_2.tower, 1);
  expect(test.fip_2800_3.entry, "tprdrv_fip_plus");
  expect(test.fip_2800_3.priority, 10);
  expect(test.fip_2800_3.inifile, "conf/fip_2800_3.json");
  expect(test.fip_2800_3.tower, 1);
  expect(test.drw_2800_1.entry, "tprdrv_drw_2800");
  expect(test.drw_2800_1.priority, 10);
  expect(test.drw_2800_1.inifile, "conf/drw_2800_1.json");
  expect(test.drw_2800_1.tower, 0);
  expect(test.drw_2800_2.entry, "tprdrv_drw_2800");
  expect(test.drw_2800_2.priority, 10);
  expect(test.drw_2800_2.inifile, "conf/drw_2800_2.json");
  expect(test.drw_2800_2.tower, 1);
  expect(test.tprtss.entry, "tprdrv_tprtss");
  expect(test.tprtss.priority, 10);
  expect(test.tprtss.inifile, "conf/tprtss.json");
  expect(test.tprtss2.entry, "tprdrv_tprtss");
  expect(test.tprtss2.priority, 10);
  expect(test.tprtss2.inifile, "conf/tprtss.json");
  expect(test.pmouse_2500_1.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2500_1.priority, 10);
  expect(test.pmouse_2500_1.inifile, "conf/pmouse_2500_1.json");
  expect(test.pmouse_2500_1.inifile2, "conf/pmouse_5900_1.json");
  expect(test.pmouse_2500_1.tower, 0);
  expect(test.pmouse_2500_2.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2500_2.priority, 10);
  expect(test.pmouse_2500_2.inifile, "conf/pmouse_2500_2.json");
  expect(test.pmouse_2500_2.tower, 1);
  expect(test.fip_2500_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2500_1.priority, 10);
  expect(test.fip_2500_1.inifile, "conf/fip_2500_1.json");
  expect(test.fip_2500_1.tower, 0);
  expect(test.fip_2500_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2500_2.priority, 10);
  expect(test.fip_2500_2.inifile, "conf/fip_2500_2.json");
  expect(test.fip_2500_2.tower, 1);
  expect(test.scan_2500_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2500_1.priority, 10);
  expect(test.scan_2500_1.inifile, "conf/scan_2500_1.json");
  expect(test.scan_2500_1.tower, 0);
  expect(test.scan_2500_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2500_2.priority, 10);
  expect(test.scan_2500_2.inifile, "conf/scan_2500_2.json");
  expect(test.scan_2500_2.tower, 1);
  expect(test.msr_2500_1.entry, "tprdrv_msr_2300");
  expect(test.msr_2500_1.priority, 10);
  expect(test.msr_2500_1.inifile, "conf/msr_2500_1.json");
  expect(test.msr_2500_1.tower, 0);
  expect(test.msr_2500_2.entry, "tprdrv_msr_2300");
  expect(test.msr_2500_2.priority, 10);
  expect(test.msr_2500_2.inifile, "conf/msr_2500_2.json");
  expect(test.msr_2500_2.tower, 1);
  expect(test.pmouse_2350_1.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2350_1.priority, 10);
  expect(test.pmouse_2350_1.inifile, "conf/pmouse_2350_1.json");
  expect(test.pmouse_2350_1.tower, 0);
  expect(test.pmouse_2350_2.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2350_2.priority, 10);
  expect(test.pmouse_2350_2.inifile, "conf/pmouse_2350_2.json");
  expect(test.pmouse_2350_2.tower, 1);
  expect(test.scan_2800ip_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800ip_1.priority, 10);
  expect(test.scan_2800ip_1.inifile, "conf/scan_2800ip_1.json");
  expect(test.scan_2800ip_1.tower, 0);
  expect(test.scan_2800ip_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2800ip_2.priority, 10);
  expect(test.scan_2800ip_2.inifile, "conf/scan_2800ip_2.json");
  expect(test.scan_2800ip_2.tower, 1);
  expect(test.tprtim.entry, "tprdrv_tprtim");
  expect(test.tprtim.priority, 10);
  expect(test.tprtim.inifile, "conf/tprtim.json");
  expect(test.fip_2800im_1.entry, "tprdrv_fip_plus");
  expect(test.fip_2800im_1.priority, 10);
  expect(test.fip_2800im_1.inifile, "conf/fip_2800im_1.json");
  expect(test.fip_2800im_1.tower, 0);
  expect(test.fip_2800im_2.entry, "tprdrv_fip_plus");
  expect(test.fip_2800im_2.priority, 10);
  expect(test.fip_2800im_2.inifile, "conf/fip_2800im_2.json");
  expect(test.fip_2800im_2.tower, 1);
  expect(test.fip_2800im_3.entry, "tprdrv_fip_plus");
  expect(test.fip_2800im_3.priority, 10);
  expect(test.fip_2800im_3.inifile, "conf/fip_2800im_3.json");
  expect(test.fip_2800im_3.tower, 1);
  expect(test.scan_2800im_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800im_1.priority, 10);
  expect(test.scan_2800im_1.inifile, "conf/scan_2800im_1.json");
  expect(test.scan_2800im_1.tower, 0);
  expect(test.scan_2800im_2.entry, "tprdrv_scan_plus");
  expect(test.scan_2800im_2.priority, 10);
  expect(test.scan_2800im_2.inifile, "conf/scan_2800im_2.json");
  expect(test.scan_2800im_2.tower, 1);
  expect(test.pmouse_plus2_1.entry, "tprdrv_pmouse_plus2");
  expect(test.pmouse_plus2_1.priority, 10);
  expect(test.pmouse_plus2_1.inifile, "conf/pmouse_plus2_1.json");
  expect(test.pmouse_plus2_1.tower, 0);
  expect(test.fip_plus2_1.entry, "tprdrv_fip_plus");
  expect(test.fip_plus2_1.priority, 10);
  expect(test.fip_plus2_1.inifile, "conf/fip_plus2_1.json");
  expect(test.fip_plus2_1.tower, 0);
  expect(test.fip_plus2_2.entry, "tprdrv_fip_plus");
  expect(test.fip_plus2_2.priority, 10);
  expect(test.fip_plus2_2.inifile, "conf/fip_2800im_2.json");
  expect(test.fip_plus2_2.tower, 1);
  expect(test.fip_plus2_3.entry, "tprdrv_fip_plus");
  expect(test.fip_plus2_3.priority, 10);
  expect(test.fip_plus2_3.inifile, "conf/fip_2800im_3.json");
  expect(test.fip_plus2_3.tower, 1);
  expect(test.msr_plus2_1.entry, "tprdrv_msr_2300");
  expect(test.msr_plus2_1.priority, 10);
  expect(test.msr_plus2_1.inifile, "conf/msr_2500_1.json");
  expect(test.msr_plus2_1.tower, 0);
  expect(test.scan_2800a3_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800a3_1.priority, 10);
  expect(test.scan_2800a3_1.inifile, "conf/scan_2800a3_1.json");
  expect(test.scan_2800a3_1.tower, 0);
  expect(test.scan_2800i3_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800i3_1.priority, 10);
  expect(test.scan_2800i3_1.inifile, "conf/scan_2800i3_1.json");
  expect(test.scan_2800i3_1.tower, 0);
  expect(test.msr_int_1.entry, "tprdrv_msr_int");
  expect(test.msr_int_1.priority, 10);
  expect(test.msr_int_1.inifile, "conf/msr_int_1.json");
  expect(test.msr_int_1.tower, 0);
  expect(test.scan_2800g3_1.entry, "tprdrv_scan_plus");
  expect(test.scan_2800g3_1.priority, 10);
  expect(test.scan_2800g3_1.inifile, "conf/scan_2800g3_1.json");
  expect(test.scan_2800g3_1.tower, 0);
  expect(test.pmouse_2800_4.entry, "tprdrv_pmouse_2800");
  expect(test.pmouse_2800_4.priority, 10);
  expect(test.pmouse_2800_4.inifile, "conf/pmouse_2800_6.json");
  expect(test.pmouse_2800_4.inifile2, "conf/pmouse_2800_7.json");
  expect(test.pmouse_2800_4.tower, 3);
  expect(test.tprthp.entry, "tprdrv_tprthp");
  expect(test.tprthp.priority, 10);
  expect(test.tprthp.inifile, "conf/tprthp.json");
  expect(test.sprocket.entry, "");
  expect(test.sprocket.priority, 10);
  expect(test.sprocket.inifile, "conf/sprocket_prn.json");
  expect(test.acr.entry, "tprdrv_changer");
  expect(test.acr.priority, 10);
  expect(test.acr.inifile, "conf/acr.json");
  expect(test.acb.entry, "tprdrv_changer");
  expect(test.acb.priority, 10);
  expect(test.acb.inifile, "conf/acb.json");
  expect(test.acb20.entry, "tprdrv_changer");
  expect(test.acb20.priority, 10);
  expect(test.acb20.inifile, "conf/acb20.json");
  expect(test.rewrite.entry, "tprdrv_tqrcd");
  expect(test.rewrite.priority, 10);
  expect(test.rewrite.inifile, "conf/rewrite_card.json");
  expect(test.vismac.entry, "tprdrv_vismac");
  expect(test.vismac.priority, 10);
  expect(test.vismac.inifile, "conf/vismac.json");
  expect(test.gcat.entry, "tprdrv_gcat");
  expect(test.gcat.priority, 10);
  expect(test.gcat.inifile, "conf/pana_gcat.json");
  expect(test.debit.entry, "tprdrv_debit");
  expect(test.debit.priority, 10);
  expect(test.debit.inifile, "conf/j_debit.json");
  expect(test.scale.entry, "tprdrv_scale");
  expect(test.scale.priority, 10);
  expect(test.scale.inifile, "conf/scale.json");
  expect(test.orc.entry, "tprdrv_orc");
  expect(test.orc.priority, 10);
  expect(test.orc.inifile, "conf/orc.json");
  expect(test.sg_scale1.entry, "tprdrv_sgscl");
  expect(test.sg_scale1.priority, 10);
  expect(test.sg_scale1.inifile, "conf/sg_scale1.json");
  expect(test.sg_scale2.entry, "tprdrv_sgscl");
  expect(test.sg_scale2.priority, 10);
  expect(test.sg_scale2.inifile, "conf/sg_scale2.json");
  expect(test.sm_scale1.entry, "tprdrv_smscl");
  expect(test.sm_scale1.priority, 10);
  expect(test.sm_scale1.inifile, "conf/sm_scale1.json");
  expect(test.sm_scale2.entry, "tprdrv_smscl");
  expect(test.sm_scale2.priority, 10);
  expect(test.sm_scale2.inifile, "conf/sm_scale2.json");
  expect(test.sip60.entry, "tprdrv_sip60");
  expect(test.sip60.priority, 10);
  expect(test.sip60.inifile, "conf/sip60.json");
  expect(test.psp60.entry, "tprdrv_psp60");
  expect(test.psp60.priority, 10);
  expect(test.psp60.inifile, "conf/psp60.json");
  expect(test.stpr.entry, "tprdrv_stpr");
  expect(test.stpr.priority, 10);
  expect(test.stpr.inifile, "conf/stpr.json");
  expect(test.pana.entry, "tprdrv_pana");
  expect(test.pana.priority, 10);
  expect(test.pana.inifile, "conf/pana.json");
  expect(test.gp.entry, "tprdrv_gp");
  expect(test.gp.priority, 10);
  expect(test.gp.inifile, "conf/gp.json");
  expect(test.sm_scalesc.entry, "tprdrv_smsclsc");
  expect(test.sm_scalesc.priority, 10);
  expect(test.sm_scalesc.inifile, "conf/sm_scalesc.json");
  expect(test.sm_scalesc_scl.entry, "tprdrv_smsclsc");
  expect(test.sm_scalesc_scl.priority, 10);
  expect(test.sm_scalesc_scl.inifile, "conf/sm_scalesc_scl.json");
  expect(test.sm_scalesc_signp.entry, "tprdrv_smsclsc");
  expect(test.sm_scalesc_signp.priority, 10);
  expect(test.sm_scalesc_signp.inifile, "conf/sm_scalesc_signp.json");
  expect(test.s2pr.entry, "tprdrv_stpr");
  expect(test.s2pr.priority, 10);
  expect(test.s2pr.inifile, "conf/s2pr.json");
  expect(test.acb50.entry, "tprdrv_changer");
  expect(test.acb50.priority, 10);
  expect(test.acb50.inifile, "conf/acb50.json");
  expect(test.pwrctrl.entry, "tprdrv_pwrctrl");
  expect(test.pwrctrl.priority, 10);
  expect(test.pwrctrl.inifile, "conf/pwrctrl.json");
  expect(test.pw410.entry, "tprdrv_pw410");
  expect(test.pw410.priority, 10);
  expect(test.pw410.inifile, "conf/pw410.json");
  expect(test.ccr.entry, "tprdrv_ccr");
  expect(test.ccr.priority, 10);
  expect(test.ccr.inifile, "conf/ccr.json");
  expect(test.psp70.entry, "tprdrv_psp60");
  expect(test.psp70.priority, 10);
  expect(test.psp70.inifile, "conf/psp70.json");
  expect(test.dish.entry, "tprdrv_dish");
  expect(test.dish.priority, 10);
  expect(test.dish.inifile, "conf/dish.json");
  expect(test.aiv.entry, "tprdrv_aiv");
  expect(test.aiv.priority, 10);
  expect(test.aiv.inifile, "conf/aiv.json");
  expect(test.ar_stts_01.entry, "tprdrv_arstts");
  expect(test.ar_stts_01.priority, 10);
  expect(test.ar_stts_01.inifile, "conf/ar_stts_01.json");
  expect(test.gcat_cnct.entry, "tprdrv_gcat");
  expect(test.gcat_cnct.priority, 10);
  expect(test.gcat_cnct.inifile, "conf/gcat_cnct.json");
  expect(test.yomoca.entry, "tprdrv_yomoca");
  expect(test.yomoca.priority, 10);
  expect(test.yomoca.inifile, "conf/yomoca.json");
  expect(test.smtplus.entry, "tprdrv_smtplus");
  expect(test.smtplus.priority, 10);
  expect(test.smtplus.inifile, "conf/smtplus.json");
  expect(test.suica.entry, "tprdrv_suica");
  expect(test.suica.priority, 10);
  expect(test.suica.inifile, "conf/suica_cnct.json");
  expect(test.rfid.entry, "tprdrv_rfid");
  expect(test.rfid.priority, 10);
  expect(test.rfid.inifile, "conf/rfid.json");
  expect(test.disht.entry, "tprdrv_disht");
  expect(test.disht.priority, 10);
  expect(test.disht.inifile, "conf/disht.json");
  expect(test.mcp200.entry, "tprdrv_mcp200");
  expect(test.mcp200.priority, 10);
  expect(test.mcp200.inifile, "conf/mcp200.json");
  expect(test.fcl.entry, "tprdrv_fcl");
  expect(test.fcl.priority, 10);
  expect(test.fcl.inifile, "conf/fcl.json");
  expect(test.jrw_multi.entry, "");
  expect(test.jrw_multi.priority, 10);
  expect(test.jrw_multi.inifile, "conf/jrw_multi.json");
  expect(test.ht2980.entry, "tprdrv_smtplus");
  expect(test.ht2980.priority, 10);
  expect(test.ht2980.inifile, "conf/ht2980.json");
  expect(test.absv31.entry, "tprdrv_absv31");
  expect(test.absv31.priority, 10);
  expect(test.absv31.inifile, "conf/absv31.json");
  expect(test.yamato.entry, "tprdrv_yamato");
  expect(test.yamato.priority, 10);
  expect(test.yamato.inifile, "conf/yamato.json");
  expect(test.cct.entry, "tprdrv_cct");
  expect(test.cct.priority, 10);
  expect(test.cct.inifile, "conf/cct.json");
  expect(test.castles.entry, "tprdrv_cct");
  expect(test.castles.priority, 10);
  expect(test.castles.inifile, "conf/cct.json");
  expect(test.usbcam.entry, "tprdrv_usbcam");
  expect(test.usbcam.priority, 10);
  expect(test.usbcam.inifile, "conf/usbcam.json");
  expect(test.masr.entry, "tprdrv_masr");
  expect(test.masr.priority, 10);
  expect(test.masr.inifile, "conf/masr.json");
  expect(test.jmups.entry, "tprdrv_jmups");
  expect(test.jmups.priority, 10);
  expect(test.jmups.inifile, "conf/jmups.json");
  expect(test.fal2.entry, "tprdrv_changer_fal2");
  expect(test.fal2.priority, 10);
  expect(test.fal2.inifile, "conf/fal2.json");
  expect(test.sqrc.entry, "tprdrv_sqrc");
  expect(test.sqrc.priority, 10);
  expect(test.sqrc.inifile, "conf/sqrc_spec.json");
  expect(test.tprtrp.entry, "tprdrv_tprtrp");
  expect(test.tprtrp.priority, 10);
  expect(test.tprtrp.inifile, "conf/tprtrp.json");
  expect(test.tprtrp2.entry, "tprdrv_tprtrp");
  expect(test.tprtrp2.priority, 10);
  expect(test.tprtrp2.inifile, "conf/tprtrp.json");
  expect(test.iccard.entry, "tprdrv_iccard");
  expect(test.iccard.priority, 10);
  expect(test.iccard.inifile, "conf/iccard.json");
  expect(test.mst.entry, "tprdrv_mst");
  expect(test.mst.priority, 10);
  expect(test.mst.inifile, "conf/mst.json");
  expect(test.scan_2800_3.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_3.priority, 10);
  expect(test.scan_2800_3.inifile, "conf/scan_2800_3.json");
  expect(test.scan_2800_3.tower, 2);
  expect(test.vega3000.entry, "");
  expect(test.vega3000.priority, 10);
  expect(test.vega3000.inifile, "conf/vega3000.json");
  expect(test.powli.entry, "tprdrv_powli");
  expect(test.powli.priority, 10);
  expect(test.powli.inifile, "conf/powli.json");
  expect(test.scan_2800_4.entry, "tprdrv_scan_plus");
  expect(test.scan_2800_4.priority, 10);
  expect(test.scan_2800_4.inifile, "conf/scan_2800_4.json");
  expect(test.scan_2800_4.tower, 3);
  expect(test.psensor_1.entry, "tprdrv_psensor");
  expect(test.psensor_1.priority, 10);
  expect(test.psensor_1.inifile, "conf/psensor_1.json");
  expect(test.apbf_1.entry, "tprdrv_apbf");
  expect(test.apbf_1.priority, 10);
  expect(test.apbf_1.inifile, "conf/apbf_1.json");
  expect(test.scalerm.entry, "tprdrv_scalerm");
  expect(test.scalerm.priority, 10);
  expect(test.scalerm.inifile, "conf/scalerm.json");
  expect(test.exc.entry, "tprdrv_exc");
  expect(test.exc.priority, 10);
  expect(test.exc.inifile, "");
  expect(test.pct.entry, "");
  expect(test.pct.priority, 10);
  expect(test.pct.inifile, "conf/pct.json");
  expect(test.hitouch.entry, "tprdrv_hitouch");
  expect(test.hitouch.priority, 10);
  expect(test.hitouch.inifile, "conf/hitouch.json");
  expect(test.ami.entry, "tprdrv_ami");
  expect(test.ami.priority, 10);
  expect(test.ami.inifile, "");
  expect(test.scale_sks.entry, "tprdrv_scale_sks");
  expect(test.scale_sks.priority, 10);
  expect(test.scale_sks.inifile, "conf/scale_sks.json");
  expect(test.aibox.entry, "tprdrv_aibox");
  expect(test.aibox.priority, 10);
  expect(test.aibox.inifile, "");
}

