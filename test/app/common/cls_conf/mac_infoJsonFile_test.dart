/*
 * (C)2023 TERAOKA SEIKO Co., Ltd./株式会社寺岡精工
 * CONFIDENTIAL/社外秘
 * 無断開示・無断複製禁止
 */
 
import 'package:flutter_pos/app/common/environment.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/cupertino.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path_provider_platform_interface/path_provider_platform_interface.dart';
import 'package:path/path.dart';
import 'dart:io';
import 'unitTestParts.dart';

import '../../../../lib/app/common/cls_conf/configJsonFile.dart';
import '../../../../lib/app/common/cls_conf/mac_infoJsonFile.dart';

late Mac_infoJsonFile mac_info;

void main(){
  mac_infoJsonFile_test();
}

void mac_infoJsonFile_test()
{
  TestWidgetsFlutterBinding.ensureInitialized();
  const String confPath = "conf/";
  const String testDir = "test_assets";
  const String fileName = "mac_info.json";
  const String section = "system";
  const String key = "macno";
  const defaultData = 3;
  const testData1  =  987654321;    // テストデータ1
  const testData1s = "987654321";
  const testData2  =  192834675;    // テストデータ2
  const testData2s = "192834675";
  const testData3  =  129834765;    // テストデータ3
  const testData3s = "129834765";

  group('Mac_infoJsonFile',()
  {
    setUp(() async{
      PathProviderPlatform.instance = MockPathProviderPlatform();
      // 当該JSONファイルをデフォルトに戻す。
      await Mac_infoJsonFile().setDefault();
    });

    // 各テストの事後処理
    tearDown(() async{
      // 当該JSONファイルをデフォルトに戻す。
      await Mac_infoJsonFile().setDefault();
    });

    // ********************************************************
    // テスト00001 : load
    // 前提：アプリ用フォルダに対象JSONファイルが存在しないこと。
    // 試験手順：loadを実行する。
    // 期待結果：①assets/confにある対象JSONファイルがアプリ用フォルダに作成されること。
    // 　　　　　②対象JSONファイルの各プロパティ値を読み込んでいること。
    // ********************************************************
    test('00001_load_01', () async {
      print("\n********** テスト実行：00001_load_01 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // 前提状態構築
      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == true) {
        fileBefore.deleteSync();
      }
      // ⓪：事前状態確認（対象JSONファイルが存在しないこと。）
      expect(fileBefore.exists() == false, false);

      await mac_info.load();

      final File fileAfter = File(jsonPath);
      // ①-1：load実行により対象JSONファイルが作成されていること。
      expect(fileAfter.existsSync(), true);

      // ②：対象JSONファイルの各プロパティ値を読み込んでいること。
      allPropatyCheck(mac_info,true);

      print("********** テスト終了：00001_load_01 **********\n\n");
    });

    // ********************************************************
    // テスト00002 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：loadを実行する。
    // 期待結果：アプリ用フォルダの対象JSONファイルの各プロパティ値を読み込んでいること。
    // ********************************************************
    test("00002_load_02", () async {
      print("\n********** テスト実行：00002_load_02 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == false) {
        mac_info.setDefault();
        debugPrint("setDefault実行");
      }
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      await mac_info.load();

      // 対象JSONファイルの各プロパティ値を読み込んでいること。
      // 00001実行後で、デフォルト値前提
      allPropatyCheck(mac_info,true);

      print("********** テスト終了：00002_load_02 **********\n\n");
    });

    // ********************************************************
    // テスト00003 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②任意のプロパティの値を変更する。
    // 　　　　　③loadを実行する。
    // 期待結果：当該プロパティ値の変更が取り消されること。
    // ********************************************************
    test('00003_load_03', () async {
      print("\n********** テスト実行：00003_load_03 **********");
      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①：loadを実行する。
      await mac_info.load();

      // ②任意のプロパティの値を変更する。
      final prefixData = mac_info.system.macno;
      mac_info.system.macno = testData1;
      expect(mac_info.system.macno == testData1, true);

      // ③loadを実行する。
      //   当該プロパティ値の変更が取り消されること。
      await mac_info.load();
      expect(mac_info.system.macno != testData1, true);
      expect(mac_info.system.macno == prefixData, true);

      print("********** テスト終了：00003_load_03 **********\n\n");
    });

    // ********************************************************
    // テスト00004 : load
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②任意のプロパティの値を変更する。
    // 　　　　　③loadを実行する。
    // 期待結果：当該プロパティ値の変更が取り消されること。
    // ********************************************************
    test('00004_load_04', () async {
      print("\n********** テスト実行：00004_load_04 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②任意のプロパティの値を変更する。
      final prefixData = mac_info.system.macno;
      mac_info.system.macno = testData1;
      expect(mac_info.system.macno, testData1);

      // ③saveを実行する。
      await mac_info.save();

      // ④loadを実行する。
      await mac_info.load();

      expect(mac_info.system.macno != prefixData, true);
      expect(mac_info.system.macno == testData1, true);
      allPropatyCheck(mac_info,false);

      print("********** テスト終了：00004_load_04 **********\n\n");
    });

    // ********************************************************
    // テスト00005 : save
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    // 　　　　　②saveを実行する。
    // 期待結果：アプリ用フォルダにある対象JSONファイルの内容に変化がないこと。
    // ********************************************************
    test('00005_save_01', () async {
      print("\n********** テスト実行：00005_save_01 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      // ① loadを実行する。
      await mac_info.load();

      // save実行前のJSONファイルを保存する。
      final String jsonBefor = await fileBefore.readAsString();

      // ② saveを実行する。
      await mac_info.save();

      final File fileAfter = File(jsonPath);
      expect(fileAfter.existsSync(), true);

      // アプリ用フォルダにある対象JSONファイルの内容に変化がないこと。
      final String jsonAfter = await fileAfter.readAsString();
      expect(jsonBefor.replaceAll("\r\n", "\n") == jsonAfter.replaceAll("\r\n", "\n"), true);

      print("********** テスト終了：00201_save_01 **********\n\n");
    });

    // ********************************************************
    // テスト00006 : save
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    // 期待結果：アプリ用フォルダにある対象JSONファイルの当該プロパティの値が
    //         変更した値に変更されていること。
    // ********************************************************
    test('00006_save_02', () async {
      print("\n********** テスト実行：00006_save_02 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      // ⓪：事前状態確認（対象JSONファイルが存在すること。）
      expect(fileBefore.existsSync(), true);

      // ① loadを実行する。
      await mac_info.load();

      // save実行前のJSONファイルを保存する。
      final String jsonBefor = await fileBefore.readAsString();
      expect(mac_info.system.macno, defaultData);

      // ②任意のプロパティの値を変更する。
      final prefixData = mac_info.system.macno;
      mac_info.system.macno = testData1;

      // ③ saveを実行する。
      await mac_info.save();

      final File fileAfter1 = File(jsonPath);
      expect(fileAfter1.existsSync(), true);

      // アプリ用フォルダにある対象JSONファイルの内容に変化ががあること。
      // 手順②で変更した内容になっていること。
      final String jsonAfter1 = await fileAfter1.readAsString();
      expect(jsonBefor.replaceAll("\r\n", "\n") != jsonAfter1.replaceAll("\r\n", "\n"), true);
      expect(testData1 != prefixData, true);
      expect(mac_info.system.macno, testData1);

      // ④ loadを実行する。
      await mac_info.load();

      // アプリ用フォルダにある対象JSONファイルの内容が同じであること。
      // 手順②で変更した内容であること。
      final String jsonAfter2 = await fileAfter1.readAsString();
      expect(jsonAfter1.replaceAll("\r\n", "\n") == jsonAfter2.replaceAll("\r\n", "\n"), true);

      expect(mac_info.system.macno == testData1, true);
      allPropatyCheck(mac_info,false);

      print("********** テスト終了：00006_save_02 **********\n\n");
    });

    // ********************************************************
    // テスト00007 : setDefault
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    //         アプリ用フォルダに対象JSONファイルが存在し、任意の編集を施すこと。
    // 試験手順：①アプリ用フォルダにある対象JSONファイルを削除する。
    //         ②setDefaultを実行する。
    // 期待結果：手順②実行後、assets/confにある対象JSONファイルが
    //         アプリ用フォルダに作成されること。
    // ********************************************************
    test('00007_setDefault_01', () async {
      print("\n********** テスト実行：00007_setDefault_01 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①アプリ用フォルダにある対象JSONファイルを削除する。
      Directory appDir = Directory(EnvironmentData.TPRX_HOME);
      final String jsonPath = join(appDir.path, confPath, fileName);
      final File fileBefore = File(jsonPath);
      if (fileBefore.existsSync() == true) {
        fileBefore.deleteSync();
      }
      expect(fileBefore.existsSync() , false);

      // ②setDefaultを実行する。
      await mac_info.setDefault();
      expect(fileBefore.existsSync() , true);
      allPropatyCheck(mac_info,true);

      print("********** テスト終了：00007_setDefault_01 **********\n\n");
    });

    // ********************************************************
    // テスト00008 : setDefault
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    //         アプリ用フォルダに対象JSONファイルが存在し、任意の編集を施すこと。
    // 試験手順：①任意のプロパティの値を変更し、saveを実行する。
    //         ②setDefaultを実行する。
    // 期待結果：手順②実行後、assets/confにある対象JSONファイルの内容で上書きされること。
    //         （変更が取り消されていること）
    // ********************************************************
    test('00008_setDefault_02', () async {
      print("\n********** テスト実行：00008_setDefault_02 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②任意のプロパティの値を変更する。
      mac_info.system.macno = testData1;
      expect(mac_info.system.macno, testData1);

      // ③saveを実行する。
      await mac_info.save();
      expect(mac_info.system.macno, testData1);

      // ④loadを実行する。
      await mac_info.setDefault();

      // （デフォルト値と同じであること。）
      allPropatyCheck(mac_info,true);

      print("********** テスト終了：00008_setDefault_02 **********\n\n");
    });

    // ********************************************************
    // テスト00009 : セクション/キー名称による設定（setValueWithName）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
    //         ②loadを実行する。
    // 期待結果：手順②実行後、手順①で設定したプロパティ変更後の内容で
    //         プロパティ値が設定されていること。
    // ********************************************************
    test('00009_setValueWithName_01', () async {
      print("\n********** テスト実行：00009_setValueWithName_01 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      await mac_info.setValueWithName(section, key, testData1);

      // ②loadを実行する。
      await mac_info.load();

      // 手順②実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(mac_info.system.macno == testData1, true);

      print("********** テスト終了：00009_setValueWithName_01 **********\n\n");
    });

    test('00010_setValueWithName_02', () async {
      print("\n********** テスト実行：00010_setValueWithName_02 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      final value = await mac_info.setValueWithName("test_section", key, testData1);


      // 手順実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(value.result, false);
      expect(value.cause == json_result.element_not_found, true);

      print("********** テスト終了：00010_setValueWithName_02 **********\n\n");
    });

    test('00011_setValueWithName_03', () async {
      print("\n********** テスト実行：00011_setValueWithName_03 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①任意のセクション名、キー名、値にてsetValueWithNameを実行する。
      final value = await mac_info.setValueWithName(section, "test_key", testData1);

      // 手順①実行後、手順①で設定したプロパティ変更後の内容でプロパティ値が設定されていること。
      expect(value.result, false);
      expect(value.cause == json_result.element_not_found, true);

      print("********** テスト終了：00011_setValueWithName_03 **********\n\n");
    });

    // ********************************************************
    // テスト00010 : セクション/キー名称による取得（getValueWithName）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティを変更する。
    //         ③saveを実行する。
    //         ④①で指定したプロパティに相当するセクション名、キー名にて
    //           getValueWithNameを実行する。
    // 期待結果：手順④で設定した値が手順②で設定した値と一致すること。
    // ********************************************************
    test('00012_getValueWithName_01', () async {
      print("\n********** テスト実行：00012_getValueWithName_01********** ");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②任意のプロパティを変更する。
      mac_info.system.macno = testData1;

      // ③saveを実行する。
      await mac_info.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await mac_info.getValueWithName(section, key);
      //print(testData.toString() + " == " + verify.value.toString());
      expect(testData1 == verify.value, true);

      print("********** テスト終了：00012_getValueWithName_01**********\n\n");
    });

    test('00013_getValueWithName_02', () async {
      print("\n********** テスト実行：00013_getValueWithName_02********** ");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②任意のプロパティを変更する。
      mac_info.system.macno = testData1;

      // ③saveを実行する。
      await mac_info.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await mac_info.getValueWithName("test_section", key);
      //print(testData.toString() + " == " + verify.value.toString());

      expect(verify.result, false);
      expect(verify.cause == json_result.element_not_found, true);

      print("********** テスト終了：00013_getValueWithName_02**********\n\n");
    });

    test('00014_getValueWithName_03', () async {
      print("\n********** テスト実行：00014_getValueWithName_03********** ");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②任意のプロパティを変更する。
      mac_info.system.macno = testData1;

      // ③saveを実行する。
      await mac_info.save();

      // ④①で指定したプロパティに相当するセクション名、キー名にて
      //   getValueWithNameを実行する。
      final verify = await mac_info.getValueWithName(section, "test_key");
      //print(testData.toString() + " == " + verify.value.toString());

      expect(verify.result, false);
      expect(verify.cause == json_result.element_not_found, true);

      print("********** テスト終了：00014_getValueWithName_03**********\n\n");
    });

    // ********************************************************
    // テスト00015 : 任意フォルダ設定（_setAbsolutePath）
    // 事前条件：assets/confに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティ値を変更し、テスト用フォルダにJSONのコピーを作成する。
    //         ②setDefaultを実行する。
    //         ③テスト用フォルダのパスを引数としてsetAbsolutePathを実行する。
    //         ④loadを実行する。
    // 期待結果：手順④実行後、プロパティ変更後の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00015:_setAbsolutePath_01', () async {
      print("\n********** テスト実行：00015_setAbsolutePath_01 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①任意のフォルダのパスを引数としてsetAbsolutePathを実行する。
      final appDir = Directory(EnvironmentData.TPRX_HOME);
      JsonPath().absolutePath = join(appDir.path, testDir);

      // ②loadを実行する。
      await mac_info.load();

      // 手順②実行後に①で指定したパスに/assets/conf/当該JSONファイルが作成されていること。
      final String jsonPath = join(appDir.path, testDir, confPath, fileName);
      //print("存在確認先：" + jsonPath);
      final File file = File(jsonPath);
      expect(file.existsSync() == true , true);

      // ③任意のプロパティ値を変更する。
      mac_info.system.macno = testData1;
      expect(mac_info.system.macno, testData1);

      // ④saveを実行する。
      await mac_info.save();

      // 手順④実行後、プロパティ変更後の内容でプロパティ値が設定されていること。
      expect(mac_info.system.macno, testData1);
      
      // アプリフォルダのパスを元に戻しておく（このテストだけの後処理）。
      JsonPath().absolutePath = join(appDir.path);

      print("********** テスト終了：00015_setAbsolutePath_01 **********\n\n");
    });

    // ********************************************************
    // テスト00016 : ファイル復元（_restoreJson：バックアップ作成中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    //         ④バックアップファイルを作成し、破損状態とする。
    //         ⑤loadを実行する。
    // 期待結果：手順③実行後、プロパティ変更前の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00016_restoreJson_01', () async {
      print("\n********** テスト実行：00016_restoreJson_01 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ②Jsonファイルの任意のプロパティの値を変更する。
      // ④バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern1, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern1);

      // ⑤loadを実行する。
      await mac_info.load();

      // 手順⑤実行後、手順②で変更した内容でプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      expect(mac_info.system.macno == testData1, true);

      print("********** テスト終了：00016_restoreJson_01 **********\n\n");
    });

    // ********************************************************
    // テスト00017 : ファイル復元（_restoreJson：バックアップ作成直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①loadを実行する。
    //         ②任意のプロパティの値を変更する。
    //         ③saveを実行する。
    //         ④バックアップファイルを作成する。
    //         ⑤loadを実行する。
    // 期待結果：手順③実行後、プロパティ変更前の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('0017_restoreJson_02', () async {
      print("\n********** テスト実行：00017_restoreJson_02 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ②任意のプロパティの値を変更する。
      // ④バックアップファイルを作成する。
      await makeTestData(confPath, fileName, testFunc.makePattern2, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern2);

      // ⑤loadを実行する。
      await mac_info.load();

      // 手順⑤実行後、手順②で変更した内容でプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      expect(mac_info.system.macno == testData2, true);

      print("********** テスト終了：00017_restoreJson_02 **********\n\n");
    });

    // ********************************************************
    // テスト00018 : ファイル復元（_restoreJson：JSON更新中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成する。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00018_restoreJson_03', () async {
      print("\n********** テスト実行：00018_restoreJson_03 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern3, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern3);

      // ③loadを実行する。
      await mac_info.load();

      // 手順③実行後、①の内容ででプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      expect(mac_info.system.macno == testData1, true);

      print("********** テスト終了：00018_restoreJson_03 **********\n\n");
    });

    // ********************************************************
    // テスト00019 : ファイル復元（_restoreJson：JSON作成直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成する。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新する。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、②の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00019_restoreJson_04', () async {
      print("\n********** テスト実行：00019_restoreJson_04 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern4, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern4);

      // ③loadを実行する。
      await mac_info.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      expect(mac_info.system.macno == testData2, true);

      print("********** テスト終了：00019_restoreJson_04 **********\n\n");
    });

    // ********************************************************
    // テスト00020 : ファイル復元（_restoreJson：バックアップ削除中に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更した内容でJSONファイルを更新する。
    //         ②バックアップファイルを作成し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00020_restoreJson_05', () async {
      print("\n********** テスト実行：00020_restoreJson_05 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern5, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern5);

      // ③loadを実行する。
      await mac_info.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      expect(mac_info.system.macno == testData1, true);

      print("********** テスト終了：00020_restoreJson_05 **********\n\n");
    });

    // ********************************************************
    // テスト00021 : ファイル復元（_restoreJson：バックアップ削除直後に電断）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更する。
    //         ②①の内容でJSONファイルを更新する。
    //         ③loadを実行する。
    // 期待結果：手順③実行後、①の内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00021_restoreJson_06', () async {
      print("\n********** テスト実行：00021_restoreJson_06 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①バックアップファイルを作成する。
      // ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern6, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern6);

      // ③loadを実行する。
      await mac_info.load();

      // 手順③実行後、②の内容ででプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      expect(mac_info.system.macno == testData1, true);

      print("********** テスト終了：00021_restoreJson_06 **********\n\n");
    });

    // ********************************************************
    // テスト00022 : ファイル復元（_restoreJson：バックアップとJSON共に破損：バックアップが新しい日付）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ②バックアップファイルを作成し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：デフォルトの内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00022_restoreJson_07', () async {
      print("\n********** テスト実行：00022_restoreJson_07 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      // ②バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern7, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern7);

      // ③loadを実行する。
      await mac_info.load();

      // デフォルトの内容でプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      allPropatyCheck(mac_info,true);

      print("********** テスト終了：00022_restoreJson_07 **********\n\n");
    });

    // ********************************************************
    // テスト00023 : ファイル復元（_restoreJson：バックアップとJSON共に破損：JSONが新しい日付）
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    // 試験手順：①バックアップファイルを作成し、破損状態とする。
    //         ②任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
    //         ③loadを実行する。
    // 期待結果：デフォルトの内容でプロパティ値が設定されていること。
    // ********************************************************
    test('00023_restoreJson_08', () async {
      print("\n********** テスト実行：00023_restoreJson_08 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①任意のプロパティの値を変更した内容でJSONファイルを更新し、破損状態とする。
      // ②バックアップファイルを作成し、破損状態とする。
      await makeTestData(confPath, fileName, testFunc.makePattern8, section, key, testData1, testData2);
      await getTestDate(confPath, fileName, testFunc.getPattern8);

      // ③loadを実行する。
      await mac_info.load();

      // デフォルトの内容でプロパティ値が設定されていること。
      print("check:" + mac_info.system.macno.toString());
      allPropatyCheck(mac_info,true);

      print("********** テスト終了：00023_restoreJson_08 **********\n\n");
    });

    // ********************************************************
    // テスト00024 ～ : 要素取得・設定
    // 事前条件：アプリ用フォルダに対象JSONファイルが存在すること。
    //         実行前にsetConfigを実行すること。
    // 試験手順：①loadを実行する。
    //         ②指定したプロパティの初期値を取得する。
    //         ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
    //         ④saveを実行後、loadを実行する。
    //         ⑤同じプロパティを読み込み、データに変化がないことを確認する。
    //         ⑥③～⑤を異なるテストデータで実施する。
    //         ⑦③～⑤を手順①で取得した初期値で実施する。
    //         ⑧全てのプロパティが初期値になっていることを確認する。
    // 期待結果：全プロパティ値を取得、設定できること。（１要素、1テストで実施する）
    // ********************************************************
     test('00024_element_check_00001', () async {
      print("\n********** テスト実行：00024_element_check_00001 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.macno;
      print(mac_info.system.macno);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.macno = testData1;
      print(mac_info.system.macno);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.macno == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.macno == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.macno = testData2;
      print(mac_info.system.macno);
      expect(mac_info.system.macno == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.macno == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.macno = defalut;
      print(mac_info.system.macno);
      expect(mac_info.system.macno == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.macno == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00024_element_check_00001 **********\n\n");
    });

    test('00025_element_check_00002', () async {
      print("\n********** テスト実行：00025_element_check_00002 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.crpno;
      print(mac_info.system.crpno);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.crpno = testData1;
      print(mac_info.system.crpno);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.crpno == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.crpno == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.crpno = testData2;
      print(mac_info.system.crpno);
      expect(mac_info.system.crpno == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.crpno == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.crpno = defalut;
      print(mac_info.system.crpno);
      expect(mac_info.system.crpno == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.crpno == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00025_element_check_00002 **********\n\n");
    });

    test('00026_element_check_00003', () async {
      print("\n********** テスト実行：00026_element_check_00003 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.shpno;
      print(mac_info.system.shpno);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.shpno = testData1;
      print(mac_info.system.shpno);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.shpno == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.shpno == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.shpno = testData2;
      print(mac_info.system.shpno);
      expect(mac_info.system.shpno == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.shpno == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.shpno = defalut;
      print(mac_info.system.shpno);
      expect(mac_info.system.shpno == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.shpno == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00026_element_check_00003 **********\n\n");
    });

    test('00027_element_check_00004', () async {
      print("\n********** テスト実行：00027_element_check_00004 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.wakeup_delay;
      print(mac_info.system.wakeup_delay);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.wakeup_delay = testData1;
      print(mac_info.system.wakeup_delay);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.wakeup_delay == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.wakeup_delay == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.wakeup_delay = testData2;
      print(mac_info.system.wakeup_delay);
      expect(mac_info.system.wakeup_delay == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.wakeup_delay == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.wakeup_delay = defalut;
      print(mac_info.system.wakeup_delay);
      expect(mac_info.system.wakeup_delay == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.wakeup_delay == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00027_element_check_00004 **********\n\n");
    });

    test('00028_element_check_00005', () async {
      print("\n********** テスト実行：00028_element_check_00005 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.tenant;
      print(mac_info.system.tenant);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.tenant = testData1;
      print(mac_info.system.tenant);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.tenant == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.tenant == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.tenant = testData2;
      print(mac_info.system.tenant);
      expect(mac_info.system.tenant == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.tenant == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.tenant = defalut;
      print(mac_info.system.tenant);
      expect(mac_info.system.tenant == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.tenant == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00028_element_check_00005 **********\n\n");
    });

    test('00029_element_check_00006', () async {
      print("\n********** テスト実行：00029_element_check_00006 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.serialno;
      print(mac_info.system.serialno);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.serialno = testData1;
      print(mac_info.system.serialno);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.serialno == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.serialno == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.serialno = testData2;
      print(mac_info.system.serialno);
      expect(mac_info.system.serialno == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.serialno == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.serialno = defalut;
      print(mac_info.system.serialno);
      expect(mac_info.system.serialno == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.serialno == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00029_element_check_00006 **********\n\n");
    });

    test('00030_element_check_00007', () async {
      print("\n********** テスト実行：00030_element_check_00007 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.join_area_cd;
      print(mac_info.system.join_area_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.join_area_cd = testData1;
      print(mac_info.system.join_area_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.join_area_cd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.join_area_cd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.join_area_cd = testData2;
      print(mac_info.system.join_area_cd);
      expect(mac_info.system.join_area_cd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.join_area_cd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.join_area_cd = defalut;
      print(mac_info.system.join_area_cd);
      expect(mac_info.system.join_area_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.join_area_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00030_element_check_00007 **********\n\n");
    });

    test('00031_element_check_00008', () async {
      print("\n********** テスト実行：00031_element_check_00008 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.join_sub_area_cd;
      print(mac_info.system.join_sub_area_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.join_sub_area_cd = testData1;
      print(mac_info.system.join_sub_area_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.join_sub_area_cd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.join_sub_area_cd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.join_sub_area_cd = testData2;
      print(mac_info.system.join_sub_area_cd);
      expect(mac_info.system.join_sub_area_cd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.join_sub_area_cd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.join_sub_area_cd = defalut;
      print(mac_info.system.join_sub_area_cd);
      expect(mac_info.system.join_sub_area_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.join_sub_area_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00031_element_check_00008 **********\n\n");
    });

    test('00032_element_check_00009', () async {
      print("\n********** テスト実行：00032_element_check_00009 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.comp_cd;
      print(mac_info.system.comp_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.comp_cd = testData1;
      print(mac_info.system.comp_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.comp_cd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.comp_cd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.comp_cd = testData2;
      print(mac_info.system.comp_cd);
      expect(mac_info.system.comp_cd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.comp_cd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.comp_cd = defalut;
      print(mac_info.system.comp_cd);
      expect(mac_info.system.comp_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.comp_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00032_element_check_00009 **********\n\n");
    });

    test('00033_element_check_00010', () async {
      print("\n********** テスト実行：00033_element_check_00010 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.soc_timeout;
      print(mac_info.system.soc_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.soc_timeout = testData1;
      print(mac_info.system.soc_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.soc_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.soc_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.soc_timeout = testData2;
      print(mac_info.system.soc_timeout);
      expect(mac_info.system.soc_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.soc_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.soc_timeout = defalut;
      print(mac_info.system.soc_timeout);
      expect(mac_info.system.soc_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.soc_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00033_element_check_00010 **********\n\n");
    });

    test('00034_element_check_00011', () async {
      print("\n********** テスト実行：00034_element_check_00011 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.soc_timback;
      print(mac_info.system.soc_timback);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.soc_timback = testData1;
      print(mac_info.system.soc_timback);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.soc_timback == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.soc_timback == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.soc_timback = testData2;
      print(mac_info.system.soc_timback);
      expect(mac_info.system.soc_timback == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.soc_timback == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.soc_timback = defalut;
      print(mac_info.system.soc_timback);
      expect(mac_info.system.soc_timback == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.soc_timback == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00034_element_check_00011 **********\n\n");
    });

    test('00035_element_check_00012', () async {
      print("\n********** テスト実行：00035_element_check_00012 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.kill_port;
      print(mac_info.system.kill_port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.kill_port = testData1;
      print(mac_info.system.kill_port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.kill_port == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.kill_port == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.kill_port = testData2;
      print(mac_info.system.kill_port);
      expect(mac_info.system.kill_port == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.kill_port == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.kill_port = defalut;
      print(mac_info.system.kill_port);
      expect(mac_info.system.kill_port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.kill_port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00035_element_check_00012 **********\n\n");
    });

    test('00036_element_check_00013', () async {
      print("\n********** テスト実行：00036_element_check_00013 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.vpn;
      print(mac_info.system.vpn);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.vpn = testData1;
      print(mac_info.system.vpn);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.vpn == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.vpn == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.vpn = testData2;
      print(mac_info.system.vpn);
      expect(mac_info.system.vpn == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.vpn == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.vpn = defalut;
      print(mac_info.system.vpn);
      expect(mac_info.system.vpn == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.vpn == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00036_element_check_00013 **********\n\n");
    });

    test('00037_element_check_00014', () async {
      print("\n********** テスト実行：00037_element_check_00014 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.smart;
      print(mac_info.system.smart);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.smart = testData1;
      print(mac_info.system.smart);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.smart == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.smart == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.smart = testData2;
      print(mac_info.system.smart);
      expect(mac_info.system.smart == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.smart == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.smart = defalut;
      print(mac_info.system.smart);
      expect(mac_info.system.smart == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.smart == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00037_element_check_00014 **********\n\n");
    });

    test('00038_element_check_00015', () async {
      print("\n********** テスト実行：00038_element_check_00015 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.drugrev_timeout;
      print(mac_info.system.drugrev_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.drugrev_timeout = testData1;
      print(mac_info.system.drugrev_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.drugrev_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.drugrev_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.drugrev_timeout = testData2;
      print(mac_info.system.drugrev_timeout);
      expect(mac_info.system.drugrev_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.drugrev_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.drugrev_timeout = defalut;
      print(mac_info.system.drugrev_timeout);
      expect(mac_info.system.drugrev_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.drugrev_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00038_element_check_00015 **********\n\n");
    });

    test('00039_element_check_00016', () async {
      print("\n********** テスト実行：00039_element_check_00016 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.set_spec_no;
      print(mac_info.system.set_spec_no);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.set_spec_no = testData1;
      print(mac_info.system.set_spec_no);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.set_spec_no == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.set_spec_no == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.set_spec_no = testData2;
      print(mac_info.system.set_spec_no);
      expect(mac_info.system.set_spec_no == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.set_spec_no == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.set_spec_no = defalut;
      print(mac_info.system.set_spec_no);
      expect(mac_info.system.set_spec_no == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.set_spec_no == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00039_element_check_00016 **********\n\n");
    });

    test('00040_element_check_00017', () async {
      print("\n********** テスト実行：00040_element_check_00017 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.reg_cruising;
      print(mac_info.system.reg_cruising);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.reg_cruising = testData1;
      print(mac_info.system.reg_cruising);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.reg_cruising == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.reg_cruising == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.reg_cruising = testData2;
      print(mac_info.system.reg_cruising);
      expect(mac_info.system.reg_cruising == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.reg_cruising == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.reg_cruising = defalut;
      print(mac_info.system.reg_cruising);
      expect(mac_info.system.reg_cruising == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.reg_cruising == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00040_element_check_00017 **********\n\n");
    });

    test('00041_element_check_00018', () async {
      print("\n********** テスト実行：00041_element_check_00018 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.fip_connect;
      print(mac_info.system.fip_connect);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.fip_connect = testData1;
      print(mac_info.system.fip_connect);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.fip_connect == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.fip_connect == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.fip_connect = testData2;
      print(mac_info.system.fip_connect);
      expect(mac_info.system.fip_connect == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.fip_connect == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.fip_connect = defalut;
      print(mac_info.system.fip_connect);
      expect(mac_info.system.fip_connect == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.fip_connect == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00041_element_check_00018 **********\n\n");
    });

    test('00042_element_check_00019', () async {
      print("\n********** テスト実行：00042_element_check_00019 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.fip_display;
      print(mac_info.system.fip_display);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.fip_display = testData1;
      print(mac_info.system.fip_display);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.fip_display == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.fip_display == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.fip_display = testData2;
      print(mac_info.system.fip_display);
      expect(mac_info.system.fip_display == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.fip_display == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.fip_display = defalut;
      print(mac_info.system.fip_display);
      expect(mac_info.system.fip_display == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.fip_display == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00042_element_check_00019 **********\n\n");
    });

    test('00043_element_check_00020', () async {
      print("\n********** テスト実行：00043_element_check_00020 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.ts_ver_mrg;
      print(mac_info.system.ts_ver_mrg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.ts_ver_mrg = testData1;
      print(mac_info.system.ts_ver_mrg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.ts_ver_mrg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.ts_ver_mrg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.ts_ver_mrg = testData2;
      print(mac_info.system.ts_ver_mrg);
      expect(mac_info.system.ts_ver_mrg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.ts_ver_mrg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.ts_ver_mrg = defalut;
      print(mac_info.system.ts_ver_mrg);
      expect(mac_info.system.ts_ver_mrg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.ts_ver_mrg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00043_element_check_00020 **********\n\n");
    });

    test('00044_element_check_00021', () async {
      print("\n********** テスト実行：00044_element_check_00021 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.print_screen;
      print(mac_info.system.print_screen);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.print_screen = testData1;
      print(mac_info.system.print_screen);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.print_screen == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.print_screen == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.print_screen = testData2;
      print(mac_info.system.print_screen);
      expect(mac_info.system.print_screen == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.print_screen == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.print_screen = defalut;
      print(mac_info.system.print_screen);
      expect(mac_info.system.print_screen == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.print_screen == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00044_element_check_00021 **********\n\n");
    });

    test('00045_element_check_00022', () async {
      print("\n********** テスト実行：00045_element_check_00022 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.twoconnect;
      print(mac_info.system.twoconnect);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.twoconnect = testData1;
      print(mac_info.system.twoconnect);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.twoconnect == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.twoconnect == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.twoconnect = testData2;
      print(mac_info.system.twoconnect);
      expect(mac_info.system.twoconnect == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.twoconnect == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.twoconnect = defalut;
      print(mac_info.system.twoconnect);
      expect(mac_info.system.twoconnect == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.twoconnect == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00045_element_check_00022 **********\n\n");
    });

    test('00046_element_check_00023', () async {
      print("\n********** テスト実行：00046_element_check_00023 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.custsw_cnct;
      print(mac_info.system.custsw_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.custsw_cnct = testData1;
      print(mac_info.system.custsw_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.custsw_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.custsw_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.custsw_cnct = testData2;
      print(mac_info.system.custsw_cnct);
      expect(mac_info.system.custsw_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.custsw_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.custsw_cnct = defalut;
      print(mac_info.system.custsw_cnct);
      expect(mac_info.system.custsw_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.custsw_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00046_element_check_00023 **********\n\n");
    });

    test('00047_element_check_00024', () async {
      print("\n********** テスト実行：00047_element_check_00024 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.keytype_desk;
      print(mac_info.system.keytype_desk);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.keytype_desk = testData1;
      print(mac_info.system.keytype_desk);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.keytype_desk == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.keytype_desk == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.keytype_desk = testData2;
      print(mac_info.system.keytype_desk);
      expect(mac_info.system.keytype_desk == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.keytype_desk == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.keytype_desk = defalut;
      print(mac_info.system.keytype_desk);
      expect(mac_info.system.keytype_desk == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.keytype_desk == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00047_element_check_00024 **********\n\n");
    });

    test('00048_element_check_00025', () async {
      print("\n********** テスト実行：00048_element_check_00025 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.keytype_tower;
      print(mac_info.system.keytype_tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.keytype_tower = testData1;
      print(mac_info.system.keytype_tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.keytype_tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.keytype_tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.keytype_tower = testData2;
      print(mac_info.system.keytype_tower);
      expect(mac_info.system.keytype_tower == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.keytype_tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.keytype_tower = defalut;
      print(mac_info.system.keytype_tower);
      expect(mac_info.system.keytype_tower == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.keytype_tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00048_element_check_00025 **********\n\n");
    });

    test('00049_element_check_00026', () async {
      print("\n********** テスト実行：00049_element_check_00026 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.front_self_type;
      print(mac_info.system.front_self_type);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.front_self_type = testData1;
      print(mac_info.system.front_self_type);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.front_self_type == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.front_self_type == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.front_self_type = testData2;
      print(mac_info.system.front_self_type);
      expect(mac_info.system.front_self_type == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.front_self_type == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.front_self_type = defalut;
      print(mac_info.system.front_self_type);
      expect(mac_info.system.front_self_type == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.front_self_type == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00049_element_check_00026 **********\n\n");
    });

    test('00050_element_check_00027', () async {
      print("\n********** テスト実行：00050_element_check_00027 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.font;
      print(mac_info.system.font);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.font = testData1;
      print(mac_info.system.font);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.font == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.font == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.font = testData2;
      print(mac_info.system.font);
      expect(mac_info.system.font == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.font == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.font = defalut;
      print(mac_info.system.font);
      expect(mac_info.system.font == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.font == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00050_element_check_00027 **********\n\n");
    });

    test('00051_element_check_00028', () async {
      print("\n********** テスト実行：00051_element_check_00028 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.stcls_mode;
      print(mac_info.system.stcls_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.stcls_mode = testData1;
      print(mac_info.system.stcls_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.stcls_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.stcls_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.stcls_mode = testData2;
      print(mac_info.system.stcls_mode);
      expect(mac_info.system.stcls_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.stcls_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.stcls_mode = defalut;
      print(mac_info.system.stcls_mode);
      expect(mac_info.system.stcls_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.stcls_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00051_element_check_00028 **********\n\n");
    });

    test('00052_element_check_00029', () async {
      print("\n********** テスト実行：00052_element_check_00029 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.verifone_center_cnct;
      print(mac_info.system.verifone_center_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.verifone_center_cnct = testData1;
      print(mac_info.system.verifone_center_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.verifone_center_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.verifone_center_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.verifone_center_cnct = testData2;
      print(mac_info.system.verifone_center_cnct);
      expect(mac_info.system.verifone_center_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.verifone_center_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.verifone_center_cnct = defalut;
      print(mac_info.system.verifone_center_cnct);
      expect(mac_info.system.verifone_center_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.verifone_center_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00052_element_check_00029 **********\n\n");
    });

    test('00053_element_check_00030', () async {
      print("\n********** テスト実行：00053_element_check_00030 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.verifone_one_receipt;
      print(mac_info.system.verifone_one_receipt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.verifone_one_receipt = testData1;
      print(mac_info.system.verifone_one_receipt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.verifone_one_receipt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.verifone_one_receipt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.verifone_one_receipt = testData2;
      print(mac_info.system.verifone_one_receipt);
      expect(mac_info.system.verifone_one_receipt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.verifone_one_receipt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.verifone_one_receipt = defalut;
      print(mac_info.system.verifone_one_receipt);
      expect(mac_info.system.verifone_one_receipt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.verifone_one_receipt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00053_element_check_00030 **********\n\n");
    });

    test('00054_element_check_00031', () async {
      print("\n********** テスト実行：00054_element_check_00031 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.system.device_connect;
      print(mac_info.system.device_connect);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.system.device_connect = testData1;
      print(mac_info.system.device_connect);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.system.device_connect == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.system.device_connect == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.system.device_connect = testData2;
      print(mac_info.system.device_connect);
      expect(mac_info.system.device_connect == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.device_connect == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.system.device_connect = defalut;
      print(mac_info.system.device_connect);
      expect(mac_info.system.device_connect == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.system.device_connect == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00054_element_check_00031 **********\n\n");
    });

    test('00055_element_check_00032', () async {
      print("\n********** テスト実行：00055_element_check_00032 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.mm_onoff;
      print(mac_info.mm_system.mm_onoff);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.mm_onoff = testData1;
      print(mac_info.mm_system.mm_onoff);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.mm_onoff == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.mm_onoff == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.mm_onoff = testData2;
      print(mac_info.mm_system.mm_onoff);
      expect(mac_info.mm_system.mm_onoff == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mm_onoff == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.mm_onoff = defalut;
      print(mac_info.mm_system.mm_onoff);
      expect(mac_info.mm_system.mm_onoff == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mm_onoff == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00055_element_check_00032 **********\n\n");
    });

    test('00056_element_check_00033', () async {
      print("\n********** テスト実行：00056_element_check_00033 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.mm_type;
      print(mac_info.mm_system.mm_type);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.mm_type = testData1;
      print(mac_info.mm_system.mm_type);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.mm_type == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.mm_type == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.mm_type = testData2;
      print(mac_info.mm_system.mm_type);
      expect(mac_info.mm_system.mm_type == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mm_type == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.mm_type = defalut;
      print(mac_info.mm_system.mm_type);
      expect(mac_info.mm_system.mm_type == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mm_type == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00056_element_check_00033 **********\n\n");
    });

    test('00057_element_check_00034', () async {
      print("\n********** テスト実行：00057_element_check_00034 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.add_total;
      print(mac_info.mm_system.add_total);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.add_total = testData1;
      print(mac_info.mm_system.add_total);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.add_total == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.add_total == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.add_total = testData2;
      print(mac_info.mm_system.add_total);
      expect(mac_info.mm_system.add_total == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.add_total == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.add_total = defalut;
      print(mac_info.mm_system.add_total);
      expect(mac_info.mm_system.add_total == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.add_total == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00057_element_check_00034 **********\n\n");
    });

    test('00058_element_check_00035', () async {
      print("\n********** テスト実行：00058_element_check_00035 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sc_cnct;
      print(mac_info.mm_system.sc_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sc_cnct = testData1;
      print(mac_info.mm_system.sc_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sc_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sc_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sc_cnct = testData2;
      print(mac_info.mm_system.sc_cnct);
      expect(mac_info.mm_system.sc_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sc_cnct = defalut;
      print(mac_info.mm_system.sc_cnct);
      expect(mac_info.mm_system.sc_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00058_element_check_00035 **********\n\n");
    });

    test('00059_element_check_00036', () async {
      print("\n********** テスト実行：00059_element_check_00036 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sc_adr;
      print(mac_info.mm_system.sc_adr);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sc_adr = testData1s;
      print(mac_info.mm_system.sc_adr);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sc_adr == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sc_adr == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sc_adr = testData2s;
      print(mac_info.mm_system.sc_adr);
      expect(mac_info.mm_system.sc_adr == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_adr == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sc_adr = defalut;
      print(mac_info.mm_system.sc_adr);
      expect(mac_info.mm_system.sc_adr == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_adr == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00059_element_check_00036 **********\n\n");
    });

    test('00060_element_check_00037', () async {
      print("\n********** テスト実行：00060_element_check_00037 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sc_port;
      print(mac_info.mm_system.sc_port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sc_port = testData1;
      print(mac_info.mm_system.sc_port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sc_port == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sc_port == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sc_port = testData2;
      print(mac_info.mm_system.sc_port);
      expect(mac_info.mm_system.sc_port == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_port == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sc_port = defalut;
      print(mac_info.mm_system.sc_port);
      expect(mac_info.mm_system.sc_port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00060_element_check_00037 **********\n\n");
    });

    test('00061_element_check_00038', () async {
      print("\n********** テスト実行：00061_element_check_00038 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.add_cust;
      print(mac_info.mm_system.add_cust);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.add_cust = testData1;
      print(mac_info.mm_system.add_cust);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.add_cust == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.add_cust == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.add_cust = testData2;
      print(mac_info.mm_system.add_cust);
      expect(mac_info.mm_system.add_cust == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.add_cust == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.add_cust = defalut;
      print(mac_info.mm_system.add_cust);
      expect(mac_info.mm_system.add_cust == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.add_cust == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00061_element_check_00038 **********\n\n");
    });

    test('00062_element_check_00039', () async {
      print("\n********** テスト実行：00062_element_check_00039 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.mente_port;
      print(mac_info.mm_system.mente_port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.mente_port = testData1;
      print(mac_info.mm_system.mente_port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.mente_port == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.mente_port == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.mente_port = testData2;
      print(mac_info.mm_system.mente_port);
      expect(mac_info.mm_system.mente_port == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mente_port == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.mente_port = defalut;
      print(mac_info.mm_system.mente_port);
      expect(mac_info.mm_system.mente_port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mente_port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00062_element_check_00039 **********\n\n");
    });

    test('00063_element_check_00040', () async {
      print("\n********** テスト実行：00063_element_check_00040 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.ej_txt_format;
      print(mac_info.mm_system.ej_txt_format);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.ej_txt_format = testData1;
      print(mac_info.mm_system.ej_txt_format);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.ej_txt_format == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.ej_txt_format == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.ej_txt_format = testData2;
      print(mac_info.mm_system.ej_txt_format);
      expect(mac_info.mm_system.ej_txt_format == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.ej_txt_format == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.ej_txt_format = defalut;
      print(mac_info.mm_system.ej_txt_format);
      expect(mac_info.mm_system.ej_txt_format == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.ej_txt_format == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00063_element_check_00040 **********\n\n");
    });

    test('00064_element_check_00041', () async {
      print("\n********** テスト実行：00064_element_check_00041 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.ej_txt_make;
      print(mac_info.mm_system.ej_txt_make);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.ej_txt_make = testData1;
      print(mac_info.mm_system.ej_txt_make);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.ej_txt_make == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.ej_txt_make == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.ej_txt_make = testData2;
      print(mac_info.mm_system.ej_txt_make);
      expect(mac_info.mm_system.ej_txt_make == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.ej_txt_make == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.ej_txt_make = defalut;
      print(mac_info.mm_system.ej_txt_make);
      expect(mac_info.mm_system.ej_txt_make == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.ej_txt_make == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00064_element_check_00041 **********\n\n");
    });

    test('00065_element_check_00042', () async {
      print("\n********** テスト実行：00065_element_check_00042 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.csvsend_cycle;
      print(mac_info.mm_system.csvsend_cycle);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.csvsend_cycle = testData1;
      print(mac_info.mm_system.csvsend_cycle);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.csvsend_cycle == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.csvsend_cycle == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.csvsend_cycle = testData2;
      print(mac_info.mm_system.csvsend_cycle);
      expect(mac_info.mm_system.csvsend_cycle == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.csvsend_cycle == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.csvsend_cycle = defalut;
      print(mac_info.mm_system.csvsend_cycle);
      expect(mac_info.mm_system.csvsend_cycle == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.csvsend_cycle == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00065_element_check_00042 **********\n\n");
    });

    test('00066_element_check_00043', () async {
      print("\n********** テスト実行：00066_element_check_00043 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.srvlog_save_date;
      print(mac_info.mm_system.srvlog_save_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.srvlog_save_date = testData1;
      print(mac_info.mm_system.srvlog_save_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.srvlog_save_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.srvlog_save_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.srvlog_save_date = testData2;
      print(mac_info.mm_system.srvlog_save_date);
      expect(mac_info.mm_system.srvlog_save_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.srvlog_save_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.srvlog_save_date = defalut;
      print(mac_info.mm_system.srvlog_save_date);
      expect(mac_info.mm_system.srvlog_save_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.srvlog_save_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00066_element_check_00043 **********\n\n");
    });

    test('00067_element_check_00044', () async {
      print("\n********** テスト実行：00067_element_check_00044 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.mupd_port;
      print(mac_info.mm_system.mupd_port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.mupd_port = testData1;
      print(mac_info.mm_system.mupd_port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.mupd_port == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.mupd_port == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.mupd_port = testData2;
      print(mac_info.mm_system.mupd_port);
      expect(mac_info.mm_system.mupd_port == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mupd_port == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.mupd_port = defalut;
      print(mac_info.mm_system.mupd_port);
      expect(mac_info.mm_system.mupd_port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mupd_port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00067_element_check_00044 **********\n\n");
    });

    test('00068_element_check_00045', () async {
      print("\n********** テスト実行：00068_element_check_00045 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.mupd_cycle;
      print(mac_info.mm_system.mupd_cycle);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.mupd_cycle = testData1;
      print(mac_info.mm_system.mupd_cycle);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.mupd_cycle == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.mupd_cycle == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.mupd_cycle = testData2;
      print(mac_info.mm_system.mupd_cycle);
      expect(mac_info.mm_system.mupd_cycle == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mupd_cycle == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.mupd_cycle = defalut;
      print(mac_info.mm_system.mupd_cycle);
      expect(mac_info.mm_system.mupd_cycle == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.mupd_cycle == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00068_element_check_00045 **********\n\n");
    });

    test('00069_element_check_00046', () async {
      print("\n********** テスト実行：00069_element_check_00046 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sgt_cf_wt;
      print(mac_info.mm_system.sgt_cf_wt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sgt_cf_wt = testData1;
      print(mac_info.mm_system.sgt_cf_wt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sgt_cf_wt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sgt_cf_wt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sgt_cf_wt = testData2;
      print(mac_info.mm_system.sgt_cf_wt);
      expect(mac_info.mm_system.sgt_cf_wt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sgt_cf_wt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sgt_cf_wt = defalut;
      print(mac_info.mm_system.sgt_cf_wt);
      expect(mac_info.mm_system.sgt_cf_wt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sgt_cf_wt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00069_element_check_00046 **********\n\n");
    });

    test('00070_element_check_00047', () async {
      print("\n********** テスト実行：00070_element_check_00047 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sc_mente_port;
      print(mac_info.mm_system.sc_mente_port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sc_mente_port = testData1;
      print(mac_info.mm_system.sc_mente_port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sc_mente_port == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sc_mente_port == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sc_mente_port = testData2;
      print(mac_info.mm_system.sc_mente_port);
      expect(mac_info.mm_system.sc_mente_port == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_mente_port == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sc_mente_port = defalut;
      print(mac_info.mm_system.sc_mente_port);
      expect(mac_info.mm_system.sc_mente_port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_mente_port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00070_element_check_00047 **********\n\n");
    });

    test('00071_element_check_00048', () async {
      print("\n********** テスト実行：00071_element_check_00048 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sc_port2;
      print(mac_info.mm_system.sc_port2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sc_port2 = testData1;
      print(mac_info.mm_system.sc_port2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sc_port2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sc_port2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sc_port2 = testData2;
      print(mac_info.mm_system.sc_port2);
      expect(mac_info.mm_system.sc_port2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_port2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sc_port2 = defalut;
      print(mac_info.mm_system.sc_port2);
      expect(mac_info.mm_system.sc_port2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sc_port2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00071_element_check_00048 **********\n\n");
    });

    test('00072_element_check_00049', () async {
      print("\n********** テスト実行：00072_element_check_00049 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.sinq_timeout;
      print(mac_info.mm_system.sinq_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.sinq_timeout = testData1;
      print(mac_info.mm_system.sinq_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.sinq_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.sinq_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.sinq_timeout = testData2;
      print(mac_info.mm_system.sinq_timeout);
      expect(mac_info.mm_system.sinq_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sinq_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.sinq_timeout = defalut;
      print(mac_info.mm_system.sinq_timeout);
      expect(mac_info.mm_system.sinq_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.sinq_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00072_element_check_00049 **********\n\n");
    });

    test('00073_element_check_00050', () async {
      print("\n********** テスト実行：00073_element_check_00050 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.doc_fsck;
      print(mac_info.mm_system.doc_fsck);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.doc_fsck = testData1;
      print(mac_info.mm_system.doc_fsck);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.doc_fsck == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.doc_fsck == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.doc_fsck = testData2;
      print(mac_info.mm_system.doc_fsck);
      expect(mac_info.mm_system.doc_fsck == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.doc_fsck == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.doc_fsck = defalut;
      print(mac_info.mm_system.doc_fsck);
      expect(mac_info.mm_system.doc_fsck == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.doc_fsck == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00073_element_check_00050 **********\n\n");
    });

    test('00074_element_check_00051', () async {
      print("\n********** テスト実行：00074_element_check_00051 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.duty_dis;
      print(mac_info.mm_system.duty_dis);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.duty_dis = testData1;
      print(mac_info.mm_system.duty_dis);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.duty_dis == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.duty_dis == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.duty_dis = testData2;
      print(mac_info.mm_system.duty_dis);
      expect(mac_info.mm_system.duty_dis == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.duty_dis == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.duty_dis = defalut;
      print(mac_info.mm_system.duty_dis);
      expect(mac_info.mm_system.duty_dis == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.duty_dis == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00074_element_check_00051 **********\n\n");
    });

    test('00075_element_check_00052', () async {
      print("\n********** テスト実行：00075_element_check_00052 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.clr_total;
      print(mac_info.mm_system.clr_total);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.clr_total = testData1;
      print(mac_info.mm_system.clr_total);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.clr_total == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.clr_total == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.clr_total = testData2;
      print(mac_info.mm_system.clr_total);
      expect(mac_info.mm_system.clr_total == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.clr_total == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.clr_total = defalut;
      print(mac_info.mm_system.clr_total);
      expect(mac_info.mm_system.clr_total == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.clr_total == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00075_element_check_00052 **********\n\n");
    });

    test('00076_element_check_00053', () async {
      print("\n********** テスト実行：00076_element_check_00053 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.clr_total_date;
      print(mac_info.mm_system.clr_total_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.clr_total_date = testData1;
      print(mac_info.mm_system.clr_total_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.clr_total_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.clr_total_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.clr_total_date = testData2;
      print(mac_info.mm_system.clr_total_date);
      expect(mac_info.mm_system.clr_total_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.clr_total_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.clr_total_date = defalut;
      print(mac_info.mm_system.clr_total_date);
      expect(mac_info.mm_system.clr_total_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.clr_total_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00076_element_check_00053 **********\n\n");
    });

    test('00077_element_check_00054', () async {
      print("\n********** テスト実行：00077_element_check_00054 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mm_system.reg_lrg_sum;
      print(mac_info.mm_system.reg_lrg_sum);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mm_system.reg_lrg_sum = testData1;
      print(mac_info.mm_system.reg_lrg_sum);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mm_system.reg_lrg_sum == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mm_system.reg_lrg_sum == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mm_system.reg_lrg_sum = testData2;
      print(mac_info.mm_system.reg_lrg_sum);
      expect(mac_info.mm_system.reg_lrg_sum == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.reg_lrg_sum == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mm_system.reg_lrg_sum = defalut;
      print(mac_info.mm_system.reg_lrg_sum);
      expect(mac_info.mm_system.reg_lrg_sum == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mm_system.reg_lrg_sum == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00077_element_check_00054 **********\n\n");
    });

    test('00078_element_check_00055', () async {
      print("\n********** テスト実行：00078_element_check_00055 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.logging.UnlimitSize;
      print(mac_info.logging.UnlimitSize);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.logging.UnlimitSize = testData1s;
      print(mac_info.logging.UnlimitSize);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.logging.UnlimitSize == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.logging.UnlimitSize == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.logging.UnlimitSize = testData2s;
      print(mac_info.logging.UnlimitSize);
      expect(mac_info.logging.UnlimitSize == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.logging.UnlimitSize == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.logging.UnlimitSize = defalut;
      print(mac_info.logging.UnlimitSize);
      expect(mac_info.logging.UnlimitSize == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.logging.UnlimitSize == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00078_element_check_00055 **********\n\n");
    });

    test('00079_element_check_00056', () async {
      print("\n********** テスト実行：00079_element_check_00056 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.logging.LogSaveDate;
      print(mac_info.logging.LogSaveDate);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.logging.LogSaveDate = testData1;
      print(mac_info.logging.LogSaveDate);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.logging.LogSaveDate == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.logging.LogSaveDate == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.logging.LogSaveDate = testData2;
      print(mac_info.logging.LogSaveDate);
      expect(mac_info.logging.LogSaveDate == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.logging.LogSaveDate == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.logging.LogSaveDate = defalut;
      print(mac_info.logging.LogSaveDate);
      expect(mac_info.logging.LogSaveDate == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.logging.LogSaveDate == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00079_element_check_00056 **********\n\n");
    });

    test('00080_element_check_00057', () async {
      print("\n********** テスト実行：00080_element_check_00057 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.logging.TranSaveDate;
      print(mac_info.logging.TranSaveDate);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.logging.TranSaveDate = testData1;
      print(mac_info.logging.TranSaveDate);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.logging.TranSaveDate == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.logging.TranSaveDate == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.logging.TranSaveDate = testData2;
      print(mac_info.logging.TranSaveDate);
      expect(mac_info.logging.TranSaveDate == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.logging.TranSaveDate == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.logging.TranSaveDate = defalut;
      print(mac_info.logging.TranSaveDate);
      expect(mac_info.logging.TranSaveDate == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.logging.TranSaveDate == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00080_element_check_00057 **********\n\n");
    });

    test('00081_element_check_00058', () async {
      print("\n********** テスト実行：00081_element_check_00058 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_addr.m1;
      print(mac_info.mac_addr.m1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_addr.m1 = testData1s;
      print(mac_info.mac_addr.m1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_addr.m1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_addr.m1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_addr.m1 = testData2s;
      print(mac_info.mac_addr.m1);
      expect(mac_info.mac_addr.m1 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.m1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_addr.m1 = defalut;
      print(mac_info.mac_addr.m1);
      expect(mac_info.mac_addr.m1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.m1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00081_element_check_00058 **********\n\n");
    });

    test('00082_element_check_00059', () async {
      print("\n********** テスト実行：00082_element_check_00059 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_addr.m2;
      print(mac_info.mac_addr.m2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_addr.m2 = testData1s;
      print(mac_info.mac_addr.m2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_addr.m2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_addr.m2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_addr.m2 = testData2s;
      print(mac_info.mac_addr.m2);
      expect(mac_info.mac_addr.m2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.m2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_addr.m2 = defalut;
      print(mac_info.mac_addr.m2);
      expect(mac_info.mac_addr.m2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.m2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00082_element_check_00059 **********\n\n");
    });

    test('00083_element_check_00060', () async {
      print("\n********** テスト実行：00083_element_check_00060 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_addr.s1;
      print(mac_info.mac_addr.s1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_addr.s1 = testData1s;
      print(mac_info.mac_addr.s1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_addr.s1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_addr.s1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_addr.s1 = testData2s;
      print(mac_info.mac_addr.s1);
      expect(mac_info.mac_addr.s1 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.s1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_addr.s1 = defalut;
      print(mac_info.mac_addr.s1);
      expect(mac_info.mac_addr.s1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.s1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00083_element_check_00060 **********\n\n");
    });

    test('00084_element_check_00061', () async {
      print("\n********** テスト実行：00084_element_check_00061 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_addr.s2;
      print(mac_info.mac_addr.s2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_addr.s2 = testData1s;
      print(mac_info.mac_addr.s2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_addr.s2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_addr.s2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_addr.s2 = testData2s;
      print(mac_info.mac_addr.s2);
      expect(mac_info.mac_addr.s2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.s2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_addr.s2 = defalut;
      print(mac_info.mac_addr.s2);
      expect(mac_info.mac_addr.s2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.s2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00084_element_check_00061 **********\n\n");
    });

    test('00085_element_check_00062', () async {
      print("\n********** テスト実行：00085_element_check_00062 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_addr.s3;
      print(mac_info.mac_addr.s3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_addr.s3 = testData1s;
      print(mac_info.mac_addr.s3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_addr.s3 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_addr.s3 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_addr.s3 = testData2s;
      print(mac_info.mac_addr.s3);
      expect(mac_info.mac_addr.s3 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.s3 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_addr.s3 = defalut;
      print(mac_info.mac_addr.s3);
      expect(mac_info.mac_addr.s3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.s3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00085_element_check_00062 **********\n\n");
    });

    test('00086_element_check_00063', () async {
      print("\n********** テスト実行：00086_element_check_00063 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_addr.fshare;
      print(mac_info.mac_addr.fshare);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_addr.fshare = testData1s;
      print(mac_info.mac_addr.fshare);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_addr.fshare == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_addr.fshare == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_addr.fshare = testData2s;
      print(mac_info.mac_addr.fshare);
      expect(mac_info.mac_addr.fshare == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.fshare == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_addr.fshare = defalut;
      print(mac_info.mac_addr.fshare);
      expect(mac_info.mac_addr.fshare == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_addr.fshare == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00086_element_check_00063 **********\n\n");
    });

    test('00087_element_check_00064', () async {
      print("\n********** テスト実行：00087_element_check_00064 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ip_addr.m1;
      print(mac_info.ip_addr.m1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ip_addr.m1 = testData1s;
      print(mac_info.ip_addr.m1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ip_addr.m1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ip_addr.m1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ip_addr.m1 = testData2s;
      print(mac_info.ip_addr.m1);
      expect(mac_info.ip_addr.m1 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.m1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ip_addr.m1 = defalut;
      print(mac_info.ip_addr.m1);
      expect(mac_info.ip_addr.m1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.m1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00087_element_check_00064 **********\n\n");
    });

    test('00088_element_check_00065', () async {
      print("\n********** テスト実行：00088_element_check_00065 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ip_addr.m2;
      print(mac_info.ip_addr.m2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ip_addr.m2 = testData1s;
      print(mac_info.ip_addr.m2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ip_addr.m2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ip_addr.m2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ip_addr.m2 = testData2s;
      print(mac_info.ip_addr.m2);
      expect(mac_info.ip_addr.m2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.m2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ip_addr.m2 = defalut;
      print(mac_info.ip_addr.m2);
      expect(mac_info.ip_addr.m2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.m2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00088_element_check_00065 **********\n\n");
    });

    test('00089_element_check_00066', () async {
      print("\n********** テスト実行：00089_element_check_00066 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ip_addr.s1;
      print(mac_info.ip_addr.s1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ip_addr.s1 = testData1s;
      print(mac_info.ip_addr.s1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ip_addr.s1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ip_addr.s1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ip_addr.s1 = testData2s;
      print(mac_info.ip_addr.s1);
      expect(mac_info.ip_addr.s1 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.s1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ip_addr.s1 = defalut;
      print(mac_info.ip_addr.s1);
      expect(mac_info.ip_addr.s1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.s1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00089_element_check_00066 **********\n\n");
    });

    test('00090_element_check_00067', () async {
      print("\n********** テスト実行：00090_element_check_00067 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ip_addr.s2;
      print(mac_info.ip_addr.s2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ip_addr.s2 = testData1s;
      print(mac_info.ip_addr.s2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ip_addr.s2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ip_addr.s2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ip_addr.s2 = testData2s;
      print(mac_info.ip_addr.s2);
      expect(mac_info.ip_addr.s2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.s2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ip_addr.s2 = defalut;
      print(mac_info.ip_addr.s2);
      expect(mac_info.ip_addr.s2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.s2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00090_element_check_00067 **********\n\n");
    });

    test('00091_element_check_00068', () async {
      print("\n********** テスト実行：00091_element_check_00068 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ip_addr.s3;
      print(mac_info.ip_addr.s3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ip_addr.s3 = testData1s;
      print(mac_info.ip_addr.s3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ip_addr.s3 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ip_addr.s3 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ip_addr.s3 = testData2s;
      print(mac_info.ip_addr.s3);
      expect(mac_info.ip_addr.s3 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.s3 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ip_addr.s3 = defalut;
      print(mac_info.ip_addr.s3);
      expect(mac_info.ip_addr.s3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ip_addr.s3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00091_element_check_00068 **********\n\n");
    });

    test('00092_element_check_00069', () async {
      print("\n********** テスト実行：00092_element_check_00069 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_no.m1;
      print(mac_info.mac_no.m1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_no.m1 = testData1;
      print(mac_info.mac_no.m1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_no.m1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_no.m1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_no.m1 = testData2;
      print(mac_info.mac_no.m1);
      expect(mac_info.mac_no.m1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.m1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_no.m1 = defalut;
      print(mac_info.mac_no.m1);
      expect(mac_info.mac_no.m1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.m1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00092_element_check_00069 **********\n\n");
    });

    test('00093_element_check_00070', () async {
      print("\n********** テスト実行：00093_element_check_00070 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_no.m2;
      print(mac_info.mac_no.m2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_no.m2 = testData1;
      print(mac_info.mac_no.m2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_no.m2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_no.m2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_no.m2 = testData2;
      print(mac_info.mac_no.m2);
      expect(mac_info.mac_no.m2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.m2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_no.m2 = defalut;
      print(mac_info.mac_no.m2);
      expect(mac_info.mac_no.m2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.m2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00093_element_check_00070 **********\n\n");
    });

    test('00094_element_check_00071', () async {
      print("\n********** テスト実行：00094_element_check_00071 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_no.s1;
      print(mac_info.mac_no.s1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_no.s1 = testData1;
      print(mac_info.mac_no.s1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_no.s1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_no.s1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_no.s1 = testData2;
      print(mac_info.mac_no.s1);
      expect(mac_info.mac_no.s1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.s1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_no.s1 = defalut;
      print(mac_info.mac_no.s1);
      expect(mac_info.mac_no.s1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.s1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00094_element_check_00071 **********\n\n");
    });

    test('00095_element_check_00072', () async {
      print("\n********** テスト実行：00095_element_check_00072 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_no.s2;
      print(mac_info.mac_no.s2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_no.s2 = testData1;
      print(mac_info.mac_no.s2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_no.s2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_no.s2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_no.s2 = testData2;
      print(mac_info.mac_no.s2);
      expect(mac_info.mac_no.s2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.s2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_no.s2 = defalut;
      print(mac_info.mac_no.s2);
      expect(mac_info.mac_no.s2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.s2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00095_element_check_00072 **********\n\n");
    });

    test('00096_element_check_00073', () async {
      print("\n********** テスト実行：00096_element_check_00073 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mac_no.s3;
      print(mac_info.mac_no.s3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mac_no.s3 = testData1;
      print(mac_info.mac_no.s3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mac_no.s3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mac_no.s3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mac_no.s3 = testData2;
      print(mac_info.mac_no.s3);
      expect(mac_info.mac_no.s3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.s3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mac_no.s3 = defalut;
      print(mac_info.mac_no.s3);
      expect(mac_info.mac_no.s3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mac_no.s3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00096_element_check_00073 **********\n\n");
    });

    test('00097_element_check_00074', () async {
      print("\n********** テスト実行：00097_element_check_00074 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.jnl_bkup.jnl_bkup_knd;
      print(mac_info.jnl_bkup.jnl_bkup_knd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.jnl_bkup.jnl_bkup_knd = testData1;
      print(mac_info.jnl_bkup.jnl_bkup_knd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.jnl_bkup.jnl_bkup_knd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.jnl_bkup.jnl_bkup_knd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.jnl_bkup.jnl_bkup_knd = testData2;
      print(mac_info.jnl_bkup.jnl_bkup_knd);
      expect(mac_info.jnl_bkup.jnl_bkup_knd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.jnl_bkup.jnl_bkup_knd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.jnl_bkup.jnl_bkup_knd = defalut;
      print(mac_info.jnl_bkup.jnl_bkup_knd);
      expect(mac_info.jnl_bkup.jnl_bkup_knd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.jnl_bkup.jnl_bkup_knd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00097_element_check_00074 **********\n\n");
    });

    test('00098_element_check_00075', () async {
      print("\n********** テスト実行：00098_element_check_00075 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.jnl_bkup.jnl_bkup_week;
      print(mac_info.jnl_bkup.jnl_bkup_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.jnl_bkup.jnl_bkup_week = testData1;
      print(mac_info.jnl_bkup.jnl_bkup_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.jnl_bkup.jnl_bkup_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.jnl_bkup.jnl_bkup_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.jnl_bkup.jnl_bkup_week = testData2;
      print(mac_info.jnl_bkup.jnl_bkup_week);
      expect(mac_info.jnl_bkup.jnl_bkup_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.jnl_bkup.jnl_bkup_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.jnl_bkup.jnl_bkup_week = defalut;
      print(mac_info.jnl_bkup.jnl_bkup_week);
      expect(mac_info.jnl_bkup.jnl_bkup_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.jnl_bkup.jnl_bkup_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00098_element_check_00075 **********\n\n");
    });

    test('00099_element_check_00076', () async {
      print("\n********** テスト実行：00099_element_check_00076 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.jnl_bkup.jnl_bkup_date;
      print(mac_info.jnl_bkup.jnl_bkup_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.jnl_bkup.jnl_bkup_date = testData1;
      print(mac_info.jnl_bkup.jnl_bkup_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.jnl_bkup.jnl_bkup_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.jnl_bkup.jnl_bkup_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.jnl_bkup.jnl_bkup_date = testData2;
      print(mac_info.jnl_bkup.jnl_bkup_date);
      expect(mac_info.jnl_bkup.jnl_bkup_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.jnl_bkup.jnl_bkup_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.jnl_bkup.jnl_bkup_date = defalut;
      print(mac_info.jnl_bkup.jnl_bkup_date);
      expect(mac_info.jnl_bkup.jnl_bkup_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.jnl_bkup.jnl_bkup_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00099_element_check_00076 **********\n\n");
    });

    test('00100_element_check_00077', () async {
      print("\n********** テスト実行：00100_element_check_00077 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.data_bkup.data_bkup_knd;
      print(mac_info.data_bkup.data_bkup_knd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.data_bkup.data_bkup_knd = testData1;
      print(mac_info.data_bkup.data_bkup_knd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.data_bkup.data_bkup_knd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.data_bkup.data_bkup_knd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.data_bkup.data_bkup_knd = testData2;
      print(mac_info.data_bkup.data_bkup_knd);
      expect(mac_info.data_bkup.data_bkup_knd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_knd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.data_bkup.data_bkup_knd = defalut;
      print(mac_info.data_bkup.data_bkup_knd);
      expect(mac_info.data_bkup.data_bkup_knd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_knd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00100_element_check_00077 **********\n\n");
    });

    test('00101_element_check_00078', () async {
      print("\n********** テスト実行：00101_element_check_00078 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.data_bkup.data_bkup_week;
      print(mac_info.data_bkup.data_bkup_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.data_bkup.data_bkup_week = testData1;
      print(mac_info.data_bkup.data_bkup_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.data_bkup.data_bkup_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.data_bkup.data_bkup_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.data_bkup.data_bkup_week = testData2;
      print(mac_info.data_bkup.data_bkup_week);
      expect(mac_info.data_bkup.data_bkup_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.data_bkup.data_bkup_week = defalut;
      print(mac_info.data_bkup.data_bkup_week);
      expect(mac_info.data_bkup.data_bkup_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00101_element_check_00078 **********\n\n");
    });

    test('00102_element_check_00079', () async {
      print("\n********** テスト実行：00102_element_check_00079 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.data_bkup.data_bkup_date;
      print(mac_info.data_bkup.data_bkup_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.data_bkup.data_bkup_date = testData1;
      print(mac_info.data_bkup.data_bkup_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.data_bkup.data_bkup_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.data_bkup.data_bkup_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.data_bkup.data_bkup_date = testData2;
      print(mac_info.data_bkup.data_bkup_date);
      expect(mac_info.data_bkup.data_bkup_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.data_bkup.data_bkup_date = defalut;
      print(mac_info.data_bkup.data_bkup_date);
      expect(mac_info.data_bkup.data_bkup_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00102_element_check_00079 **********\n\n");
    });

    test('00103_element_check_00080', () async {
      print("\n********** テスト実行：00103_element_check_00080 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.data_bkup.data_bkup_generation;
      print(mac_info.data_bkup.data_bkup_generation);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.data_bkup.data_bkup_generation = testData1;
      print(mac_info.data_bkup.data_bkup_generation);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.data_bkup.data_bkup_generation == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.data_bkup.data_bkup_generation == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.data_bkup.data_bkup_generation = testData2;
      print(mac_info.data_bkup.data_bkup_generation);
      expect(mac_info.data_bkup.data_bkup_generation == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_generation == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.data_bkup.data_bkup_generation = defalut;
      print(mac_info.data_bkup.data_bkup_generation);
      expect(mac_info.data_bkup.data_bkup_generation == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_generation == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00103_element_check_00080 **********\n\n");
    });

    test('00104_element_check_00081', () async {
      print("\n********** テスト実行：00104_element_check_00081 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.data_bkup.data_bkup_generation2;
      print(mac_info.data_bkup.data_bkup_generation2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.data_bkup.data_bkup_generation2 = testData1;
      print(mac_info.data_bkup.data_bkup_generation2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.data_bkup.data_bkup_generation2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.data_bkup.data_bkup_generation2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.data_bkup.data_bkup_generation2 = testData2;
      print(mac_info.data_bkup.data_bkup_generation2);
      expect(mac_info.data_bkup.data_bkup_generation2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_generation2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.data_bkup.data_bkup_generation2 = defalut;
      print(mac_info.data_bkup.data_bkup_generation2);
      expect(mac_info.data_bkup.data_bkup_generation2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.data_bkup.data_bkup_generation2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00104_element_check_00081 **********\n\n");
    });

    test('00105_element_check_00082', () async {
      print("\n********** テスト実行：00105_element_check_00082 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.Bakup;
      print(mac_info.csv_bkup.Bakup);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.Bakup = testData1;
      print(mac_info.csv_bkup.Bakup);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.Bakup == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.Bakup == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.Bakup = testData2;
      print(mac_info.csv_bkup.Bakup);
      expect(mac_info.csv_bkup.Bakup == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.Bakup == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.Bakup = defalut;
      print(mac_info.csv_bkup.Bakup);
      expect(mac_info.csv_bkup.Bakup == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.Bakup == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00105_element_check_00082 **********\n\n");
    });

    test('00106_element_check_00083', () async {
      print("\n********** テスト実行：00106_element_check_00083 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.data_knd;
      print(mac_info.csv_bkup.data_knd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.data_knd = testData1;
      print(mac_info.csv_bkup.data_knd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.data_knd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.data_knd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.data_knd = testData2;
      print(mac_info.csv_bkup.data_knd);
      expect(mac_info.csv_bkup.data_knd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.data_knd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.data_knd = defalut;
      print(mac_info.csv_bkup.data_knd);
      expect(mac_info.csv_bkup.data_knd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.data_knd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00106_element_check_00083 **********\n\n");
    });

    test('00107_element_check_00084', () async {
      print("\n********** テスト実行：00107_element_check_00084 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.timeout;
      print(mac_info.csv_bkup.timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.timeout = testData1;
      print(mac_info.csv_bkup.timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.timeout = testData2;
      print(mac_info.csv_bkup.timeout);
      expect(mac_info.csv_bkup.timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.timeout = defalut;
      print(mac_info.csv_bkup.timeout);
      expect(mac_info.csv_bkup.timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00107_element_check_00084 **********\n\n");
    });

    test('00108_element_check_00085', () async {
      print("\n********** テスト実行：00108_element_check_00085 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_filename;
      print(mac_info.csv_bkup.css_filename);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_filename = testData1;
      print(mac_info.csv_bkup.css_filename);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_filename == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_filename == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_filename = testData2;
      print(mac_info.csv_bkup.css_filename);
      expect(mac_info.csv_bkup.css_filename == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_filename == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_filename = defalut;
      print(mac_info.csv_bkup.css_filename);
      expect(mac_info.csv_bkup.css_filename == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_filename == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00108_element_check_00085 **********\n\n");
    });

    test('00109_element_check_00086', () async {
      print("\n********** テスト実行：00109_element_check_00086 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_retry_count;
      print(mac_info.csv_bkup.css_retry_count);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_retry_count = testData1;
      print(mac_info.csv_bkup.css_retry_count);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_retry_count == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_retry_count == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_retry_count = testData2;
      print(mac_info.csv_bkup.css_retry_count);
      expect(mac_info.csv_bkup.css_retry_count == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_retry_count == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_retry_count = defalut;
      print(mac_info.csv_bkup.css_retry_count);
      expect(mac_info.csv_bkup.css_retry_count == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_retry_count == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00109_element_check_00086 **********\n\n");
    });

    test('00110_element_check_00087', () async {
      print("\n********** テスト実行：00110_element_check_00087 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_retry_time;
      print(mac_info.csv_bkup.css_retry_time);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_retry_time = testData1;
      print(mac_info.csv_bkup.css_retry_time);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_retry_time == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_retry_time == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_retry_time = testData2;
      print(mac_info.csv_bkup.css_retry_time);
      expect(mac_info.csv_bkup.css_retry_time == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_retry_time == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_retry_time = defalut;
      print(mac_info.csv_bkup.css_retry_time);
      expect(mac_info.csv_bkup.css_retry_time == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_retry_time == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00110_element_check_00087 **********\n\n");
    });

    test('00111_element_check_00088', () async {
      print("\n********** テスト実行：00111_element_check_00088 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.time_zone;
      print(mac_info.csv_bkup.time_zone);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.time_zone = testData1;
      print(mac_info.csv_bkup.time_zone);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.time_zone == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.time_zone == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.time_zone = testData2;
      print(mac_info.csv_bkup.time_zone);
      expect(mac_info.csv_bkup.time_zone == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.time_zone == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.time_zone = defalut;
      print(mac_info.csv_bkup.time_zone);
      expect(mac_info.csv_bkup.time_zone == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.time_zone == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00111_element_check_00088 **********\n\n");
    });

    test('00112_element_check_00089', () async {
      print("\n********** テスト実行：00112_element_check_00089 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.name_add;
      print(mac_info.csv_bkup.name_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.name_add = testData1;
      print(mac_info.csv_bkup.name_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.name_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.name_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.name_add = testData2;
      print(mac_info.csv_bkup.name_add);
      expect(mac_info.csv_bkup.name_add == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.name_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.name_add = defalut;
      print(mac_info.csv_bkup.name_add);
      expect(mac_info.csv_bkup.name_add == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.name_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00112_element_check_00089 **********\n\n");
    });

    test('00113_element_check_00090', () async {
      print("\n********** テスト実行：00113_element_check_00090 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.lgyoumu;
      print(mac_info.csv_bkup.lgyoumu);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.lgyoumu = testData1;
      print(mac_info.csv_bkup.lgyoumu);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.lgyoumu == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.lgyoumu == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.lgyoumu = testData2;
      print(mac_info.csv_bkup.lgyoumu);
      expect(mac_info.csv_bkup.lgyoumu == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.lgyoumu == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.lgyoumu = defalut;
      print(mac_info.csv_bkup.lgyoumu);
      expect(mac_info.csv_bkup.lgyoumu == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.lgyoumu == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00113_element_check_00090 **********\n\n");
    });

    test('00114_element_check_00091', () async {
      print("\n********** テスト実行：00114_element_check_00091 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.ext_digit;
      print(mac_info.csv_bkup.ext_digit);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.ext_digit = testData1;
      print(mac_info.csv_bkup.ext_digit);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.ext_digit == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.ext_digit == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.ext_digit = testData2;
      print(mac_info.csv_bkup.ext_digit);
      expect(mac_info.csv_bkup.ext_digit == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.ext_digit == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.ext_digit = defalut;
      print(mac_info.csv_bkup.ext_digit);
      expect(mac_info.csv_bkup.ext_digit == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.ext_digit == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00114_element_check_00091 **********\n\n");
    });

    test('00115_element_check_00092', () async {
      print("\n********** テスト実行：00115_element_check_00092 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.pasv;
      print(mac_info.csv_bkup.pasv);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.pasv = testData1;
      print(mac_info.csv_bkup.pasv);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.pasv == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.pasv == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.pasv = testData2;
      print(mac_info.csv_bkup.pasv);
      expect(mac_info.csv_bkup.pasv == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.pasv == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.pasv = defalut;
      print(mac_info.csv_bkup.pasv);
      expect(mac_info.csv_bkup.pasv == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.pasv == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00115_element_check_00092 **********\n\n");
    });

    test('00116_element_check_00093', () async {
      print("\n********** テスト実行：00116_element_check_00093 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.lgyoumu_full;
      print(mac_info.csv_bkup.lgyoumu_full);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.lgyoumu_full = testData1;
      print(mac_info.csv_bkup.lgyoumu_full);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.lgyoumu_full == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.lgyoumu_full == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.lgyoumu_full = testData2;
      print(mac_info.csv_bkup.lgyoumu_full);
      expect(mac_info.csv_bkup.lgyoumu_full == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.lgyoumu_full == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.lgyoumu_full = defalut;
      print(mac_info.csv_bkup.lgyoumu_full);
      expect(mac_info.csv_bkup.lgyoumu_full == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.lgyoumu_full == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00116_element_check_00093 **********\n\n");
    });

    test('00117_element_check_00094', () async {
      print("\n********** テスト実行：00117_element_check_00094 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.netdoa_mbr;
      print(mac_info.csv_bkup.netdoa_mbr);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.netdoa_mbr = testData1;
      print(mac_info.csv_bkup.netdoa_mbr);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.netdoa_mbr == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.netdoa_mbr == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.netdoa_mbr = testData2;
      print(mac_info.csv_bkup.netdoa_mbr);
      expect(mac_info.csv_bkup.netdoa_mbr == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.netdoa_mbr == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.netdoa_mbr = defalut;
      print(mac_info.csv_bkup.netdoa_mbr);
      expect(mac_info.csv_bkup.netdoa_mbr == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.netdoa_mbr == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00117_element_check_00094 **********\n\n");
    });

    test('00118_element_check_00095', () async {
      print("\n********** テスト実行：00118_element_check_00095 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_fixed_length;
      print(mac_info.csv_bkup.css_fixed_length);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_fixed_length = testData1;
      print(mac_info.csv_bkup.css_fixed_length);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_fixed_length == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_fixed_length == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_fixed_length = testData2;
      print(mac_info.csv_bkup.css_fixed_length);
      expect(mac_info.csv_bkup.css_fixed_length == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_fixed_length == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_fixed_length = defalut;
      print(mac_info.csv_bkup.css_fixed_length);
      expect(mac_info.csv_bkup.css_fixed_length == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_fixed_length == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00118_element_check_00095 **********\n\n");
    });

    test('00119_element_check_00096', () async {
      print("\n********** テスト実行：00119_element_check_00096 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_date_file;
      print(mac_info.csv_bkup.css_date_file);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_date_file = testData1;
      print(mac_info.csv_bkup.css_date_file);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_date_file == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_date_file == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_date_file = testData2;
      print(mac_info.csv_bkup.css_date_file);
      expect(mac_info.csv_bkup.css_date_file == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_date_file == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_date_file = defalut;
      print(mac_info.csv_bkup.css_date_file);
      expect(mac_info.csv_bkup.css_date_file == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_date_file == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00119_element_check_00096 **********\n\n");
    });

    test('00120_element_check_00097', () async {
      print("\n********** テスト実行：00120_element_check_00097 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.netdoa_comp_ej;
      print(mac_info.csv_bkup.netdoa_comp_ej);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.netdoa_comp_ej = testData1;
      print(mac_info.csv_bkup.netdoa_comp_ej);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.netdoa_comp_ej == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.netdoa_comp_ej == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.netdoa_comp_ej = testData2;
      print(mac_info.csv_bkup.netdoa_comp_ej);
      expect(mac_info.csv_bkup.netdoa_comp_ej == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.netdoa_comp_ej == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.netdoa_comp_ej = defalut;
      print(mac_info.csv_bkup.netdoa_comp_ej);
      expect(mac_info.csv_bkup.netdoa_comp_ej == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.netdoa_comp_ej == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00120_element_check_00097 **********\n\n");
    });

    test('00121_element_check_00098', () async {
      print("\n********** テスト実行：00121_element_check_00098 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_usb_bkup;
      print(mac_info.csv_bkup.css_usb_bkup);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_usb_bkup = testData1;
      print(mac_info.csv_bkup.css_usb_bkup);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_usb_bkup == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_usb_bkup == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_usb_bkup = testData2;
      print(mac_info.csv_bkup.css_usb_bkup);
      expect(mac_info.csv_bkup.css_usb_bkup == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_usb_bkup == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_usb_bkup = defalut;
      print(mac_info.csv_bkup.css_usb_bkup);
      expect(mac_info.csv_bkup.css_usb_bkup == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_usb_bkup == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00121_element_check_00098 **********\n\n");
    });

    test('00122_element_check_00099', () async {
      print("\n********** テスト実行：00122_element_check_00099 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_ment_tran;
      print(mac_info.csv_bkup.css_ment_tran);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_ment_tran = testData1;
      print(mac_info.csv_bkup.css_ment_tran);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_ment_tran == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_ment_tran == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_ment_tran = testData2;
      print(mac_info.csv_bkup.css_ment_tran);
      expect(mac_info.csv_bkup.css_ment_tran == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_ment_tran == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_ment_tran = defalut;
      print(mac_info.csv_bkup.css_ment_tran);
      expect(mac_info.csv_bkup.css_ment_tran == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_ment_tran == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00122_element_check_00099 **********\n\n");
    });

    test('00123_element_check_00100', () async {
      print("\n********** テスト実行：00123_element_check_00100 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_proxy_type_add;
      print(mac_info.csv_bkup.css_proxy_type_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_proxy_type_add = testData1;
      print(mac_info.csv_bkup.css_proxy_type_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_proxy_type_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_proxy_type_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_proxy_type_add = testData2;
      print(mac_info.csv_bkup.css_proxy_type_add);
      expect(mac_info.csv_bkup.css_proxy_type_add == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_proxy_type_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_proxy_type_add = defalut;
      print(mac_info.csv_bkup.css_proxy_type_add);
      expect(mac_info.csv_bkup.css_proxy_type_add == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_proxy_type_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00123_element_check_00100 **********\n\n");
    });

    test('00124_element_check_00101', () async {
      print("\n********** テスト実行：00124_element_check_00101 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.ping_check;
      print(mac_info.csv_bkup.ping_check);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.ping_check = testData1;
      print(mac_info.csv_bkup.ping_check);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.ping_check == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.ping_check == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.ping_check = testData2;
      print(mac_info.csv_bkup.ping_check);
      expect(mac_info.csv_bkup.ping_check == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.ping_check == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.ping_check = defalut;
      print(mac_info.csv_bkup.ping_check);
      expect(mac_info.csv_bkup.ping_check == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.ping_check == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00124_element_check_00101 **********\n\n");
    });

    test('00125_element_check_00102', () async {
      print("\n********** テスト実行：00125_element_check_00102 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.text_resend;
      print(mac_info.csv_bkup.text_resend);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.text_resend = testData1;
      print(mac_info.csv_bkup.text_resend);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.text_resend == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.text_resend == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.text_resend = testData2;
      print(mac_info.csv_bkup.text_resend);
      expect(mac_info.csv_bkup.text_resend == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.text_resend == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.text_resend = defalut;
      print(mac_info.csv_bkup.text_resend);
      expect(mac_info.csv_bkup.text_resend == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.text_resend == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00125_element_check_00102 **********\n\n");
    });

    test('00126_element_check_00103', () async {
      print("\n********** テスト実行：00126_element_check_00103 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.css_igyoumu_make;
      print(mac_info.csv_bkup.css_igyoumu_make);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.css_igyoumu_make = testData1;
      print(mac_info.csv_bkup.css_igyoumu_make);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.css_igyoumu_make == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.css_igyoumu_make == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.css_igyoumu_make = testData2;
      print(mac_info.csv_bkup.css_igyoumu_make);
      expect(mac_info.csv_bkup.css_igyoumu_make == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_igyoumu_make == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.css_igyoumu_make = defalut;
      print(mac_info.csv_bkup.css_igyoumu_make);
      expect(mac_info.csv_bkup.css_igyoumu_make == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.css_igyoumu_make == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00126_element_check_00103 **********\n\n");
    });

    test('00127_element_check_00104', () async {
      print("\n********** テスト実行：00127_element_check_00104 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.netdoa_opetime_send;
      print(mac_info.csv_bkup.netdoa_opetime_send);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.netdoa_opetime_send = testData1;
      print(mac_info.csv_bkup.netdoa_opetime_send);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.netdoa_opetime_send == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.netdoa_opetime_send == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.netdoa_opetime_send = testData2;
      print(mac_info.csv_bkup.netdoa_opetime_send);
      expect(mac_info.csv_bkup.netdoa_opetime_send == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.netdoa_opetime_send == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.netdoa_opetime_send = defalut;
      print(mac_info.csv_bkup.netdoa_opetime_send);
      expect(mac_info.csv_bkup.netdoa_opetime_send == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.netdoa_opetime_send == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00127_element_check_00104 **********\n\n");
    });

    test('00128_element_check_00105', () async {
      print("\n********** テスト実行：00128_element_check_00105 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_bkup.nttb_item_cd_typ;
      print(mac_info.csv_bkup.nttb_item_cd_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_bkup.nttb_item_cd_typ = testData1;
      print(mac_info.csv_bkup.nttb_item_cd_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_bkup.nttb_item_cd_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_bkup.nttb_item_cd_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_bkup.nttb_item_cd_typ = testData2;
      print(mac_info.csv_bkup.nttb_item_cd_typ);
      expect(mac_info.csv_bkup.nttb_item_cd_typ == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.nttb_item_cd_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_bkup.nttb_item_cd_typ = defalut;
      print(mac_info.csv_bkup.nttb_item_cd_typ);
      expect(mac_info.csv_bkup.nttb_item_cd_typ == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_bkup.nttb_item_cd_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00128_element_check_00105 **********\n\n");
    });

    test('00129_element_check_00106', () async {
      print("\n********** テスト実行：00129_element_check_00106 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_deal;
      print(mac_info.csv_term.reg_mly_deal);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_deal = testData1;
      print(mac_info.csv_term.reg_mly_deal);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_deal == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_deal == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_deal = testData2;
      print(mac_info.csv_term.reg_mly_deal);
      expect(mac_info.csv_term.reg_mly_deal == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_deal == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_deal = defalut;
      print(mac_info.csv_term.reg_mly_deal);
      expect(mac_info.csv_term.reg_mly_deal == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_deal == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00129_element_check_00106 **********\n\n");
    });

    test('00130_element_check_00107', () async {
      print("\n********** テスト実行：00130_element_check_00107 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlydeal_week;
      print(mac_info.csv_term.regmlydeal_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlydeal_week = testData1;
      print(mac_info.csv_term.regmlydeal_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlydeal_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlydeal_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlydeal_week = testData2;
      print(mac_info.csv_term.regmlydeal_week);
      expect(mac_info.csv_term.regmlydeal_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlydeal_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlydeal_week = defalut;
      print(mac_info.csv_term.regmlydeal_week);
      expect(mac_info.csv_term.regmlydeal_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlydeal_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00130_element_check_00107 **********\n\n");
    });

    test('00131_element_check_00108', () async {
      print("\n********** テスト実行：00131_element_check_00108 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlydeal_day;
      print(mac_info.csv_term.regmlydeal_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlydeal_day = testData1;
      print(mac_info.csv_term.regmlydeal_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlydeal_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlydeal_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlydeal_day = testData2;
      print(mac_info.csv_term.regmlydeal_day);
      expect(mac_info.csv_term.regmlydeal_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlydeal_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlydeal_day = defalut;
      print(mac_info.csv_term.regmlydeal_day);
      expect(mac_info.csv_term.regmlydeal_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlydeal_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00131_element_check_00108 **********\n\n");
    });

    test('00132_element_check_00109', () async {
      print("\n********** テスト実行：00132_element_check_00109 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_mdl;
      print(mac_info.csv_term.reg_mly_mdl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_mdl = testData1;
      print(mac_info.csv_term.reg_mly_mdl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_mdl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_mdl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_mdl = testData2;
      print(mac_info.csv_term.reg_mly_mdl);
      expect(mac_info.csv_term.reg_mly_mdl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_mdl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_mdl = defalut;
      print(mac_info.csv_term.reg_mly_mdl);
      expect(mac_info.csv_term.reg_mly_mdl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_mdl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00132_element_check_00109 **********\n\n");
    });

    test('00133_element_check_00110', () async {
      print("\n********** テスト実行：00133_element_check_00110 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlymdl_week;
      print(mac_info.csv_term.regmlymdl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlymdl_week = testData1;
      print(mac_info.csv_term.regmlymdl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlymdl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlymdl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlymdl_week = testData2;
      print(mac_info.csv_term.regmlymdl_week);
      expect(mac_info.csv_term.regmlymdl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlymdl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlymdl_week = defalut;
      print(mac_info.csv_term.regmlymdl_week);
      expect(mac_info.csv_term.regmlymdl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlymdl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00133_element_check_00110 **********\n\n");
    });

    test('00134_element_check_00111', () async {
      print("\n********** テスト実行：00134_element_check_00111 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlymdl_day;
      print(mac_info.csv_term.regmlymdl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlymdl_day = testData1;
      print(mac_info.csv_term.regmlymdl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlymdl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlymdl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlymdl_day = testData2;
      print(mac_info.csv_term.regmlymdl_day);
      expect(mac_info.csv_term.regmlymdl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlymdl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlymdl_day = defalut;
      print(mac_info.csv_term.regmlymdl_day);
      expect(mac_info.csv_term.regmlymdl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlymdl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00134_element_check_00111 **********\n\n");
    });

    test('00135_element_check_00112', () async {
      print("\n********** テスト実行：00135_element_check_00112 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_sml;
      print(mac_info.csv_term.reg_mly_sml);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_sml = testData1;
      print(mac_info.csv_term.reg_mly_sml);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_sml == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_sml == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_sml = testData2;
      print(mac_info.csv_term.reg_mly_sml);
      expect(mac_info.csv_term.reg_mly_sml == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_sml == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_sml = defalut;
      print(mac_info.csv_term.reg_mly_sml);
      expect(mac_info.csv_term.reg_mly_sml == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_sml == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00135_element_check_00112 **********\n\n");
    });

    test('00136_element_check_00113', () async {
      print("\n********** テスト実行：00136_element_check_00113 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlysml_week;
      print(mac_info.csv_term.regmlysml_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlysml_week = testData1;
      print(mac_info.csv_term.regmlysml_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlysml_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlysml_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlysml_week = testData2;
      print(mac_info.csv_term.regmlysml_week);
      expect(mac_info.csv_term.regmlysml_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysml_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlysml_week = defalut;
      print(mac_info.csv_term.regmlysml_week);
      expect(mac_info.csv_term.regmlysml_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysml_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00136_element_check_00113 **********\n\n");
    });

    test('00137_element_check_00114', () async {
      print("\n********** テスト実行：00137_element_check_00114 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlysml_day;
      print(mac_info.csv_term.regmlysml_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlysml_day = testData1;
      print(mac_info.csv_term.regmlysml_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlysml_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlysml_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlysml_day = testData2;
      print(mac_info.csv_term.regmlysml_day);
      expect(mac_info.csv_term.regmlysml_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysml_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlysml_day = defalut;
      print(mac_info.csv_term.regmlysml_day);
      expect(mac_info.csv_term.regmlysml_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysml_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00137_element_check_00114 **********\n\n");
    });

    test('00138_element_check_00115', () async {
      print("\n********** テスト実行：00138_element_check_00115 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_plu;
      print(mac_info.csv_term.reg_mly_plu);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_plu = testData1;
      print(mac_info.csv_term.reg_mly_plu);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_plu == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_plu == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_plu = testData2;
      print(mac_info.csv_term.reg_mly_plu);
      expect(mac_info.csv_term.reg_mly_plu == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_plu == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_plu = defalut;
      print(mac_info.csv_term.reg_mly_plu);
      expect(mac_info.csv_term.reg_mly_plu == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_plu == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00138_element_check_00115 **********\n\n");
    });

    test('00139_element_check_00116', () async {
      print("\n********** テスト実行：00139_element_check_00116 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyplu_week;
      print(mac_info.csv_term.regmlyplu_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyplu_week = testData1;
      print(mac_info.csv_term.regmlyplu_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyplu_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyplu_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyplu_week = testData2;
      print(mac_info.csv_term.regmlyplu_week);
      expect(mac_info.csv_term.regmlyplu_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyplu_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyplu_week = defalut;
      print(mac_info.csv_term.regmlyplu_week);
      expect(mac_info.csv_term.regmlyplu_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyplu_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00139_element_check_00116 **********\n\n");
    });

    test('00140_element_check_00117', () async {
      print("\n********** テスト実行：00140_element_check_00117 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyplu_day;
      print(mac_info.csv_term.regmlyplu_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyplu_day = testData1;
      print(mac_info.csv_term.regmlyplu_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyplu_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyplu_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyplu_day = testData2;
      print(mac_info.csv_term.regmlyplu_day);
      expect(mac_info.csv_term.regmlyplu_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyplu_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyplu_day = defalut;
      print(mac_info.csv_term.regmlyplu_day);
      expect(mac_info.csv_term.regmlyplu_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyplu_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00140_element_check_00117 **********\n\n");
    });

    test('00141_element_check_00118', () async {
      print("\n********** テスト実行：00141_element_check_00118 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_cat;
      print(mac_info.csv_term.reg_mly_cat);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_cat = testData1;
      print(mac_info.csv_term.reg_mly_cat);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_cat == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_cat == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_cat = testData2;
      print(mac_info.csv_term.reg_mly_cat);
      expect(mac_info.csv_term.reg_mly_cat == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_cat == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_cat = defalut;
      print(mac_info.csv_term.reg_mly_cat);
      expect(mac_info.csv_term.reg_mly_cat == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_cat == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00141_element_check_00118 **********\n\n");
    });

    test('00142_element_check_00119', () async {
      print("\n********** テスト実行：00142_element_check_00119 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlycat_week;
      print(mac_info.csv_term.regmlycat_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlycat_week = testData1;
      print(mac_info.csv_term.regmlycat_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlycat_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlycat_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlycat_week = testData2;
      print(mac_info.csv_term.regmlycat_week);
      expect(mac_info.csv_term.regmlycat_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycat_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlycat_week = defalut;
      print(mac_info.csv_term.regmlycat_week);
      expect(mac_info.csv_term.regmlycat_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycat_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00142_element_check_00119 **********\n\n");
    });

    test('00143_element_check_00120', () async {
      print("\n********** テスト実行：00143_element_check_00120 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlycat_day;
      print(mac_info.csv_term.regmlycat_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlycat_day = testData1;
      print(mac_info.csv_term.regmlycat_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlycat_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlycat_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlycat_day = testData2;
      print(mac_info.csv_term.regmlycat_day);
      expect(mac_info.csv_term.regmlycat_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycat_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlycat_day = defalut;
      print(mac_info.csv_term.regmlycat_day);
      expect(mac_info.csv_term.regmlycat_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycat_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00143_element_check_00120 **********\n\n");
    });

    test('00144_element_check_00121', () async {
      print("\n********** テスト実行：00144_element_check_00121 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_sch_brgn;
      print(mac_info.csv_term.reg_sch_brgn);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_sch_brgn = testData1;
      print(mac_info.csv_term.reg_sch_brgn);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_sch_brgn == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_sch_brgn == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_sch_brgn = testData2;
      print(mac_info.csv_term.reg_sch_brgn);
      expect(mac_info.csv_term.reg_sch_brgn == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_sch_brgn == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_sch_brgn = defalut;
      print(mac_info.csv_term.reg_sch_brgn);
      expect(mac_info.csv_term.reg_sch_brgn == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_sch_brgn == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00144_element_check_00121 **********\n\n");
    });

    test('00145_element_check_00122', () async {
      print("\n********** テスト実行：00145_element_check_00122 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regschbrgn_week;
      print(mac_info.csv_term.regschbrgn_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regschbrgn_week = testData1;
      print(mac_info.csv_term.regschbrgn_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regschbrgn_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regschbrgn_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regschbrgn_week = testData2;
      print(mac_info.csv_term.regschbrgn_week);
      expect(mac_info.csv_term.regschbrgn_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschbrgn_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regschbrgn_week = defalut;
      print(mac_info.csv_term.regschbrgn_week);
      expect(mac_info.csv_term.regschbrgn_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschbrgn_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00145_element_check_00122 **********\n\n");
    });

    test('00146_element_check_00123', () async {
      print("\n********** テスト実行：00146_element_check_00123 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regschbrgn_day;
      print(mac_info.csv_term.regschbrgn_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regschbrgn_day = testData1;
      print(mac_info.csv_term.regschbrgn_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regschbrgn_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regschbrgn_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regschbrgn_day = testData2;
      print(mac_info.csv_term.regschbrgn_day);
      expect(mac_info.csv_term.regschbrgn_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschbrgn_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regschbrgn_day = defalut;
      print(mac_info.csv_term.regschbrgn_day);
      expect(mac_info.csv_term.regschbrgn_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschbrgn_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00146_element_check_00123 **********\n\n");
    });

    test('00147_element_check_00124', () async {
      print("\n********** テスト実行：00147_element_check_00124 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_sch_mach;
      print(mac_info.csv_term.reg_sch_mach);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_sch_mach = testData1;
      print(mac_info.csv_term.reg_sch_mach);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_sch_mach == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_sch_mach == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_sch_mach = testData2;
      print(mac_info.csv_term.reg_sch_mach);
      expect(mac_info.csv_term.reg_sch_mach == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_sch_mach == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_sch_mach = defalut;
      print(mac_info.csv_term.reg_sch_mach);
      expect(mac_info.csv_term.reg_sch_mach == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_sch_mach == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00147_element_check_00124 **********\n\n");
    });

    test('00148_element_check_00125', () async {
      print("\n********** テスト実行：00148_element_check_00125 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regschmach_week;
      print(mac_info.csv_term.regschmach_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regschmach_week = testData1;
      print(mac_info.csv_term.regschmach_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regschmach_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regschmach_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regschmach_week = testData2;
      print(mac_info.csv_term.regschmach_week);
      expect(mac_info.csv_term.regschmach_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschmach_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regschmach_week = defalut;
      print(mac_info.csv_term.regschmach_week);
      expect(mac_info.csv_term.regschmach_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschmach_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00148_element_check_00125 **********\n\n");
    });

    test('00149_element_check_00126', () async {
      print("\n********** テスト実行：00149_element_check_00126 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regschmach_day;
      print(mac_info.csv_term.regschmach_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regschmach_day = testData1;
      print(mac_info.csv_term.regschmach_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regschmach_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regschmach_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regschmach_day = testData2;
      print(mac_info.csv_term.regschmach_day);
      expect(mac_info.csv_term.regschmach_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschmach_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regschmach_day = defalut;
      print(mac_info.csv_term.regschmach_day);
      expect(mac_info.csv_term.regschmach_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regschmach_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00149_element_check_00126 **********\n\n");
    });

    test('00150_element_check_00127', () async {
      print("\n********** テスト実行：00150_element_check_00127 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_cust;
      print(mac_info.csv_term.reg_mly_cust);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_cust = testData1;
      print(mac_info.csv_term.reg_mly_cust);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_cust == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_cust == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_cust = testData2;
      print(mac_info.csv_term.reg_mly_cust);
      expect(mac_info.csv_term.reg_mly_cust == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_cust == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_cust = defalut;
      print(mac_info.csv_term.reg_mly_cust);
      expect(mac_info.csv_term.reg_mly_cust == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_cust == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00150_element_check_00127 **********\n\n");
    });

    test('00151_element_check_00128', () async {
      print("\n********** テスト実行：00151_element_check_00128 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlycust_week;
      print(mac_info.csv_term.regmlycust_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlycust_week = testData1;
      print(mac_info.csv_term.regmlycust_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlycust_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlycust_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlycust_week = testData2;
      print(mac_info.csv_term.regmlycust_week);
      expect(mac_info.csv_term.regmlycust_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycust_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlycust_week = defalut;
      print(mac_info.csv_term.regmlycust_week);
      expect(mac_info.csv_term.regmlycust_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycust_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00151_element_check_00128 **********\n\n");
    });

    test('00152_element_check_00129', () async {
      print("\n********** テスト実行：00152_element_check_00129 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlycust_day;
      print(mac_info.csv_term.regmlycust_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlycust_day = testData1;
      print(mac_info.csv_term.regmlycust_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlycust_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlycust_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlycust_day = testData2;
      print(mac_info.csv_term.regmlycust_day);
      expect(mac_info.csv_term.regmlycust_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycust_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlycust_day = defalut;
      print(mac_info.csv_term.regmlycust_day);
      expect(mac_info.csv_term.regmlycust_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlycust_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00152_element_check_00129 **********\n\n");
    });

    test('00153_element_check_00130', () async {
      print("\n********** テスト実行：00153_element_check_00130 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_zone;
      print(mac_info.csv_term.reg_mly_zone);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_zone = testData1;
      print(mac_info.csv_term.reg_mly_zone);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_zone == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_zone == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_zone = testData2;
      print(mac_info.csv_term.reg_mly_zone);
      expect(mac_info.csv_term.reg_mly_zone == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_zone == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_zone = defalut;
      print(mac_info.csv_term.reg_mly_zone);
      expect(mac_info.csv_term.reg_mly_zone == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_zone == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00153_element_check_00130 **********\n\n");
    });

    test('00154_element_check_00131', () async {
      print("\n********** テスト実行：00154_element_check_00131 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyzone_week;
      print(mac_info.csv_term.regmlyzone_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyzone_week = testData1;
      print(mac_info.csv_term.regmlyzone_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyzone_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyzone_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyzone_week = testData2;
      print(mac_info.csv_term.regmlyzone_week);
      expect(mac_info.csv_term.regmlyzone_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyzone_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyzone_week = defalut;
      print(mac_info.csv_term.regmlyzone_week);
      expect(mac_info.csv_term.regmlyzone_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyzone_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00154_element_check_00131 **********\n\n");
    });

    test('00155_element_check_00132', () async {
      print("\n********** テスト実行：00155_element_check_00132 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyzone_day;
      print(mac_info.csv_term.regmlyzone_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyzone_day = testData1;
      print(mac_info.csv_term.regmlyzone_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyzone_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyzone_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyzone_day = testData2;
      print(mac_info.csv_term.regmlyzone_day);
      expect(mac_info.csv_term.regmlyzone_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyzone_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyzone_day = defalut;
      print(mac_info.csv_term.regmlyzone_day);
      expect(mac_info.csv_term.regmlyzone_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyzone_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00155_element_check_00132 **********\n\n");
    });

    test('00156_element_check_00133', () async {
      print("\n********** テスト実行：00156_element_check_00133 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_svs;
      print(mac_info.csv_term.reg_mly_svs);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_svs = testData1;
      print(mac_info.csv_term.reg_mly_svs);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_svs == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_svs == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_svs = testData2;
      print(mac_info.csv_term.reg_mly_svs);
      expect(mac_info.csv_term.reg_mly_svs == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_svs == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_svs = defalut;
      print(mac_info.csv_term.reg_mly_svs);
      expect(mac_info.csv_term.reg_mly_svs == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_svs == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00156_element_check_00133 **********\n\n");
    });

    test('00157_element_check_00134', () async {
      print("\n********** テスト実行：00157_element_check_00134 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlysvs_week;
      print(mac_info.csv_term.regmlysvs_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlysvs_week = testData1;
      print(mac_info.csv_term.regmlysvs_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlysvs_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlysvs_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlysvs_week = testData2;
      print(mac_info.csv_term.regmlysvs_week);
      expect(mac_info.csv_term.regmlysvs_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysvs_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlysvs_week = defalut;
      print(mac_info.csv_term.regmlysvs_week);
      expect(mac_info.csv_term.regmlysvs_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysvs_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00157_element_check_00134 **********\n\n");
    });

    test('00158_element_check_00135', () async {
      print("\n********** テスト実行：00158_element_check_00135 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlysvs_day;
      print(mac_info.csv_term.regmlysvs_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlysvs_day = testData1;
      print(mac_info.csv_term.regmlysvs_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlysvs_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlysvs_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlysvs_day = testData2;
      print(mac_info.csv_term.regmlysvs_day);
      expect(mac_info.csv_term.regmlysvs_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysvs_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlysvs_day = defalut;
      print(mac_info.csv_term.regmlysvs_day);
      expect(mac_info.csv_term.regmlysvs_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlysvs_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00158_element_check_00135 **********\n\n");
    });

    test('00159_element_check_00136', () async {
      print("\n********** テスト実行：00159_element_check_00136 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_fspplu;
      print(mac_info.csv_term.reg_mly_fspplu);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_fspplu = testData1;
      print(mac_info.csv_term.reg_mly_fspplu);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_fspplu == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_fspplu == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_fspplu = testData2;
      print(mac_info.csv_term.reg_mly_fspplu);
      expect(mac_info.csv_term.reg_mly_fspplu == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspplu == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_fspplu = defalut;
      print(mac_info.csv_term.reg_mly_fspplu);
      expect(mac_info.csv_term.reg_mly_fspplu == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspplu == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00159_element_check_00136 **********\n\n");
    });

    test('00160_element_check_00137', () async {
      print("\n********** テスト実行：00160_element_check_00137 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspplu_week;
      print(mac_info.csv_term.regmlyfspplu_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspplu_week = testData1;
      print(mac_info.csv_term.regmlyfspplu_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspplu_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspplu_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspplu_week = testData2;
      print(mac_info.csv_term.regmlyfspplu_week);
      expect(mac_info.csv_term.regmlyfspplu_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspplu_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspplu_week = defalut;
      print(mac_info.csv_term.regmlyfspplu_week);
      expect(mac_info.csv_term.regmlyfspplu_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspplu_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00160_element_check_00137 **********\n\n");
    });

    test('00161_element_check_00138', () async {
      print("\n********** テスト実行：00161_element_check_00138 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspplu_day;
      print(mac_info.csv_term.regmlyfspplu_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspplu_day = testData1;
      print(mac_info.csv_term.regmlyfspplu_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspplu_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspplu_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspplu_day = testData2;
      print(mac_info.csv_term.regmlyfspplu_day);
      expect(mac_info.csv_term.regmlyfspplu_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspplu_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspplu_day = defalut;
      print(mac_info.csv_term.regmlyfspplu_day);
      expect(mac_info.csv_term.regmlyfspplu_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspplu_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00161_element_check_00138 **********\n\n");
    });

    test('00162_element_check_00139', () async {
      print("\n********** テスト実行：00162_element_check_00139 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_fspsml;
      print(mac_info.csv_term.reg_mly_fspsml);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_fspsml = testData1;
      print(mac_info.csv_term.reg_mly_fspsml);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_fspsml == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_fspsml == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_fspsml = testData2;
      print(mac_info.csv_term.reg_mly_fspsml);
      expect(mac_info.csv_term.reg_mly_fspsml == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspsml == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_fspsml = defalut;
      print(mac_info.csv_term.reg_mly_fspsml);
      expect(mac_info.csv_term.reg_mly_fspsml == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspsml == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00162_element_check_00139 **********\n\n");
    });

    test('00163_element_check_00140', () async {
      print("\n********** テスト実行：00163_element_check_00140 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspsml_week;
      print(mac_info.csv_term.regmlyfspsml_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspsml_week = testData1;
      print(mac_info.csv_term.regmlyfspsml_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspsml_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspsml_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspsml_week = testData2;
      print(mac_info.csv_term.regmlyfspsml_week);
      expect(mac_info.csv_term.regmlyfspsml_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspsml_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspsml_week = defalut;
      print(mac_info.csv_term.regmlyfspsml_week);
      expect(mac_info.csv_term.regmlyfspsml_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspsml_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00163_element_check_00140 **********\n\n");
    });

    test('00164_element_check_00141', () async {
      print("\n********** テスト実行：00164_element_check_00141 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspsml_day;
      print(mac_info.csv_term.regmlyfspsml_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspsml_day = testData1;
      print(mac_info.csv_term.regmlyfspsml_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspsml_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspsml_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspsml_day = testData2;
      print(mac_info.csv_term.regmlyfspsml_day);
      expect(mac_info.csv_term.regmlyfspsml_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspsml_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspsml_day = defalut;
      print(mac_info.csv_term.regmlyfspsml_day);
      expect(mac_info.csv_term.regmlyfspsml_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspsml_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00164_element_check_00141 **********\n\n");
    });

    test('00165_element_check_00142', () async {
      print("\n********** テスト実行：00165_element_check_00142 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_fspmdl;
      print(mac_info.csv_term.reg_mly_fspmdl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_fspmdl = testData1;
      print(mac_info.csv_term.reg_mly_fspmdl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_fspmdl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_fspmdl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_fspmdl = testData2;
      print(mac_info.csv_term.reg_mly_fspmdl);
      expect(mac_info.csv_term.reg_mly_fspmdl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspmdl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_fspmdl = defalut;
      print(mac_info.csv_term.reg_mly_fspmdl);
      expect(mac_info.csv_term.reg_mly_fspmdl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspmdl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00165_element_check_00142 **********\n\n");
    });

    test('00166_element_check_00143', () async {
      print("\n********** テスト実行：00166_element_check_00143 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspmdl_week;
      print(mac_info.csv_term.regmlyfspmdl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspmdl_week = testData1;
      print(mac_info.csv_term.regmlyfspmdl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspmdl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspmdl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspmdl_week = testData2;
      print(mac_info.csv_term.regmlyfspmdl_week);
      expect(mac_info.csv_term.regmlyfspmdl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspmdl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspmdl_week = defalut;
      print(mac_info.csv_term.regmlyfspmdl_week);
      expect(mac_info.csv_term.regmlyfspmdl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspmdl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00166_element_check_00143 **********\n\n");
    });

    test('00167_element_check_00144', () async {
      print("\n********** テスト実行：00167_element_check_00144 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspmdl_day;
      print(mac_info.csv_term.regmlyfspmdl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspmdl_day = testData1;
      print(mac_info.csv_term.regmlyfspmdl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspmdl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspmdl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspmdl_day = testData2;
      print(mac_info.csv_term.regmlyfspmdl_day);
      expect(mac_info.csv_term.regmlyfspmdl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspmdl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspmdl_day = defalut;
      print(mac_info.csv_term.regmlyfspmdl_day);
      expect(mac_info.csv_term.regmlyfspmdl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspmdl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00167_element_check_00144 **********\n\n");
    });

    test('00168_element_check_00145', () async {
      print("\n********** テスト実行：00168_element_check_00145 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_fspttl;
      print(mac_info.csv_term.reg_mly_fspttl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_fspttl = testData1;
      print(mac_info.csv_term.reg_mly_fspttl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_fspttl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_fspttl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_fspttl = testData2;
      print(mac_info.csv_term.reg_mly_fspttl);
      expect(mac_info.csv_term.reg_mly_fspttl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspttl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_fspttl = defalut;
      print(mac_info.csv_term.reg_mly_fspttl);
      expect(mac_info.csv_term.reg_mly_fspttl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_fspttl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00168_element_check_00145 **********\n\n");
    });

    test('00169_element_check_00146', () async {
      print("\n********** テスト実行：00169_element_check_00146 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspttl_week;
      print(mac_info.csv_term.regmlyfspttl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspttl_week = testData1;
      print(mac_info.csv_term.regmlyfspttl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspttl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspttl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspttl_week = testData2;
      print(mac_info.csv_term.regmlyfspttl_week);
      expect(mac_info.csv_term.regmlyfspttl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspttl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspttl_week = defalut;
      print(mac_info.csv_term.regmlyfspttl_week);
      expect(mac_info.csv_term.regmlyfspttl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspttl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00169_element_check_00146 **********\n\n");
    });

    test('00170_element_check_00147', () async {
      print("\n********** テスト実行：00170_element_check_00147 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlyfspttl_day;
      print(mac_info.csv_term.regmlyfspttl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlyfspttl_day = testData1;
      print(mac_info.csv_term.regmlyfspttl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlyfspttl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlyfspttl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlyfspttl_day = testData2;
      print(mac_info.csv_term.regmlyfspttl_day);
      expect(mac_info.csv_term.regmlyfspttl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspttl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlyfspttl_day = defalut;
      print(mac_info.csv_term.regmlyfspttl_day);
      expect(mac_info.csv_term.regmlyfspttl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlyfspttl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00170_element_check_00147 **********\n\n");
    });

    test('00171_element_check_00148', () async {
      print("\n********** テスト実行：00171_element_check_00148 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.reg_mly_lrg;
      print(mac_info.csv_term.reg_mly_lrg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.reg_mly_lrg = testData1;
      print(mac_info.csv_term.reg_mly_lrg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.reg_mly_lrg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.reg_mly_lrg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.reg_mly_lrg = testData2;
      print(mac_info.csv_term.reg_mly_lrg);
      expect(mac_info.csv_term.reg_mly_lrg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_lrg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.reg_mly_lrg = defalut;
      print(mac_info.csv_term.reg_mly_lrg);
      expect(mac_info.csv_term.reg_mly_lrg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.reg_mly_lrg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00171_element_check_00148 **********\n\n");
    });

    test('00172_element_check_00149', () async {
      print("\n********** テスト実行：00172_element_check_00149 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlylrg_week;
      print(mac_info.csv_term.regmlylrg_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlylrg_week = testData1;
      print(mac_info.csv_term.regmlylrg_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlylrg_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlylrg_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlylrg_week = testData2;
      print(mac_info.csv_term.regmlylrg_week);
      expect(mac_info.csv_term.regmlylrg_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlylrg_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlylrg_week = defalut;
      print(mac_info.csv_term.regmlylrg_week);
      expect(mac_info.csv_term.regmlylrg_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlylrg_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00172_element_check_00149 **********\n\n");
    });

    test('00173_element_check_00150', () async {
      print("\n********** テスト実行：00173_element_check_00150 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_term.regmlylrg_day;
      print(mac_info.csv_term.regmlylrg_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_term.regmlylrg_day = testData1;
      print(mac_info.csv_term.regmlylrg_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_term.regmlylrg_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_term.regmlylrg_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_term.regmlylrg_day = testData2;
      print(mac_info.csv_term.regmlylrg_day);
      expect(mac_info.csv_term.regmlylrg_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlylrg_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_term.regmlylrg_day = defalut;
      print(mac_info.csv_term.regmlylrg_day);
      expect(mac_info.csv_term.regmlylrg_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_term.regmlylrg_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00173_element_check_00150 **********\n\n");
    });

    test('00174_element_check_00151', () async {
      print("\n********** テスト実行：00174_element_check_00151 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mdl_cls_mst;
      print(mac_info.csv_prg.mdl_cls_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mdl_cls_mst = testData1;
      print(mac_info.csv_prg.mdl_cls_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mdl_cls_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mdl_cls_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mdl_cls_mst = testData2;
      print(mac_info.csv_prg.mdl_cls_mst);
      expect(mac_info.csv_prg.mdl_cls_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdl_cls_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mdl_cls_mst = defalut;
      print(mac_info.csv_prg.mdl_cls_mst);
      expect(mac_info.csv_prg.mdl_cls_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdl_cls_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00174_element_check_00151 **********\n\n");
    });

    test('00175_element_check_00152', () async {
      print("\n********** テスト実行：00175_element_check_00152 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mdlcls_week;
      print(mac_info.csv_prg.mdlcls_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mdlcls_week = testData1;
      print(mac_info.csv_prg.mdlcls_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mdlcls_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mdlcls_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mdlcls_week = testData2;
      print(mac_info.csv_prg.mdlcls_week);
      expect(mac_info.csv_prg.mdlcls_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlcls_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mdlcls_week = defalut;
      print(mac_info.csv_prg.mdlcls_week);
      expect(mac_info.csv_prg.mdlcls_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlcls_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00175_element_check_00152 **********\n\n");
    });

    test('00176_element_check_00153', () async {
      print("\n********** テスト実行：00176_element_check_00153 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mdlcls_day;
      print(mac_info.csv_prg.mdlcls_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mdlcls_day = testData1;
      print(mac_info.csv_prg.mdlcls_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mdlcls_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mdlcls_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mdlcls_day = testData2;
      print(mac_info.csv_prg.mdlcls_day);
      expect(mac_info.csv_prg.mdlcls_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlcls_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mdlcls_day = defalut;
      print(mac_info.csv_prg.mdlcls_day);
      expect(mac_info.csv_prg.mdlcls_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlcls_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00176_element_check_00153 **********\n\n");
    });

    test('00177_element_check_00154', () async {
      print("\n********** テスト実行：00177_element_check_00154 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.sml_cls_mst;
      print(mac_info.csv_prg.sml_cls_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.sml_cls_mst = testData1;
      print(mac_info.csv_prg.sml_cls_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.sml_cls_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.sml_cls_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.sml_cls_mst = testData2;
      print(mac_info.csv_prg.sml_cls_mst);
      expect(mac_info.csv_prg.sml_cls_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.sml_cls_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.sml_cls_mst = defalut;
      print(mac_info.csv_prg.sml_cls_mst);
      expect(mac_info.csv_prg.sml_cls_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.sml_cls_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00177_element_check_00154 **********\n\n");
    });

    test('00178_element_check_00155', () async {
      print("\n********** テスト実行：00178_element_check_00155 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.smlcls_week;
      print(mac_info.csv_prg.smlcls_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.smlcls_week = testData1;
      print(mac_info.csv_prg.smlcls_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.smlcls_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.smlcls_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.smlcls_week = testData2;
      print(mac_info.csv_prg.smlcls_week);
      expect(mac_info.csv_prg.smlcls_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlcls_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.smlcls_week = defalut;
      print(mac_info.csv_prg.smlcls_week);
      expect(mac_info.csv_prg.smlcls_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlcls_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00178_element_check_00155 **********\n\n");
    });

    test('00179_element_check_00156', () async {
      print("\n********** テスト実行：00179_element_check_00156 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.smlcls_day;
      print(mac_info.csv_prg.smlcls_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.smlcls_day = testData1;
      print(mac_info.csv_prg.smlcls_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.smlcls_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.smlcls_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.smlcls_day = testData2;
      print(mac_info.csv_prg.smlcls_day);
      expect(mac_info.csv_prg.smlcls_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlcls_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.smlcls_day = defalut;
      print(mac_info.csv_prg.smlcls_day);
      expect(mac_info.csv_prg.smlcls_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlcls_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00179_element_check_00156 **********\n\n");
    });

    test('00180_element_check_00157', () async {
      print("\n********** テスト実行：00180_element_check_00157 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.plu_mst;
      print(mac_info.csv_prg.plu_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.plu_mst = testData1;
      print(mac_info.csv_prg.plu_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.plu_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.plu_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.plu_mst = testData2;
      print(mac_info.csv_prg.plu_mst);
      expect(mac_info.csv_prg.plu_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plu_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.plu_mst = defalut;
      print(mac_info.csv_prg.plu_mst);
      expect(mac_info.csv_prg.plu_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plu_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00180_element_check_00157 **********\n\n");
    });

    test('00181_element_check_00158', () async {
      print("\n********** テスト実行：00181_element_check_00158 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.plumst_week;
      print(mac_info.csv_prg.plumst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.plumst_week = testData1;
      print(mac_info.csv_prg.plumst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.plumst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.plumst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.plumst_week = testData2;
      print(mac_info.csv_prg.plumst_week);
      expect(mac_info.csv_prg.plumst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plumst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.plumst_week = defalut;
      print(mac_info.csv_prg.plumst_week);
      expect(mac_info.csv_prg.plumst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plumst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00181_element_check_00158 **********\n\n");
    });

    test('00182_element_check_00159', () async {
      print("\n********** テスト実行：00182_element_check_00159 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.plumst_day;
      print(mac_info.csv_prg.plumst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.plumst_day = testData1;
      print(mac_info.csv_prg.plumst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.plumst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.plumst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.plumst_day = testData2;
      print(mac_info.csv_prg.plumst_day);
      expect(mac_info.csv_prg.plumst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plumst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.plumst_day = defalut;
      print(mac_info.csv_prg.plumst_day);
      expect(mac_info.csv_prg.plumst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plumst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00182_element_check_00159 **********\n\n");
    });

    test('00183_element_check_00160', () async {
      print("\n********** テスト実行：00183_element_check_00160 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.cat_dsc_mst;
      print(mac_info.csv_prg.cat_dsc_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.cat_dsc_mst = testData1;
      print(mac_info.csv_prg.cat_dsc_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.cat_dsc_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.cat_dsc_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.cat_dsc_mst = testData2;
      print(mac_info.csv_prg.cat_dsc_mst);
      expect(mac_info.csv_prg.cat_dsc_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.cat_dsc_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.cat_dsc_mst = defalut;
      print(mac_info.csv_prg.cat_dsc_mst);
      expect(mac_info.csv_prg.cat_dsc_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.cat_dsc_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00183_element_check_00160 **********\n\n");
    });

    test('00184_element_check_00161', () async {
      print("\n********** テスト実行：00184_element_check_00161 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.catdsc_week;
      print(mac_info.csv_prg.catdsc_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.catdsc_week = testData1;
      print(mac_info.csv_prg.catdsc_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.catdsc_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.catdsc_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.catdsc_week = testData2;
      print(mac_info.csv_prg.catdsc_week);
      expect(mac_info.csv_prg.catdsc_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.catdsc_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.catdsc_week = defalut;
      print(mac_info.csv_prg.catdsc_week);
      expect(mac_info.csv_prg.catdsc_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.catdsc_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00184_element_check_00161 **********\n\n");
    });

    test('00185_element_check_00162', () async {
      print("\n********** テスト実行：00185_element_check_00162 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.catdsc_day;
      print(mac_info.csv_prg.catdsc_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.catdsc_day = testData1;
      print(mac_info.csv_prg.catdsc_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.catdsc_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.catdsc_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.catdsc_day = testData2;
      print(mac_info.csv_prg.catdsc_day);
      expect(mac_info.csv_prg.catdsc_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.catdsc_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.catdsc_day = defalut;
      print(mac_info.csv_prg.catdsc_day);
      expect(mac_info.csv_prg.catdsc_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.catdsc_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00185_element_check_00162 **********\n\n");
    });

    test('00186_element_check_00163', () async {
      print("\n********** テスト実行：00186_element_check_00163 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.brgn_mst;
      print(mac_info.csv_prg.brgn_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.brgn_mst = testData1;
      print(mac_info.csv_prg.brgn_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.brgn_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.brgn_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.brgn_mst = testData2;
      print(mac_info.csv_prg.brgn_mst);
      expect(mac_info.csv_prg.brgn_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.brgn_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.brgn_mst = defalut;
      print(mac_info.csv_prg.brgn_mst);
      expect(mac_info.csv_prg.brgn_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.brgn_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00186_element_check_00163 **********\n\n");
    });

    test('00187_element_check_00164', () async {
      print("\n********** テスト実行：00187_element_check_00164 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.brgnmst_week;
      print(mac_info.csv_prg.brgnmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.brgnmst_week = testData1;
      print(mac_info.csv_prg.brgnmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.brgnmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.brgnmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.brgnmst_week = testData2;
      print(mac_info.csv_prg.brgnmst_week);
      expect(mac_info.csv_prg.brgnmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.brgnmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.brgnmst_week = defalut;
      print(mac_info.csv_prg.brgnmst_week);
      expect(mac_info.csv_prg.brgnmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.brgnmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00187_element_check_00164 **********\n\n");
    });

    test('00188_element_check_00165', () async {
      print("\n********** テスト実行：00188_element_check_00165 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.brgnmst_day;
      print(mac_info.csv_prg.brgnmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.brgnmst_day = testData1;
      print(mac_info.csv_prg.brgnmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.brgnmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.brgnmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.brgnmst_day = testData2;
      print(mac_info.csv_prg.brgnmst_day);
      expect(mac_info.csv_prg.brgnmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.brgnmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.brgnmst_day = defalut;
      print(mac_info.csv_prg.brgnmst_day);
      expect(mac_info.csv_prg.brgnmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.brgnmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00188_element_check_00165 **********\n\n");
    });

    test('00189_element_check_00166', () async {
      print("\n********** テスト実行：00189_element_check_00166 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.bdl_mst;
      print(mac_info.csv_prg.bdl_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.bdl_mst = testData1;
      print(mac_info.csv_prg.bdl_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.bdl_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.bdl_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.bdl_mst = testData2;
      print(mac_info.csv_prg.bdl_mst);
      expect(mac_info.csv_prg.bdl_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.bdl_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.bdl_mst = defalut;
      print(mac_info.csv_prg.bdl_mst);
      expect(mac_info.csv_prg.bdl_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.bdl_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00189_element_check_00166 **********\n\n");
    });

    test('00190_element_check_00167', () async {
      print("\n********** テスト実行：00190_element_check_00167 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.bdlmst_week;
      print(mac_info.csv_prg.bdlmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.bdlmst_week = testData1;
      print(mac_info.csv_prg.bdlmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.bdlmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.bdlmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.bdlmst_week = testData2;
      print(mac_info.csv_prg.bdlmst_week);
      expect(mac_info.csv_prg.bdlmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.bdlmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.bdlmst_week = defalut;
      print(mac_info.csv_prg.bdlmst_week);
      expect(mac_info.csv_prg.bdlmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.bdlmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00190_element_check_00167 **********\n\n");
    });

    test('00191_element_check_00168', () async {
      print("\n********** テスト実行：00191_element_check_00168 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.bdlmst_day;
      print(mac_info.csv_prg.bdlmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.bdlmst_day = testData1;
      print(mac_info.csv_prg.bdlmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.bdlmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.bdlmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.bdlmst_day = testData2;
      print(mac_info.csv_prg.bdlmst_day);
      expect(mac_info.csv_prg.bdlmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.bdlmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.bdlmst_day = defalut;
      print(mac_info.csv_prg.bdlmst_day);
      expect(mac_info.csv_prg.bdlmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.bdlmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00191_element_check_00168 **********\n\n");
    });

    test('00192_element_check_00169', () async {
      print("\n********** テスト実行：00192_element_check_00169 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.stm_mst;
      print(mac_info.csv_prg.stm_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.stm_mst = testData1;
      print(mac_info.csv_prg.stm_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.stm_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.stm_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.stm_mst = testData2;
      print(mac_info.csv_prg.stm_mst);
      expect(mac_info.csv_prg.stm_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.stm_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.stm_mst = defalut;
      print(mac_info.csv_prg.stm_mst);
      expect(mac_info.csv_prg.stm_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.stm_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00192_element_check_00169 **********\n\n");
    });

    test('00193_element_check_00170', () async {
      print("\n********** テスト実行：00193_element_check_00170 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.stmmst_week;
      print(mac_info.csv_prg.stmmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.stmmst_week = testData1;
      print(mac_info.csv_prg.stmmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.stmmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.stmmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.stmmst_week = testData2;
      print(mac_info.csv_prg.stmmst_week);
      expect(mac_info.csv_prg.stmmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.stmmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.stmmst_week = defalut;
      print(mac_info.csv_prg.stmmst_week);
      expect(mac_info.csv_prg.stmmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.stmmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00193_element_check_00170 **********\n\n");
    });

    test('00194_element_check_00171', () async {
      print("\n********** テスト実行：00194_element_check_00171 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.stmmst_day;
      print(mac_info.csv_prg.stmmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.stmmst_day = testData1;
      print(mac_info.csv_prg.stmmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.stmmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.stmmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.stmmst_day = testData2;
      print(mac_info.csv_prg.stmmst_day);
      expect(mac_info.csv_prg.stmmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.stmmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.stmmst_day = defalut;
      print(mac_info.csv_prg.stmmst_day);
      expect(mac_info.csv_prg.stmmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.stmmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00194_element_check_00171 **********\n\n");
    });

    test('00195_element_check_00172', () async {
      print("\n********** テスト実行：00195_element_check_00172 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.staff_mst;
      print(mac_info.csv_prg.staff_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.staff_mst = testData1;
      print(mac_info.csv_prg.staff_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.staff_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.staff_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.staff_mst = testData2;
      print(mac_info.csv_prg.staff_mst);
      expect(mac_info.csv_prg.staff_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.staff_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.staff_mst = defalut;
      print(mac_info.csv_prg.staff_mst);
      expect(mac_info.csv_prg.staff_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.staff_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00195_element_check_00172 **********\n\n");
    });

    test('00196_element_check_00173', () async {
      print("\n********** テスト実行：00196_element_check_00173 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.staffmst_week;
      print(mac_info.csv_prg.staffmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.staffmst_week = testData1;
      print(mac_info.csv_prg.staffmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.staffmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.staffmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.staffmst_week = testData2;
      print(mac_info.csv_prg.staffmst_week);
      expect(mac_info.csv_prg.staffmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.staffmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.staffmst_week = defalut;
      print(mac_info.csv_prg.staffmst_week);
      expect(mac_info.csv_prg.staffmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.staffmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00196_element_check_00173 **********\n\n");
    });

    test('00197_element_check_00174', () async {
      print("\n********** テスト実行：00197_element_check_00174 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.staffmst_day;
      print(mac_info.csv_prg.staffmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.staffmst_day = testData1;
      print(mac_info.csv_prg.staffmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.staffmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.staffmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.staffmst_day = testData2;
      print(mac_info.csv_prg.staffmst_day);
      expect(mac_info.csv_prg.staffmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.staffmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.staffmst_day = defalut;
      print(mac_info.csv_prg.staffmst_day);
      expect(mac_info.csv_prg.staffmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.staffmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00197_element_check_00174 **********\n\n");
    });

    test('00198_element_check_00175', () async {
      print("\n********** テスト実行：00198_element_check_00175 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.cust_mst;
      print(mac_info.csv_prg.cust_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.cust_mst = testData1;
      print(mac_info.csv_prg.cust_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.cust_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.cust_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.cust_mst = testData2;
      print(mac_info.csv_prg.cust_mst);
      expect(mac_info.csv_prg.cust_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.cust_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.cust_mst = defalut;
      print(mac_info.csv_prg.cust_mst);
      expect(mac_info.csv_prg.cust_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.cust_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00198_element_check_00175 **********\n\n");
    });

    test('00199_element_check_00176', () async {
      print("\n********** テスト実行：00199_element_check_00176 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.custmst_week;
      print(mac_info.csv_prg.custmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.custmst_week = testData1;
      print(mac_info.csv_prg.custmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.custmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.custmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.custmst_week = testData2;
      print(mac_info.csv_prg.custmst_week);
      expect(mac_info.csv_prg.custmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.custmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.custmst_week = defalut;
      print(mac_info.csv_prg.custmst_week);
      expect(mac_info.csv_prg.custmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.custmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00199_element_check_00176 **********\n\n");
    });

    test('00200_element_check_00177', () async {
      print("\n********** テスト実行：00200_element_check_00177 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.custmst_day;
      print(mac_info.csv_prg.custmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.custmst_day = testData1;
      print(mac_info.csv_prg.custmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.custmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.custmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.custmst_day = testData2;
      print(mac_info.csv_prg.custmst_day);
      expect(mac_info.csv_prg.custmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.custmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.custmst_day = defalut;
      print(mac_info.csv_prg.custmst_day);
      expect(mac_info.csv_prg.custmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.custmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00200_element_check_00177 **********\n\n");
    });

    test('00201_element_check_00178', () async {
      print("\n********** テスト実行：00201_element_check_00178 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.zone_mst;
      print(mac_info.csv_prg.zone_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.zone_mst = testData1;
      print(mac_info.csv_prg.zone_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.zone_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.zone_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.zone_mst = testData2;
      print(mac_info.csv_prg.zone_mst);
      expect(mac_info.csv_prg.zone_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zone_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.zone_mst = defalut;
      print(mac_info.csv_prg.zone_mst);
      expect(mac_info.csv_prg.zone_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zone_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00201_element_check_00178 **********\n\n");
    });

    test('00202_element_check_00179', () async {
      print("\n********** テスト実行：00202_element_check_00179 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.zonemst_week;
      print(mac_info.csv_prg.zonemst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.zonemst_week = testData1;
      print(mac_info.csv_prg.zonemst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.zonemst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.zonemst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.zonemst_week = testData2;
      print(mac_info.csv_prg.zonemst_week);
      expect(mac_info.csv_prg.zonemst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zonemst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.zonemst_week = defalut;
      print(mac_info.csv_prg.zonemst_week);
      expect(mac_info.csv_prg.zonemst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zonemst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00202_element_check_00179 **********\n\n");
    });

    test('00203_element_check_00180', () async {
      print("\n********** テスト実行：00203_element_check_00180 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.zonemst_day;
      print(mac_info.csv_prg.zonemst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.zonemst_day = testData1;
      print(mac_info.csv_prg.zonemst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.zonemst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.zonemst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.zonemst_day = testData2;
      print(mac_info.csv_prg.zonemst_day);
      expect(mac_info.csv_prg.zonemst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zonemst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.zonemst_day = defalut;
      print(mac_info.csv_prg.zonemst_day);
      expect(mac_info.csv_prg.zonemst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zonemst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00203_element_check_00180 **********\n\n");
    });

    test('00204_element_check_00181', () async {
      print("\n********** テスト実行：00204_element_check_00181 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.svs_mst;
      print(mac_info.csv_prg.svs_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.svs_mst = testData1;
      print(mac_info.csv_prg.svs_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.svs_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.svs_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.svs_mst = testData2;
      print(mac_info.csv_prg.svs_mst);
      expect(mac_info.csv_prg.svs_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.svs_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.svs_mst = defalut;
      print(mac_info.csv_prg.svs_mst);
      expect(mac_info.csv_prg.svs_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.svs_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00204_element_check_00181 **********\n\n");
    });

    test('00205_element_check_00182', () async {
      print("\n********** テスト実行：00205_element_check_00182 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.svsmst_week;
      print(mac_info.csv_prg.svsmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.svsmst_week = testData1;
      print(mac_info.csv_prg.svsmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.svsmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.svsmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.svsmst_week = testData2;
      print(mac_info.csv_prg.svsmst_week);
      expect(mac_info.csv_prg.svsmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.svsmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.svsmst_week = defalut;
      print(mac_info.csv_prg.svsmst_week);
      expect(mac_info.csv_prg.svsmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.svsmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00205_element_check_00182 **********\n\n");
    });

    test('00206_element_check_00183', () async {
      print("\n********** テスト実行：00206_element_check_00183 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.svsmst_day;
      print(mac_info.csv_prg.svsmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.svsmst_day = testData1;
      print(mac_info.csv_prg.svsmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.svsmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.svsmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.svsmst_day = testData2;
      print(mac_info.csv_prg.svsmst_day);
      expect(mac_info.csv_prg.svsmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.svsmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.svsmst_day = defalut;
      print(mac_info.csv_prg.svsmst_day);
      expect(mac_info.csv_prg.svsmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.svsmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00206_element_check_00183 **********\n\n");
    });

    test('00207_element_check_00184', () async {
      print("\n********** テスト実行：00207_element_check_00184 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspsch_mst;
      print(mac_info.csv_prg.fspsch_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspsch_mst = testData1;
      print(mac_info.csv_prg.fspsch_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspsch_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspsch_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspsch_mst = testData2;
      print(mac_info.csv_prg.fspsch_mst);
      expect(mac_info.csv_prg.fspsch_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspsch_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspsch_mst = defalut;
      print(mac_info.csv_prg.fspsch_mst);
      expect(mac_info.csv_prg.fspsch_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspsch_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00207_element_check_00184 **********\n\n");
    });

    test('00208_element_check_00185', () async {
      print("\n********** テスト実行：00208_element_check_00185 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspschmst_week;
      print(mac_info.csv_prg.fspschmst_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspschmst_week = testData1;
      print(mac_info.csv_prg.fspschmst_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspschmst_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspschmst_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspschmst_week = testData2;
      print(mac_info.csv_prg.fspschmst_week);
      expect(mac_info.csv_prg.fspschmst_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspschmst_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspschmst_week = defalut;
      print(mac_info.csv_prg.fspschmst_week);
      expect(mac_info.csv_prg.fspschmst_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspschmst_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00208_element_check_00185 **********\n\n");
    });

    test('00209_element_check_00186', () async {
      print("\n********** テスト実行：00209_element_check_00186 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspschmst_day;
      print(mac_info.csv_prg.fspschmst_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspschmst_day = testData1;
      print(mac_info.csv_prg.fspschmst_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspschmst_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspschmst_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspschmst_day = testData2;
      print(mac_info.csv_prg.fspschmst_day);
      expect(mac_info.csv_prg.fspschmst_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspschmst_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspschmst_day = defalut;
      print(mac_info.csv_prg.fspschmst_day);
      expect(mac_info.csv_prg.fspschmst_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspschmst_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00209_element_check_00186 **********\n\n");
    });

    test('00210_element_check_00187', () async {
      print("\n********** テスト実行：00210_element_check_00187 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplan_plu;
      print(mac_info.csv_prg.fspplan_plu);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplan_plu = testData1;
      print(mac_info.csv_prg.fspplan_plu);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplan_plu == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplan_plu == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplan_plu = testData2;
      print(mac_info.csv_prg.fspplan_plu);
      expect(mac_info.csv_prg.fspplan_plu == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplan_plu == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplan_plu = defalut;
      print(mac_info.csv_prg.fspplan_plu);
      expect(mac_info.csv_prg.fspplan_plu == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplan_plu == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00210_element_check_00187 **********\n\n");
    });

    test('00211_element_check_00188', () async {
      print("\n********** テスト実行：00211_element_check_00188 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplanplu_week;
      print(mac_info.csv_prg.fspplanplu_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplanplu_week = testData1;
      print(mac_info.csv_prg.fspplanplu_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplanplu_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplanplu_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplanplu_week = testData2;
      print(mac_info.csv_prg.fspplanplu_week);
      expect(mac_info.csv_prg.fspplanplu_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanplu_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplanplu_week = defalut;
      print(mac_info.csv_prg.fspplanplu_week);
      expect(mac_info.csv_prg.fspplanplu_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanplu_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00211_element_check_00188 **********\n\n");
    });

    test('00212_element_check_00189', () async {
      print("\n********** テスト実行：00212_element_check_00189 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplanplu_day;
      print(mac_info.csv_prg.fspplanplu_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplanplu_day = testData1;
      print(mac_info.csv_prg.fspplanplu_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplanplu_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplanplu_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplanplu_day = testData2;
      print(mac_info.csv_prg.fspplanplu_day);
      expect(mac_info.csv_prg.fspplanplu_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanplu_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplanplu_day = defalut;
      print(mac_info.csv_prg.fspplanplu_day);
      expect(mac_info.csv_prg.fspplanplu_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanplu_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00212_element_check_00189 **********\n\n");
    });

    test('00213_element_check_00190', () async {
      print("\n********** テスト実行：00213_element_check_00190 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplan_mdl;
      print(mac_info.csv_prg.fspplan_mdl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplan_mdl = testData1;
      print(mac_info.csv_prg.fspplan_mdl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplan_mdl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplan_mdl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplan_mdl = testData2;
      print(mac_info.csv_prg.fspplan_mdl);
      expect(mac_info.csv_prg.fspplan_mdl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplan_mdl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplan_mdl = defalut;
      print(mac_info.csv_prg.fspplan_mdl);
      expect(mac_info.csv_prg.fspplan_mdl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplan_mdl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00213_element_check_00190 **********\n\n");
    });

    test('00214_element_check_00191', () async {
      print("\n********** テスト実行：00214_element_check_00191 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplanmdl_week;
      print(mac_info.csv_prg.fspplanmdl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplanmdl_week = testData1;
      print(mac_info.csv_prg.fspplanmdl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplanmdl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplanmdl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplanmdl_week = testData2;
      print(mac_info.csv_prg.fspplanmdl_week);
      expect(mac_info.csv_prg.fspplanmdl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanmdl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplanmdl_week = defalut;
      print(mac_info.csv_prg.fspplanmdl_week);
      expect(mac_info.csv_prg.fspplanmdl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanmdl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00214_element_check_00191 **********\n\n");
    });

    test('00215_element_check_00192', () async {
      print("\n********** テスト実行：00215_element_check_00192 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplanmdl_day;
      print(mac_info.csv_prg.fspplanmdl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplanmdl_day = testData1;
      print(mac_info.csv_prg.fspplanmdl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplanmdl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplanmdl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplanmdl_day = testData2;
      print(mac_info.csv_prg.fspplanmdl_day);
      expect(mac_info.csv_prg.fspplanmdl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanmdl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplanmdl_day = defalut;
      print(mac_info.csv_prg.fspplanmdl_day);
      expect(mac_info.csv_prg.fspplanmdl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplanmdl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00215_element_check_00192 **********\n\n");
    });

    test('00216_element_check_00193', () async {
      print("\n********** テスト実行：00216_element_check_00193 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplan_sml;
      print(mac_info.csv_prg.fspplan_sml);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplan_sml = testData1;
      print(mac_info.csv_prg.fspplan_sml);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplan_sml == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplan_sml == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplan_sml = testData2;
      print(mac_info.csv_prg.fspplan_sml);
      expect(mac_info.csv_prg.fspplan_sml == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplan_sml == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplan_sml = defalut;
      print(mac_info.csv_prg.fspplan_sml);
      expect(mac_info.csv_prg.fspplan_sml == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplan_sml == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00216_element_check_00193 **********\n\n");
    });

    test('00217_element_check_00194', () async {
      print("\n********** テスト実行：00217_element_check_00194 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplansml_week;
      print(mac_info.csv_prg.fspplansml_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplansml_week = testData1;
      print(mac_info.csv_prg.fspplansml_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplansml_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplansml_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplansml_week = testData2;
      print(mac_info.csv_prg.fspplansml_week);
      expect(mac_info.csv_prg.fspplansml_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplansml_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplansml_week = defalut;
      print(mac_info.csv_prg.fspplansml_week);
      expect(mac_info.csv_prg.fspplansml_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplansml_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00217_element_check_00194 **********\n\n");
    });

    test('00218_element_check_00195', () async {
      print("\n********** テスト実行：00218_element_check_00195 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fspplansml_day;
      print(mac_info.csv_prg.fspplansml_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fspplansml_day = testData1;
      print(mac_info.csv_prg.fspplansml_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fspplansml_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fspplansml_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fspplansml_day = testData2;
      print(mac_info.csv_prg.fspplansml_day);
      expect(mac_info.csv_prg.fspplansml_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplansml_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fspplansml_day = defalut;
      print(mac_info.csv_prg.fspplansml_day);
      expect(mac_info.csv_prg.fspplansml_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fspplansml_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00218_element_check_00195 **********\n\n");
    });

    test('00219_element_check_00196', () async {
      print("\n********** テスト実行：00219_element_check_00196 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dly_trm;
      print(mac_info.csv_prg.dly_trm);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dly_trm = testData1;
      print(mac_info.csv_prg.dly_trm);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dly_trm == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dly_trm == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dly_trm = testData2;
      print(mac_info.csv_prg.dly_trm);
      expect(mac_info.csv_prg.dly_trm == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_trm == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dly_trm = defalut;
      print(mac_info.csv_prg.dly_trm);
      expect(mac_info.csv_prg.dly_trm == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_trm == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00219_element_check_00196 **********\n\n");
    });

    test('00220_element_check_00197', () async {
      print("\n********** テスト実行：00220_element_check_00197 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlytrm_week;
      print(mac_info.csv_prg.dlytrm_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlytrm_week = testData1;
      print(mac_info.csv_prg.dlytrm_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlytrm_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlytrm_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlytrm_week = testData2;
      print(mac_info.csv_prg.dlytrm_week);
      expect(mac_info.csv_prg.dlytrm_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlytrm_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlytrm_week = defalut;
      print(mac_info.csv_prg.dlytrm_week);
      expect(mac_info.csv_prg.dlytrm_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlytrm_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00220_element_check_00197 **********\n\n");
    });

    test('00221_element_check_00198', () async {
      print("\n********** テスト実行：00221_element_check_00198 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlytrm_day;
      print(mac_info.csv_prg.dlytrm_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlytrm_day = testData1;
      print(mac_info.csv_prg.dlytrm_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlytrm_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlytrm_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlytrm_day = testData2;
      print(mac_info.csv_prg.dlytrm_day);
      expect(mac_info.csv_prg.dlytrm_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlytrm_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlytrm_day = defalut;
      print(mac_info.csv_prg.dlytrm_day);
      expect(mac_info.csv_prg.dlytrm_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlytrm_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00221_element_check_00198 **********\n\n");
    });

    test('00222_element_check_00199', () async {
      print("\n********** テスト実行：00222_element_check_00199 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dly_kopt;
      print(mac_info.csv_prg.dly_kopt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dly_kopt = testData1;
      print(mac_info.csv_prg.dly_kopt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dly_kopt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dly_kopt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dly_kopt = testData2;
      print(mac_info.csv_prg.dly_kopt);
      expect(mac_info.csv_prg.dly_kopt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_kopt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dly_kopt = defalut;
      print(mac_info.csv_prg.dly_kopt);
      expect(mac_info.csv_prg.dly_kopt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_kopt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00222_element_check_00199 **********\n\n");
    });

    test('00223_element_check_00200', () async {
      print("\n********** テスト実行：00223_element_check_00200 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlykopt_week;
      print(mac_info.csv_prg.dlykopt_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlykopt_week = testData1;
      print(mac_info.csv_prg.dlykopt_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlykopt_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlykopt_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlykopt_week = testData2;
      print(mac_info.csv_prg.dlykopt_week);
      expect(mac_info.csv_prg.dlykopt_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlykopt_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlykopt_week = defalut;
      print(mac_info.csv_prg.dlykopt_week);
      expect(mac_info.csv_prg.dlykopt_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlykopt_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00223_element_check_00200 **********\n\n");
    });

    test('00224_element_check_00201', () async {
      print("\n********** テスト実行：00224_element_check_00201 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlykopt_day;
      print(mac_info.csv_prg.dlykopt_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlykopt_day = testData1;
      print(mac_info.csv_prg.dlykopt_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlykopt_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlykopt_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlykopt_day = testData2;
      print(mac_info.csv_prg.dlykopt_day);
      expect(mac_info.csv_prg.dlykopt_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlykopt_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlykopt_day = defalut;
      print(mac_info.csv_prg.dlykopt_day);
      expect(mac_info.csv_prg.dlykopt_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlykopt_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00224_element_check_00201 **********\n\n");
    });

    test('00225_element_check_00202', () async {
      print("\n********** テスト実行：00225_element_check_00202 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dly_recmsg;
      print(mac_info.csv_prg.dly_recmsg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dly_recmsg = testData1;
      print(mac_info.csv_prg.dly_recmsg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dly_recmsg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dly_recmsg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dly_recmsg = testData2;
      print(mac_info.csv_prg.dly_recmsg);
      expect(mac_info.csv_prg.dly_recmsg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_recmsg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dly_recmsg = defalut;
      print(mac_info.csv_prg.dly_recmsg);
      expect(mac_info.csv_prg.dly_recmsg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_recmsg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00225_element_check_00202 **********\n\n");
    });

    test('00226_element_check_00203', () async {
      print("\n********** テスト実行：00226_element_check_00203 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlyrecmsg_week;
      print(mac_info.csv_prg.dlyrecmsg_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlyrecmsg_week = testData1;
      print(mac_info.csv_prg.dlyrecmsg_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlyrecmsg_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlyrecmsg_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlyrecmsg_week = testData2;
      print(mac_info.csv_prg.dlyrecmsg_week);
      expect(mac_info.csv_prg.dlyrecmsg_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyrecmsg_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlyrecmsg_week = defalut;
      print(mac_info.csv_prg.dlyrecmsg_week);
      expect(mac_info.csv_prg.dlyrecmsg_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyrecmsg_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00226_element_check_00203 **********\n\n");
    });

    test('00227_element_check_00204', () async {
      print("\n********** テスト実行：00227_element_check_00204 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlyrecmsg_day;
      print(mac_info.csv_prg.dlyrecmsg_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlyrecmsg_day = testData1;
      print(mac_info.csv_prg.dlyrecmsg_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlyrecmsg_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlyrecmsg_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlyrecmsg_day = testData2;
      print(mac_info.csv_prg.dlyrecmsg_day);
      expect(mac_info.csv_prg.dlyrecmsg_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyrecmsg_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlyrecmsg_day = defalut;
      print(mac_info.csv_prg.dlyrecmsg_day);
      expect(mac_info.csv_prg.dlyrecmsg_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyrecmsg_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00227_element_check_00204 **********\n\n");
    });

    test('00228_element_check_00205', () async {
      print("\n********** テスト実行：00228_element_check_00205 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dly_preset;
      print(mac_info.csv_prg.dly_preset);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dly_preset = testData1;
      print(mac_info.csv_prg.dly_preset);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dly_preset == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dly_preset == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dly_preset = testData2;
      print(mac_info.csv_prg.dly_preset);
      expect(mac_info.csv_prg.dly_preset == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_preset == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dly_preset = defalut;
      print(mac_info.csv_prg.dly_preset);
      expect(mac_info.csv_prg.dly_preset == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_preset == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00228_element_check_00205 **********\n\n");
    });

    test('00229_element_check_00206', () async {
      print("\n********** テスト実行：00229_element_check_00206 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlypreset_week;
      print(mac_info.csv_prg.dlypreset_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlypreset_week = testData1;
      print(mac_info.csv_prg.dlypreset_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlypreset_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlypreset_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlypreset_week = testData2;
      print(mac_info.csv_prg.dlypreset_week);
      expect(mac_info.csv_prg.dlypreset_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlypreset_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlypreset_week = defalut;
      print(mac_info.csv_prg.dlypreset_week);
      expect(mac_info.csv_prg.dlypreset_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlypreset_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00229_element_check_00206 **********\n\n");
    });

    test('00230_element_check_00207', () async {
      print("\n********** テスト実行：00230_element_check_00207 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlypreset_day;
      print(mac_info.csv_prg.dlypreset_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlypreset_day = testData1;
      print(mac_info.csv_prg.dlypreset_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlypreset_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlypreset_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlypreset_day = testData2;
      print(mac_info.csv_prg.dlypreset_day);
      expect(mac_info.csv_prg.dlypreset_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlypreset_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlypreset_day = defalut;
      print(mac_info.csv_prg.dlypreset_day);
      expect(mac_info.csv_prg.dlypreset_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlypreset_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00230_element_check_00207 **********\n\n");
    });

    test('00231_element_check_00208', () async {
      print("\n********** テスト実行：00231_element_check_00208 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dly_batrepo;
      print(mac_info.csv_prg.dly_batrepo);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dly_batrepo = testData1;
      print(mac_info.csv_prg.dly_batrepo);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dly_batrepo == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dly_batrepo == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dly_batrepo = testData2;
      print(mac_info.csv_prg.dly_batrepo);
      expect(mac_info.csv_prg.dly_batrepo == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_batrepo == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dly_batrepo = defalut;
      print(mac_info.csv_prg.dly_batrepo);
      expect(mac_info.csv_prg.dly_batrepo == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_batrepo == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00231_element_check_00208 **********\n\n");
    });

    test('00232_element_check_00209', () async {
      print("\n********** テスト実行：00232_element_check_00209 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlybatrepo_week;
      print(mac_info.csv_prg.dlybatrepo_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlybatrepo_week = testData1;
      print(mac_info.csv_prg.dlybatrepo_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlybatrepo_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlybatrepo_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlybatrepo_week = testData2;
      print(mac_info.csv_prg.dlybatrepo_week);
      expect(mac_info.csv_prg.dlybatrepo_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlybatrepo_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlybatrepo_week = defalut;
      print(mac_info.csv_prg.dlybatrepo_week);
      expect(mac_info.csv_prg.dlybatrepo_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlybatrepo_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00232_element_check_00209 **********\n\n");
    });

    test('00233_element_check_00210', () async {
      print("\n********** テスト実行：00233_element_check_00210 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlybatrepo_day;
      print(mac_info.csv_prg.dlybatrepo_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlybatrepo_day = testData1;
      print(mac_info.csv_prg.dlybatrepo_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlybatrepo_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlybatrepo_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlybatrepo_day = testData2;
      print(mac_info.csv_prg.dlybatrepo_day);
      expect(mac_info.csv_prg.dlybatrepo_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlybatrepo_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlybatrepo_day = defalut;
      print(mac_info.csv_prg.dlybatrepo_day);
      expect(mac_info.csv_prg.dlybatrepo_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlybatrepo_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00233_element_check_00210 **********\n\n");
    });

    test('00234_element_check_00211', () async {
      print("\n********** テスト実行：00234_element_check_00211 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dly_img;
      print(mac_info.csv_prg.dly_img);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dly_img = testData1;
      print(mac_info.csv_prg.dly_img);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dly_img == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dly_img == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dly_img = testData2;
      print(mac_info.csv_prg.dly_img);
      expect(mac_info.csv_prg.dly_img == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_img == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dly_img = defalut;
      print(mac_info.csv_prg.dly_img);
      expect(mac_info.csv_prg.dly_img == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dly_img == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00234_element_check_00211 **********\n\n");
    });

    test('00235_element_check_00212', () async {
      print("\n********** テスト実行：00235_element_check_00212 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlyimg_week;
      print(mac_info.csv_prg.dlyimg_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlyimg_week = testData1;
      print(mac_info.csv_prg.dlyimg_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlyimg_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlyimg_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlyimg_week = testData2;
      print(mac_info.csv_prg.dlyimg_week);
      expect(mac_info.csv_prg.dlyimg_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyimg_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlyimg_week = defalut;
      print(mac_info.csv_prg.dlyimg_week);
      expect(mac_info.csv_prg.dlyimg_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyimg_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00235_element_check_00212 **********\n\n");
    });

    test('00236_element_check_00213', () async {
      print("\n********** テスト実行：00236_element_check_00213 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.dlyimg_day;
      print(mac_info.csv_prg.dlyimg_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.dlyimg_day = testData1;
      print(mac_info.csv_prg.dlyimg_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.dlyimg_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.dlyimg_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.dlyimg_day = testData2;
      print(mac_info.csv_prg.dlyimg_day);
      expect(mac_info.csv_prg.dlyimg_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyimg_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.dlyimg_day = defalut;
      print(mac_info.csv_prg.dlyimg_day);
      expect(mac_info.csv_prg.dlyimg_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.dlyimg_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00236_element_check_00213 **********\n\n");
    });

    test('00237_element_check_00214', () async {
      print("\n********** テスト実行：00237_element_check_00214 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.tax_mst;
      print(mac_info.csv_prg.tax_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.tax_mst = testData1;
      print(mac_info.csv_prg.tax_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.tax_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.tax_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.tax_mst = testData2;
      print(mac_info.csv_prg.tax_mst);
      expect(mac_info.csv_prg.tax_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.tax_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.tax_mst = defalut;
      print(mac_info.csv_prg.tax_mst);
      expect(mac_info.csv_prg.tax_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.tax_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00237_element_check_00214 **********\n\n");
    });

    test('00238_element_check_00215', () async {
      print("\n********** テスト実行：00238_element_check_00215 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.tax_week;
      print(mac_info.csv_prg.tax_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.tax_week = testData1;
      print(mac_info.csv_prg.tax_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.tax_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.tax_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.tax_week = testData2;
      print(mac_info.csv_prg.tax_week);
      expect(mac_info.csv_prg.tax_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.tax_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.tax_week = defalut;
      print(mac_info.csv_prg.tax_week);
      expect(mac_info.csv_prg.tax_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.tax_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00238_element_check_00215 **********\n\n");
    });

    test('00239_element_check_00216', () async {
      print("\n********** テスト実行：00239_element_check_00216 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.tax_day;
      print(mac_info.csv_prg.tax_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.tax_day = testData1;
      print(mac_info.csv_prg.tax_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.tax_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.tax_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.tax_day = testData2;
      print(mac_info.csv_prg.tax_day);
      expect(mac_info.csv_prg.tax_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.tax_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.tax_day = defalut;
      print(mac_info.csv_prg.tax_day);
      expect(mac_info.csv_prg.tax_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.tax_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00239_element_check_00216 **********\n\n");
    });

    test('00240_element_check_00217', () async {
      print("\n********** テスト実行：00240_element_check_00217 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.ctrl_mst;
      print(mac_info.csv_prg.ctrl_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.ctrl_mst = testData1;
      print(mac_info.csv_prg.ctrl_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.ctrl_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.ctrl_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.ctrl_mst = testData2;
      print(mac_info.csv_prg.ctrl_mst);
      expect(mac_info.csv_prg.ctrl_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.ctrl_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.ctrl_mst = defalut;
      print(mac_info.csv_prg.ctrl_mst);
      expect(mac_info.csv_prg.ctrl_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.ctrl_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00240_element_check_00217 **********\n\n");
    });

    test('00241_element_check_00218', () async {
      print("\n********** テスト実行：00241_element_check_00218 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.ctrl_week;
      print(mac_info.csv_prg.ctrl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.ctrl_week = testData1;
      print(mac_info.csv_prg.ctrl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.ctrl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.ctrl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.ctrl_week = testData2;
      print(mac_info.csv_prg.ctrl_week);
      expect(mac_info.csv_prg.ctrl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.ctrl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.ctrl_week = defalut;
      print(mac_info.csv_prg.ctrl_week);
      expect(mac_info.csv_prg.ctrl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.ctrl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00241_element_check_00218 **********\n\n");
    });

    test('00242_element_check_00219', () async {
      print("\n********** テスト実行：00242_element_check_00219 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.ctrl_day;
      print(mac_info.csv_prg.ctrl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.ctrl_day = testData1;
      print(mac_info.csv_prg.ctrl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.ctrl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.ctrl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.ctrl_day = testData2;
      print(mac_info.csv_prg.ctrl_day);
      expect(mac_info.csv_prg.ctrl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.ctrl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.ctrl_day = defalut;
      print(mac_info.csv_prg.ctrl_day);
      expect(mac_info.csv_prg.ctrl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.ctrl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00242_element_check_00219 **********\n\n");
    });

    test('00243_element_check_00220', () async {
      print("\n********** テスト実行：00243_element_check_00220 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.instre_mst;
      print(mac_info.csv_prg.instre_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.instre_mst = testData1;
      print(mac_info.csv_prg.instre_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.instre_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.instre_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.instre_mst = testData2;
      print(mac_info.csv_prg.instre_mst);
      expect(mac_info.csv_prg.instre_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.instre_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.instre_mst = defalut;
      print(mac_info.csv_prg.instre_mst);
      expect(mac_info.csv_prg.instre_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.instre_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00243_element_check_00220 **********\n\n");
    });

    test('00244_element_check_00221', () async {
      print("\n********** テスト実行：00244_element_check_00221 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.instre_week;
      print(mac_info.csv_prg.instre_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.instre_week = testData1;
      print(mac_info.csv_prg.instre_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.instre_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.instre_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.instre_week = testData2;
      print(mac_info.csv_prg.instre_week);
      expect(mac_info.csv_prg.instre_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.instre_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.instre_week = defalut;
      print(mac_info.csv_prg.instre_week);
      expect(mac_info.csv_prg.instre_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.instre_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00244_element_check_00221 **********\n\n");
    });

    test('00245_element_check_00222', () async {
      print("\n********** テスト実行：00245_element_check_00222 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.instre_day;
      print(mac_info.csv_prg.instre_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.instre_day = testData1;
      print(mac_info.csv_prg.instre_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.instre_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.instre_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.instre_day = testData2;
      print(mac_info.csv_prg.instre_day);
      expect(mac_info.csv_prg.instre_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.instre_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.instre_day = defalut;
      print(mac_info.csv_prg.instre_day);
      expect(mac_info.csv_prg.instre_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.instre_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00245_element_check_00222 **********\n\n");
    });

    test('00246_element_check_00223', () async {
      print("\n********** テスト実行：00246_element_check_00223 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mdlsch_mst;
      print(mac_info.csv_prg.mdlsch_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mdlsch_mst = testData1;
      print(mac_info.csv_prg.mdlsch_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mdlsch_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mdlsch_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mdlsch_mst = testData2;
      print(mac_info.csv_prg.mdlsch_mst);
      expect(mac_info.csv_prg.mdlsch_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlsch_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mdlsch_mst = defalut;
      print(mac_info.csv_prg.mdlsch_mst);
      expect(mac_info.csv_prg.mdlsch_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlsch_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00246_element_check_00223 **********\n\n");
    });

    test('00247_element_check_00224', () async {
      print("\n********** テスト実行：00247_element_check_00224 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mdlsch_week;
      print(mac_info.csv_prg.mdlsch_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mdlsch_week = testData1;
      print(mac_info.csv_prg.mdlsch_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mdlsch_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mdlsch_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mdlsch_week = testData2;
      print(mac_info.csv_prg.mdlsch_week);
      expect(mac_info.csv_prg.mdlsch_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlsch_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mdlsch_week = defalut;
      print(mac_info.csv_prg.mdlsch_week);
      expect(mac_info.csv_prg.mdlsch_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlsch_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00247_element_check_00224 **********\n\n");
    });

    test('00248_element_check_00225', () async {
      print("\n********** テスト実行：00248_element_check_00225 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mdlsch_day;
      print(mac_info.csv_prg.mdlsch_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mdlsch_day = testData1;
      print(mac_info.csv_prg.mdlsch_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mdlsch_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mdlsch_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mdlsch_day = testData2;
      print(mac_info.csv_prg.mdlsch_day);
      expect(mac_info.csv_prg.mdlsch_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlsch_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mdlsch_day = defalut;
      print(mac_info.csv_prg.mdlsch_day);
      expect(mac_info.csv_prg.mdlsch_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mdlsch_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00248_element_check_00225 **********\n\n");
    });

    test('00249_element_check_00226', () async {
      print("\n********** テスト実行：00249_element_check_00226 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.smlsch_mst;
      print(mac_info.csv_prg.smlsch_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.smlsch_mst = testData1;
      print(mac_info.csv_prg.smlsch_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.smlsch_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.smlsch_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.smlsch_mst = testData2;
      print(mac_info.csv_prg.smlsch_mst);
      expect(mac_info.csv_prg.smlsch_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlsch_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.smlsch_mst = defalut;
      print(mac_info.csv_prg.smlsch_mst);
      expect(mac_info.csv_prg.smlsch_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlsch_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00249_element_check_00226 **********\n\n");
    });

    test('00250_element_check_00227', () async {
      print("\n********** テスト実行：00250_element_check_00227 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.smlsch_week;
      print(mac_info.csv_prg.smlsch_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.smlsch_week = testData1;
      print(mac_info.csv_prg.smlsch_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.smlsch_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.smlsch_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.smlsch_week = testData2;
      print(mac_info.csv_prg.smlsch_week);
      expect(mac_info.csv_prg.smlsch_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlsch_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.smlsch_week = defalut;
      print(mac_info.csv_prg.smlsch_week);
      expect(mac_info.csv_prg.smlsch_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlsch_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00250_element_check_00227 **********\n\n");
    });

    test('00251_element_check_00228', () async {
      print("\n********** テスト実行：00251_element_check_00228 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.smlsch_day;
      print(mac_info.csv_prg.smlsch_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.smlsch_day = testData1;
      print(mac_info.csv_prg.smlsch_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.smlsch_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.smlsch_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.smlsch_day = testData2;
      print(mac_info.csv_prg.smlsch_day);
      expect(mac_info.csv_prg.smlsch_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlsch_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.smlsch_day = defalut;
      print(mac_info.csv_prg.smlsch_day);
      expect(mac_info.csv_prg.smlsch_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.smlsch_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00251_element_check_00228 **********\n\n");
    });

    test('00252_element_check_00229', () async {
      print("\n********** テスト実行：00252_element_check_00229 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.plusch_mst;
      print(mac_info.csv_prg.plusch_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.plusch_mst = testData1;
      print(mac_info.csv_prg.plusch_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.plusch_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.plusch_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.plusch_mst = testData2;
      print(mac_info.csv_prg.plusch_mst);
      expect(mac_info.csv_prg.plusch_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plusch_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.plusch_mst = defalut;
      print(mac_info.csv_prg.plusch_mst);
      expect(mac_info.csv_prg.plusch_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plusch_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00252_element_check_00229 **********\n\n");
    });

    test('00253_element_check_00230', () async {
      print("\n********** テスト実行：00253_element_check_00230 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.plusch_week;
      print(mac_info.csv_prg.plusch_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.plusch_week = testData1;
      print(mac_info.csv_prg.plusch_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.plusch_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.plusch_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.plusch_week = testData2;
      print(mac_info.csv_prg.plusch_week);
      expect(mac_info.csv_prg.plusch_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plusch_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.plusch_week = defalut;
      print(mac_info.csv_prg.plusch_week);
      expect(mac_info.csv_prg.plusch_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plusch_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00253_element_check_00230 **********\n\n");
    });

    test('00254_element_check_00231', () async {
      print("\n********** テスト実行：00254_element_check_00231 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.plusch_day;
      print(mac_info.csv_prg.plusch_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.plusch_day = testData1;
      print(mac_info.csv_prg.plusch_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.plusch_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.plusch_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.plusch_day = testData2;
      print(mac_info.csv_prg.plusch_day);
      expect(mac_info.csv_prg.plusch_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plusch_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.plusch_day = defalut;
      print(mac_info.csv_prg.plusch_day);
      expect(mac_info.csv_prg.plusch_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.plusch_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00254_element_check_00231 **********\n\n");
    });

    test('00255_element_check_00232', () async {
      print("\n********** テスト実行：00255_element_check_00232 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.batprcchg_mst;
      print(mac_info.csv_prg.batprcchg_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.batprcchg_mst = testData1;
      print(mac_info.csv_prg.batprcchg_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.batprcchg_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.batprcchg_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.batprcchg_mst = testData2;
      print(mac_info.csv_prg.batprcchg_mst);
      expect(mac_info.csv_prg.batprcchg_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.batprcchg_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.batprcchg_mst = defalut;
      print(mac_info.csv_prg.batprcchg_mst);
      expect(mac_info.csv_prg.batprcchg_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.batprcchg_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00255_element_check_00232 **********\n\n");
    });

    test('00256_element_check_00233', () async {
      print("\n********** テスト実行：00256_element_check_00233 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.batprcchg_week;
      print(mac_info.csv_prg.batprcchg_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.batprcchg_week = testData1;
      print(mac_info.csv_prg.batprcchg_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.batprcchg_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.batprcchg_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.batprcchg_week = testData2;
      print(mac_info.csv_prg.batprcchg_week);
      expect(mac_info.csv_prg.batprcchg_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.batprcchg_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.batprcchg_week = defalut;
      print(mac_info.csv_prg.batprcchg_week);
      expect(mac_info.csv_prg.batprcchg_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.batprcchg_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00256_element_check_00233 **********\n\n");
    });

    test('00257_element_check_00234', () async {
      print("\n********** テスト実行：00257_element_check_00234 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.batprcchg_day;
      print(mac_info.csv_prg.batprcchg_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.batprcchg_day = testData1;
      print(mac_info.csv_prg.batprcchg_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.batprcchg_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.batprcchg_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.batprcchg_day = testData2;
      print(mac_info.csv_prg.batprcchg_day);
      expect(mac_info.csv_prg.batprcchg_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.batprcchg_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.batprcchg_day = defalut;
      print(mac_info.csv_prg.batprcchg_day);
      expect(mac_info.csv_prg.batprcchg_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.batprcchg_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00257_element_check_00234 **********\n\n");
    });

    test('00258_element_check_00235', () async {
      print("\n********** テスト実行：00258_element_check_00235 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fipsch_mst;
      print(mac_info.csv_prg.fipsch_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fipsch_mst = testData1;
      print(mac_info.csv_prg.fipsch_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fipsch_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fipsch_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fipsch_mst = testData2;
      print(mac_info.csv_prg.fipsch_mst);
      expect(mac_info.csv_prg.fipsch_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fipsch_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fipsch_mst = defalut;
      print(mac_info.csv_prg.fipsch_mst);
      expect(mac_info.csv_prg.fipsch_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fipsch_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00258_element_check_00235 **********\n\n");
    });

    test('00259_element_check_00236', () async {
      print("\n********** テスト実行：00259_element_check_00236 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fipsch_week;
      print(mac_info.csv_prg.fipsch_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fipsch_week = testData1;
      print(mac_info.csv_prg.fipsch_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fipsch_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fipsch_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fipsch_week = testData2;
      print(mac_info.csv_prg.fipsch_week);
      expect(mac_info.csv_prg.fipsch_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fipsch_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fipsch_week = defalut;
      print(mac_info.csv_prg.fipsch_week);
      expect(mac_info.csv_prg.fipsch_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fipsch_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00259_element_check_00236 **********\n\n");
    });

    test('00260_element_check_00237', () async {
      print("\n********** テスト実行：00260_element_check_00237 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.fipsch_day;
      print(mac_info.csv_prg.fipsch_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.fipsch_day = testData1;
      print(mac_info.csv_prg.fipsch_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.fipsch_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.fipsch_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.fipsch_day = testData2;
      print(mac_info.csv_prg.fipsch_day);
      expect(mac_info.csv_prg.fipsch_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fipsch_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.fipsch_day = defalut;
      print(mac_info.csv_prg.fipsch_day);
      expect(mac_info.csv_prg.fipsch_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.fipsch_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00260_element_check_00237 **********\n\n");
    });

    test('00261_element_check_00238', () async {
      print("\n********** テスト実行：00261_element_check_00238 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.anvkind_mst;
      print(mac_info.csv_prg.anvkind_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.anvkind_mst = testData1;
      print(mac_info.csv_prg.anvkind_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.anvkind_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.anvkind_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.anvkind_mst = testData2;
      print(mac_info.csv_prg.anvkind_mst);
      expect(mac_info.csv_prg.anvkind_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.anvkind_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.anvkind_mst = defalut;
      print(mac_info.csv_prg.anvkind_mst);
      expect(mac_info.csv_prg.anvkind_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.anvkind_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00261_element_check_00238 **********\n\n");
    });

    test('00262_element_check_00239', () async {
      print("\n********** テスト実行：00262_element_check_00239 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.anvkind_week;
      print(mac_info.csv_prg.anvkind_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.anvkind_week = testData1;
      print(mac_info.csv_prg.anvkind_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.anvkind_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.anvkind_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.anvkind_week = testData2;
      print(mac_info.csv_prg.anvkind_week);
      expect(mac_info.csv_prg.anvkind_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.anvkind_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.anvkind_week = defalut;
      print(mac_info.csv_prg.anvkind_week);
      expect(mac_info.csv_prg.anvkind_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.anvkind_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00262_element_check_00239 **********\n\n");
    });

    test('00263_element_check_00240', () async {
      print("\n********** テスト実行：00263_element_check_00240 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.anvkind_day;
      print(mac_info.csv_prg.anvkind_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.anvkind_day = testData1;
      print(mac_info.csv_prg.anvkind_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.anvkind_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.anvkind_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.anvkind_day = testData2;
      print(mac_info.csv_prg.anvkind_day);
      expect(mac_info.csv_prg.anvkind_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.anvkind_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.anvkind_day = defalut;
      print(mac_info.csv_prg.anvkind_day);
      expect(mac_info.csv_prg.anvkind_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.anvkind_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00263_element_check_00240 **********\n\n");
    });

    test('00264_element_check_00241', () async {
      print("\n********** テスト実行：00264_element_check_00241 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.decrbt_mst;
      print(mac_info.csv_prg.decrbt_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.decrbt_mst = testData1;
      print(mac_info.csv_prg.decrbt_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.decrbt_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.decrbt_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.decrbt_mst = testData2;
      print(mac_info.csv_prg.decrbt_mst);
      expect(mac_info.csv_prg.decrbt_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.decrbt_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.decrbt_mst = defalut;
      print(mac_info.csv_prg.decrbt_mst);
      expect(mac_info.csv_prg.decrbt_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.decrbt_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00264_element_check_00241 **********\n\n");
    });

    test('00265_element_check_00242', () async {
      print("\n********** テスト実行：00265_element_check_00242 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.decrbt_week;
      print(mac_info.csv_prg.decrbt_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.decrbt_week = testData1;
      print(mac_info.csv_prg.decrbt_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.decrbt_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.decrbt_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.decrbt_week = testData2;
      print(mac_info.csv_prg.decrbt_week);
      expect(mac_info.csv_prg.decrbt_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.decrbt_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.decrbt_week = defalut;
      print(mac_info.csv_prg.decrbt_week);
      expect(mac_info.csv_prg.decrbt_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.decrbt_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00265_element_check_00242 **********\n\n");
    });

    test('00266_element_check_00243', () async {
      print("\n********** テスト実行：00266_element_check_00243 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.decrbt_day;
      print(mac_info.csv_prg.decrbt_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.decrbt_day = testData1;
      print(mac_info.csv_prg.decrbt_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.decrbt_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.decrbt_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.decrbt_day = testData2;
      print(mac_info.csv_prg.decrbt_day);
      expect(mac_info.csv_prg.decrbt_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.decrbt_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.decrbt_day = defalut;
      print(mac_info.csv_prg.decrbt_day);
      expect(mac_info.csv_prg.decrbt_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.decrbt_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00266_element_check_00243 **********\n\n");
    });

    test('00267_element_check_00244', () async {
      print("\n********** テスト実行：00267_element_check_00244 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.zipcode_mst;
      print(mac_info.csv_prg.zipcode_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.zipcode_mst = testData1;
      print(mac_info.csv_prg.zipcode_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.zipcode_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.zipcode_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.zipcode_mst = testData2;
      print(mac_info.csv_prg.zipcode_mst);
      expect(mac_info.csv_prg.zipcode_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zipcode_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.zipcode_mst = defalut;
      print(mac_info.csv_prg.zipcode_mst);
      expect(mac_info.csv_prg.zipcode_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zipcode_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00267_element_check_00244 **********\n\n");
    });

    test('00268_element_check_00245', () async {
      print("\n********** テスト実行：00268_element_check_00245 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.zipcode_week;
      print(mac_info.csv_prg.zipcode_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.zipcode_week = testData1;
      print(mac_info.csv_prg.zipcode_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.zipcode_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.zipcode_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.zipcode_week = testData2;
      print(mac_info.csv_prg.zipcode_week);
      expect(mac_info.csv_prg.zipcode_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zipcode_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.zipcode_week = defalut;
      print(mac_info.csv_prg.zipcode_week);
      expect(mac_info.csv_prg.zipcode_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zipcode_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00268_element_check_00245 **********\n\n");
    });

    test('00269_element_check_00246', () async {
      print("\n********** テスト実行：00269_element_check_00246 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.zipcode_day;
      print(mac_info.csv_prg.zipcode_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.zipcode_day = testData1;
      print(mac_info.csv_prg.zipcode_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.zipcode_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.zipcode_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.zipcode_day = testData2;
      print(mac_info.csv_prg.zipcode_day);
      expect(mac_info.csv_prg.zipcode_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zipcode_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.zipcode_day = defalut;
      print(mac_info.csv_prg.zipcode_day);
      expect(mac_info.csv_prg.zipcode_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.zipcode_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00269_element_check_00246 **********\n\n");
    });

    test('00270_element_check_00247', () async {
      print("\n********** テスト実行：00270_element_check_00247 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.maker_mst;
      print(mac_info.csv_prg.maker_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.maker_mst = testData1;
      print(mac_info.csv_prg.maker_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.maker_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.maker_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.maker_mst = testData2;
      print(mac_info.csv_prg.maker_mst);
      expect(mac_info.csv_prg.maker_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.maker_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.maker_mst = defalut;
      print(mac_info.csv_prg.maker_mst);
      expect(mac_info.csv_prg.maker_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.maker_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00270_element_check_00247 **********\n\n");
    });

    test('00271_element_check_00248', () async {
      print("\n********** テスト実行：00271_element_check_00248 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.maker_week;
      print(mac_info.csv_prg.maker_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.maker_week = testData1;
      print(mac_info.csv_prg.maker_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.maker_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.maker_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.maker_week = testData2;
      print(mac_info.csv_prg.maker_week);
      expect(mac_info.csv_prg.maker_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.maker_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.maker_week = defalut;
      print(mac_info.csv_prg.maker_week);
      expect(mac_info.csv_prg.maker_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.maker_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00271_element_check_00248 **********\n\n");
    });

    test('00272_element_check_00249', () async {
      print("\n********** テスト実行：00272_element_check_00249 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.maker_day;
      print(mac_info.csv_prg.maker_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.maker_day = testData1;
      print(mac_info.csv_prg.maker_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.maker_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.maker_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.maker_day = testData2;
      print(mac_info.csv_prg.maker_day);
      expect(mac_info.csv_prg.maker_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.maker_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.maker_day = defalut;
      print(mac_info.csv_prg.maker_day);
      expect(mac_info.csv_prg.maker_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.maker_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00272_element_check_00249 **********\n\n");
    });

    test('00273_element_check_00250', () async {
      print("\n********** テスト実行：00273_element_check_00250 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mcard_mst;
      print(mac_info.csv_prg.mcard_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mcard_mst = testData1;
      print(mac_info.csv_prg.mcard_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mcard_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mcard_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mcard_mst = testData2;
      print(mac_info.csv_prg.mcard_mst);
      expect(mac_info.csv_prg.mcard_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mcard_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mcard_mst = defalut;
      print(mac_info.csv_prg.mcard_mst);
      expect(mac_info.csv_prg.mcard_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mcard_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00273_element_check_00250 **********\n\n");
    });

    test('00274_element_check_00251', () async {
      print("\n********** テスト実行：00274_element_check_00251 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mcard_week;
      print(mac_info.csv_prg.mcard_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mcard_week = testData1;
      print(mac_info.csv_prg.mcard_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mcard_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mcard_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mcard_week = testData2;
      print(mac_info.csv_prg.mcard_week);
      expect(mac_info.csv_prg.mcard_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mcard_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mcard_week = defalut;
      print(mac_info.csv_prg.mcard_week);
      expect(mac_info.csv_prg.mcard_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mcard_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00274_element_check_00251 **********\n\n");
    });

    test('00275_element_check_00252', () async {
      print("\n********** テスト実行：00275_element_check_00252 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.mcard_day;
      print(mac_info.csv_prg.mcard_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.mcard_day = testData1;
      print(mac_info.csv_prg.mcard_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.mcard_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.mcard_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.mcard_day = testData2;
      print(mac_info.csv_prg.mcard_day);
      expect(mac_info.csv_prg.mcard_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mcard_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.mcard_day = defalut;
      print(mac_info.csv_prg.mcard_day);
      expect(mac_info.csv_prg.mcard_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.mcard_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00275_element_check_00252 **********\n\n");
    });

    test('00276_element_check_00253', () async {
      print("\n********** テスト実行：00276_element_check_00253 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.reason_mst;
      print(mac_info.csv_prg.reason_mst);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.reason_mst = testData1;
      print(mac_info.csv_prg.reason_mst);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.reason_mst == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.reason_mst == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.reason_mst = testData2;
      print(mac_info.csv_prg.reason_mst);
      expect(mac_info.csv_prg.reason_mst == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.reason_mst == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.reason_mst = defalut;
      print(mac_info.csv_prg.reason_mst);
      expect(mac_info.csv_prg.reason_mst == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.reason_mst == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00276_element_check_00253 **********\n\n");
    });

    test('00277_element_check_00254', () async {
      print("\n********** テスト実行：00277_element_check_00254 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.reason_week;
      print(mac_info.csv_prg.reason_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.reason_week = testData1;
      print(mac_info.csv_prg.reason_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.reason_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.reason_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.reason_week = testData2;
      print(mac_info.csv_prg.reason_week);
      expect(mac_info.csv_prg.reason_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.reason_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.reason_week = defalut;
      print(mac_info.csv_prg.reason_week);
      expect(mac_info.csv_prg.reason_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.reason_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00277_element_check_00254 **********\n\n");
    });

    test('00278_element_check_00255', () async {
      print("\n********** テスト実行：00278_element_check_00255 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_prg.reason_day;
      print(mac_info.csv_prg.reason_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_prg.reason_day = testData1;
      print(mac_info.csv_prg.reason_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_prg.reason_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_prg.reason_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_prg.reason_day = testData2;
      print(mac_info.csv_prg.reason_day);
      expect(mac_info.csv_prg.reason_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.reason_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_prg.reason_day = defalut;
      print(mac_info.csv_prg.reason_day);
      expect(mac_info.csv_prg.reason_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_prg.reason_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00278_element_check_00255 **********\n\n");
    });

    test('00279_element_check_00256', () async {
      print("\n********** テスト実行：00279_element_check_00256 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_deal;
      print(mac_info.csv_dly.dly_deal);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_deal = testData1;
      print(mac_info.csv_dly.dly_deal);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_deal == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_deal == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_deal = testData2;
      print(mac_info.csv_dly.dly_deal);
      expect(mac_info.csv_dly.dly_deal == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_deal == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_deal = defalut;
      print(mac_info.csv_dly.dly_deal);
      expect(mac_info.csv_dly.dly_deal == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_deal == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00279_element_check_00256 **********\n\n");
    });

    test('00280_element_check_00257', () async {
      print("\n********** テスト実行：00280_element_check_00257 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlydeal_week;
      print(mac_info.csv_dly.dlydeal_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlydeal_week = testData1;
      print(mac_info.csv_dly.dlydeal_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlydeal_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlydeal_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlydeal_week = testData2;
      print(mac_info.csv_dly.dlydeal_week);
      expect(mac_info.csv_dly.dlydeal_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlydeal_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlydeal_week = defalut;
      print(mac_info.csv_dly.dlydeal_week);
      expect(mac_info.csv_dly.dlydeal_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlydeal_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00280_element_check_00257 **********\n\n");
    });

    test('00281_element_check_00258', () async {
      print("\n********** テスト実行：00281_element_check_00258 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlydeal_day;
      print(mac_info.csv_dly.dlydeal_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlydeal_day = testData1;
      print(mac_info.csv_dly.dlydeal_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlydeal_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlydeal_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlydeal_day = testData2;
      print(mac_info.csv_dly.dlydeal_day);
      expect(mac_info.csv_dly.dlydeal_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlydeal_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlydeal_day = defalut;
      print(mac_info.csv_dly.dlydeal_day);
      expect(mac_info.csv_dly.dlydeal_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlydeal_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00281_element_check_00258 **********\n\n");
    });

    test('00282_element_check_00259', () async {
      print("\n********** テスト実行：00282_element_check_00259 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_mdl;
      print(mac_info.csv_dly.dly_mdl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_mdl = testData1;
      print(mac_info.csv_dly.dly_mdl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_mdl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_mdl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_mdl = testData2;
      print(mac_info.csv_dly.dly_mdl);
      expect(mac_info.csv_dly.dly_mdl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_mdl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_mdl = defalut;
      print(mac_info.csv_dly.dly_mdl);
      expect(mac_info.csv_dly.dly_mdl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_mdl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00282_element_check_00259 **********\n\n");
    });

    test('00283_element_check_00260', () async {
      print("\n********** テスト実行：00283_element_check_00260 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlymdl_week;
      print(mac_info.csv_dly.dlymdl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlymdl_week = testData1;
      print(mac_info.csv_dly.dlymdl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlymdl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlymdl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlymdl_week = testData2;
      print(mac_info.csv_dly.dlymdl_week);
      expect(mac_info.csv_dly.dlymdl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymdl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlymdl_week = defalut;
      print(mac_info.csv_dly.dlymdl_week);
      expect(mac_info.csv_dly.dlymdl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymdl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00283_element_check_00260 **********\n\n");
    });

    test('00284_element_check_00261', () async {
      print("\n********** テスト実行：00284_element_check_00261 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlymdl_day;
      print(mac_info.csv_dly.dlymdl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlymdl_day = testData1;
      print(mac_info.csv_dly.dlymdl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlymdl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlymdl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlymdl_day = testData2;
      print(mac_info.csv_dly.dlymdl_day);
      expect(mac_info.csv_dly.dlymdl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymdl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlymdl_day = defalut;
      print(mac_info.csv_dly.dlymdl_day);
      expect(mac_info.csv_dly.dlymdl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymdl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00284_element_check_00261 **********\n\n");
    });

    test('00285_element_check_00262', () async {
      print("\n********** テスト実行：00285_element_check_00262 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_sml;
      print(mac_info.csv_dly.dly_sml);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_sml = testData1;
      print(mac_info.csv_dly.dly_sml);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_sml == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_sml == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_sml = testData2;
      print(mac_info.csv_dly.dly_sml);
      expect(mac_info.csv_dly.dly_sml == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_sml == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_sml = defalut;
      print(mac_info.csv_dly.dly_sml);
      expect(mac_info.csv_dly.dly_sml == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_sml == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00285_element_check_00262 **********\n\n");
    });

    test('00286_element_check_00263', () async {
      print("\n********** テスト実行：00286_element_check_00263 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlysml_week;
      print(mac_info.csv_dly.dlysml_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlysml_week = testData1;
      print(mac_info.csv_dly.dlysml_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlysml_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlysml_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlysml_week = testData2;
      print(mac_info.csv_dly.dlysml_week);
      expect(mac_info.csv_dly.dlysml_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysml_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlysml_week = defalut;
      print(mac_info.csv_dly.dlysml_week);
      expect(mac_info.csv_dly.dlysml_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysml_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00286_element_check_00263 **********\n\n");
    });

    test('00287_element_check_00264', () async {
      print("\n********** テスト実行：00287_element_check_00264 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlysml_day;
      print(mac_info.csv_dly.dlysml_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlysml_day = testData1;
      print(mac_info.csv_dly.dlysml_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlysml_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlysml_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlysml_day = testData2;
      print(mac_info.csv_dly.dlysml_day);
      expect(mac_info.csv_dly.dlysml_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysml_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlysml_day = defalut;
      print(mac_info.csv_dly.dlysml_day);
      expect(mac_info.csv_dly.dlysml_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysml_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00287_element_check_00264 **********\n\n");
    });

    test('00288_element_check_00265', () async {
      print("\n********** テスト実行：00288_element_check_00265 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_plu;
      print(mac_info.csv_dly.dly_plu);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_plu = testData1;
      print(mac_info.csv_dly.dly_plu);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_plu == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_plu == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_plu = testData2;
      print(mac_info.csv_dly.dly_plu);
      expect(mac_info.csv_dly.dly_plu == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_plu == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_plu = defalut;
      print(mac_info.csv_dly.dly_plu);
      expect(mac_info.csv_dly.dly_plu == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_plu == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00288_element_check_00265 **********\n\n");
    });

    test('00289_element_check_00266', () async {
      print("\n********** テスト実行：00289_element_check_00266 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyplu_week;
      print(mac_info.csv_dly.dlyplu_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyplu_week = testData1;
      print(mac_info.csv_dly.dlyplu_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyplu_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyplu_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyplu_week = testData2;
      print(mac_info.csv_dly.dlyplu_week);
      expect(mac_info.csv_dly.dlyplu_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyplu_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyplu_week = defalut;
      print(mac_info.csv_dly.dlyplu_week);
      expect(mac_info.csv_dly.dlyplu_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyplu_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00289_element_check_00266 **********\n\n");
    });

    test('00290_element_check_00267', () async {
      print("\n********** テスト実行：00290_element_check_00267 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyplu_day;
      print(mac_info.csv_dly.dlyplu_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyplu_day = testData1;
      print(mac_info.csv_dly.dlyplu_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyplu_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyplu_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyplu_day = testData2;
      print(mac_info.csv_dly.dlyplu_day);
      expect(mac_info.csv_dly.dlyplu_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyplu_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyplu_day = defalut;
      print(mac_info.csv_dly.dlyplu_day);
      expect(mac_info.csv_dly.dlyplu_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyplu_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00290_element_check_00267 **********\n\n");
    });

    test('00291_element_check_00268', () async {
      print("\n********** テスト実行：00291_element_check_00268 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_cat;
      print(mac_info.csv_dly.dly_cat);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_cat = testData1;
      print(mac_info.csv_dly.dly_cat);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_cat == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_cat == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_cat = testData2;
      print(mac_info.csv_dly.dly_cat);
      expect(mac_info.csv_dly.dly_cat == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_cat == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_cat = defalut;
      print(mac_info.csv_dly.dly_cat);
      expect(mac_info.csv_dly.dly_cat == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_cat == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00291_element_check_00268 **********\n\n");
    });

    test('00292_element_check_00269', () async {
      print("\n********** テスト実行：00292_element_check_00269 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlycat_week;
      print(mac_info.csv_dly.dlycat_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlycat_week = testData1;
      print(mac_info.csv_dly.dlycat_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlycat_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlycat_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlycat_week = testData2;
      print(mac_info.csv_dly.dlycat_week);
      expect(mac_info.csv_dly.dlycat_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycat_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlycat_week = defalut;
      print(mac_info.csv_dly.dlycat_week);
      expect(mac_info.csv_dly.dlycat_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycat_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00292_element_check_00269 **********\n\n");
    });

    test('00293_element_check_00270', () async {
      print("\n********** テスト実行：00293_element_check_00270 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlycatl_day;
      print(mac_info.csv_dly.dlycatl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlycatl_day = testData1;
      print(mac_info.csv_dly.dlycatl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlycatl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlycatl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlycatl_day = testData2;
      print(mac_info.csv_dly.dlycatl_day);
      expect(mac_info.csv_dly.dlycatl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycatl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlycatl_day = defalut;
      print(mac_info.csv_dly.dlycatl_day);
      expect(mac_info.csv_dly.dlycatl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycatl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00293_element_check_00270 **********\n\n");
    });

    test('00294_element_check_00271', () async {
      print("\n********** テスト実行：00294_element_check_00271 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_brgn;
      print(mac_info.csv_dly.dly_brgn);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_brgn = testData1;
      print(mac_info.csv_dly.dly_brgn);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_brgn == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_brgn == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_brgn = testData2;
      print(mac_info.csv_dly.dly_brgn);
      expect(mac_info.csv_dly.dly_brgn == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_brgn == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_brgn = defalut;
      print(mac_info.csv_dly.dly_brgn);
      expect(mac_info.csv_dly.dly_brgn == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_brgn == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00294_element_check_00271 **********\n\n");
    });

    test('00295_element_check_00272', () async {
      print("\n********** テスト実行：00295_element_check_00272 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlybrgn_week;
      print(mac_info.csv_dly.dlybrgn_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlybrgn_week = testData1;
      print(mac_info.csv_dly.dlybrgn_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlybrgn_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlybrgn_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlybrgn_week = testData2;
      print(mac_info.csv_dly.dlybrgn_week);
      expect(mac_info.csv_dly.dlybrgn_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybrgn_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlybrgn_week = defalut;
      print(mac_info.csv_dly.dlybrgn_week);
      expect(mac_info.csv_dly.dlybrgn_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybrgn_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00295_element_check_00272 **********\n\n");
    });

    test('00296_element_check_00273', () async {
      print("\n********** テスト実行：00296_element_check_00273 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlybrgn_day;
      print(mac_info.csv_dly.dlybrgn_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlybrgn_day = testData1;
      print(mac_info.csv_dly.dlybrgn_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlybrgn_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlybrgn_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlybrgn_day = testData2;
      print(mac_info.csv_dly.dlybrgn_day);
      expect(mac_info.csv_dly.dlybrgn_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybrgn_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlybrgn_day = defalut;
      print(mac_info.csv_dly.dlybrgn_day);
      expect(mac_info.csv_dly.dlybrgn_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybrgn_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00296_element_check_00273 **********\n\n");
    });

    test('00297_element_check_00274', () async {
      print("\n********** テスト実行：00297_element_check_00274 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_mach;
      print(mac_info.csv_dly.dly_mach);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_mach = testData1;
      print(mac_info.csv_dly.dly_mach);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_mach == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_mach == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_mach = testData2;
      print(mac_info.csv_dly.dly_mach);
      expect(mac_info.csv_dly.dly_mach == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_mach == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_mach = defalut;
      print(mac_info.csv_dly.dly_mach);
      expect(mac_info.csv_dly.dly_mach == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_mach == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00297_element_check_00274 **********\n\n");
    });

    test('00298_element_check_00275', () async {
      print("\n********** テスト実行：00298_element_check_00275 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlymach_week;
      print(mac_info.csv_dly.dlymach_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlymach_week = testData1;
      print(mac_info.csv_dly.dlymach_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlymach_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlymach_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlymach_week = testData2;
      print(mac_info.csv_dly.dlymach_week);
      expect(mac_info.csv_dly.dlymach_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymach_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlymach_week = defalut;
      print(mac_info.csv_dly.dlymach_week);
      expect(mac_info.csv_dly.dlymach_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymach_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00298_element_check_00275 **********\n\n");
    });

    test('00299_element_check_00276', () async {
      print("\n********** テスト実行：00299_element_check_00276 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlymach_day;
      print(mac_info.csv_dly.dlymach_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlymach_day = testData1;
      print(mac_info.csv_dly.dlymach_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlymach_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlymach_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlymach_day = testData2;
      print(mac_info.csv_dly.dlymach_day);
      expect(mac_info.csv_dly.dlymach_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymach_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlymach_day = defalut;
      print(mac_info.csv_dly.dlymach_day);
      expect(mac_info.csv_dly.dlymach_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlymach_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00299_element_check_00276 **********\n\n");
    });

    test('00300_element_check_00277', () async {
      print("\n********** テスト実行：00300_element_check_00277 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_crdt;
      print(mac_info.csv_dly.dly_crdt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_crdt = testData1;
      print(mac_info.csv_dly.dly_crdt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_crdt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_crdt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_crdt = testData2;
      print(mac_info.csv_dly.dly_crdt);
      expect(mac_info.csv_dly.dly_crdt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_crdt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_crdt = defalut;
      print(mac_info.csv_dly.dly_crdt);
      expect(mac_info.csv_dly.dly_crdt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_crdt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00300_element_check_00277 **********\n\n");
    });

    test('00301_element_check_00278', () async {
      print("\n********** テスト実行：00301_element_check_00278 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlycrdt_week;
      print(mac_info.csv_dly.dlycrdt_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlycrdt_week = testData1;
      print(mac_info.csv_dly.dlycrdt_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlycrdt_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlycrdt_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlycrdt_week = testData2;
      print(mac_info.csv_dly.dlycrdt_week);
      expect(mac_info.csv_dly.dlycrdt_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycrdt_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlycrdt_week = defalut;
      print(mac_info.csv_dly.dlycrdt_week);
      expect(mac_info.csv_dly.dlycrdt_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycrdt_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00301_element_check_00278 **********\n\n");
    });

    test('00302_element_check_00279', () async {
      print("\n********** テスト実行：00302_element_check_00279 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlycrdt_day;
      print(mac_info.csv_dly.dlycrdt_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlycrdt_day = testData1;
      print(mac_info.csv_dly.dlycrdt_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlycrdt_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlycrdt_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlycrdt_day = testData2;
      print(mac_info.csv_dly.dlycrdt_day);
      expect(mac_info.csv_dly.dlycrdt_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycrdt_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlycrdt_day = defalut;
      print(mac_info.csv_dly.dlycrdt_day);
      expect(mac_info.csv_dly.dlycrdt_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycrdt_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00302_element_check_00279 **********\n\n");
    });

    test('00303_element_check_00280', () async {
      print("\n********** テスト実行：00303_element_check_00280 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_tmp;
      print(mac_info.csv_dly.dly_tmp);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_tmp = testData1;
      print(mac_info.csv_dly.dly_tmp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_tmp == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_tmp == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_tmp = testData2;
      print(mac_info.csv_dly.dly_tmp);
      expect(mac_info.csv_dly.dly_tmp == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_tmp == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_tmp = defalut;
      print(mac_info.csv_dly.dly_tmp);
      expect(mac_info.csv_dly.dly_tmp == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_tmp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00303_element_check_00280 **********\n\n");
    });

    test('00304_element_check_00281', () async {
      print("\n********** テスト実行：00304_element_check_00281 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlytmp_week;
      print(mac_info.csv_dly.dlytmp_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlytmp_week = testData1;
      print(mac_info.csv_dly.dlytmp_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlytmp_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlytmp_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlytmp_week = testData2;
      print(mac_info.csv_dly.dlytmp_week);
      expect(mac_info.csv_dly.dlytmp_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlytmp_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlytmp_week = defalut;
      print(mac_info.csv_dly.dlytmp_week);
      expect(mac_info.csv_dly.dlytmp_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlytmp_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00304_element_check_00281 **********\n\n");
    });

    test('00305_element_check_00282', () async {
      print("\n********** テスト実行：00305_element_check_00282 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlytmp_day;
      print(mac_info.csv_dly.dlytmp_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlytmp_day = testData1;
      print(mac_info.csv_dly.dlytmp_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlytmp_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlytmp_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlytmp_day = testData2;
      print(mac_info.csv_dly.dlytmp_day);
      expect(mac_info.csv_dly.dlytmp_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlytmp_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlytmp_day = defalut;
      print(mac_info.csv_dly.dlytmp_day);
      expect(mac_info.csv_dly.dlytmp_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlytmp_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00305_element_check_00282 **********\n\n");
    });

    test('00306_element_check_00283', () async {
      print("\n********** テスト実行：00306_element_check_00283 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_prcchg;
      print(mac_info.csv_dly.dly_prcchg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_prcchg = testData1;
      print(mac_info.csv_dly.dly_prcchg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_prcchg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_prcchg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_prcchg = testData2;
      print(mac_info.csv_dly.dly_prcchg);
      expect(mac_info.csv_dly.dly_prcchg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_prcchg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_prcchg = defalut;
      print(mac_info.csv_dly.dly_prcchg);
      expect(mac_info.csv_dly.dly_prcchg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_prcchg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00306_element_check_00283 **********\n\n");
    });

    test('00307_element_check_00284', () async {
      print("\n********** テスト実行：00307_element_check_00284 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyprcchgl_week;
      print(mac_info.csv_dly.dlyprcchgl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyprcchgl_week = testData1;
      print(mac_info.csv_dly.dlyprcchgl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyprcchgl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyprcchgl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyprcchgl_week = testData2;
      print(mac_info.csv_dly.dlyprcchgl_week);
      expect(mac_info.csv_dly.dlyprcchgl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyprcchgl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyprcchgl_week = defalut;
      print(mac_info.csv_dly.dlyprcchgl_week);
      expect(mac_info.csv_dly.dlyprcchgl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyprcchgl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00307_element_check_00284 **********\n\n");
    });

    test('00308_element_check_00285', () async {
      print("\n********** テスト実行：00308_element_check_00285 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyprcchg_day;
      print(mac_info.csv_dly.dlyprcchg_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyprcchg_day = testData1;
      print(mac_info.csv_dly.dlyprcchg_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyprcchg_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyprcchg_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyprcchg_day = testData2;
      print(mac_info.csv_dly.dlyprcchg_day);
      expect(mac_info.csv_dly.dlyprcchg_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyprcchg_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyprcchg_day = defalut;
      print(mac_info.csv_dly.dlyprcchg_day);
      expect(mac_info.csv_dly.dlyprcchg_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyprcchg_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00308_element_check_00285 **********\n\n");
    });

    test('00309_element_check_00286', () async {
      print("\n********** テスト実行：00309_element_check_00286 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_itemlog;
      print(mac_info.csv_dly.dly_itemlog);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_itemlog = testData1;
      print(mac_info.csv_dly.dly_itemlog);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_itemlog == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_itemlog == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_itemlog = testData2;
      print(mac_info.csv_dly.dly_itemlog);
      expect(mac_info.csv_dly.dly_itemlog == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_itemlog == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_itemlog = defalut;
      print(mac_info.csv_dly.dly_itemlog);
      expect(mac_info.csv_dly.dly_itemlog == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_itemlog == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00309_element_check_00286 **********\n\n");
    });

    test('00310_element_check_00287', () async {
      print("\n********** テスト実行：00310_element_check_00287 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyitemlog_week;
      print(mac_info.csv_dly.dlyitemlog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyitemlog_week = testData1;
      print(mac_info.csv_dly.dlyitemlog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyitemlog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyitemlog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyitemlog_week = testData2;
      print(mac_info.csv_dly.dlyitemlog_week);
      expect(mac_info.csv_dly.dlyitemlog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyitemlog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyitemlog_week = defalut;
      print(mac_info.csv_dly.dlyitemlog_week);
      expect(mac_info.csv_dly.dlyitemlog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyitemlog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00310_element_check_00287 **********\n\n");
    });

    test('00311_element_check_00288', () async {
      print("\n********** テスト実行：00311_element_check_00288 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyitmlog_day;
      print(mac_info.csv_dly.dlyitmlog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyitmlog_day = testData1;
      print(mac_info.csv_dly.dlyitmlog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyitmlog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyitmlog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyitmlog_day = testData2;
      print(mac_info.csv_dly.dlyitmlog_day);
      expect(mac_info.csv_dly.dlyitmlog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyitmlog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyitmlog_day = defalut;
      print(mac_info.csv_dly.dlyitmlog_day);
      expect(mac_info.csv_dly.dlyitmlog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyitmlog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00311_element_check_00288 **********\n\n");
    });

    test('00312_element_check_00289', () async {
      print("\n********** テスト実行：00312_element_check_00289 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_bdllog;
      print(mac_info.csv_dly.dly_bdllog);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_bdllog = testData1;
      print(mac_info.csv_dly.dly_bdllog);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_bdllog == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_bdllog == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_bdllog = testData2;
      print(mac_info.csv_dly.dly_bdllog);
      expect(mac_info.csv_dly.dly_bdllog == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_bdllog == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_bdllog = defalut;
      print(mac_info.csv_dly.dly_bdllog);
      expect(mac_info.csv_dly.dly_bdllog == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_bdllog == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00312_element_check_00289 **********\n\n");
    });

    test('00313_element_check_00290', () async {
      print("\n********** テスト実行：00313_element_check_00290 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlybdllog_week;
      print(mac_info.csv_dly.dlybdllog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlybdllog_week = testData1;
      print(mac_info.csv_dly.dlybdllog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlybdllog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlybdllog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlybdllog_week = testData2;
      print(mac_info.csv_dly.dlybdllog_week);
      expect(mac_info.csv_dly.dlybdllog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybdllog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlybdllog_week = defalut;
      print(mac_info.csv_dly.dlybdllog_week);
      expect(mac_info.csv_dly.dlybdllog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybdllog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00313_element_check_00290 **********\n\n");
    });

    test('00314_element_check_00291', () async {
      print("\n********** テスト実行：00314_element_check_00291 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlybdllog_day;
      print(mac_info.csv_dly.dlybdllog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlybdllog_day = testData1;
      print(mac_info.csv_dly.dlybdllog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlybdllog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlybdllog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlybdllog_day = testData2;
      print(mac_info.csv_dly.dlybdllog_day);
      expect(mac_info.csv_dly.dlybdllog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybdllog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlybdllog_day = defalut;
      print(mac_info.csv_dly.dlybdllog_day);
      expect(mac_info.csv_dly.dlybdllog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlybdllog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00314_element_check_00291 **********\n\n");
    });

    test('00315_element_check_00292', () async {
      print("\n********** テスト実行：00315_element_check_00292 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_stmlog;
      print(mac_info.csv_dly.dly_stmlog);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_stmlog = testData1;
      print(mac_info.csv_dly.dly_stmlog);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_stmlog == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_stmlog == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_stmlog = testData2;
      print(mac_info.csv_dly.dly_stmlog);
      expect(mac_info.csv_dly.dly_stmlog == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_stmlog == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_stmlog = defalut;
      print(mac_info.csv_dly.dly_stmlog);
      expect(mac_info.csv_dly.dly_stmlog == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_stmlog == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00315_element_check_00292 **********\n\n");
    });

    test('00316_element_check_00293', () async {
      print("\n********** テスト実行：00316_element_check_00293 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlystmlog_week;
      print(mac_info.csv_dly.dlystmlog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlystmlog_week = testData1;
      print(mac_info.csv_dly.dlystmlog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlystmlog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlystmlog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlystmlog_week = testData2;
      print(mac_info.csv_dly.dlystmlog_week);
      expect(mac_info.csv_dly.dlystmlog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlystmlog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlystmlog_week = defalut;
      print(mac_info.csv_dly.dlystmlog_week);
      expect(mac_info.csv_dly.dlystmlog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlystmlog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00316_element_check_00293 **********\n\n");
    });

    test('00317_element_check_00294', () async {
      print("\n********** テスト実行：00317_element_check_00294 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlystmlog_day;
      print(mac_info.csv_dly.dlystmlog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlystmlog_day = testData1;
      print(mac_info.csv_dly.dlystmlog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlystmlog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlystmlog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlystmlog_day = testData2;
      print(mac_info.csv_dly.dlystmlog_day);
      expect(mac_info.csv_dly.dlystmlog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlystmlog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlystmlog_day = defalut;
      print(mac_info.csv_dly.dlystmlog_day);
      expect(mac_info.csv_dly.dlystmlog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlystmlog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00317_element_check_00294 **********\n\n");
    });

    test('00318_element_check_00295', () async {
      print("\n********** テスト実行：00318_element_check_00295 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_ttllog;
      print(mac_info.csv_dly.dly_ttllog);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_ttllog = testData1;
      print(mac_info.csv_dly.dly_ttllog);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_ttllog == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_ttllog == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_ttllog = testData2;
      print(mac_info.csv_dly.dly_ttllog);
      expect(mac_info.csv_dly.dly_ttllog == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_ttllog == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_ttllog = defalut;
      print(mac_info.csv_dly.dly_ttllog);
      expect(mac_info.csv_dly.dly_ttllog == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_ttllog == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00318_element_check_00295 **********\n\n");
    });

    test('00319_element_check_00296', () async {
      print("\n********** テスト実行：00319_element_check_00296 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyttllog_week;
      print(mac_info.csv_dly.dlyttllog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyttllog_week = testData1;
      print(mac_info.csv_dly.dlyttllog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyttllog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyttllog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyttllog_week = testData2;
      print(mac_info.csv_dly.dlyttllog_week);
      expect(mac_info.csv_dly.dlyttllog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyttllog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyttllog_week = defalut;
      print(mac_info.csv_dly.dlyttllog_week);
      expect(mac_info.csv_dly.dlyttllog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyttllog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00319_element_check_00296 **********\n\n");
    });

    test('00320_element_check_00297', () async {
      print("\n********** テスト実行：00320_element_check_00297 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyttllog_day;
      print(mac_info.csv_dly.dlyttllog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyttllog_day = testData1;
      print(mac_info.csv_dly.dlyttllog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyttllog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyttllog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyttllog_day = testData2;
      print(mac_info.csv_dly.dlyttllog_day);
      expect(mac_info.csv_dly.dlyttllog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyttllog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyttllog_day = defalut;
      print(mac_info.csv_dly.dlyttllog_day);
      expect(mac_info.csv_dly.dlyttllog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyttllog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00320_element_check_00297 **********\n\n");
    });

    test('00321_element_check_00298', () async {
      print("\n********** テスト実行：00321_element_check_00298 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_ejlog;
      print(mac_info.csv_dly.dly_ejlog);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_ejlog = testData1;
      print(mac_info.csv_dly.dly_ejlog);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_ejlog == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_ejlog == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_ejlog = testData2;
      print(mac_info.csv_dly.dly_ejlog);
      expect(mac_info.csv_dly.dly_ejlog == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_ejlog == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_ejlog = defalut;
      print(mac_info.csv_dly.dly_ejlog);
      expect(mac_info.csv_dly.dly_ejlog == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_ejlog == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00321_element_check_00298 **********\n\n");
    });

    test('00322_element_check_00299', () async {
      print("\n********** テスト実行：00322_element_check_00299 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyejlog_week;
      print(mac_info.csv_dly.dlyejlog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyejlog_week = testData1;
      print(mac_info.csv_dly.dlyejlog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyejlog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyejlog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyejlog_week = testData2;
      print(mac_info.csv_dly.dlyejlog_week);
      expect(mac_info.csv_dly.dlyejlog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyejlog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyejlog_week = defalut;
      print(mac_info.csv_dly.dlyejlog_week);
      expect(mac_info.csv_dly.dlyejlog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyejlog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00322_element_check_00299 **********\n\n");
    });

    test('00323_element_check_00300', () async {
      print("\n********** テスト実行：00323_element_check_00300 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyejlog_day;
      print(mac_info.csv_dly.dlyejlog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyejlog_day = testData1;
      print(mac_info.csv_dly.dlyejlog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyejlog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyejlog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyejlog_day = testData2;
      print(mac_info.csv_dly.dlyejlog_day);
      expect(mac_info.csv_dly.dlyejlog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyejlog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyejlog_day = defalut;
      print(mac_info.csv_dly.dlyejlog_day);
      expect(mac_info.csv_dly.dlyejlog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyejlog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00323_element_check_00300 **********\n\n");
    });

    test('00324_element_check_00301', () async {
      print("\n********** テスト実行：00324_element_check_00301 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_cust;
      print(mac_info.csv_dly.dly_cust);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_cust = testData1;
      print(mac_info.csv_dly.dly_cust);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_cust == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_cust == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_cust = testData2;
      print(mac_info.csv_dly.dly_cust);
      expect(mac_info.csv_dly.dly_cust == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_cust == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_cust = defalut;
      print(mac_info.csv_dly.dly_cust);
      expect(mac_info.csv_dly.dly_cust == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_cust == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00324_element_check_00301 **********\n\n");
    });

    test('00325_element_check_00302', () async {
      print("\n********** テスト実行：00325_element_check_00302 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlycust_week;
      print(mac_info.csv_dly.dlycust_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlycust_week = testData1;
      print(mac_info.csv_dly.dlycust_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlycust_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlycust_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlycust_week = testData2;
      print(mac_info.csv_dly.dlycust_week);
      expect(mac_info.csv_dly.dlycust_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycust_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlycust_week = defalut;
      print(mac_info.csv_dly.dlycust_week);
      expect(mac_info.csv_dly.dlycust_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycust_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00325_element_check_00302 **********\n\n");
    });

    test('00326_element_check_00303', () async {
      print("\n********** テスト実行：00326_element_check_00303 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlycust_day;
      print(mac_info.csv_dly.dlycust_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlycust_day = testData1;
      print(mac_info.csv_dly.dlycust_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlycust_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlycust_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlycust_day = testData2;
      print(mac_info.csv_dly.dlycust_day);
      expect(mac_info.csv_dly.dlycust_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycust_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlycust_day = defalut;
      print(mac_info.csv_dly.dlycust_day);
      expect(mac_info.csv_dly.dlycust_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlycust_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00326_element_check_00303 **********\n\n");
    });

    test('00327_element_check_00304', () async {
      print("\n********** テスト実行：00327_element_check_00304 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_zone;
      print(mac_info.csv_dly.dly_zone);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_zone = testData1;
      print(mac_info.csv_dly.dly_zone);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_zone == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_zone == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_zone = testData2;
      print(mac_info.csv_dly.dly_zone);
      expect(mac_info.csv_dly.dly_zone == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_zone == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_zone = defalut;
      print(mac_info.csv_dly.dly_zone);
      expect(mac_info.csv_dly.dly_zone == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_zone == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00327_element_check_00304 **********\n\n");
    });

    test('00328_element_check_00305', () async {
      print("\n********** テスト実行：00328_element_check_00305 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyzone_week;
      print(mac_info.csv_dly.dlyzone_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyzone_week = testData1;
      print(mac_info.csv_dly.dlyzone_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyzone_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyzone_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyzone_week = testData2;
      print(mac_info.csv_dly.dlyzone_week);
      expect(mac_info.csv_dly.dlyzone_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyzone_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyzone_week = defalut;
      print(mac_info.csv_dly.dlyzone_week);
      expect(mac_info.csv_dly.dlyzone_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyzone_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00328_element_check_00305 **********\n\n");
    });

    test('00329_element_check_00306', () async {
      print("\n********** テスト実行：00329_element_check_00306 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyzone_day;
      print(mac_info.csv_dly.dlyzone_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyzone_day = testData1;
      print(mac_info.csv_dly.dlyzone_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyzone_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyzone_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyzone_day = testData2;
      print(mac_info.csv_dly.dlyzone_day);
      expect(mac_info.csv_dly.dlyzone_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyzone_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyzone_day = defalut;
      print(mac_info.csv_dly.dlyzone_day);
      expect(mac_info.csv_dly.dlyzone_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyzone_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00329_element_check_00306 **********\n\n");
    });

    test('00330_element_check_00307', () async {
      print("\n********** テスト実行：00330_element_check_00307 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_svs;
      print(mac_info.csv_dly.dly_svs);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_svs = testData1;
      print(mac_info.csv_dly.dly_svs);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_svs == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_svs == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_svs = testData2;
      print(mac_info.csv_dly.dly_svs);
      expect(mac_info.csv_dly.dly_svs == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_svs == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_svs = defalut;
      print(mac_info.csv_dly.dly_svs);
      expect(mac_info.csv_dly.dly_svs == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_svs == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00330_element_check_00307 **********\n\n");
    });

    test('00331_element_check_00308', () async {
      print("\n********** テスト実行：00331_element_check_00308 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlysvs_week;
      print(mac_info.csv_dly.dlysvs_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlysvs_week = testData1;
      print(mac_info.csv_dly.dlysvs_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlysvs_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlysvs_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlysvs_week = testData2;
      print(mac_info.csv_dly.dlysvs_week);
      expect(mac_info.csv_dly.dlysvs_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysvs_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlysvs_week = defalut;
      print(mac_info.csv_dly.dlysvs_week);
      expect(mac_info.csv_dly.dlysvs_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysvs_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00331_element_check_00308 **********\n\n");
    });

    test('00332_element_check_00309', () async {
      print("\n********** テスト実行：00332_element_check_00309 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlysvs_day;
      print(mac_info.csv_dly.dlysvs_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlysvs_day = testData1;
      print(mac_info.csv_dly.dlysvs_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlysvs_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlysvs_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlysvs_day = testData2;
      print(mac_info.csv_dly.dlysvs_day);
      expect(mac_info.csv_dly.dlysvs_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysvs_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlysvs_day = defalut;
      print(mac_info.csv_dly.dlysvs_day);
      expect(mac_info.csv_dly.dlysvs_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlysvs_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00332_element_check_00309 **********\n\n");
    });

    test('00333_element_check_00310', () async {
      print("\n********** テスト実行：00333_element_check_00310 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_fspplu;
      print(mac_info.csv_dly.dly_fspplu);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_fspplu = testData1;
      print(mac_info.csv_dly.dly_fspplu);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_fspplu == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_fspplu == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_fspplu = testData2;
      print(mac_info.csv_dly.dly_fspplu);
      expect(mac_info.csv_dly.dly_fspplu == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspplu == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_fspplu = defalut;
      print(mac_info.csv_dly.dly_fspplu);
      expect(mac_info.csv_dly.dly_fspplu == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspplu == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00333_element_check_00310 **********\n\n");
    });

    test('00334_element_check_00311', () async {
      print("\n********** テスト実行：00334_element_check_00311 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspplu_week;
      print(mac_info.csv_dly.dlyfspplu_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspplu_week = testData1;
      print(mac_info.csv_dly.dlyfspplu_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspplu_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspplu_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspplu_week = testData2;
      print(mac_info.csv_dly.dlyfspplu_week);
      expect(mac_info.csv_dly.dlyfspplu_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspplu_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspplu_week = defalut;
      print(mac_info.csv_dly.dlyfspplu_week);
      expect(mac_info.csv_dly.dlyfspplu_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspplu_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00334_element_check_00311 **********\n\n");
    });

    test('00335_element_check_00312', () async {
      print("\n********** テスト実行：00335_element_check_00312 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspplu_day;
      print(mac_info.csv_dly.dlyfspplu_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspplu_day = testData1;
      print(mac_info.csv_dly.dlyfspplu_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspplu_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspplu_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspplu_day = testData2;
      print(mac_info.csv_dly.dlyfspplu_day);
      expect(mac_info.csv_dly.dlyfspplu_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspplu_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspplu_day = defalut;
      print(mac_info.csv_dly.dlyfspplu_day);
      expect(mac_info.csv_dly.dlyfspplu_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspplu_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00335_element_check_00312 **********\n\n");
    });

    test('00336_element_check_00313', () async {
      print("\n********** テスト実行：00336_element_check_00313 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_fspsml;
      print(mac_info.csv_dly.dly_fspsml);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_fspsml = testData1;
      print(mac_info.csv_dly.dly_fspsml);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_fspsml == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_fspsml == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_fspsml = testData2;
      print(mac_info.csv_dly.dly_fspsml);
      expect(mac_info.csv_dly.dly_fspsml == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspsml == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_fspsml = defalut;
      print(mac_info.csv_dly.dly_fspsml);
      expect(mac_info.csv_dly.dly_fspsml == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspsml == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00336_element_check_00313 **********\n\n");
    });

    test('00337_element_check_00314', () async {
      print("\n********** テスト実行：00337_element_check_00314 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspsml_week;
      print(mac_info.csv_dly.dlyfspsml_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspsml_week = testData1;
      print(mac_info.csv_dly.dlyfspsml_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspsml_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspsml_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspsml_week = testData2;
      print(mac_info.csv_dly.dlyfspsml_week);
      expect(mac_info.csv_dly.dlyfspsml_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspsml_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspsml_week = defalut;
      print(mac_info.csv_dly.dlyfspsml_week);
      expect(mac_info.csv_dly.dlyfspsml_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspsml_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00337_element_check_00314 **********\n\n");
    });

    test('00338_element_check_00315', () async {
      print("\n********** テスト実行：00338_element_check_00315 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspsml_day;
      print(mac_info.csv_dly.dlyfspsml_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspsml_day = testData1;
      print(mac_info.csv_dly.dlyfspsml_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspsml_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspsml_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspsml_day = testData2;
      print(mac_info.csv_dly.dlyfspsml_day);
      expect(mac_info.csv_dly.dlyfspsml_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspsml_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspsml_day = defalut;
      print(mac_info.csv_dly.dlyfspsml_day);
      expect(mac_info.csv_dly.dlyfspsml_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspsml_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00338_element_check_00315 **********\n\n");
    });

    test('00339_element_check_00316', () async {
      print("\n********** テスト実行：00339_element_check_00316 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_fspmdl;
      print(mac_info.csv_dly.dly_fspmdl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_fspmdl = testData1;
      print(mac_info.csv_dly.dly_fspmdl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_fspmdl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_fspmdl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_fspmdl = testData2;
      print(mac_info.csv_dly.dly_fspmdl);
      expect(mac_info.csv_dly.dly_fspmdl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspmdl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_fspmdl = defalut;
      print(mac_info.csv_dly.dly_fspmdl);
      expect(mac_info.csv_dly.dly_fspmdl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspmdl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00339_element_check_00316 **********\n\n");
    });

    test('00340_element_check_00317', () async {
      print("\n********** テスト実行：00340_element_check_00317 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspmdl_week;
      print(mac_info.csv_dly.dlyfspmdl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspmdl_week = testData1;
      print(mac_info.csv_dly.dlyfspmdl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspmdl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspmdl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspmdl_week = testData2;
      print(mac_info.csv_dly.dlyfspmdl_week);
      expect(mac_info.csv_dly.dlyfspmdl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspmdl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspmdl_week = defalut;
      print(mac_info.csv_dly.dlyfspmdl_week);
      expect(mac_info.csv_dly.dlyfspmdl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspmdl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00340_element_check_00317 **********\n\n");
    });

    test('00341_element_check_00318', () async {
      print("\n********** テスト実行：00341_element_check_00318 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspmdl_day;
      print(mac_info.csv_dly.dlyfspmdl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspmdl_day = testData1;
      print(mac_info.csv_dly.dlyfspmdl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspmdl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspmdl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspmdl_day = testData2;
      print(mac_info.csv_dly.dlyfspmdl_day);
      expect(mac_info.csv_dly.dlyfspmdl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspmdl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspmdl_day = defalut;
      print(mac_info.csv_dly.dlyfspmdl_day);
      expect(mac_info.csv_dly.dlyfspmdl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspmdl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00341_element_check_00318 **********\n\n");
    });

    test('00342_element_check_00319', () async {
      print("\n********** テスト実行：00342_element_check_00319 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_fspttl;
      print(mac_info.csv_dly.dly_fspttl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_fspttl = testData1;
      print(mac_info.csv_dly.dly_fspttl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_fspttl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_fspttl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_fspttl = testData2;
      print(mac_info.csv_dly.dly_fspttl);
      expect(mac_info.csv_dly.dly_fspttl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspttl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_fspttl = defalut;
      print(mac_info.csv_dly.dly_fspttl);
      expect(mac_info.csv_dly.dly_fspttl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_fspttl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00342_element_check_00319 **********\n\n");
    });

    test('00343_element_check_00320', () async {
      print("\n********** テスト実行：00343_element_check_00320 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspttl_week;
      print(mac_info.csv_dly.dlyfspttl_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspttl_week = testData1;
      print(mac_info.csv_dly.dlyfspttl_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspttl_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspttl_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspttl_week = testData2;
      print(mac_info.csv_dly.dlyfspttl_week);
      expect(mac_info.csv_dly.dlyfspttl_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspttl_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspttl_week = defalut;
      print(mac_info.csv_dly.dlyfspttl_week);
      expect(mac_info.csv_dly.dlyfspttl_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspttl_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00343_element_check_00320 **********\n\n");
    });

    test('00344_element_check_00321', () async {
      print("\n********** テスト実行：00344_element_check_00321 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlyfspttl_day;
      print(mac_info.csv_dly.dlyfspttl_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlyfspttl_day = testData1;
      print(mac_info.csv_dly.dlyfspttl_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlyfspttl_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlyfspttl_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlyfspttl_day = testData2;
      print(mac_info.csv_dly.dlyfspttl_day);
      expect(mac_info.csv_dly.dlyfspttl_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspttl_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlyfspttl_day = defalut;
      print(mac_info.csv_dly.dlyfspttl_day);
      expect(mac_info.csv_dly.dlyfspttl_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlyfspttl_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00344_element_check_00321 **********\n\n");
    });

    test('00345_element_check_00322', () async {
      print("\n********** テスト実行：00345_element_check_00322 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.histlog;
      print(mac_info.csv_dly.histlog);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.histlog = testData1;
      print(mac_info.csv_dly.histlog);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.histlog == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.histlog == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.histlog = testData2;
      print(mac_info.csv_dly.histlog);
      expect(mac_info.csv_dly.histlog == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.histlog == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.histlog = defalut;
      print(mac_info.csv_dly.histlog);
      expect(mac_info.csv_dly.histlog == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.histlog == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00345_element_check_00322 **********\n\n");
    });

    test('00346_element_check_00323', () async {
      print("\n********** テスト実行：00346_element_check_00323 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.histlog_week;
      print(mac_info.csv_dly.histlog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.histlog_week = testData1;
      print(mac_info.csv_dly.histlog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.histlog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.histlog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.histlog_week = testData2;
      print(mac_info.csv_dly.histlog_week);
      expect(mac_info.csv_dly.histlog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.histlog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.histlog_week = defalut;
      print(mac_info.csv_dly.histlog_week);
      expect(mac_info.csv_dly.histlog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.histlog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00346_element_check_00323 **********\n\n");
    });

    test('00347_element_check_00324', () async {
      print("\n********** テスト実行：00347_element_check_00324 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.histlog_day;
      print(mac_info.csv_dly.histlog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.histlog_day = testData1;
      print(mac_info.csv_dly.histlog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.histlog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.histlog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.histlog_day = testData2;
      print(mac_info.csv_dly.histlog_day);
      expect(mac_info.csv_dly.histlog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.histlog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.histlog_day = defalut;
      print(mac_info.csv_dly.histlog_day);
      expect(mac_info.csv_dly.histlog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.histlog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00347_element_check_00324 **********\n\n");
    });

    test('00348_element_check_00325', () async {
      print("\n********** テスト実行：00348_element_check_00325 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.duty_log;
      print(mac_info.csv_dly.duty_log);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.duty_log = testData1;
      print(mac_info.csv_dly.duty_log);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.duty_log == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.duty_log == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.duty_log = testData2;
      print(mac_info.csv_dly.duty_log);
      expect(mac_info.csv_dly.duty_log == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.duty_log == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.duty_log = defalut;
      print(mac_info.csv_dly.duty_log);
      expect(mac_info.csv_dly.duty_log == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.duty_log == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00348_element_check_00325 **********\n\n");
    });

    test('00349_element_check_00326', () async {
      print("\n********** テスト実行：00349_element_check_00326 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dutylog_week;
      print(mac_info.csv_dly.dutylog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dutylog_week = testData1;
      print(mac_info.csv_dly.dutylog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dutylog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dutylog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dutylog_week = testData2;
      print(mac_info.csv_dly.dutylog_week);
      expect(mac_info.csv_dly.dutylog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dutylog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dutylog_week = defalut;
      print(mac_info.csv_dly.dutylog_week);
      expect(mac_info.csv_dly.dutylog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dutylog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00349_element_check_00326 **********\n\n");
    });

    test('00350_element_check_00327', () async {
      print("\n********** テスト実行：00350_element_check_00327 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dutylog_day;
      print(mac_info.csv_dly.dutylog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dutylog_day = testData1;
      print(mac_info.csv_dly.dutylog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dutylog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dutylog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dutylog_day = testData2;
      print(mac_info.csv_dly.dutylog_day);
      expect(mac_info.csv_dly.dutylog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dutylog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dutylog_day = defalut;
      print(mac_info.csv_dly.dutylog_day);
      expect(mac_info.csv_dly.dutylog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dutylog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00350_element_check_00327 **********\n\n");
    });

    test('00351_element_check_00328', () async {
      print("\n********** テスト実行：00351_element_check_00328 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.sims_log;
      print(mac_info.csv_dly.sims_log);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.sims_log = testData1;
      print(mac_info.csv_dly.sims_log);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.sims_log == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.sims_log == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.sims_log = testData2;
      print(mac_info.csv_dly.sims_log);
      expect(mac_info.csv_dly.sims_log == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.sims_log == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.sims_log = defalut;
      print(mac_info.csv_dly.sims_log);
      expect(mac_info.csv_dly.sims_log == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.sims_log == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00351_element_check_00328 **********\n\n");
    });

    test('00352_element_check_00329', () async {
      print("\n********** テスト実行：00352_element_check_00329 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.simslog_week;
      print(mac_info.csv_dly.simslog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.simslog_week = testData1;
      print(mac_info.csv_dly.simslog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.simslog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.simslog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.simslog_week = testData2;
      print(mac_info.csv_dly.simslog_week);
      expect(mac_info.csv_dly.simslog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.simslog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.simslog_week = defalut;
      print(mac_info.csv_dly.simslog_week);
      expect(mac_info.csv_dly.simslog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.simslog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00352_element_check_00329 **********\n\n");
    });

    test('00353_element_check_00330', () async {
      print("\n********** テスト実行：00353_element_check_00330 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.simslog_day;
      print(mac_info.csv_dly.simslog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.simslog_day = testData1;
      print(mac_info.csv_dly.simslog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.simslog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.simslog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.simslog_day = testData2;
      print(mac_info.csv_dly.simslog_day);
      expect(mac_info.csv_dly.simslog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.simslog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.simslog_day = defalut;
      print(mac_info.csv_dly.simslog_day);
      expect(mac_info.csv_dly.simslog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.simslog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00353_element_check_00330 **********\n\n");
    });

    test('00354_element_check_00331', () async {
      print("\n********** テスト実行：00354_element_check_00331 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.reserv_log;
      print(mac_info.csv_dly.reserv_log);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.reserv_log = testData1;
      print(mac_info.csv_dly.reserv_log);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.reserv_log == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.reserv_log == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.reserv_log = testData2;
      print(mac_info.csv_dly.reserv_log);
      expect(mac_info.csv_dly.reserv_log == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.reserv_log == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.reserv_log = defalut;
      print(mac_info.csv_dly.reserv_log);
      expect(mac_info.csv_dly.reserv_log == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.reserv_log == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00354_element_check_00331 **********\n\n");
    });

    test('00355_element_check_00332', () async {
      print("\n********** テスト実行：00355_element_check_00332 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.reservlog_week;
      print(mac_info.csv_dly.reservlog_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.reservlog_week = testData1;
      print(mac_info.csv_dly.reservlog_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.reservlog_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.reservlog_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.reservlog_week = testData2;
      print(mac_info.csv_dly.reservlog_week);
      expect(mac_info.csv_dly.reservlog_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.reservlog_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.reservlog_week = defalut;
      print(mac_info.csv_dly.reservlog_week);
      expect(mac_info.csv_dly.reservlog_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.reservlog_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00355_element_check_00332 **********\n\n");
    });

    test('00356_element_check_00333', () async {
      print("\n********** テスト実行：00356_element_check_00333 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.reservlog_day;
      print(mac_info.csv_dly.reservlog_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.reservlog_day = testData1;
      print(mac_info.csv_dly.reservlog_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.reservlog_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.reservlog_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.reservlog_day = testData2;
      print(mac_info.csv_dly.reservlog_day);
      expect(mac_info.csv_dly.reservlog_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.reservlog_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.reservlog_day = defalut;
      print(mac_info.csv_dly.reservlog_day);
      expect(mac_info.csv_dly.reservlog_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.reservlog_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00356_element_check_00333 **********\n\n");
    });

    test('00357_element_check_00334', () async {
      print("\n********** テスト実行：00357_element_check_00334 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.z_receipt;
      print(mac_info.csv_dly.z_receipt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.z_receipt = testData1;
      print(mac_info.csv_dly.z_receipt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.z_receipt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.z_receipt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.z_receipt = testData2;
      print(mac_info.csv_dly.z_receipt);
      expect(mac_info.csv_dly.z_receipt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.z_receipt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.z_receipt = defalut;
      print(mac_info.csv_dly.z_receipt);
      expect(mac_info.csv_dly.z_receipt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.z_receipt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00357_element_check_00334 **********\n\n");
    });

    test('00358_element_check_00335', () async {
      print("\n********** テスト実行：00358_element_check_00335 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.zreceipt_week;
      print(mac_info.csv_dly.zreceipt_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.zreceipt_week = testData1;
      print(mac_info.csv_dly.zreceipt_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.zreceipt_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.zreceipt_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.zreceipt_week = testData2;
      print(mac_info.csv_dly.zreceipt_week);
      expect(mac_info.csv_dly.zreceipt_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.zreceipt_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.zreceipt_week = defalut;
      print(mac_info.csv_dly.zreceipt_week);
      expect(mac_info.csv_dly.zreceipt_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.zreceipt_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00358_element_check_00335 **********\n\n");
    });

    test('00359_element_check_00336', () async {
      print("\n********** テスト実行：00359_element_check_00336 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.zreceipt_day;
      print(mac_info.csv_dly.zreceipt_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.zreceipt_day = testData1;
      print(mac_info.csv_dly.zreceipt_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.zreceipt_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.zreceipt_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.zreceipt_day = testData2;
      print(mac_info.csv_dly.zreceipt_day);
      expect(mac_info.csv_dly.zreceipt_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.zreceipt_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.zreceipt_day = defalut;
      print(mac_info.csv_dly.zreceipt_day);
      expect(mac_info.csv_dly.zreceipt_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.zreceipt_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00359_element_check_00336 **********\n\n");
    });

    test('00360_element_check_00337', () async {
      print("\n********** テスト実行：00360_element_check_00337 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dly_lrg;
      print(mac_info.csv_dly.dly_lrg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dly_lrg = testData1;
      print(mac_info.csv_dly.dly_lrg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dly_lrg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dly_lrg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dly_lrg = testData2;
      print(mac_info.csv_dly.dly_lrg);
      expect(mac_info.csv_dly.dly_lrg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_lrg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dly_lrg = defalut;
      print(mac_info.csv_dly.dly_lrg);
      expect(mac_info.csv_dly.dly_lrg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dly_lrg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00360_element_check_00337 **********\n\n");
    });

    test('00361_element_check_00338', () async {
      print("\n********** テスト実行：00361_element_check_00338 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlylrg_week;
      print(mac_info.csv_dly.dlylrg_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlylrg_week = testData1;
      print(mac_info.csv_dly.dlylrg_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlylrg_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlylrg_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlylrg_week = testData2;
      print(mac_info.csv_dly.dlylrg_week);
      expect(mac_info.csv_dly.dlylrg_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlylrg_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlylrg_week = defalut;
      print(mac_info.csv_dly.dlylrg_week);
      expect(mac_info.csv_dly.dlylrg_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlylrg_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00361_element_check_00338 **********\n\n");
    });

    test('00362_element_check_00339', () async {
      print("\n********** テスト実行：00362_element_check_00339 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.dlylrg_day;
      print(mac_info.csv_dly.dlylrg_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.dlylrg_day = testData1;
      print(mac_info.csv_dly.dlylrg_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.dlylrg_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.dlylrg_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.dlylrg_day = testData2;
      print(mac_info.csv_dly.dlylrg_day);
      expect(mac_info.csv_dly.dlylrg_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlylrg_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.dlylrg_day = defalut;
      print(mac_info.csv_dly.dlylrg_day);
      expect(mac_info.csv_dly.dlylrg_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.dlylrg_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00362_element_check_00339 **********\n\n");
    });

    test('00363_element_check_00340', () async {
      print("\n********** テスト実行：00363_element_check_00340 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.drawchk_cash_log;
      print(mac_info.csv_dly.drawchk_cash_log);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.drawchk_cash_log = testData1;
      print(mac_info.csv_dly.drawchk_cash_log);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.drawchk_cash_log == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.drawchk_cash_log == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.drawchk_cash_log = testData2;
      print(mac_info.csv_dly.drawchk_cash_log);
      expect(mac_info.csv_dly.drawchk_cash_log == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.drawchk_cash_log == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.drawchk_cash_log = defalut;
      print(mac_info.csv_dly.drawchk_cash_log);
      expect(mac_info.csv_dly.drawchk_cash_log == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.drawchk_cash_log == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00363_element_check_00340 **********\n\n");
    });

    test('00364_element_check_00341', () async {
      print("\n********** テスト実行：00364_element_check_00341 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.drawchk_cash_log_week;
      print(mac_info.csv_dly.drawchk_cash_log_week);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.drawchk_cash_log_week = testData1;
      print(mac_info.csv_dly.drawchk_cash_log_week);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.drawchk_cash_log_week == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.drawchk_cash_log_week == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.drawchk_cash_log_week = testData2;
      print(mac_info.csv_dly.drawchk_cash_log_week);
      expect(mac_info.csv_dly.drawchk_cash_log_week == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.drawchk_cash_log_week == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.drawchk_cash_log_week = defalut;
      print(mac_info.csv_dly.drawchk_cash_log_week);
      expect(mac_info.csv_dly.drawchk_cash_log_week == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.drawchk_cash_log_week == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00364_element_check_00341 **********\n\n");
    });

    test('00365_element_check_00342', () async {
      print("\n********** テスト実行：00365_element_check_00342 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_dly.drawchk_cash_log_day;
      print(mac_info.csv_dly.drawchk_cash_log_day);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_dly.drawchk_cash_log_day = testData1;
      print(mac_info.csv_dly.drawchk_cash_log_day);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_dly.drawchk_cash_log_day == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_dly.drawchk_cash_log_day == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_dly.drawchk_cash_log_day = testData2;
      print(mac_info.csv_dly.drawchk_cash_log_day);
      expect(mac_info.csv_dly.drawchk_cash_log_day == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.drawchk_cash_log_day == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_dly.drawchk_cash_log_day = defalut;
      print(mac_info.csv_dly.drawchk_cash_log_day);
      expect(mac_info.csv_dly.drawchk_cash_log_day == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_dly.drawchk_cash_log_day == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00365_element_check_00342 **********\n\n");
    });

    test('00366_element_check_00343', () async {
      print("\n********** テスト実行：00366_element_check_00343 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_tpr8100.dly_plu_tpr8100;
      print(mac_info.csv_tpr8100.dly_plu_tpr8100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_tpr8100.dly_plu_tpr8100 = testData1;
      print(mac_info.csv_tpr8100.dly_plu_tpr8100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_tpr8100.dly_plu_tpr8100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_tpr8100.dly_plu_tpr8100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_tpr8100.dly_plu_tpr8100 = testData2;
      print(mac_info.csv_tpr8100.dly_plu_tpr8100);
      expect(mac_info.csv_tpr8100.dly_plu_tpr8100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.dly_plu_tpr8100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_tpr8100.dly_plu_tpr8100 = defalut;
      print(mac_info.csv_tpr8100.dly_plu_tpr8100);
      expect(mac_info.csv_tpr8100.dly_plu_tpr8100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.dly_plu_tpr8100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00366_element_check_00343 **********\n\n");
    });

    test('00367_element_check_00344', () async {
      print("\n********** テスト実行：00367_element_check_00344 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_tpr8100.dly_deal_tpr8100;
      print(mac_info.csv_tpr8100.dly_deal_tpr8100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_tpr8100.dly_deal_tpr8100 = testData1;
      print(mac_info.csv_tpr8100.dly_deal_tpr8100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_tpr8100.dly_deal_tpr8100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_tpr8100.dly_deal_tpr8100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_tpr8100.dly_deal_tpr8100 = testData2;
      print(mac_info.csv_tpr8100.dly_deal_tpr8100);
      expect(mac_info.csv_tpr8100.dly_deal_tpr8100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.dly_deal_tpr8100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_tpr8100.dly_deal_tpr8100 = defalut;
      print(mac_info.csv_tpr8100.dly_deal_tpr8100);
      expect(mac_info.csv_tpr8100.dly_deal_tpr8100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.dly_deal_tpr8100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00367_element_check_00344 **********\n\n");
    });

    test('00368_element_check_00345', () async {
      print("\n********** テスト実行：00368_element_check_00345 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100;
      print(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 = testData1;
      print(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 = testData2;
      print(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100);
      expect(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 = defalut;
      print(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100);
      expect(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.reg_dly_mly_mdl_tpr8100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00368_element_check_00345 **********\n\n");
    });

    test('00369_element_check_00346', () async {
      print("\n********** テスト実行：00369_element_check_00346 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.csv_tpr8100.ibaraki_tpr8100;
      print(mac_info.csv_tpr8100.ibaraki_tpr8100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.csv_tpr8100.ibaraki_tpr8100 = testData1;
      print(mac_info.csv_tpr8100.ibaraki_tpr8100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.csv_tpr8100.ibaraki_tpr8100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.csv_tpr8100.ibaraki_tpr8100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.csv_tpr8100.ibaraki_tpr8100 = testData2;
      print(mac_info.csv_tpr8100.ibaraki_tpr8100);
      expect(mac_info.csv_tpr8100.ibaraki_tpr8100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.ibaraki_tpr8100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.csv_tpr8100.ibaraki_tpr8100 = defalut;
      print(mac_info.csv_tpr8100.ibaraki_tpr8100);
      expect(mac_info.csv_tpr8100.ibaraki_tpr8100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.csv_tpr8100.ibaraki_tpr8100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00369_element_check_00346 **********\n\n");
    });

    test('00370_element_check_00347', () async {
      print("\n********** テスト実行：00370_element_check_00347 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.bgnsch_del_date;
      print(mac_info.sch_delete.bgnsch_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.bgnsch_del_date = testData1;
      print(mac_info.sch_delete.bgnsch_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.bgnsch_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.bgnsch_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.bgnsch_del_date = testData2;
      print(mac_info.sch_delete.bgnsch_del_date);
      expect(mac_info.sch_delete.bgnsch_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.bgnsch_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.bgnsch_del_date = defalut;
      print(mac_info.sch_delete.bgnsch_del_date);
      expect(mac_info.sch_delete.bgnsch_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.bgnsch_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00370_element_check_00347 **********\n\n");
    });

    test('00371_element_check_00348', () async {
      print("\n********** テスト実行：00371_element_check_00348 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.mmsch_del_date;
      print(mac_info.sch_delete.mmsch_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.mmsch_del_date = testData1;
      print(mac_info.sch_delete.mmsch_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.mmsch_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.mmsch_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.mmsch_del_date = testData2;
      print(mac_info.sch_delete.mmsch_del_date);
      expect(mac_info.sch_delete.mmsch_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.mmsch_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.mmsch_del_date = defalut;
      print(mac_info.sch_delete.mmsch_del_date);
      expect(mac_info.sch_delete.mmsch_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.mmsch_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00371_element_check_00348 **********\n\n");
    });

    test('00372_element_check_00349', () async {
      print("\n********** テスト実行：00372_element_check_00349 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.smsch_del_date;
      print(mac_info.sch_delete.smsch_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.smsch_del_date = testData1;
      print(mac_info.sch_delete.smsch_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.smsch_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.smsch_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.smsch_del_date = testData2;
      print(mac_info.sch_delete.smsch_del_date);
      expect(mac_info.sch_delete.smsch_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.smsch_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.smsch_del_date = defalut;
      print(mac_info.sch_delete.smsch_del_date);
      expect(mac_info.sch_delete.smsch_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.smsch_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00372_element_check_00349 **********\n\n");
    });

    test('00373_element_check_00350', () async {
      print("\n********** テスト実行：00373_element_check_00350 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.clssch_del_date;
      print(mac_info.sch_delete.clssch_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.clssch_del_date = testData1;
      print(mac_info.sch_delete.clssch_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.clssch_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.clssch_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.clssch_del_date = testData2;
      print(mac_info.sch_delete.clssch_del_date);
      expect(mac_info.sch_delete.clssch_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.clssch_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.clssch_del_date = defalut;
      print(mac_info.sch_delete.clssch_del_date);
      expect(mac_info.sch_delete.clssch_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.clssch_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00373_element_check_00350 **********\n\n");
    });

    test('00374_element_check_00351', () async {
      print("\n********** テスト実行：00374_element_check_00351 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.plusch_del_date;
      print(mac_info.sch_delete.plusch_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.plusch_del_date = testData1;
      print(mac_info.sch_delete.plusch_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.plusch_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.plusch_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.plusch_del_date = testData2;
      print(mac_info.sch_delete.plusch_del_date);
      expect(mac_info.sch_delete.plusch_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.plusch_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.plusch_del_date = defalut;
      print(mac_info.sch_delete.plusch_del_date);
      expect(mac_info.sch_delete.plusch_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.plusch_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00374_element_check_00351 **********\n\n");
    });

    test('00375_element_check_00352', () async {
      print("\n********** テスト実行：00375_element_check_00352 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.ej_txt_del_date;
      print(mac_info.sch_delete.ej_txt_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.ej_txt_del_date = testData1;
      print(mac_info.sch_delete.ej_txt_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.ej_txt_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.ej_txt_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.ej_txt_del_date = testData2;
      print(mac_info.sch_delete.ej_txt_del_date);
      expect(mac_info.sch_delete.ej_txt_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.ej_txt_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.ej_txt_del_date = defalut;
      print(mac_info.sch_delete.ej_txt_del_date);
      expect(mac_info.sch_delete.ej_txt_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.ej_txt_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00375_element_check_00352 **********\n\n");
    });

    test('00376_element_check_00353', () async {
      print("\n********** テスト実行：00376_element_check_00353 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.csv_txt_del_date;
      print(mac_info.sch_delete.csv_txt_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.csv_txt_del_date = testData1;
      print(mac_info.sch_delete.csv_txt_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.csv_txt_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.csv_txt_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.csv_txt_del_date = testData2;
      print(mac_info.sch_delete.csv_txt_del_date);
      expect(mac_info.sch_delete.csv_txt_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.csv_txt_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.csv_txt_del_date = defalut;
      print(mac_info.sch_delete.csv_txt_del_date);
      expect(mac_info.sch_delete.csv_txt_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.csv_txt_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00376_element_check_00353 **********\n\n");
    });

    test('00377_element_check_00354', () async {
      print("\n********** テスト実行：00377_element_check_00354 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.schmsg_del_date;
      print(mac_info.sch_delete.schmsg_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.schmsg_del_date = testData1;
      print(mac_info.sch_delete.schmsg_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.schmsg_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.schmsg_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.schmsg_del_date = testData2;
      print(mac_info.sch_delete.schmsg_del_date);
      expect(mac_info.sch_delete.schmsg_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.schmsg_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.schmsg_del_date = defalut;
      print(mac_info.sch_delete.schmsg_del_date);
      expect(mac_info.sch_delete.schmsg_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.schmsg_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00377_element_check_00354 **********\n\n");
    });

    test('00378_element_check_00355', () async {
      print("\n********** テスト実行：00378_element_check_00355 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.fipsch_del_date;
      print(mac_info.sch_delete.fipsch_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.fipsch_del_date = testData1;
      print(mac_info.sch_delete.fipsch_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.fipsch_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.fipsch_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.fipsch_del_date = testData2;
      print(mac_info.sch_delete.fipsch_del_date);
      expect(mac_info.sch_delete.fipsch_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.fipsch_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.fipsch_del_date = defalut;
      print(mac_info.sch_delete.fipsch_del_date);
      expect(mac_info.sch_delete.fipsch_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.fipsch_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00378_element_check_00355 **********\n\n");
    });

    test('00379_element_check_00356', () async {
      print("\n********** テスト実行：00379_element_check_00356 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.reserv_del_date;
      print(mac_info.sch_delete.reserv_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.reserv_del_date = testData1;
      print(mac_info.sch_delete.reserv_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.reserv_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.reserv_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.reserv_del_date = testData2;
      print(mac_info.sch_delete.reserv_del_date);
      expect(mac_info.sch_delete.reserv_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.reserv_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.reserv_del_date = defalut;
      print(mac_info.sch_delete.reserv_del_date);
      expect(mac_info.sch_delete.reserv_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.reserv_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00379_element_check_00356 **********\n\n");
    });

    test('00380_element_check_00357', () async {
      print("\n********** テスト実行：00380_element_check_00357 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sch_delete.custbkup_del_date;
      print(mac_info.sch_delete.custbkup_del_date);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sch_delete.custbkup_del_date = testData1;
      print(mac_info.sch_delete.custbkup_del_date);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sch_delete.custbkup_del_date == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sch_delete.custbkup_del_date == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sch_delete.custbkup_del_date = testData2;
      print(mac_info.sch_delete.custbkup_del_date);
      expect(mac_info.sch_delete.custbkup_del_date == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.custbkup_del_date == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sch_delete.custbkup_del_date = defalut;
      print(mac_info.sch_delete.custbkup_del_date);
      expect(mac_info.sch_delete.custbkup_del_date == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sch_delete.custbkup_del_date == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00380_element_check_00357 **********\n\n");
    });

    test('00381_element_check_00358', () async {
      print("\n********** テスト実行：00381_element_check_00358 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.mode;
      print(mac_info.internal_flg.mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.mode = testData1;
      print(mac_info.internal_flg.mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.mode = testData2;
      print(mac_info.internal_flg.mode);
      expect(mac_info.internal_flg.mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.mode = defalut;
      print(mac_info.internal_flg.mode);
      expect(mac_info.internal_flg.mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00381_element_check_00358 **********\n\n");
    });

    test('00382_element_check_00359', () async {
      print("\n********** テスト実行：00382_element_check_00359 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.auto_mode;
      print(mac_info.internal_flg.auto_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.auto_mode = testData1;
      print(mac_info.internal_flg.auto_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.auto_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.auto_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.auto_mode = testData2;
      print(mac_info.internal_flg.auto_mode);
      expect(mac_info.internal_flg.auto_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.auto_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.auto_mode = defalut;
      print(mac_info.internal_flg.auto_mode);
      expect(mac_info.internal_flg.auto_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.auto_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00382_element_check_00359 **********\n\n");
    });

    test('00383_element_check_00360', () async {
      print("\n********** テスト実行：00383_element_check_00360 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.rct_onoff;
      print(mac_info.internal_flg.rct_onoff);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.rct_onoff = testData1;
      print(mac_info.internal_flg.rct_onoff);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.rct_onoff == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.rct_onoff == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.rct_onoff = testData2;
      print(mac_info.internal_flg.rct_onoff);
      expect(mac_info.internal_flg.rct_onoff == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.rct_onoff == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.rct_onoff = defalut;
      print(mac_info.internal_flg.rct_onoff);
      expect(mac_info.internal_flg.rct_onoff == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.rct_onoff == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00383_element_check_00360 **********\n\n");
    });

    test('00384_element_check_00361', () async {
      print("\n********** テスト実行：00384_element_check_00361 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.acr_onoff;
      print(mac_info.internal_flg.acr_onoff);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.acr_onoff = testData1;
      print(mac_info.internal_flg.acr_onoff);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.acr_onoff == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.acr_onoff == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.acr_onoff = testData2;
      print(mac_info.internal_flg.acr_onoff);
      expect(mac_info.internal_flg.acr_onoff == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acr_onoff == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.acr_onoff = defalut;
      print(mac_info.internal_flg.acr_onoff);
      expect(mac_info.internal_flg.acr_onoff == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acr_onoff == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00384_element_check_00361 **********\n\n");
    });

    test('00385_element_check_00362', () async {
      print("\n********** テスト実行：00385_element_check_00362 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.acr_cnct;
      print(mac_info.internal_flg.acr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.acr_cnct = testData1;
      print(mac_info.internal_flg.acr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.acr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.acr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.acr_cnct = testData2;
      print(mac_info.internal_flg.acr_cnct);
      expect(mac_info.internal_flg.acr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.acr_cnct = defalut;
      print(mac_info.internal_flg.acr_cnct);
      expect(mac_info.internal_flg.acr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00385_element_check_00362 **********\n\n");
    });

    test('00386_element_check_00363', () async {
      print("\n********** テスト実行：00386_element_check_00363 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.acr_errprn;
      print(mac_info.internal_flg.acr_errprn);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.acr_errprn = testData1;
      print(mac_info.internal_flg.acr_errprn);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.acr_errprn == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.acr_errprn == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.acr_errprn = testData2;
      print(mac_info.internal_flg.acr_errprn);
      expect(mac_info.internal_flg.acr_errprn == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acr_errprn == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.acr_errprn = defalut;
      print(mac_info.internal_flg.acr_errprn);
      expect(mac_info.internal_flg.acr_errprn == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acr_errprn == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00386_element_check_00363 **********\n\n");
    });

    test('00387_element_check_00364', () async {
      print("\n********** テスト実行：00387_element_check_00364 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.card_cnct;
      print(mac_info.internal_flg.card_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.card_cnct = testData1;
      print(mac_info.internal_flg.card_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.card_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.card_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.card_cnct = testData2;
      print(mac_info.internal_flg.card_cnct);
      expect(mac_info.internal_flg.card_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.card_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.card_cnct = defalut;
      print(mac_info.internal_flg.card_cnct);
      expect(mac_info.internal_flg.card_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.card_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00387_element_check_00364 **********\n\n");
    });

    test('00388_element_check_00365', () async {
      print("\n********** テスト実行：00388_element_check_00365 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.acb_deccin;
      print(mac_info.internal_flg.acb_deccin);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.acb_deccin = testData1;
      print(mac_info.internal_flg.acb_deccin);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.acb_deccin == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.acb_deccin == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.acb_deccin = testData2;
      print(mac_info.internal_flg.acb_deccin);
      expect(mac_info.internal_flg.acb_deccin == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acb_deccin == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.acb_deccin = defalut;
      print(mac_info.internal_flg.acb_deccin);
      expect(mac_info.internal_flg.acb_deccin == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acb_deccin == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00388_element_check_00365 **********\n\n");
    });

    test('00389_element_check_00366', () async {
      print("\n********** テスト実行：00389_element_check_00366 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.rwt_cnct;
      print(mac_info.internal_flg.rwt_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.rwt_cnct = testData1;
      print(mac_info.internal_flg.rwt_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.rwt_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.rwt_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.rwt_cnct = testData2;
      print(mac_info.internal_flg.rwt_cnct);
      expect(mac_info.internal_flg.rwt_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.rwt_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.rwt_cnct = defalut;
      print(mac_info.internal_flg.rwt_cnct);
      expect(mac_info.internal_flg.rwt_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.rwt_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00389_element_check_00366 **********\n\n");
    });

    test('00390_element_check_00367', () async {
      print("\n********** テスト実行：00390_element_check_00367 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.scale_cnct;
      print(mac_info.internal_flg.scale_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.scale_cnct = testData1;
      print(mac_info.internal_flg.scale_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.scale_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.scale_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.scale_cnct = testData2;
      print(mac_info.internal_flg.scale_cnct);
      expect(mac_info.internal_flg.scale_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.scale_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.scale_cnct = defalut;
      print(mac_info.internal_flg.scale_cnct);
      expect(mac_info.internal_flg.scale_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.scale_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00390_element_check_00367 **********\n\n");
    });

    test('00391_element_check_00368', () async {
      print("\n********** テスト実行：00391_element_check_00368 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.acb_select;
      print(mac_info.internal_flg.acb_select);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.acb_select = testData1;
      print(mac_info.internal_flg.acb_select);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.acb_select == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.acb_select == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.acb_select = testData2;
      print(mac_info.internal_flg.acb_select);
      expect(mac_info.internal_flg.acb_select == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acb_select == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.acb_select = defalut;
      print(mac_info.internal_flg.acb_select);
      expect(mac_info.internal_flg.acb_select == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.acb_select == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00391_element_check_00368 **********\n\n");
    });

    test('00392_element_check_00369', () async {
      print("\n********** テスト実行：00392_element_check_00369 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.iis21_cnct;
      print(mac_info.internal_flg.iis21_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.iis21_cnct = testData1;
      print(mac_info.internal_flg.iis21_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.iis21_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.iis21_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.iis21_cnct = testData2;
      print(mac_info.internal_flg.iis21_cnct);
      expect(mac_info.internal_flg.iis21_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.iis21_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.iis21_cnct = defalut;
      print(mac_info.internal_flg.iis21_cnct);
      expect(mac_info.internal_flg.iis21_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.iis21_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00392_element_check_00369 **********\n\n");
    });

    test('00393_element_check_00370', () async {
      print("\n********** テスト実行：00393_element_check_00370 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.mobile_cnct;
      print(mac_info.internal_flg.mobile_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.mobile_cnct = testData1;
      print(mac_info.internal_flg.mobile_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.mobile_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.mobile_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.mobile_cnct = testData2;
      print(mac_info.internal_flg.mobile_cnct);
      expect(mac_info.internal_flg.mobile_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.mobile_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.mobile_cnct = defalut;
      print(mac_info.internal_flg.mobile_cnct);
      expect(mac_info.internal_flg.mobile_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.mobile_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00393_element_check_00370 **********\n\n");
    });

    test('00394_element_check_00371', () async {
      print("\n********** テスト実行：00394_element_check_00371 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.stpr_cnct;
      print(mac_info.internal_flg.stpr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.stpr_cnct = testData1;
      print(mac_info.internal_flg.stpr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.stpr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.stpr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.stpr_cnct = testData2;
      print(mac_info.internal_flg.stpr_cnct);
      expect(mac_info.internal_flg.stpr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.stpr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.stpr_cnct = defalut;
      print(mac_info.internal_flg.stpr_cnct);
      expect(mac_info.internal_flg.stpr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.stpr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00394_element_check_00371 **********\n\n");
    });

    test('00395_element_check_00372', () async {
      print("\n********** テスト実行：00395_element_check_00372 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.netwlpr_cnct;
      print(mac_info.internal_flg.netwlpr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.netwlpr_cnct = testData1;
      print(mac_info.internal_flg.netwlpr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.netwlpr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.netwlpr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.netwlpr_cnct = testData2;
      print(mac_info.internal_flg.netwlpr_cnct);
      expect(mac_info.internal_flg.netwlpr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.netwlpr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.netwlpr_cnct = defalut;
      print(mac_info.internal_flg.netwlpr_cnct);
      expect(mac_info.internal_flg.netwlpr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.netwlpr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00395_element_check_00372 **********\n\n");
    });

    test('00396_element_check_00373', () async {
      print("\n********** テスト実行：00396_element_check_00373 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.poppy_cnct;
      print(mac_info.internal_flg.poppy_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.poppy_cnct = testData1;
      print(mac_info.internal_flg.poppy_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.poppy_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.poppy_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.poppy_cnct = testData2;
      print(mac_info.internal_flg.poppy_cnct);
      expect(mac_info.internal_flg.poppy_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.poppy_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.poppy_cnct = defalut;
      print(mac_info.internal_flg.poppy_cnct);
      expect(mac_info.internal_flg.poppy_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.poppy_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00396_element_check_00373 **********\n\n");
    });

    test('00397_element_check_00374', () async {
      print("\n********** テスト実行：00397_element_check_00374 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.tag_cnct;
      print(mac_info.internal_flg.tag_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.tag_cnct = testData1;
      print(mac_info.internal_flg.tag_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.tag_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.tag_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.tag_cnct = testData2;
      print(mac_info.internal_flg.tag_cnct);
      expect(mac_info.internal_flg.tag_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.tag_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.tag_cnct = defalut;
      print(mac_info.internal_flg.tag_cnct);
      expect(mac_info.internal_flg.tag_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.tag_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00397_element_check_00374 **********\n\n");
    });

    test('00398_element_check_00375', () async {
      print("\n********** テスト実行：00398_element_check_00375 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.auto_deccin;
      print(mac_info.internal_flg.auto_deccin);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.auto_deccin = testData1;
      print(mac_info.internal_flg.auto_deccin);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.auto_deccin == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.auto_deccin == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.auto_deccin = testData2;
      print(mac_info.internal_flg.auto_deccin);
      expect(mac_info.internal_flg.auto_deccin == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.auto_deccin == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.auto_deccin = defalut;
      print(mac_info.internal_flg.auto_deccin);
      expect(mac_info.internal_flg.auto_deccin == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.auto_deccin == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00398_element_check_00375 **********\n\n");
    });

    test('00399_element_check_00376', () async {
      print("\n********** テスト実行：00399_element_check_00376 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.s2pr_cnct;
      print(mac_info.internal_flg.s2pr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.s2pr_cnct = testData1;
      print(mac_info.internal_flg.s2pr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.s2pr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.s2pr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.s2pr_cnct = testData2;
      print(mac_info.internal_flg.s2pr_cnct);
      expect(mac_info.internal_flg.s2pr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.s2pr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.s2pr_cnct = defalut;
      print(mac_info.internal_flg.s2pr_cnct);
      expect(mac_info.internal_flg.s2pr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.s2pr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00399_element_check_00376 **********\n\n");
    });

    test('00400_element_check_00377', () async {
      print("\n********** テスト実行：00400_element_check_00377 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.pwrctrl_cnct;
      print(mac_info.internal_flg.pwrctrl_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.pwrctrl_cnct = testData1;
      print(mac_info.internal_flg.pwrctrl_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.pwrctrl_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.pwrctrl_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.pwrctrl_cnct = testData2;
      print(mac_info.internal_flg.pwrctrl_cnct);
      expect(mac_info.internal_flg.pwrctrl_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.pwrctrl_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.pwrctrl_cnct = defalut;
      print(mac_info.internal_flg.pwrctrl_cnct);
      expect(mac_info.internal_flg.pwrctrl_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.pwrctrl_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00400_element_check_00377 **********\n\n");
    });

    test('00401_element_check_00378', () async {
      print("\n********** テスト実行：00401_element_check_00378 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.catalinapr_cnct;
      print(mac_info.internal_flg.catalinapr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.catalinapr_cnct = testData1;
      print(mac_info.internal_flg.catalinapr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.catalinapr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.catalinapr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.catalinapr_cnct = testData2;
      print(mac_info.internal_flg.catalinapr_cnct);
      expect(mac_info.internal_flg.catalinapr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.catalinapr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.catalinapr_cnct = defalut;
      print(mac_info.internal_flg.catalinapr_cnct);
      expect(mac_info.internal_flg.catalinapr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.catalinapr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00401_element_check_00378 **********\n\n");
    });

    test('00402_element_check_00379', () async {
      print("\n********** テスト実行：00402_element_check_00379 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.dish_cnct;
      print(mac_info.internal_flg.dish_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.dish_cnct = testData1;
      print(mac_info.internal_flg.dish_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.dish_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.dish_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.dish_cnct = testData2;
      print(mac_info.internal_flg.dish_cnct);
      expect(mac_info.internal_flg.dish_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.dish_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.dish_cnct = defalut;
      print(mac_info.internal_flg.dish_cnct);
      expect(mac_info.internal_flg.dish_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.dish_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00402_element_check_00379 **********\n\n");
    });

    test('00403_element_check_00380', () async {
      print("\n********** テスト実行：00403_element_check_00380 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.custrealsvr_cnct;
      print(mac_info.internal_flg.custrealsvr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.custrealsvr_cnct = testData1;
      print(mac_info.internal_flg.custrealsvr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.custrealsvr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.custrealsvr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.custrealsvr_cnct = testData2;
      print(mac_info.internal_flg.custrealsvr_cnct);
      expect(mac_info.internal_flg.custrealsvr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.custrealsvr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.custrealsvr_cnct = defalut;
      print(mac_info.internal_flg.custrealsvr_cnct);
      expect(mac_info.internal_flg.custrealsvr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.custrealsvr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00403_element_check_00380 **********\n\n");
    });

    test('00404_element_check_00381', () async {
      print("\n********** テスト実行：00404_element_check_00381 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.aivoice_cnct;
      print(mac_info.internal_flg.aivoice_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.aivoice_cnct = testData1;
      print(mac_info.internal_flg.aivoice_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.aivoice_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.aivoice_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.aivoice_cnct = testData2;
      print(mac_info.internal_flg.aivoice_cnct);
      expect(mac_info.internal_flg.aivoice_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.aivoice_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.aivoice_cnct = defalut;
      print(mac_info.internal_flg.aivoice_cnct);
      expect(mac_info.internal_flg.aivoice_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.aivoice_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00404_element_check_00381 **********\n\n");
    });

    test('00405_element_check_00382', () async {
      print("\n********** テスト実行：00405_element_check_00382 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.gcat_cnct;
      print(mac_info.internal_flg.gcat_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.gcat_cnct = testData1;
      print(mac_info.internal_flg.gcat_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.gcat_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.gcat_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.gcat_cnct = testData2;
      print(mac_info.internal_flg.gcat_cnct);
      expect(mac_info.internal_flg.gcat_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.gcat_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.gcat_cnct = defalut;
      print(mac_info.internal_flg.gcat_cnct);
      expect(mac_info.internal_flg.gcat_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.gcat_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00405_element_check_00382 **********\n\n");
    });

    test('00406_element_check_00383', () async {
      print("\n********** テスト実行：00406_element_check_00383 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.suica_cnct;
      print(mac_info.internal_flg.suica_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.suica_cnct = testData1;
      print(mac_info.internal_flg.suica_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.suica_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.suica_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.suica_cnct = testData2;
      print(mac_info.internal_flg.suica_cnct);
      expect(mac_info.internal_flg.suica_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.suica_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.suica_cnct = defalut;
      print(mac_info.internal_flg.suica_cnct);
      expect(mac_info.internal_flg.suica_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.suica_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00406_element_check_00383 **********\n\n");
    });

    test('00407_element_check_00384', () async {
      print("\n********** テスト実行：00407_element_check_00384 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.mp1_cnct;
      print(mac_info.internal_flg.mp1_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.mp1_cnct = testData1;
      print(mac_info.internal_flg.mp1_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.mp1_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.mp1_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.mp1_cnct = testData2;
      print(mac_info.internal_flg.mp1_cnct);
      expect(mac_info.internal_flg.mp1_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.mp1_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.mp1_cnct = defalut;
      print(mac_info.internal_flg.mp1_cnct);
      expect(mac_info.internal_flg.mp1_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.mp1_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00407_element_check_00384 **********\n\n");
    });

    test('00408_element_check_00385', () async {
      print("\n********** テスト実行：00408_element_check_00385 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.realitmsend_cnct;
      print(mac_info.internal_flg.realitmsend_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.realitmsend_cnct = testData1;
      print(mac_info.internal_flg.realitmsend_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.realitmsend_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.realitmsend_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.realitmsend_cnct = testData2;
      print(mac_info.internal_flg.realitmsend_cnct);
      expect(mac_info.internal_flg.realitmsend_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.realitmsend_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.realitmsend_cnct = defalut;
      print(mac_info.internal_flg.realitmsend_cnct);
      expect(mac_info.internal_flg.realitmsend_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.realitmsend_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00408_element_check_00385 **********\n\n");
    });

    test('00409_element_check_00386', () async {
      print("\n********** テスト実行：00409_element_check_00386 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.gramx_cnct;
      print(mac_info.internal_flg.gramx_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.gramx_cnct = testData1;
      print(mac_info.internal_flg.gramx_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.gramx_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.gramx_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.gramx_cnct = testData2;
      print(mac_info.internal_flg.gramx_cnct);
      expect(mac_info.internal_flg.gramx_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.gramx_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.gramx_cnct = defalut;
      print(mac_info.internal_flg.gramx_cnct);
      expect(mac_info.internal_flg.gramx_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.gramx_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00409_element_check_00386 **********\n\n");
    });

    test('00410_element_check_00387', () async {
      print("\n********** テスト実行：00410_element_check_00387 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.rfid_cnct;
      print(mac_info.internal_flg.rfid_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.rfid_cnct = testData1;
      print(mac_info.internal_flg.rfid_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.rfid_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.rfid_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.rfid_cnct = testData2;
      print(mac_info.internal_flg.rfid_cnct);
      expect(mac_info.internal_flg.rfid_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.rfid_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.rfid_cnct = defalut;
      print(mac_info.internal_flg.rfid_cnct);
      expect(mac_info.internal_flg.rfid_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.rfid_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00410_element_check_00387 **********\n\n");
    });

    test('00411_element_check_00388', () async {
      print("\n********** テスト実行：00411_element_check_00388 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.soft_keyb;
      print(mac_info.internal_flg.soft_keyb);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.soft_keyb = testData1;
      print(mac_info.internal_flg.soft_keyb);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.soft_keyb == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.soft_keyb == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.soft_keyb = testData2;
      print(mac_info.internal_flg.soft_keyb);
      expect(mac_info.internal_flg.soft_keyb == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.soft_keyb == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.soft_keyb = defalut;
      print(mac_info.internal_flg.soft_keyb);
      expect(mac_info.internal_flg.soft_keyb == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.soft_keyb == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00411_element_check_00388 **********\n\n");
    });

    test('00412_element_check_00389', () async {
      print("\n********** テスト実行：00412_element_check_00389 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.keyb;
      print(mac_info.internal_flg.keyb);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.keyb = testData1;
      print(mac_info.internal_flg.keyb);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.keyb == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.keyb == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.keyb = testData2;
      print(mac_info.internal_flg.keyb);
      expect(mac_info.internal_flg.keyb == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.keyb == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.keyb = defalut;
      print(mac_info.internal_flg.keyb);
      expect(mac_info.internal_flg.keyb == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.keyb == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00412_element_check_00389 **********\n\n");
    });

    test('00413_element_check_00390', () async {
      print("\n********** テスト実行：00413_element_check_00390 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.msg_flg;
      print(mac_info.internal_flg.msg_flg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.msg_flg = testData1;
      print(mac_info.internal_flg.msg_flg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.msg_flg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.msg_flg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.msg_flg = testData2;
      print(mac_info.internal_flg.msg_flg);
      expect(mac_info.internal_flg.msg_flg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.msg_flg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.msg_flg = defalut;
      print(mac_info.internal_flg.msg_flg);
      expect(mac_info.internal_flg.msg_flg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.msg_flg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00413_element_check_00390 **********\n\n");
    });

    test('00414_element_check_00391', () async {
      print("\n********** テスト実行：00414_element_check_00391 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.multi_cnct;
      print(mac_info.internal_flg.multi_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.multi_cnct = testData1;
      print(mac_info.internal_flg.multi_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.multi_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.multi_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.multi_cnct = testData2;
      print(mac_info.internal_flg.multi_cnct);
      expect(mac_info.internal_flg.multi_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.multi_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.multi_cnct = defalut;
      print(mac_info.internal_flg.multi_cnct);
      expect(mac_info.internal_flg.multi_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.multi_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00414_element_check_00391 **********\n\n");
    });

    test('00415_element_check_00392', () async {
      print("\n********** テスト実行：00415_element_check_00392 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.jrem_cnct;
      print(mac_info.internal_flg.jrem_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.jrem_cnct = testData1;
      print(mac_info.internal_flg.jrem_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.jrem_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.jrem_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.jrem_cnct = testData2;
      print(mac_info.internal_flg.jrem_cnct);
      expect(mac_info.internal_flg.jrem_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.jrem_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.jrem_cnct = defalut;
      print(mac_info.internal_flg.jrem_cnct);
      expect(mac_info.internal_flg.jrem_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.jrem_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00415_element_check_00392 **********\n\n");
    });

    test('00416_element_check_00393', () async {
      print("\n********** テスト実行：00416_element_check_00393 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.colordsp_cnct;
      print(mac_info.internal_flg.colordsp_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.colordsp_cnct = testData1;
      print(mac_info.internal_flg.colordsp_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.colordsp_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.colordsp_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.colordsp_cnct = testData2;
      print(mac_info.internal_flg.colordsp_cnct);
      expect(mac_info.internal_flg.colordsp_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.colordsp_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.colordsp_cnct = defalut;
      print(mac_info.internal_flg.colordsp_cnct);
      expect(mac_info.internal_flg.colordsp_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.colordsp_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00416_element_check_00393 **********\n\n");
    });

    test('00417_element_check_00394', () async {
      print("\n********** テスト実行：00417_element_check_00394 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.usbcam_cnct;
      print(mac_info.internal_flg.usbcam_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.usbcam_cnct = testData1;
      print(mac_info.internal_flg.usbcam_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.usbcam_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.usbcam_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.usbcam_cnct = testData2;
      print(mac_info.internal_flg.usbcam_cnct);
      expect(mac_info.internal_flg.usbcam_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.usbcam_cnct = defalut;
      print(mac_info.internal_flg.usbcam_cnct);
      expect(mac_info.internal_flg.usbcam_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00417_element_check_00394 **********\n\n");
    });

    test('00418_element_check_00395', () async {
      print("\n********** テスト実行：00418_element_check_00395 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.masr_cnct;
      print(mac_info.internal_flg.masr_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.masr_cnct = testData1;
      print(mac_info.internal_flg.masr_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.masr_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.masr_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.masr_cnct = testData2;
      print(mac_info.internal_flg.masr_cnct);
      expect(mac_info.internal_flg.masr_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.masr_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.masr_cnct = defalut;
      print(mac_info.internal_flg.masr_cnct);
      expect(mac_info.internal_flg.masr_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.masr_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00418_element_check_00395 **********\n\n");
    });

    test('00419_element_check_00396', () async {
      print("\n********** テスト実行：00419_element_check_00396 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.brainfl_cnct;
      print(mac_info.internal_flg.brainfl_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.brainfl_cnct = testData1;
      print(mac_info.internal_flg.brainfl_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.brainfl_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.brainfl_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.brainfl_cnct = testData2;
      print(mac_info.internal_flg.brainfl_cnct);
      expect(mac_info.internal_flg.brainfl_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.brainfl_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.brainfl_cnct = defalut;
      print(mac_info.internal_flg.brainfl_cnct);
      expect(mac_info.internal_flg.brainfl_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.brainfl_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00419_element_check_00396 **********\n\n");
    });

    test('00420_element_check_00397', () async {
      print("\n********** テスト実行：00420_element_check_00397 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.cat_jmups_twin_cnct;
      print(mac_info.internal_flg.cat_jmups_twin_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.cat_jmups_twin_cnct = testData1;
      print(mac_info.internal_flg.cat_jmups_twin_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.cat_jmups_twin_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.cat_jmups_twin_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.cat_jmups_twin_cnct = testData2;
      print(mac_info.internal_flg.cat_jmups_twin_cnct);
      expect(mac_info.internal_flg.cat_jmups_twin_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.cat_jmups_twin_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.cat_jmups_twin_cnct = defalut;
      print(mac_info.internal_flg.cat_jmups_twin_cnct);
      expect(mac_info.internal_flg.cat_jmups_twin_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.cat_jmups_twin_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00420_element_check_00397 **********\n\n");
    });

    test('00421_element_check_00398', () async {
      print("\n********** テスト実行：00421_element_check_00398 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.sqrc_ticket_cnct;
      print(mac_info.internal_flg.sqrc_ticket_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.sqrc_ticket_cnct = testData1;
      print(mac_info.internal_flg.sqrc_ticket_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.sqrc_ticket_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.sqrc_ticket_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.sqrc_ticket_cnct = testData2;
      print(mac_info.internal_flg.sqrc_ticket_cnct);
      expect(mac_info.internal_flg.sqrc_ticket_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.sqrc_ticket_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.sqrc_ticket_cnct = defalut;
      print(mac_info.internal_flg.sqrc_ticket_cnct);
      expect(mac_info.internal_flg.sqrc_ticket_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.sqrc_ticket_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00421_element_check_00398 **********\n\n");
    });

    test('00422_element_check_00399', () async {
      print("\n********** テスト実行：00422_element_check_00399 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.custrealsvr_pqs_new_send;
      print(mac_info.internal_flg.custrealsvr_pqs_new_send);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.custrealsvr_pqs_new_send = testData1;
      print(mac_info.internal_flg.custrealsvr_pqs_new_send);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.custrealsvr_pqs_new_send == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.custrealsvr_pqs_new_send == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.custrealsvr_pqs_new_send = testData2;
      print(mac_info.internal_flg.custrealsvr_pqs_new_send);
      expect(mac_info.internal_flg.custrealsvr_pqs_new_send == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.custrealsvr_pqs_new_send == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.custrealsvr_pqs_new_send = defalut;
      print(mac_info.internal_flg.custrealsvr_pqs_new_send);
      expect(mac_info.internal_flg.custrealsvr_pqs_new_send == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.custrealsvr_pqs_new_send == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00422_element_check_00399 **********\n\n");
    });

    test('00423_element_check_00400', () async {
      print("\n********** テスト実行：00423_element_check_00400 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.sqrc_drlabel_no;
      print(mac_info.internal_flg.sqrc_drlabel_no);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.sqrc_drlabel_no = testData1;
      print(mac_info.internal_flg.sqrc_drlabel_no);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.sqrc_drlabel_no == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.sqrc_drlabel_no == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.sqrc_drlabel_no = testData2;
      print(mac_info.internal_flg.sqrc_drlabel_no);
      expect(mac_info.internal_flg.sqrc_drlabel_no == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.sqrc_drlabel_no == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.sqrc_drlabel_no = defalut;
      print(mac_info.internal_flg.sqrc_drlabel_no);
      expect(mac_info.internal_flg.sqrc_drlabel_no == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.sqrc_drlabel_no == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00423_element_check_00400 **********\n\n");
    });

    test('00424_element_check_00401', () async {
      print("\n********** テスト実行：00424_element_check_00401 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.iccard_cnct;
      print(mac_info.internal_flg.iccard_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.iccard_cnct = testData1;
      print(mac_info.internal_flg.iccard_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.iccard_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.iccard_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.iccard_cnct = testData2;
      print(mac_info.internal_flg.iccard_cnct);
      expect(mac_info.internal_flg.iccard_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.iccard_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.iccard_cnct = defalut;
      print(mac_info.internal_flg.iccard_cnct);
      expect(mac_info.internal_flg.iccard_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.iccard_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00424_element_check_00401 **********\n\n");
    });

    test('00425_element_check_00402', () async {
      print("\n********** テスト実行：00425_element_check_00402 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.ecs_mode;
      print(mac_info.internal_flg.ecs_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.ecs_mode = testData1;
      print(mac_info.internal_flg.ecs_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.ecs_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.ecs_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.ecs_mode = testData2;
      print(mac_info.internal_flg.ecs_mode);
      expect(mac_info.internal_flg.ecs_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.ecs_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.ecs_mode = defalut;
      print(mac_info.internal_flg.ecs_mode);
      expect(mac_info.internal_flg.ecs_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.ecs_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00425_element_check_00402 **********\n\n");
    });

    test('00426_element_check_00403', () async {
      print("\n********** テスト実行：00426_element_check_00403 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.colordsp_size;
      print(mac_info.internal_flg.colordsp_size);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.colordsp_size = testData1;
      print(mac_info.internal_flg.colordsp_size);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.colordsp_size == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.colordsp_size == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.colordsp_size = testData2;
      print(mac_info.internal_flg.colordsp_size);
      expect(mac_info.internal_flg.colordsp_size == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.colordsp_size == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.colordsp_size = defalut;
      print(mac_info.internal_flg.colordsp_size);
      expect(mac_info.internal_flg.colordsp_size == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.colordsp_size == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00426_element_check_00403 **********\n\n");
    });

    test('00427_element_check_00404', () async {
      print("\n********** テスト実行：00427_element_check_00404 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.usbcam_direction;
      print(mac_info.internal_flg.usbcam_direction);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.usbcam_direction = testData1;
      print(mac_info.internal_flg.usbcam_direction);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.usbcam_direction == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.usbcam_direction == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.usbcam_direction = testData2;
      print(mac_info.internal_flg.usbcam_direction);
      expect(mac_info.internal_flg.usbcam_direction == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_direction == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.usbcam_direction = defalut;
      print(mac_info.internal_flg.usbcam_direction);
      expect(mac_info.internal_flg.usbcam_direction == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_direction == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00427_element_check_00404 **********\n\n");
    });

    test('00428_element_check_00405', () async {
      print("\n********** テスト実行：00428_element_check_00405 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.usbcam_disp;
      print(mac_info.internal_flg.usbcam_disp);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.usbcam_disp = testData1;
      print(mac_info.internal_flg.usbcam_disp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.usbcam_disp == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.usbcam_disp == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.usbcam_disp = testData2;
      print(mac_info.internal_flg.usbcam_disp);
      expect(mac_info.internal_flg.usbcam_disp == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_disp == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.usbcam_disp = defalut;
      print(mac_info.internal_flg.usbcam_disp);
      expect(mac_info.internal_flg.usbcam_disp == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_disp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00428_element_check_00405 **********\n\n");
    });

    test('00429_element_check_00406', () async {
      print("\n********** テスト実行：00429_element_check_00406 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.apbf_cnct;
      print(mac_info.internal_flg.apbf_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.apbf_cnct = testData1;
      print(mac_info.internal_flg.apbf_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.apbf_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.apbf_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.apbf_cnct = testData2;
      print(mac_info.internal_flg.apbf_cnct);
      expect(mac_info.internal_flg.apbf_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.apbf_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.apbf_cnct = defalut;
      print(mac_info.internal_flg.apbf_cnct);
      expect(mac_info.internal_flg.apbf_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.apbf_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00429_element_check_00406 **********\n\n");
    });

    test('00430_element_check_00407', () async {
      print("\n********** テスト実行：00430_element_check_00407 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.usbcam_disp_size;
      print(mac_info.internal_flg.usbcam_disp_size);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.usbcam_disp_size = testData1;
      print(mac_info.internal_flg.usbcam_disp_size);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.usbcam_disp_size == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.usbcam_disp_size == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.usbcam_disp_size = testData2;
      print(mac_info.internal_flg.usbcam_disp_size);
      expect(mac_info.internal_flg.usbcam_disp_size == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_disp_size == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.usbcam_disp_size = defalut;
      print(mac_info.internal_flg.usbcam_disp_size);
      expect(mac_info.internal_flg.usbcam_disp_size == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.usbcam_disp_size == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00430_element_check_00407 **********\n\n");
    });

    test('00431_element_check_00408', () async {
      print("\n********** テスト実行：00431_element_check_00408 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.exc_cnct;
      print(mac_info.internal_flg.exc_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.exc_cnct = testData1;
      print(mac_info.internal_flg.exc_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.exc_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.exc_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.exc_cnct = testData2;
      print(mac_info.internal_flg.exc_cnct);
      expect(mac_info.internal_flg.exc_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.exc_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.exc_cnct = defalut;
      print(mac_info.internal_flg.exc_cnct);
      expect(mac_info.internal_flg.exc_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.exc_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00431_element_check_00408 **********\n\n");
    });

    test('00432_element_check_00409', () async {
      print("\n********** テスト実行：00432_element_check_00409 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.hitouch_cnct;
      print(mac_info.internal_flg.hitouch_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.hitouch_cnct = testData1;
      print(mac_info.internal_flg.hitouch_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.hitouch_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.hitouch_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.hitouch_cnct = testData2;
      print(mac_info.internal_flg.hitouch_cnct);
      expect(mac_info.internal_flg.hitouch_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.hitouch_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.hitouch_cnct = defalut;
      print(mac_info.internal_flg.hitouch_cnct);
      expect(mac_info.internal_flg.hitouch_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.hitouch_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00432_element_check_00409 **********\n\n");
    });

    test('00433_element_check_00410', () async {
      print("\n********** テスト実行：00433_element_check_00410 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.snresult;
      print(mac_info.internal_flg.snresult);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.snresult = testData1;
      print(mac_info.internal_flg.snresult);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.snresult == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.snresult == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.snresult = testData2;
      print(mac_info.internal_flg.snresult);
      expect(mac_info.internal_flg.snresult == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.snresult == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.snresult = defalut;
      print(mac_info.internal_flg.snresult);
      expect(mac_info.internal_flg.snresult == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.snresult == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00433_element_check_00410 **********\n\n");
    });

    test('00434_element_check_00411', () async {
      print("\n********** テスト実行：00434_element_check_00411 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.ami_cnct;
      print(mac_info.internal_flg.ami_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.ami_cnct = testData1;
      print(mac_info.internal_flg.ami_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.ami_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.ami_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.ami_cnct = testData2;
      print(mac_info.internal_flg.ami_cnct);
      expect(mac_info.internal_flg.ami_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.ami_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.ami_cnct = defalut;
      print(mac_info.internal_flg.ami_cnct);
      expect(mac_info.internal_flg.ami_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.ami_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00434_element_check_00411 **********\n\n");
    });

    test('00435_element_check_00412', () async {
      print("\n********** テスト実行：00435_element_check_00412 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.internal_flg.hs_scale_cnct;
      print(mac_info.internal_flg.hs_scale_cnct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.internal_flg.hs_scale_cnct = testData1;
      print(mac_info.internal_flg.hs_scale_cnct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.internal_flg.hs_scale_cnct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.internal_flg.hs_scale_cnct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.internal_flg.hs_scale_cnct = testData2;
      print(mac_info.internal_flg.hs_scale_cnct);
      expect(mac_info.internal_flg.hs_scale_cnct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.hs_scale_cnct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.internal_flg.hs_scale_cnct = defalut;
      print(mac_info.internal_flg.hs_scale_cnct);
      expect(mac_info.internal_flg.hs_scale_cnct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.internal_flg.hs_scale_cnct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00435_element_check_00412 **********\n\n");
    });

    test('00436_element_check_00413', () async {
      print("\n********** テスト実行：00436_element_check_00413 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.cat_timer.cat_stat_timer;
      print(mac_info.cat_timer.cat_stat_timer);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.cat_timer.cat_stat_timer = testData1;
      print(mac_info.cat_timer.cat_stat_timer);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.cat_timer.cat_stat_timer == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.cat_timer.cat_stat_timer == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.cat_timer.cat_stat_timer = testData2;
      print(mac_info.cat_timer.cat_stat_timer);
      expect(mac_info.cat_timer.cat_stat_timer == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.cat_timer.cat_stat_timer == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.cat_timer.cat_stat_timer = defalut;
      print(mac_info.cat_timer.cat_stat_timer);
      expect(mac_info.cat_timer.cat_stat_timer == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.cat_timer.cat_stat_timer == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00436_element_check_00413 **********\n\n");
    });

    test('00437_element_check_00414', () async {
      print("\n********** テスト実行：00437_element_check_00414 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.cat_timer.cat_recv_timer;
      print(mac_info.cat_timer.cat_recv_timer);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.cat_timer.cat_recv_timer = testData1;
      print(mac_info.cat_timer.cat_recv_timer);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.cat_timer.cat_recv_timer == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.cat_timer.cat_recv_timer == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.cat_timer.cat_recv_timer = testData2;
      print(mac_info.cat_timer.cat_recv_timer);
      expect(mac_info.cat_timer.cat_recv_timer == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.cat_timer.cat_recv_timer == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.cat_timer.cat_recv_timer = defalut;
      print(mac_info.cat_timer.cat_recv_timer);
      expect(mac_info.cat_timer.cat_recv_timer == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.cat_timer.cat_recv_timer == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00437_element_check_00414 **********\n\n");
    });

    test('00438_element_check_00415', () async {
      print("\n********** テスト実行：00438_element_check_00415 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_spd;
      print(mac_info.printer.rct_spd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_spd = testData1;
      print(mac_info.printer.rct_spd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_spd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_spd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_spd = testData2;
      print(mac_info.printer.rct_spd);
      expect(mac_info.printer.rct_spd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_spd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_spd = defalut;
      print(mac_info.printer.rct_spd);
      expect(mac_info.printer.rct_spd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_spd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00438_element_check_00415 **********\n\n");
    });

    test('00439_element_check_00416', () async {
      print("\n********** テスト実行：00439_element_check_00416 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_dns;
      print(mac_info.printer.rct_dns);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_dns = testData1;
      print(mac_info.printer.rct_dns);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_dns == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_dns == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_dns = testData2;
      print(mac_info.printer.rct_dns);
      expect(mac_info.printer.rct_dns == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_dns == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_dns = defalut;
      print(mac_info.printer.rct_dns);
      expect(mac_info.printer.rct_dns == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_dns == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00439_element_check_00416 **********\n\n");
    });

    test('00440_element_check_00417', () async {
      print("\n********** テスト実行：00440_element_check_00417 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.s2pr_topfeed;
      print(mac_info.printer.s2pr_topfeed);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.s2pr_topfeed = testData1;
      print(mac_info.printer.s2pr_topfeed);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.s2pr_topfeed == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.s2pr_topfeed == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.s2pr_topfeed = testData2;
      print(mac_info.printer.s2pr_topfeed);
      expect(mac_info.printer.s2pr_topfeed == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.s2pr_topfeed == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.s2pr_topfeed = defalut;
      print(mac_info.printer.s2pr_topfeed);
      expect(mac_info.printer.s2pr_topfeed == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.s2pr_topfeed == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00440_element_check_00417 **********\n\n");
    });

    test('00441_element_check_00418', () async {
      print("\n********** テスト実行：00441_element_check_00418 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.s2pr_lineno;
      print(mac_info.printer.s2pr_lineno);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.s2pr_lineno = testData1;
      print(mac_info.printer.s2pr_lineno);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.s2pr_lineno == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.s2pr_lineno == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.s2pr_lineno = testData2;
      print(mac_info.printer.s2pr_lineno);
      expect(mac_info.printer.s2pr_lineno == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.s2pr_lineno == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.s2pr_lineno = defalut;
      print(mac_info.printer.s2pr_lineno);
      expect(mac_info.printer.s2pr_lineno == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.s2pr_lineno == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00441_element_check_00418 **********\n\n");
    });

    test('00442_element_check_00419', () async {
      print("\n********** テスト実行：00442_element_check_00419 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_lf_plus;
      print(mac_info.printer.rct_lf_plus);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_lf_plus = testData1;
      print(mac_info.printer.rct_lf_plus);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_lf_plus == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_lf_plus == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_lf_plus = testData2;
      print(mac_info.printer.rct_lf_plus);
      expect(mac_info.printer.rct_lf_plus == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_lf_plus == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_lf_plus = defalut;
      print(mac_info.printer.rct_lf_plus);
      expect(mac_info.printer.rct_lf_plus == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_lf_plus == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00442_element_check_00419 **********\n\n");
    });

    test('00443_element_check_00420', () async {
      print("\n********** テスト実行：00443_element_check_00420 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_tb_cut;
      print(mac_info.printer.rct_tb_cut);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_tb_cut = testData1;
      print(mac_info.printer.rct_tb_cut);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_tb_cut == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_tb_cut == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_tb_cut = testData2;
      print(mac_info.printer.rct_tb_cut);
      expect(mac_info.printer.rct_tb_cut == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_tb_cut == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_tb_cut = defalut;
      print(mac_info.printer.rct_tb_cut);
      expect(mac_info.printer.rct_tb_cut == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_tb_cut == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00443_element_check_00420 **********\n\n");
    });

    test('00444_element_check_00421', () async {
      print("\n********** テスト実行：00444_element_check_00421 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_sp_width;
      print(mac_info.printer.rct_sp_width);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_sp_width = testData1;
      print(mac_info.printer.rct_sp_width);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_sp_width == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_sp_width == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_sp_width = testData2;
      print(mac_info.printer.rct_sp_width);
      expect(mac_info.printer.rct_sp_width == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_sp_width == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_sp_width = defalut;
      print(mac_info.printer.rct_sp_width);
      expect(mac_info.printer.rct_sp_width == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_sp_width == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00444_element_check_00421 **********\n\n");
    });

    test('00445_element_check_00422', () async {
      print("\n********** テスト実行：00445_element_check_00422 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_cut_type;
      print(mac_info.printer.rct_cut_type);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_cut_type = testData1;
      print(mac_info.printer.rct_cut_type);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_cut_type == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_cut_type == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_cut_type = testData2;
      print(mac_info.printer.rct_cut_type);
      expect(mac_info.printer.rct_cut_type == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_cut_type == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_cut_type = defalut;
      print(mac_info.printer.rct_cut_type);
      expect(mac_info.printer.rct_cut_type == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_cut_type == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00445_element_check_00422 **********\n\n");
    });

    test('00446_element_check_00423', () async {
      print("\n********** テスト実行：00446_element_check_00423 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.rct_cut_type2;
      print(mac_info.printer.rct_cut_type2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.rct_cut_type2 = testData1;
      print(mac_info.printer.rct_cut_type2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.rct_cut_type2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.rct_cut_type2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.rct_cut_type2 = testData2;
      print(mac_info.printer.rct_cut_type2);
      expect(mac_info.printer.rct_cut_type2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_cut_type2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.rct_cut_type2 = defalut;
      print(mac_info.printer.rct_cut_type2);
      expect(mac_info.printer.rct_cut_type2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.rct_cut_type2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00446_element_check_00423 **********\n\n");
    });

    test('00447_element_check_00424', () async {
      print("\n********** テスト実行：00447_element_check_00424 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.err_rpr_timer;
      print(mac_info.printer.err_rpr_timer);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.err_rpr_timer = testData1;
      print(mac_info.printer.err_rpr_timer);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.err_rpr_timer == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.err_rpr_timer == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.err_rpr_timer = testData2;
      print(mac_info.printer.err_rpr_timer);
      expect(mac_info.printer.err_rpr_timer == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.err_rpr_timer == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.err_rpr_timer = defalut;
      print(mac_info.printer.err_rpr_timer);
      expect(mac_info.printer.err_rpr_timer == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.err_rpr_timer == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00447_element_check_00424 **********\n\n");
    });

    test('00448_element_check_00425', () async {
      print("\n********** テスト実行：00448_element_check_00425 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.nearend_check;
      print(mac_info.printer.nearend_check);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.nearend_check = testData1;
      print(mac_info.printer.nearend_check);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.nearend_check == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.nearend_check == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.nearend_check = testData2;
      print(mac_info.printer.nearend_check);
      expect(mac_info.printer.nearend_check == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.nearend_check == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.nearend_check = defalut;
      print(mac_info.printer.nearend_check);
      expect(mac_info.printer.nearend_check == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.nearend_check == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00448_element_check_00425 **********\n\n");
    });

    test('00449_element_check_00426', () async {
      print("\n********** テスト実行：00449_element_check_00426 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.kitchen_prt_power;
      print(mac_info.printer.kitchen_prt_power);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.kitchen_prt_power = testData1;
      print(mac_info.printer.kitchen_prt_power);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.kitchen_prt_power == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.kitchen_prt_power == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.kitchen_prt_power = testData2;
      print(mac_info.printer.kitchen_prt_power);
      expect(mac_info.printer.kitchen_prt_power == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.kitchen_prt_power == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.kitchen_prt_power = defalut;
      print(mac_info.printer.kitchen_prt_power);
      expect(mac_info.printer.kitchen_prt_power == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.kitchen_prt_power == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00449_element_check_00426 **********\n\n");
    });

    test('00450_element_check_00427', () async {
      print("\n********** テスト実行：00450_element_check_00427 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.zhq_cpn_rct_share;
      print(mac_info.printer.zhq_cpn_rct_share);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.zhq_cpn_rct_share = testData1;
      print(mac_info.printer.zhq_cpn_rct_share);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.zhq_cpn_rct_share == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.zhq_cpn_rct_share == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.zhq_cpn_rct_share = testData2;
      print(mac_info.printer.zhq_cpn_rct_share);
      expect(mac_info.printer.zhq_cpn_rct_share == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.zhq_cpn_rct_share == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.zhq_cpn_rct_share = defalut;
      print(mac_info.printer.zhq_cpn_rct_share);
      expect(mac_info.printer.zhq_cpn_rct_share == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.zhq_cpn_rct_share == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00450_element_check_00427 **********\n\n");
    });

    test('00451_element_check_00428', () async {
      print("\n********** テスト実行：00451_element_check_00428 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.nearend_note;
      print(mac_info.printer.nearend_note);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.nearend_note = testData1;
      print(mac_info.printer.nearend_note);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.nearend_note == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.nearend_note == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.nearend_note = testData2;
      print(mac_info.printer.nearend_note);
      expect(mac_info.printer.nearend_note == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.nearend_note == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.nearend_note = defalut;
      print(mac_info.printer.nearend_note);
      expect(mac_info.printer.nearend_note == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.nearend_note == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00451_element_check_00428 **********\n\n");
    });

    test('00452_element_check_00429', () async {
      print("\n********** テスト実行：00452_element_check_00429 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.nearend_count;
      print(mac_info.printer.nearend_count);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.nearend_count = testData1;
      print(mac_info.printer.nearend_count);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.nearend_count == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.nearend_count == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.nearend_count = testData2;
      print(mac_info.printer.nearend_count);
      expect(mac_info.printer.nearend_count == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.nearend_count == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.nearend_count = defalut;
      print(mac_info.printer.nearend_count);
      expect(mac_info.printer.nearend_count == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.nearend_count == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00452_element_check_00429 **********\n\n");
    });

    test('00453_element_check_00430', () async {
      print("\n********** テスト実行：00453_element_check_00430 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer.hprt_fwver;
      print(mac_info.printer.hprt_fwver);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer.hprt_fwver = testData1;
      print(mac_info.printer.hprt_fwver);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer.hprt_fwver == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer.hprt_fwver == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer.hprt_fwver = testData2;
      print(mac_info.printer.hprt_fwver);
      expect(mac_info.printer.hprt_fwver == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.hprt_fwver == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer.hprt_fwver = defalut;
      print(mac_info.printer.hprt_fwver);
      expect(mac_info.printer.hprt_fwver == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer.hprt_fwver == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00453_element_check_00430 **********\n\n");
    });

    test('00454_element_check_00431', () async {
      print("\n********** テスト実行：00454_element_check_00431 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.recipt_wid;
      print(mac_info.printer_cntl.recipt_wid);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.recipt_wid = testData1;
      print(mac_info.printer_cntl.recipt_wid);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.recipt_wid == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.recipt_wid == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.recipt_wid = testData2;
      print(mac_info.printer_cntl.recipt_wid);
      expect(mac_info.printer_cntl.recipt_wid == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.recipt_wid == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.recipt_wid = defalut;
      print(mac_info.printer_cntl.recipt_wid);
      expect(mac_info.printer_cntl.recipt_wid == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.recipt_wid == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00454_element_check_00431 **********\n\n");
    });

    test('00455_element_check_00432', () async {
      print("\n********** テスト実行：00455_element_check_00432 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.prnt_length;
      print(mac_info.printer_cntl.prnt_length);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.prnt_length = testData1;
      print(mac_info.printer_cntl.prnt_length);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.prnt_length == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.prnt_length == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.prnt_length = testData2;
      print(mac_info.printer_cntl.prnt_length);
      expect(mac_info.printer_cntl.prnt_length == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.prnt_length == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.prnt_length = defalut;
      print(mac_info.printer_cntl.prnt_length);
      expect(mac_info.printer_cntl.prnt_length == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.prnt_length == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00455_element_check_00432 **********\n\n");
    });

    test('00456_element_check_00433', () async {
      print("\n********** テスト実行：00456_element_check_00433 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.start_speed;
      print(mac_info.printer_cntl.start_speed);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.start_speed = testData1;
      print(mac_info.printer_cntl.start_speed);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.start_speed == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.start_speed == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.start_speed = testData2;
      print(mac_info.printer_cntl.start_speed);
      expect(mac_info.printer_cntl.start_speed == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.start_speed == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.start_speed = defalut;
      print(mac_info.printer_cntl.start_speed);
      expect(mac_info.printer_cntl.start_speed == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.start_speed == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00456_element_check_00433 **********\n\n");
    });

    test('00457_element_check_00434', () async {
      print("\n********** テスト実行：00457_element_check_00434 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.top_speed;
      print(mac_info.printer_cntl.top_speed);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.top_speed = testData1;
      print(mac_info.printer_cntl.top_speed);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.top_speed == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.top_speed == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.top_speed = testData2;
      print(mac_info.printer_cntl.top_speed);
      expect(mac_info.printer_cntl.top_speed == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_speed == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.top_speed = defalut;
      print(mac_info.printer_cntl.top_speed);
      expect(mac_info.printer_cntl.top_speed == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_speed == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00457_element_check_00434 **********\n\n");
    });

    test('00458_element_check_00435', () async {
      print("\n********** テスト実行：00458_element_check_00435 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.top_sp_step;
      print(mac_info.printer_cntl.top_sp_step);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.top_sp_step = testData1;
      print(mac_info.printer_cntl.top_sp_step);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.top_sp_step == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.top_sp_step == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.top_sp_step = testData2;
      print(mac_info.printer_cntl.top_sp_step);
      expect(mac_info.printer_cntl.top_sp_step == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_sp_step == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.top_sp_step = defalut;
      print(mac_info.printer_cntl.top_sp_step);
      expect(mac_info.printer_cntl.top_sp_step == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_sp_step == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00458_element_check_00435 **********\n\n");
    });

    test('00459_element_check_00436', () async {
      print("\n********** テスト実行：00459_element_check_00436 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.start_density;
      print(mac_info.printer_cntl.start_density);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.start_density = testData1;
      print(mac_info.printer_cntl.start_density);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.start_density == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.start_density == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.start_density = testData2;
      print(mac_info.printer_cntl.start_density);
      expect(mac_info.printer_cntl.start_density == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.start_density == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.start_density = defalut;
      print(mac_info.printer_cntl.start_density);
      expect(mac_info.printer_cntl.start_density == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.start_density == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00459_element_check_00436 **********\n\n");
    });

    test('00460_element_check_00437', () async {
      print("\n********** テスト実行：00460_element_check_00437 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.top_density;
      print(mac_info.printer_cntl.top_density);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.top_density = testData1;
      print(mac_info.printer_cntl.top_density);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.top_density == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.top_density == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.top_density = testData2;
      print(mac_info.printer_cntl.top_density);
      expect(mac_info.printer_cntl.top_density == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_density == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.top_density = defalut;
      print(mac_info.printer_cntl.top_density);
      expect(mac_info.printer_cntl.top_density == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_density == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00460_element_check_00437 **********\n\n");
    });

    test('00461_element_check_00438', () async {
      print("\n********** テスト実行：00461_element_check_00438 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.top_den_step;
      print(mac_info.printer_cntl.top_den_step);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.top_den_step = testData1;
      print(mac_info.printer_cntl.top_den_step);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.top_den_step == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.top_den_step == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.top_den_step = testData2;
      print(mac_info.printer_cntl.top_den_step);
      expect(mac_info.printer_cntl.top_den_step == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_den_step == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.top_den_step = defalut;
      print(mac_info.printer_cntl.top_den_step);
      expect(mac_info.printer_cntl.top_den_step == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.top_den_step == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00461_element_check_00438 **********\n\n");
    });

    test('00462_element_check_00439', () async {
      print("\n********** テスト実行：00462_element_check_00439 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.prt_position;
      print(mac_info.printer_cntl.prt_position);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.prt_position = testData1;
      print(mac_info.printer_cntl.prt_position);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.prt_position == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.prt_position == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.prt_position = testData2;
      print(mac_info.printer_cntl.prt_position);
      expect(mac_info.printer_cntl.prt_position == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.prt_position == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.prt_position = defalut;
      print(mac_info.printer_cntl.prt_position);
      expect(mac_info.printer_cntl.prt_position == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.prt_position == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00462_element_check_00439 **********\n\n");
    });

    test('00463_element_check_00440', () async {
      print("\n********** テスト実行：00463_element_check_00440 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.head_wid;
      print(mac_info.printer_cntl.head_wid);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.head_wid = testData1;
      print(mac_info.printer_cntl.head_wid);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.head_wid == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.head_wid == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.head_wid = testData2;
      print(mac_info.printer_cntl.head_wid);
      expect(mac_info.printer_cntl.head_wid == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.head_wid == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.head_wid = defalut;
      print(mac_info.printer_cntl.head_wid);
      expect(mac_info.printer_cntl.head_wid == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.head_wid == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00463_element_check_00440 **********\n\n");
    });

    test('00464_element_check_00441', () async {
      print("\n********** テスト実行：00464_element_check_00441 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.prt_start_size;
      print(mac_info.printer_cntl.prt_start_size);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.prt_start_size = testData1;
      print(mac_info.printer_cntl.prt_start_size);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.prt_start_size == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.prt_start_size == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.prt_start_size = testData2;
      print(mac_info.printer_cntl.prt_start_size);
      expect(mac_info.printer_cntl.prt_start_size == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.prt_start_size == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.prt_start_size = defalut;
      print(mac_info.printer_cntl.prt_start_size);
      expect(mac_info.printer_cntl.prt_start_size == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.prt_start_size == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00464_element_check_00441 **********\n\n");
    });

    test('00465_element_check_00442', () async {
      print("\n********** テスト実行：00465_element_check_00442 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.err_mask;
      print(mac_info.printer_cntl.err_mask);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.err_mask = testData1;
      print(mac_info.printer_cntl.err_mask);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.err_mask == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.err_mask == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.err_mask = testData2;
      print(mac_info.printer_cntl.err_mask);
      expect(mac_info.printer_cntl.err_mask == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.err_mask == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.err_mask = defalut;
      print(mac_info.printer_cntl.err_mask);
      expect(mac_info.printer_cntl.err_mask == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.err_mask == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00465_element_check_00442 **********\n\n");
    });

    test('00466_element_check_00443', () async {
      print("\n********** テスト実行：00466_element_check_00443 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.x_offset;
      print(mac_info.printer_cntl.x_offset);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.x_offset = testData1;
      print(mac_info.printer_cntl.x_offset);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.x_offset == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.x_offset == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.x_offset = testData2;
      print(mac_info.printer_cntl.x_offset);
      expect(mac_info.printer_cntl.x_offset == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.x_offset == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.x_offset = defalut;
      print(mac_info.printer_cntl.x_offset);
      expect(mac_info.printer_cntl.x_offset == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.x_offset == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00466_element_check_00443 **********\n\n");
    });

    test('00467_element_check_00444', () async {
      print("\n********** テスト実行：00467_element_check_00444 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_cntl.recipt_wid80;
      print(mac_info.printer_cntl.recipt_wid80);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_cntl.recipt_wid80 = testData1;
      print(mac_info.printer_cntl.recipt_wid80);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_cntl.recipt_wid80 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_cntl.recipt_wid80 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_cntl.recipt_wid80 = testData2;
      print(mac_info.printer_cntl.recipt_wid80);
      expect(mac_info.printer_cntl.recipt_wid80 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.recipt_wid80 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_cntl.recipt_wid80 = defalut;
      print(mac_info.printer_cntl.recipt_wid80);
      expect(mac_info.printer_cntl.recipt_wid80 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_cntl.recipt_wid80 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00467_element_check_00444 **********\n\n");
    });

    test('00468_element_check_00445', () async {
      print("\n********** テスト実行：00468_element_check_00445 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_tspd_0;
      print(mac_info.printer_def.rct_tspd_0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_tspd_0 = testData1;
      print(mac_info.printer_def.rct_tspd_0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_tspd_0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_tspd_0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_tspd_0 = testData2;
      print(mac_info.printer_def.rct_tspd_0);
      expect(mac_info.printer_def.rct_tspd_0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_tspd_0 = defalut;
      print(mac_info.printer_def.rct_tspd_0);
      expect(mac_info.printer_def.rct_tspd_0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00468_element_check_00445 **********\n\n");
    });

    test('00469_element_check_00446', () async {
      print("\n********** テスト実行：00469_element_check_00446 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_tspd_1;
      print(mac_info.printer_def.rct_tspd_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_tspd_1 = testData1;
      print(mac_info.printer_def.rct_tspd_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_tspd_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_tspd_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_tspd_1 = testData2;
      print(mac_info.printer_def.rct_tspd_1);
      expect(mac_info.printer_def.rct_tspd_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_tspd_1 = defalut;
      print(mac_info.printer_def.rct_tspd_1);
      expect(mac_info.printer_def.rct_tspd_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00469_element_check_00446 **********\n\n");
    });

    test('00470_element_check_00447', () async {
      print("\n********** テスト実行：00470_element_check_00447 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_tspd_2;
      print(mac_info.printer_def.rct_tspd_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_tspd_2 = testData1;
      print(mac_info.printer_def.rct_tspd_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_tspd_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_tspd_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_tspd_2 = testData2;
      print(mac_info.printer_def.rct_tspd_2);
      expect(mac_info.printer_def.rct_tspd_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_tspd_2 = defalut;
      print(mac_info.printer_def.rct_tspd_2);
      expect(mac_info.printer_def.rct_tspd_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00470_element_check_00447 **********\n\n");
    });

    test('00471_element_check_00448', () async {
      print("\n********** テスト実行：00471_element_check_00448 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_tspd_3;
      print(mac_info.printer_def.rct_tspd_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_tspd_3 = testData1;
      print(mac_info.printer_def.rct_tspd_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_tspd_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_tspd_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_tspd_3 = testData2;
      print(mac_info.printer_def.rct_tspd_3);
      expect(mac_info.printer_def.rct_tspd_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_tspd_3 = defalut;
      print(mac_info.printer_def.rct_tspd_3);
      expect(mac_info.printer_def.rct_tspd_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_tspd_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00471_element_check_00448 **********\n\n");
    });

    test('00472_element_check_00449', () async {
      print("\n********** テスト実行：00472_element_check_00449 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_lspeed_dens0;
      print(mac_info.printer_def.rct_lspeed_dens0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_lspeed_dens0 = testData1;
      print(mac_info.printer_def.rct_lspeed_dens0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_lspeed_dens0 = testData2;
      print(mac_info.printer_def.rct_lspeed_dens0);
      expect(mac_info.printer_def.rct_lspeed_dens0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_lspeed_dens0 = defalut;
      print(mac_info.printer_def.rct_lspeed_dens0);
      expect(mac_info.printer_def.rct_lspeed_dens0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00472_element_check_00449 **********\n\n");
    });

    test('00473_element_check_00450', () async {
      print("\n********** テスト実行：00473_element_check_00450 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_lspeed_dens1;
      print(mac_info.printer_def.rct_lspeed_dens1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_lspeed_dens1 = testData1;
      print(mac_info.printer_def.rct_lspeed_dens1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_lspeed_dens1 = testData2;
      print(mac_info.printer_def.rct_lspeed_dens1);
      expect(mac_info.printer_def.rct_lspeed_dens1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_lspeed_dens1 = defalut;
      print(mac_info.printer_def.rct_lspeed_dens1);
      expect(mac_info.printer_def.rct_lspeed_dens1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00473_element_check_00450 **********\n\n");
    });

    test('00474_element_check_00451', () async {
      print("\n********** テスト実行：00474_element_check_00451 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_lspeed_dens2;
      print(mac_info.printer_def.rct_lspeed_dens2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_lspeed_dens2 = testData1;
      print(mac_info.printer_def.rct_lspeed_dens2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_lspeed_dens2 = testData2;
      print(mac_info.printer_def.rct_lspeed_dens2);
      expect(mac_info.printer_def.rct_lspeed_dens2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_lspeed_dens2 = defalut;
      print(mac_info.printer_def.rct_lspeed_dens2);
      expect(mac_info.printer_def.rct_lspeed_dens2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00474_element_check_00451 **********\n\n");
    });

    test('00475_element_check_00452', () async {
      print("\n********** テスト実行：00475_element_check_00452 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_lspeed_dens3;
      print(mac_info.printer_def.rct_lspeed_dens3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_lspeed_dens3 = testData1;
      print(mac_info.printer_def.rct_lspeed_dens3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_lspeed_dens3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_lspeed_dens3 = testData2;
      print(mac_info.printer_def.rct_lspeed_dens3);
      expect(mac_info.printer_def.rct_lspeed_dens3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_lspeed_dens3 = defalut;
      print(mac_info.printer_def.rct_lspeed_dens3);
      expect(mac_info.printer_def.rct_lspeed_dens3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_lspeed_dens3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00475_element_check_00452 **********\n\n");
    });

    test('00476_element_check_00453', () async {
      print("\n********** テスト実行：00476_element_check_00453 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_mspeed_dens0;
      print(mac_info.printer_def.rct_mspeed_dens0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_mspeed_dens0 = testData1;
      print(mac_info.printer_def.rct_mspeed_dens0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_mspeed_dens0 = testData2;
      print(mac_info.printer_def.rct_mspeed_dens0);
      expect(mac_info.printer_def.rct_mspeed_dens0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_mspeed_dens0 = defalut;
      print(mac_info.printer_def.rct_mspeed_dens0);
      expect(mac_info.printer_def.rct_mspeed_dens0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00476_element_check_00453 **********\n\n");
    });

    test('00477_element_check_00454', () async {
      print("\n********** テスト実行：00477_element_check_00454 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_mspeed_dens1;
      print(mac_info.printer_def.rct_mspeed_dens1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_mspeed_dens1 = testData1;
      print(mac_info.printer_def.rct_mspeed_dens1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_mspeed_dens1 = testData2;
      print(mac_info.printer_def.rct_mspeed_dens1);
      expect(mac_info.printer_def.rct_mspeed_dens1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_mspeed_dens1 = defalut;
      print(mac_info.printer_def.rct_mspeed_dens1);
      expect(mac_info.printer_def.rct_mspeed_dens1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00477_element_check_00454 **********\n\n");
    });

    test('00478_element_check_00455', () async {
      print("\n********** テスト実行：00478_element_check_00455 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_mspeed_dens2;
      print(mac_info.printer_def.rct_mspeed_dens2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_mspeed_dens2 = testData1;
      print(mac_info.printer_def.rct_mspeed_dens2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_mspeed_dens2 = testData2;
      print(mac_info.printer_def.rct_mspeed_dens2);
      expect(mac_info.printer_def.rct_mspeed_dens2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_mspeed_dens2 = defalut;
      print(mac_info.printer_def.rct_mspeed_dens2);
      expect(mac_info.printer_def.rct_mspeed_dens2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00478_element_check_00455 **********\n\n");
    });

    test('00479_element_check_00456', () async {
      print("\n********** テスト実行：00479_element_check_00456 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_mspeed_dens3;
      print(mac_info.printer_def.rct_mspeed_dens3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_mspeed_dens3 = testData1;
      print(mac_info.printer_def.rct_mspeed_dens3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_mspeed_dens3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_mspeed_dens3 = testData2;
      print(mac_info.printer_def.rct_mspeed_dens3);
      expect(mac_info.printer_def.rct_mspeed_dens3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_mspeed_dens3 = defalut;
      print(mac_info.printer_def.rct_mspeed_dens3);
      expect(mac_info.printer_def.rct_mspeed_dens3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_mspeed_dens3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00479_element_check_00456 **********\n\n");
    });

    test('00480_element_check_00457', () async {
      print("\n********** テスト実行：00480_element_check_00457 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hmspeed_dens0;
      print(mac_info.printer_def.rct_hmspeed_dens0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hmspeed_dens0 = testData1;
      print(mac_info.printer_def.rct_hmspeed_dens0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hmspeed_dens0 = testData2;
      print(mac_info.printer_def.rct_hmspeed_dens0);
      expect(mac_info.printer_def.rct_hmspeed_dens0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hmspeed_dens0 = defalut;
      print(mac_info.printer_def.rct_hmspeed_dens0);
      expect(mac_info.printer_def.rct_hmspeed_dens0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00480_element_check_00457 **********\n\n");
    });

    test('00481_element_check_00458', () async {
      print("\n********** テスト実行：00481_element_check_00458 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hmspeed_dens1;
      print(mac_info.printer_def.rct_hmspeed_dens1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hmspeed_dens1 = testData1;
      print(mac_info.printer_def.rct_hmspeed_dens1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hmspeed_dens1 = testData2;
      print(mac_info.printer_def.rct_hmspeed_dens1);
      expect(mac_info.printer_def.rct_hmspeed_dens1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hmspeed_dens1 = defalut;
      print(mac_info.printer_def.rct_hmspeed_dens1);
      expect(mac_info.printer_def.rct_hmspeed_dens1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00481_element_check_00458 **********\n\n");
    });

    test('00482_element_check_00459', () async {
      print("\n********** テスト実行：00482_element_check_00459 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hmspeed_dens2;
      print(mac_info.printer_def.rct_hmspeed_dens2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hmspeed_dens2 = testData1;
      print(mac_info.printer_def.rct_hmspeed_dens2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hmspeed_dens2 = testData2;
      print(mac_info.printer_def.rct_hmspeed_dens2);
      expect(mac_info.printer_def.rct_hmspeed_dens2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hmspeed_dens2 = defalut;
      print(mac_info.printer_def.rct_hmspeed_dens2);
      expect(mac_info.printer_def.rct_hmspeed_dens2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00482_element_check_00459 **********\n\n");
    });

    test('00483_element_check_00460', () async {
      print("\n********** テスト実行：00483_element_check_00460 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hmspeed_dens3;
      print(mac_info.printer_def.rct_hmspeed_dens3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hmspeed_dens3 = testData1;
      print(mac_info.printer_def.rct_hmspeed_dens3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hmspeed_dens3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hmspeed_dens3 = testData2;
      print(mac_info.printer_def.rct_hmspeed_dens3);
      expect(mac_info.printer_def.rct_hmspeed_dens3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hmspeed_dens3 = defalut;
      print(mac_info.printer_def.rct_hmspeed_dens3);
      expect(mac_info.printer_def.rct_hmspeed_dens3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hmspeed_dens3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00483_element_check_00460 **********\n\n");
    });

    test('00484_element_check_00461', () async {
      print("\n********** テスト実行：00484_element_check_00461 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hspeed_dens0;
      print(mac_info.printer_def.rct_hspeed_dens0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hspeed_dens0 = testData1;
      print(mac_info.printer_def.rct_hspeed_dens0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hspeed_dens0 = testData2;
      print(mac_info.printer_def.rct_hspeed_dens0);
      expect(mac_info.printer_def.rct_hspeed_dens0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hspeed_dens0 = defalut;
      print(mac_info.printer_def.rct_hspeed_dens0);
      expect(mac_info.printer_def.rct_hspeed_dens0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00484_element_check_00461 **********\n\n");
    });

    test('00485_element_check_00462', () async {
      print("\n********** テスト実行：00485_element_check_00462 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hspeed_dens1;
      print(mac_info.printer_def.rct_hspeed_dens1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hspeed_dens1 = testData1;
      print(mac_info.printer_def.rct_hspeed_dens1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hspeed_dens1 = testData2;
      print(mac_info.printer_def.rct_hspeed_dens1);
      expect(mac_info.printer_def.rct_hspeed_dens1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hspeed_dens1 = defalut;
      print(mac_info.printer_def.rct_hspeed_dens1);
      expect(mac_info.printer_def.rct_hspeed_dens1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00485_element_check_00462 **********\n\n");
    });

    test('00486_element_check_00463', () async {
      print("\n********** テスト実行：00486_element_check_00463 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hspeed_dens2;
      print(mac_info.printer_def.rct_hspeed_dens2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hspeed_dens2 = testData1;
      print(mac_info.printer_def.rct_hspeed_dens2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hspeed_dens2 = testData2;
      print(mac_info.printer_def.rct_hspeed_dens2);
      expect(mac_info.printer_def.rct_hspeed_dens2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hspeed_dens2 = defalut;
      print(mac_info.printer_def.rct_hspeed_dens2);
      expect(mac_info.printer_def.rct_hspeed_dens2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00486_element_check_00463 **********\n\n");
    });

    test('00487_element_check_00464', () async {
      print("\n********** テスト実行：00487_element_check_00464 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_def.rct_hspeed_dens3;
      print(mac_info.printer_def.rct_hspeed_dens3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_def.rct_hspeed_dens3 = testData1;
      print(mac_info.printer_def.rct_hspeed_dens3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_def.rct_hspeed_dens3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_def.rct_hspeed_dens3 = testData2;
      print(mac_info.printer_def.rct_hspeed_dens3);
      expect(mac_info.printer_def.rct_hspeed_dens3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_def.rct_hspeed_dens3 = defalut;
      print(mac_info.printer_def.rct_hspeed_dens3);
      expect(mac_info.printer_def.rct_hspeed_dens3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_def.rct_hspeed_dens3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00487_element_check_00464 **********\n\n");
    });

    test('00488_element_check_00465', () async {
      print("\n********** テスト実行：00488_element_check_00465 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.clerksave.spoolend;
      print(mac_info.clerksave.spoolend);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.clerksave.spoolend = testData1;
      print(mac_info.clerksave.spoolend);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.clerksave.spoolend == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.clerksave.spoolend == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.clerksave.spoolend = testData2;
      print(mac_info.clerksave.spoolend);
      expect(mac_info.clerksave.spoolend == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.clerksave.spoolend == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.clerksave.spoolend = defalut;
      print(mac_info.clerksave.spoolend);
      expect(mac_info.clerksave.spoolend == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.clerksave.spoolend == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00488_element_check_00465 **********\n\n");
    });

    test('00489_element_check_00466', () async {
      print("\n********** テスト実行：00489_element_check_00466 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_font.fontname_j;
      print(mac_info.printer_font.fontname_j);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_font.fontname_j = testData1s;
      print(mac_info.printer_font.fontname_j);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_font.fontname_j == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_font.fontname_j == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_font.fontname_j = testData2s;
      print(mac_info.printer_font.fontname_j);
      expect(mac_info.printer_font.fontname_j == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_font.fontname_j == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_font.fontname_j = defalut;
      print(mac_info.printer_font.fontname_j);
      expect(mac_info.printer_font.fontname_j == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_font.fontname_j == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00489_element_check_00466 **********\n\n");
    });

    test('00490_element_check_00467', () async {
      print("\n********** テスト実行：00490_element_check_00467 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.printer_font.fontname_e;
      print(mac_info.printer_font.fontname_e);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.printer_font.fontname_e = testData1s;
      print(mac_info.printer_font.fontname_e);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.printer_font.fontname_e == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.printer_font.fontname_e == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.printer_font.fontname_e = testData2s;
      print(mac_info.printer_font.fontname_e);
      expect(mac_info.printer_font.fontname_e == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_font.fontname_e == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.printer_font.fontname_e = defalut;
      print(mac_info.printer_font.fontname_e);
      expect(mac_info.printer_font.fontname_e == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.printer_font.fontname_e == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00490_element_check_00467 **********\n\n");
    });

    test('00491_element_check_00468', () async {
      print("\n********** テスト実行：00491_element_check_00468 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.pfcheck;
      print(mac_info.ups.pfcheck);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.pfcheck = testData1;
      print(mac_info.ups.pfcheck);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.pfcheck == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.pfcheck == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.pfcheck = testData2;
      print(mac_info.ups.pfcheck);
      expect(mac_info.ups.pfcheck == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfcheck == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.pfcheck = defalut;
      print(mac_info.ups.pfcheck);
      expect(mac_info.ups.pfcheck == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfcheck == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00491_element_check_00468 **********\n\n");
    });

    test('00492_element_check_00469', () async {
      print("\n********** テスト実行：00492_element_check_00469 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.pftime;
      print(mac_info.ups.pftime);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.pftime = testData1;
      print(mac_info.ups.pftime);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.pftime == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.pftime == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.pftime = testData2;
      print(mac_info.ups.pftime);
      expect(mac_info.ups.pftime == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pftime == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.pftime = defalut;
      print(mac_info.ups.pftime);
      expect(mac_info.ups.pftime == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pftime == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00492_element_check_00469 **********\n\n");
    });

    test('00493_element_check_00470', () async {
      print("\n********** テスト実行：00493_element_check_00470 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.pfretry;
      print(mac_info.ups.pfretry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.pfretry = testData1;
      print(mac_info.ups.pfretry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.pfretry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.pfretry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.pfretry = testData2;
      print(mac_info.ups.pfretry);
      expect(mac_info.ups.pfretry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfretry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.pfretry = defalut;
      print(mac_info.ups.pfretry);
      expect(mac_info.ups.pfretry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfretry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00493_element_check_00470 **********\n\n");
    });

    test('00494_element_check_00471', () async {
      print("\n********** テスト実行：00494_element_check_00471 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.pftime2;
      print(mac_info.ups.pftime2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.pftime2 = testData1;
      print(mac_info.ups.pftime2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.pftime2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.pftime2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.pftime2 = testData2;
      print(mac_info.ups.pftime2);
      expect(mac_info.ups.pftime2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pftime2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.pftime2 = defalut;
      print(mac_info.ups.pftime2);
      expect(mac_info.ups.pftime2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pftime2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00494_element_check_00471 **********\n\n");
    });

    test('00495_element_check_00472', () async {
      print("\n********** テスト実行：00495_element_check_00472 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.pfretry2;
      print(mac_info.ups.pfretry2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.pfretry2 = testData1;
      print(mac_info.ups.pfretry2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.pfretry2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.pfretry2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.pfretry2 = testData2;
      print(mac_info.ups.pfretry2);
      expect(mac_info.ups.pfretry2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfretry2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.pfretry2 = defalut;
      print(mac_info.ups.pfretry2);
      expect(mac_info.ups.pfretry2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfretry2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00495_element_check_00472 **********\n\n");
    });

    test('00496_element_check_00473', () async {
      print("\n********** テスト実行：00496_element_check_00473 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.pfmaxwait;
      print(mac_info.ups.pfmaxwait);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.pfmaxwait = testData1;
      print(mac_info.ups.pfmaxwait);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.pfmaxwait == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.pfmaxwait == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.pfmaxwait = testData2;
      print(mac_info.ups.pfmaxwait);
      expect(mac_info.ups.pfmaxwait == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfmaxwait == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.pfmaxwait = defalut;
      print(mac_info.ups.pfmaxwait);
      expect(mac_info.ups.pfmaxwait == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.pfmaxwait == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00496_element_check_00473 **********\n\n");
    });

    test('00497_element_check_00474', () async {
      print("\n********** テスト実行：00497_element_check_00474 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.port;
      print(mac_info.ups.port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.port = testData1s;
      print(mac_info.ups.port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.port == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.port == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.port = testData2s;
      print(mac_info.ups.port);
      expect(mac_info.ups.port == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.port == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.port = defalut;
      print(mac_info.ups.port);
      expect(mac_info.ups.port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00497_element_check_00474 **********\n\n");
    });

    test('00498_element_check_00475', () async {
      print("\n********** テスト実行：00498_element_check_00475 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.entry;
      print(mac_info.ups.entry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.entry = testData1s;
      print(mac_info.ups.entry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.entry == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.entry == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.entry = testData2s;
      print(mac_info.ups.entry);
      expect(mac_info.ups.entry == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.entry == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.entry = defalut;
      print(mac_info.ups.entry);
      expect(mac_info.ups.entry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.entry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00498_element_check_00475 **********\n\n");
    });

    test('00499_element_check_00476', () async {
      print("\n********** テスト実行：00499_element_check_00476 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.entry2;
      print(mac_info.ups.entry2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.entry2 = testData1s;
      print(mac_info.ups.entry2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.entry2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.entry2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.entry2 = testData2s;
      print(mac_info.ups.entry2);
      expect(mac_info.ups.entry2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.entry2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.entry2 = defalut;
      print(mac_info.ups.entry2);
      expect(mac_info.ups.entry2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.entry2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00499_element_check_00476 **********\n\n");
    });

    test('00500_element_check_00477', () async {
      print("\n********** テスト実行：00500_element_check_00477 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ups.port2;
      print(mac_info.ups.port2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ups.port2 = testData1s;
      print(mac_info.ups.port2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ups.port2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ups.port2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ups.port2 = testData2s;
      print(mac_info.ups.port2);
      expect(mac_info.ups.port2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.port2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ups.port2 = defalut;
      print(mac_info.ups.port2);
      expect(mac_info.ups.port2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ups.port2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00500_element_check_00477 **********\n\n");
    });

    test('00501_element_check_00478', () async {
      print("\n********** テスト実行：00501_element_check_00478 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.doc.update;
      print(mac_info.doc.update);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.doc.update = testData1;
      print(mac_info.doc.update);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.doc.update == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.doc.update == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.doc.update = testData2;
      print(mac_info.doc.update);
      expect(mac_info.doc.update == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.doc.update == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.doc.update = defalut;
      print(mac_info.doc.update);
      expect(mac_info.doc.update == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.doc.update == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00501_element_check_00478 **********\n\n");
    });

    test('00502_element_check_00479', () async {
      print("\n********** テスト実行：00502_element_check_00479 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db5_M.M1;
      print(mac_info.mem_size_db5_M.M1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db5_M.M1 = testData1;
      print(mac_info.mem_size_db5_M.M1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db5_M.M1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db5_M.M1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db5_M.M1 = testData2;
      print(mac_info.mem_size_db5_M.M1);
      expect(mac_info.mem_size_db5_M.M1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_M.M1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db5_M.M1 = defalut;
      print(mac_info.mem_size_db5_M.M1);
      expect(mac_info.mem_size_db5_M.M1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_M.M1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00502_element_check_00479 **********\n\n");
    });

    test('00503_element_check_00480', () async {
      print("\n********** テスト実行：00503_element_check_00480 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db5_M.M5;
      print(mac_info.mem_size_db5_M.M5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db5_M.M5 = testData1;
      print(mac_info.mem_size_db5_M.M5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db5_M.M5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db5_M.M5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db5_M.M5 = testData2;
      print(mac_info.mem_size_db5_M.M5);
      expect(mac_info.mem_size_db5_M.M5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_M.M5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db5_M.M5 = defalut;
      print(mac_info.mem_size_db5_M.M5);
      expect(mac_info.mem_size_db5_M.M5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_M.M5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00503_element_check_00480 **********\n\n");
    });

    test('00504_element_check_00481', () async {
      print("\n********** テスト実行：00504_element_check_00481 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db5_M.M10;
      print(mac_info.mem_size_db5_M.M10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db5_M.M10 = testData1;
      print(mac_info.mem_size_db5_M.M10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db5_M.M10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db5_M.M10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db5_M.M10 = testData2;
      print(mac_info.mem_size_db5_M.M10);
      expect(mac_info.mem_size_db5_M.M10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_M.M10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db5_M.M10 = defalut;
      print(mac_info.mem_size_db5_M.M10);
      expect(mac_info.mem_size_db5_M.M10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_M.M10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00504_element_check_00481 **********\n\n");
    });

    test('00505_element_check_00482', () async {
      print("\n********** テスト実行：00505_element_check_00482 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db5_S.S1;
      print(mac_info.mem_size_db5_S.S1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db5_S.S1 = testData1;
      print(mac_info.mem_size_db5_S.S1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db5_S.S1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db5_S.S1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db5_S.S1 = testData2;
      print(mac_info.mem_size_db5_S.S1);
      expect(mac_info.mem_size_db5_S.S1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_S.S1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db5_S.S1 = defalut;
      print(mac_info.mem_size_db5_S.S1);
      expect(mac_info.mem_size_db5_S.S1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_S.S1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00505_element_check_00482 **********\n\n");
    });

    test('00506_element_check_00483', () async {
      print("\n********** テスト実行：00506_element_check_00483 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db5_S.S5;
      print(mac_info.mem_size_db5_S.S5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db5_S.S5 = testData1;
      print(mac_info.mem_size_db5_S.S5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db5_S.S5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db5_S.S5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db5_S.S5 = testData2;
      print(mac_info.mem_size_db5_S.S5);
      expect(mac_info.mem_size_db5_S.S5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_S.S5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db5_S.S5 = defalut;
      print(mac_info.mem_size_db5_S.S5);
      expect(mac_info.mem_size_db5_S.S5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_S.S5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00506_element_check_00483 **********\n\n");
    });

    test('00507_element_check_00484', () async {
      print("\n********** テスト実行：00507_element_check_00484 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db5_S.S10;
      print(mac_info.mem_size_db5_S.S10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db5_S.S10 = testData1;
      print(mac_info.mem_size_db5_S.S10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db5_S.S10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db5_S.S10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db5_S.S10 = testData2;
      print(mac_info.mem_size_db5_S.S10);
      expect(mac_info.mem_size_db5_S.S10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_S.S10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db5_S.S10 = defalut;
      print(mac_info.mem_size_db5_S.S10);
      expect(mac_info.mem_size_db5_S.S10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db5_S.S10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00507_element_check_00484 **********\n\n");
    });

    test('00508_element_check_00485', () async {
      print("\n********** テスト実行：00508_element_check_00485 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_M.M1;
      print(mac_info.mem_size_db6_M.M1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_M.M1 = testData1;
      print(mac_info.mem_size_db6_M.M1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_M.M1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_M.M1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_M.M1 = testData2;
      print(mac_info.mem_size_db6_M.M1);
      expect(mac_info.mem_size_db6_M.M1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_M.M1 = defalut;
      print(mac_info.mem_size_db6_M.M1);
      expect(mac_info.mem_size_db6_M.M1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00508_element_check_00485 **********\n\n");
    });

    test('00509_element_check_00486', () async {
      print("\n********** テスト実行：00509_element_check_00486 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_M.M5;
      print(mac_info.mem_size_db6_M.M5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_M.M5 = testData1;
      print(mac_info.mem_size_db6_M.M5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_M.M5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_M.M5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_M.M5 = testData2;
      print(mac_info.mem_size_db6_M.M5);
      expect(mac_info.mem_size_db6_M.M5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_M.M5 = defalut;
      print(mac_info.mem_size_db6_M.M5);
      expect(mac_info.mem_size_db6_M.M5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00509_element_check_00486 **********\n\n");
    });

    test('00510_element_check_00487', () async {
      print("\n********** テスト実行：00510_element_check_00487 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_M.M10;
      print(mac_info.mem_size_db6_M.M10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_M.M10 = testData1;
      print(mac_info.mem_size_db6_M.M10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_M.M10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_M.M10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_M.M10 = testData2;
      print(mac_info.mem_size_db6_M.M10);
      expect(mac_info.mem_size_db6_M.M10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_M.M10 = defalut;
      print(mac_info.mem_size_db6_M.M10);
      expect(mac_info.mem_size_db6_M.M10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00510_element_check_00487 **********\n\n");
    });

    test('00511_element_check_00488', () async {
      print("\n********** テスト実行：00511_element_check_00488 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_M.M15;
      print(mac_info.mem_size_db6_M.M15);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_M.M15 = testData1;
      print(mac_info.mem_size_db6_M.M15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_M.M15 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_M.M15 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_M.M15 = testData2;
      print(mac_info.mem_size_db6_M.M15);
      expect(mac_info.mem_size_db6_M.M15 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M15 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_M.M15 = defalut;
      print(mac_info.mem_size_db6_M.M15);
      expect(mac_info.mem_size_db6_M.M15 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_M.M15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00511_element_check_00488 **********\n\n");
    });

    test('00512_element_check_00489', () async {
      print("\n********** テスト実行：00512_element_check_00489 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_S.S1;
      print(mac_info.mem_size_db6_S.S1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_S.S1 = testData1;
      print(mac_info.mem_size_db6_S.S1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_S.S1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_S.S1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_S.S1 = testData2;
      print(mac_info.mem_size_db6_S.S1);
      expect(mac_info.mem_size_db6_S.S1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_S.S1 = defalut;
      print(mac_info.mem_size_db6_S.S1);
      expect(mac_info.mem_size_db6_S.S1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00512_element_check_00489 **********\n\n");
    });

    test('00513_element_check_00490', () async {
      print("\n********** テスト実行：00513_element_check_00490 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_S.S5;
      print(mac_info.mem_size_db6_S.S5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_S.S5 = testData1;
      print(mac_info.mem_size_db6_S.S5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_S.S5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_S.S5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_S.S5 = testData2;
      print(mac_info.mem_size_db6_S.S5);
      expect(mac_info.mem_size_db6_S.S5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_S.S5 = defalut;
      print(mac_info.mem_size_db6_S.S5);
      expect(mac_info.mem_size_db6_S.S5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00513_element_check_00490 **********\n\n");
    });

    test('00514_element_check_00491', () async {
      print("\n********** テスト実行：00514_element_check_00491 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_S.S10;
      print(mac_info.mem_size_db6_S.S10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_S.S10 = testData1;
      print(mac_info.mem_size_db6_S.S10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_S.S10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_S.S10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_S.S10 = testData2;
      print(mac_info.mem_size_db6_S.S10);
      expect(mac_info.mem_size_db6_S.S10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_S.S10 = defalut;
      print(mac_info.mem_size_db6_S.S10);
      expect(mac_info.mem_size_db6_S.S10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00514_element_check_00491 **********\n\n");
    });

    test('00515_element_check_00492', () async {
      print("\n********** テスト実行：00515_element_check_00492 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.mem_size_db6_S.S15;
      print(mac_info.mem_size_db6_S.S15);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.mem_size_db6_S.S15 = testData1;
      print(mac_info.mem_size_db6_S.S15);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.mem_size_db6_S.S15 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.mem_size_db6_S.S15 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.mem_size_db6_S.S15 = testData2;
      print(mac_info.mem_size_db6_S.S15);
      expect(mac_info.mem_size_db6_S.S15 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S15 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.mem_size_db6_S.S15 = defalut;
      print(mac_info.mem_size_db6_S.S15);
      expect(mac_info.mem_size_db6_S.S15 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.mem_size_db6_S.S15 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00515_element_check_00492 **********\n\n");
    });

    test('00516_element_check_00493', () async {
      print("\n********** テスト実行：00516_element_check_00493 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.tag_poppy.poppy_print;
      print(mac_info.tag_poppy.poppy_print);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.tag_poppy.poppy_print = testData1;
      print(mac_info.tag_poppy.poppy_print);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.tag_poppy.poppy_print == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.tag_poppy.poppy_print == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.tag_poppy.poppy_print = testData2;
      print(mac_info.tag_poppy.poppy_print);
      expect(mac_info.tag_poppy.poppy_print == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tag_poppy.poppy_print == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.tag_poppy.poppy_print = defalut;
      print(mac_info.tag_poppy.poppy_print);
      expect(mac_info.tag_poppy.poppy_print == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tag_poppy.poppy_print == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00516_element_check_00493 **********\n\n");
    });

    test('00517_element_check_00494', () async {
      print("\n********** テスト実行：00517_element_check_00494 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.tag_poppy.tag_print;
      print(mac_info.tag_poppy.tag_print);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.tag_poppy.tag_print = testData1;
      print(mac_info.tag_poppy.tag_print);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.tag_poppy.tag_print == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.tag_poppy.tag_print == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.tag_poppy.tag_print = testData2;
      print(mac_info.tag_poppy.tag_print);
      expect(mac_info.tag_poppy.tag_print == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tag_poppy.tag_print == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.tag_poppy.tag_print = defalut;
      print(mac_info.tag_poppy.tag_print);
      expect(mac_info.tag_poppy.tag_print == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tag_poppy.tag_print == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00517_element_check_00494 **********\n\n");
    });

    test('00518_element_check_00495', () async {
      print("\n********** テスト実行：00518_element_check_00495 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.FJ_FTP.store_chd;
      print(mac_info.FJ_FTP.store_chd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.FJ_FTP.store_chd = testData1;
      print(mac_info.FJ_FTP.store_chd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.FJ_FTP.store_chd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.FJ_FTP.store_chd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.FJ_FTP.store_chd = testData2;
      print(mac_info.FJ_FTP.store_chd);
      expect(mac_info.FJ_FTP.store_chd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.FJ_FTP.store_chd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.FJ_FTP.store_chd = defalut;
      print(mac_info.FJ_FTP.store_chd);
      expect(mac_info.FJ_FTP.store_chd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.FJ_FTP.store_chd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00518_element_check_00495 **********\n\n");
    });

    test('00519_element_check_00496', () async {
      print("\n********** テスト実行：00519_element_check_00496 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_mode;
      print(mac_info.select_self.self_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_mode = testData1;
      print(mac_info.select_self.self_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_mode = testData2;
      print(mac_info.select_self.self_mode);
      expect(mac_info.select_self.self_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_mode = defalut;
      print(mac_info.select_self.self_mode);
      expect(mac_info.select_self.self_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00519_element_check_00496 **********\n\n");
    });

    test('00520_element_check_00497', () async {
      print("\n********** テスト実行：00520_element_check_00497 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_mac_mode;
      print(mac_info.select_self.self_mac_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_mac_mode = testData1;
      print(mac_info.select_self.self_mac_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_mac_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_mac_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_mac_mode = testData2;
      print(mac_info.select_self.self_mac_mode);
      expect(mac_info.select_self.self_mac_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_mac_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_mac_mode = defalut;
      print(mac_info.select_self.self_mac_mode);
      expect(mac_info.select_self.self_mac_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_mac_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00520_element_check_00497 **********\n\n");
    });

    test('00521_element_check_00498', () async {
      print("\n********** テスト実行：00521_element_check_00498 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.assist_port;
      print(mac_info.select_self.assist_port);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.assist_port = testData1;
      print(mac_info.select_self.assist_port);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.assist_port == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.assist_port == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.assist_port = testData2;
      print(mac_info.select_self.assist_port);
      expect(mac_info.select_self.assist_port == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.assist_port == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.assist_port = defalut;
      print(mac_info.select_self.assist_port);
      expect(mac_info.select_self.assist_port == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.assist_port == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00521_element_check_00498 **********\n\n");
    });

    test('00522_element_check_00499', () async {
      print("\n********** テスト実行：00522_element_check_00499 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.reg_cruising_drct;
      print(mac_info.select_self.reg_cruising_drct);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.reg_cruising_drct = testData1;
      print(mac_info.select_self.reg_cruising_drct);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.reg_cruising_drct == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.reg_cruising_drct == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.reg_cruising_drct = testData2;
      print(mac_info.select_self.reg_cruising_drct);
      expect(mac_info.select_self.reg_cruising_drct == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.reg_cruising_drct == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.reg_cruising_drct = defalut;
      print(mac_info.select_self.reg_cruising_drct);
      expect(mac_info.select_self.reg_cruising_drct == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.reg_cruising_drct == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00522_element_check_00499 **********\n\n");
    });

    test('00523_element_check_00500', () async {
      print("\n********** テスト実行：00523_element_check_00500 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_chart_output;
      print(mac_info.select_self.self_chart_output);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_chart_output = testData1;
      print(mac_info.select_self.self_chart_output);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_chart_output == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_chart_output == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_chart_output = testData2;
      print(mac_info.select_self.self_chart_output);
      expect(mac_info.select_self.self_chart_output == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_chart_output == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_chart_output = defalut;
      print(mac_info.select_self.self_chart_output);
      expect(mac_info.select_self.self_chart_output == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_chart_output == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00523_element_check_00500 **********\n\n");
    });

    test('00524_element_check_00501', () async {
      print("\n********** テスト実行：00524_element_check_00501 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.select_dspmode;
      print(mac_info.select_self.select_dspmode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.select_dspmode = testData1;
      print(mac_info.select_self.select_dspmode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.select_dspmode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.select_dspmode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.select_dspmode = testData2;
      print(mac_info.select_self.select_dspmode);
      expect(mac_info.select_self.select_dspmode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.select_dspmode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.select_dspmode = defalut;
      print(mac_info.select_self.select_dspmode);
      expect(mac_info.select_self.select_dspmode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.select_dspmode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00524_element_check_00501 **********\n\n");
    });

    test('00525_element_check_00502', () async {
      print("\n********** テスト実行：00525_element_check_00502 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.qs_auto_reboot;
      print(mac_info.select_self.qs_auto_reboot);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.qs_auto_reboot = testData1;
      print(mac_info.select_self.qs_auto_reboot);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.qs_auto_reboot == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.qs_auto_reboot == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.qs_auto_reboot = testData2;
      print(mac_info.select_self.qs_auto_reboot);
      expect(mac_info.select_self.qs_auto_reboot == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.qs_auto_reboot == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.qs_auto_reboot = defalut;
      print(mac_info.select_self.qs_auto_reboot);
      expect(mac_info.select_self.qs_auto_reboot == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.qs_auto_reboot == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00525_element_check_00502 **********\n\n");
    });

    test('00526_element_check_00503', () async {
      print("\n********** テスト実行：00526_element_check_00503 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_regbag1_plucd;
      print(mac_info.select_self.self_regbag1_plucd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_regbag1_plucd = testData1;
      print(mac_info.select_self.self_regbag1_plucd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_regbag1_plucd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_regbag1_plucd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_regbag1_plucd = testData2;
      print(mac_info.select_self.self_regbag1_plucd);
      expect(mac_info.select_self.self_regbag1_plucd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_regbag1_plucd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_regbag1_plucd = defalut;
      print(mac_info.select_self.self_regbag1_plucd);
      expect(mac_info.select_self.self_regbag1_plucd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_regbag1_plucd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00526_element_check_00503 **********\n\n");
    });

    test('00527_element_check_00504', () async {
      print("\n********** テスト実行：00527_element_check_00504 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_regbag2_plucd;
      print(mac_info.select_self.self_regbag2_plucd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_regbag2_plucd = testData1;
      print(mac_info.select_self.self_regbag2_plucd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_regbag2_plucd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_regbag2_plucd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_regbag2_plucd = testData2;
      print(mac_info.select_self.self_regbag2_plucd);
      expect(mac_info.select_self.self_regbag2_plucd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_regbag2_plucd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_regbag2_plucd = defalut;
      print(mac_info.select_self.self_regbag2_plucd);
      expect(mac_info.select_self.self_regbag2_plucd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_regbag2_plucd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00527_element_check_00504 **********\n\n");
    });

    test('00528_element_check_00505', () async {
      print("\n********** テスト実行：00528_element_check_00505 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_regbag3_plucd;
      print(mac_info.select_self.self_regbag3_plucd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_regbag3_plucd = testData1;
      print(mac_info.select_self.self_regbag3_plucd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_regbag3_plucd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_regbag3_plucd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_regbag3_plucd = testData2;
      print(mac_info.select_self.self_regbag3_plucd);
      expect(mac_info.select_self.self_regbag3_plucd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_regbag3_plucd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_regbag3_plucd = defalut;
      print(mac_info.select_self.self_regbag3_plucd);
      expect(mac_info.select_self.self_regbag3_plucd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_regbag3_plucd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00528_element_check_00505 **********\n\n");
    });

    test('00529_element_check_00506', () async {
      print("\n********** テスト実行：00529_element_check_00506 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_separate_in_scl;
      print(mac_info.select_self.self_separate_in_scl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_separate_in_scl = testData1;
      print(mac_info.select_self.self_separate_in_scl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_separate_in_scl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_separate_in_scl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_separate_in_scl = testData2;
      print(mac_info.select_self.self_separate_in_scl);
      expect(mac_info.select_self.self_separate_in_scl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_separate_in_scl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_separate_in_scl = defalut;
      print(mac_info.select_self.self_separate_in_scl);
      expect(mac_info.select_self.self_separate_in_scl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_separate_in_scl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00529_element_check_00506 **********\n\n");
    });

    test('00530_element_check_00507', () async {
      print("\n********** テスト実行：00530_element_check_00507 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.qc_mode;
      print(mac_info.select_self.qc_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.qc_mode = testData1;
      print(mac_info.select_self.qc_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.qc_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.qc_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.qc_mode = testData2;
      print(mac_info.select_self.qc_mode);
      expect(mac_info.select_self.qc_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.qc_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.qc_mode = defalut;
      print(mac_info.select_self.qc_mode);
      expect(mac_info.select_self.qc_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.qc_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00530_element_check_00507 **********\n\n");
    });

    test('00531_element_check_00508', () async {
      print("\n********** テスト実行：00531_element_check_00508 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.selfmactyp;
      print(mac_info.select_self.selfmactyp);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.selfmactyp = testData1;
      print(mac_info.select_self.selfmactyp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.selfmactyp == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.selfmactyp == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.selfmactyp = testData2;
      print(mac_info.select_self.selfmactyp);
      expect(mac_info.select_self.selfmactyp == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.selfmactyp == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.selfmactyp = defalut;
      print(mac_info.select_self.selfmactyp);
      expect(mac_info.select_self.selfmactyp == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.selfmactyp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00531_element_check_00508 **********\n\n");
    });

    test('00532_element_check_00509', () async {
      print("\n********** テスト実行：00532_element_check_00509 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_scan_typ;
      print(mac_info.select_self.self_scan_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_scan_typ = testData1;
      print(mac_info.select_self.self_scan_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_scan_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_scan_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_scan_typ = testData2;
      print(mac_info.select_self.self_scan_typ);
      expect(mac_info.select_self.self_scan_typ == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_scan_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_scan_typ = defalut;
      print(mac_info.select_self.self_scan_typ);
      expect(mac_info.select_self.self_scan_typ == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_scan_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00532_element_check_00509 **********\n\n");
    });

    test('00533_element_check_00510', () async {
      print("\n********** テスト実行：00533_element_check_00510 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.self_stre_typ;
      print(mac_info.select_self.self_stre_typ);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.self_stre_typ = testData1;
      print(mac_info.select_self.self_stre_typ);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.self_stre_typ == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.self_stre_typ == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.self_stre_typ = testData2;
      print(mac_info.select_self.self_stre_typ);
      expect(mac_info.select_self.self_stre_typ == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_stre_typ == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.self_stre_typ = defalut;
      print(mac_info.select_self.self_stre_typ);
      expect(mac_info.select_self.self_stre_typ == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.self_stre_typ == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00533_element_check_00510 **********\n\n");
    });

    test('00534_element_check_00511', () async {
      print("\n********** テスト実行：00534_element_check_00511 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.hs_start_mode;
      print(mac_info.select_self.hs_start_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.hs_start_mode = testData1;
      print(mac_info.select_self.hs_start_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.hs_start_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.hs_start_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.hs_start_mode = testData2;
      print(mac_info.select_self.hs_start_mode);
      expect(mac_info.select_self.hs_start_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.hs_start_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.hs_start_mode = defalut;
      print(mac_info.select_self.hs_start_mode);
      expect(mac_info.select_self.hs_start_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.hs_start_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00534_element_check_00511 **********\n\n");
    });

    test('00535_element_check_00512', () async {
      print("\n********** テスト実行：00535_element_check_00512 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_scan_swing;
      print(mac_info.select_self.psensor_scan_swing);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_scan_swing = testData1;
      print(mac_info.select_self.psensor_scan_swing);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_scan_swing == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_scan_swing == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_scan_swing = testData2;
      print(mac_info.select_self.psensor_scan_swing);
      expect(mac_info.select_self.psensor_scan_swing == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_swing == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_scan_swing = defalut;
      print(mac_info.select_self.psensor_scan_swing);
      expect(mac_info.select_self.psensor_scan_swing == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_swing == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00535_element_check_00512 **********\n\n");
    });

    test('00536_element_check_00513', () async {
      print("\n********** テスト実行：00536_element_check_00513 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_swing_notice;
      print(mac_info.select_self.psensor_swing_notice);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_swing_notice = testData1;
      print(mac_info.select_self.psensor_swing_notice);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_swing_notice == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_swing_notice == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_swing_notice = testData2;
      print(mac_info.select_self.psensor_swing_notice);
      expect(mac_info.select_self.psensor_swing_notice == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_swing_notice == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_swing_notice = defalut;
      print(mac_info.select_self.psensor_swing_notice);
      expect(mac_info.select_self.psensor_swing_notice == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_swing_notice == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00536_element_check_00513 **********\n\n");
    });

    test('00537_element_check_00514', () async {
      print("\n********** テスト実行：00537_element_check_00514 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_scan_slow;
      print(mac_info.select_self.psensor_scan_slow);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_scan_slow = testData1;
      print(mac_info.select_self.psensor_scan_slow);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_scan_slow == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_scan_slow == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_scan_slow = testData2;
      print(mac_info.select_self.psensor_scan_slow);
      expect(mac_info.select_self.psensor_scan_slow == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_slow == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_scan_slow = defalut;
      print(mac_info.select_self.psensor_scan_slow);
      expect(mac_info.select_self.psensor_scan_slow == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_slow == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00537_element_check_00514 **********\n\n");
    });

    test('00538_element_check_00515', () async {
      print("\n********** テスト実行：00538_element_check_00515 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_slow_notice;
      print(mac_info.select_self.psensor_slow_notice);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_slow_notice = testData1;
      print(mac_info.select_self.psensor_slow_notice);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_slow_notice == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_slow_notice == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_slow_notice = testData2;
      print(mac_info.select_self.psensor_slow_notice);
      expect(mac_info.select_self.psensor_slow_notice == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_slow_notice == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_slow_notice = defalut;
      print(mac_info.select_self.psensor_slow_notice);
      expect(mac_info.select_self.psensor_slow_notice == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_slow_notice == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00538_element_check_00515 **********\n\n");
    });

    test('00539_element_check_00516', () async {
      print("\n********** テスト実行：00539_element_check_00516 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_scan_slowtime;
      print(mac_info.select_self.psensor_scan_slowtime);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_scan_slowtime = testData1;
      print(mac_info.select_self.psensor_scan_slowtime);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_scan_slowtime == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_scan_slowtime == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_scan_slowtime = testData2;
      print(mac_info.select_self.psensor_scan_slowtime);
      expect(mac_info.select_self.psensor_scan_slowtime == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_slowtime == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_scan_slowtime = defalut;
      print(mac_info.select_self.psensor_scan_slowtime);
      expect(mac_info.select_self.psensor_scan_slowtime == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_slowtime == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00539_element_check_00516 **********\n\n");
    });

    test('00540_element_check_00517', () async {
      print("\n********** テスト実行：00540_element_check_00517 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_scan_away;
      print(mac_info.select_self.psensor_scan_away);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_scan_away = testData1;
      print(mac_info.select_self.psensor_scan_away);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_scan_away == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_scan_away == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_scan_away = testData2;
      print(mac_info.select_self.psensor_scan_away);
      expect(mac_info.select_self.psensor_scan_away == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_away == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_scan_away = defalut;
      print(mac_info.select_self.psensor_scan_away);
      expect(mac_info.select_self.psensor_scan_away == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_away == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00540_element_check_00517 **********\n\n");
    });

    test('00541_element_check_00518', () async {
      print("\n********** テスト実行：00541_element_check_00518 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_away_notice;
      print(mac_info.select_self.psensor_away_notice);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_away_notice = testData1;
      print(mac_info.select_self.psensor_away_notice);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_away_notice == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_away_notice == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_away_notice = testData2;
      print(mac_info.select_self.psensor_away_notice);
      expect(mac_info.select_self.psensor_away_notice == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_away_notice == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_away_notice = defalut;
      print(mac_info.select_self.psensor_away_notice);
      expect(mac_info.select_self.psensor_away_notice == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_away_notice == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00541_element_check_00518 **********\n\n");
    });

    test('00542_element_check_00519', () async {
      print("\n********** テスト実行：00542_element_check_00519 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_scan_awaytime;
      print(mac_info.select_self.psensor_scan_awaytime);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_scan_awaytime = testData1;
      print(mac_info.select_self.psensor_scan_awaytime);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_scan_awaytime == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_scan_awaytime == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_scan_awaytime = testData2;
      print(mac_info.select_self.psensor_scan_awaytime);
      expect(mac_info.select_self.psensor_scan_awaytime == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_awaytime == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_scan_awaytime = defalut;
      print(mac_info.select_self.psensor_scan_awaytime);
      expect(mac_info.select_self.psensor_scan_awaytime == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_awaytime == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00542_element_check_00519 **********\n\n");
    });

    test('00543_element_check_00520', () async {
      print("\n********** テスト実行：00543_element_check_00520 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_disptime;
      print(mac_info.select_self.psensor_disptime);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_disptime = testData1;
      print(mac_info.select_self.psensor_disptime);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_disptime == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_disptime == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_disptime = testData2;
      print(mac_info.select_self.psensor_disptime);
      expect(mac_info.select_self.psensor_disptime == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_disptime == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_disptime = defalut;
      print(mac_info.select_self.psensor_disptime);
      expect(mac_info.select_self.psensor_disptime == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_disptime == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00543_element_check_00520 **********\n\n");
    });

    test('00544_element_check_00521', () async {
      print("\n********** テスト実行：00544_element_check_00521 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_notice;
      print(mac_info.select_self.psensor_notice);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_notice = testData1;
      print(mac_info.select_self.psensor_notice);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_notice == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_notice == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_notice = testData2;
      print(mac_info.select_self.psensor_notice);
      expect(mac_info.select_self.psensor_notice == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_notice == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_notice = defalut;
      print(mac_info.select_self.psensor_notice);
      expect(mac_info.select_self.psensor_notice == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_notice == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00544_element_check_00521 **********\n\n");
    });

    test('00545_element_check_00522', () async {
      print("\n********** テスト実行：00545_element_check_00522 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.kpi_hs_mode;
      print(mac_info.select_self.kpi_hs_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.kpi_hs_mode = testData1;
      print(mac_info.select_self.kpi_hs_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.kpi_hs_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.kpi_hs_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.kpi_hs_mode = testData2;
      print(mac_info.select_self.kpi_hs_mode);
      expect(mac_info.select_self.kpi_hs_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.kpi_hs_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.kpi_hs_mode = defalut;
      print(mac_info.select_self.kpi_hs_mode);
      expect(mac_info.select_self.kpi_hs_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.kpi_hs_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00545_element_check_00522 **********\n\n");
    });

    test('00546_element_check_00523', () async {
      print("\n********** テスト実行：00546_element_check_00523 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_swing_cnt;
      print(mac_info.select_self.psensor_swing_cnt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_swing_cnt = testData1;
      print(mac_info.select_self.psensor_swing_cnt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_swing_cnt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_swing_cnt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_swing_cnt = testData2;
      print(mac_info.select_self.psensor_swing_cnt);
      expect(mac_info.select_self.psensor_swing_cnt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_swing_cnt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_swing_cnt = defalut;
      print(mac_info.select_self.psensor_swing_cnt);
      expect(mac_info.select_self.psensor_swing_cnt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_swing_cnt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00546_element_check_00523 **********\n\n");
    });

    test('00547_element_check_00524', () async {
      print("\n********** テスト実行：00547_element_check_00524 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_scan_slow_sound;
      print(mac_info.select_self.psensor_scan_slow_sound);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_scan_slow_sound = testData1;
      print(mac_info.select_self.psensor_scan_slow_sound);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_scan_slow_sound == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_scan_slow_sound == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_scan_slow_sound = testData2;
      print(mac_info.select_self.psensor_scan_slow_sound);
      expect(mac_info.select_self.psensor_scan_slow_sound == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_slow_sound == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_scan_slow_sound = defalut;
      print(mac_info.select_self.psensor_scan_slow_sound);
      expect(mac_info.select_self.psensor_scan_slow_sound == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_scan_slow_sound == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00547_element_check_00524 **********\n\n");
    });

    test('00548_element_check_00525', () async {
      print("\n********** テスト実行：00548_element_check_00525 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_away_sound;
      print(mac_info.select_self.psensor_away_sound);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_away_sound = testData1;
      print(mac_info.select_self.psensor_away_sound);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_away_sound == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_away_sound == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_away_sound = testData2;
      print(mac_info.select_self.psensor_away_sound);
      expect(mac_info.select_self.psensor_away_sound == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_away_sound == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_away_sound = defalut;
      print(mac_info.select_self.psensor_away_sound);
      expect(mac_info.select_self.psensor_away_sound == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_away_sound == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00548_element_check_00525 **********\n\n");
    });

    test('00549_element_check_00526', () async {
      print("\n********** テスト実行：00549_element_check_00526 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.leave_qr_mode;
      print(mac_info.select_self.leave_qr_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.leave_qr_mode = testData1;
      print(mac_info.select_self.leave_qr_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.leave_qr_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.leave_qr_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.leave_qr_mode = testData2;
      print(mac_info.select_self.leave_qr_mode);
      expect(mac_info.select_self.leave_qr_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.leave_qr_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.leave_qr_mode = defalut;
      print(mac_info.select_self.leave_qr_mode);
      expect(mac_info.select_self.leave_qr_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.leave_qr_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00549_element_check_00526 **********\n\n");
    });

    test('00550_element_check_00527', () async {
      print("\n********** テスト実行：00550_element_check_00527 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.aibox_select_mode;
      print(mac_info.select_self.aibox_select_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.aibox_select_mode = testData1;
      print(mac_info.select_self.aibox_select_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.aibox_select_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.aibox_select_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.aibox_select_mode = testData2;
      print(mac_info.select_self.aibox_select_mode);
      expect(mac_info.select_self.aibox_select_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.aibox_select_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.aibox_select_mode = defalut;
      print(mac_info.select_self.aibox_select_mode);
      expect(mac_info.select_self.aibox_select_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.aibox_select_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00550_element_check_00527 **********\n\n");
    });

    test('00551_element_check_00528', () async {
      print("\n********** テスト実行：00551_element_check_00528 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.psensor_position;
      print(mac_info.select_self.psensor_position);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.psensor_position = testData1;
      print(mac_info.select_self.psensor_position);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.psensor_position == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.psensor_position == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.psensor_position = testData2;
      print(mac_info.select_self.psensor_position);
      expect(mac_info.select_self.psensor_position == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_position == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.psensor_position = defalut;
      print(mac_info.select_self.psensor_position);
      expect(mac_info.select_self.psensor_position == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.psensor_position == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00551_element_check_00528 **********\n\n");
    });

    test('00552_element_check_00529', () async {
      print("\n********** テスト実行：00552_element_check_00529 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_self.leave_qr_prn_ptn;
      print(mac_info.select_self.leave_qr_prn_ptn);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_self.leave_qr_prn_ptn = testData1;
      print(mac_info.select_self.leave_qr_prn_ptn);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_self.leave_qr_prn_ptn == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_self.leave_qr_prn_ptn == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_self.leave_qr_prn_ptn = testData2;
      print(mac_info.select_self.leave_qr_prn_ptn);
      expect(mac_info.select_self.leave_qr_prn_ptn == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.leave_qr_prn_ptn == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_self.leave_qr_prn_ptn = defalut;
      print(mac_info.select_self.leave_qr_prn_ptn);
      expect(mac_info.select_self.leave_qr_prn_ptn == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_self.leave_qr_prn_ptn == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00552_element_check_00529 **********\n\n");
    });

    test('00553_element_check_00530', () async {
      print("\n********** テスト実行：00553_element_check_00530 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.prime_fip.prime_fip;
      print(mac_info.prime_fip.prime_fip);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.prime_fip.prime_fip = testData1;
      print(mac_info.prime_fip.prime_fip);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.prime_fip.prime_fip == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.prime_fip.prime_fip == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.prime_fip.prime_fip = testData2;
      print(mac_info.prime_fip.prime_fip);
      expect(mac_info.prime_fip.prime_fip == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.prime_fip.prime_fip == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.prime_fip.prime_fip = defalut;
      print(mac_info.prime_fip.prime_fip);
      expect(mac_info.prime_fip.prime_fip == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.prime_fip.prime_fip == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00553_element_check_00530 **********\n\n");
    });

    test('00554_element_check_00531', () async {
      print("\n********** テスト実行：00554_element_check_00531 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.Edy_Connection.edy_retry_timeout;
      print(mac_info.Edy_Connection.edy_retry_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.Edy_Connection.edy_retry_timeout = testData1;
      print(mac_info.Edy_Connection.edy_retry_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.Edy_Connection.edy_retry_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.Edy_Connection.edy_retry_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.Edy_Connection.edy_retry_timeout = testData2;
      print(mac_info.Edy_Connection.edy_retry_timeout);
      expect(mac_info.Edy_Connection.edy_retry_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.Edy_Connection.edy_retry_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.Edy_Connection.edy_retry_timeout = defalut;
      print(mac_info.Edy_Connection.edy_retry_timeout);
      expect(mac_info.Edy_Connection.edy_retry_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.Edy_Connection.edy_retry_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00554_element_check_00531 **********\n\n");
    });

    test('00555_element_check_00532', () async {
      print("\n********** テスト実行：00555_element_check_00532 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.Edy_Connection.edy_connect_timeout;
      print(mac_info.Edy_Connection.edy_connect_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.Edy_Connection.edy_connect_timeout = testData1;
      print(mac_info.Edy_Connection.edy_connect_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.Edy_Connection.edy_connect_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.Edy_Connection.edy_connect_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.Edy_Connection.edy_connect_timeout = testData2;
      print(mac_info.Edy_Connection.edy_connect_timeout);
      expect(mac_info.Edy_Connection.edy_connect_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.Edy_Connection.edy_connect_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.Edy_Connection.edy_connect_timeout = defalut;
      print(mac_info.Edy_Connection.edy_connect_timeout);
      expect(mac_info.Edy_Connection.edy_connect_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.Edy_Connection.edy_connect_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00555_element_check_00532 **********\n\n");
    });

    test('00556_element_check_00533', () async {
      print("\n********** テスト実行：00556_element_check_00533 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.timeserver.timeserver;
      print(mac_info.timeserver.timeserver);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.timeserver.timeserver = testData1;
      print(mac_info.timeserver.timeserver);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.timeserver.timeserver == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.timeserver.timeserver == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.timeserver.timeserver = testData2;
      print(mac_info.timeserver.timeserver);
      expect(mac_info.timeserver.timeserver == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.timeserver.timeserver == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.timeserver.timeserver = defalut;
      print(mac_info.timeserver.timeserver);
      expect(mac_info.timeserver.timeserver == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.timeserver.timeserver == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00556_element_check_00533 **********\n\n");
    });

    test('00557_element_check_00534', () async {
      print("\n********** テスト実行：00557_element_check_00534 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.fcon_version.scpu1;
      print(mac_info.fcon_version.scpu1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.fcon_version.scpu1 = testData1s;
      print(mac_info.fcon_version.scpu1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.fcon_version.scpu1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.fcon_version.scpu1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.fcon_version.scpu1 = testData2s;
      print(mac_info.fcon_version.scpu1);
      expect(mac_info.fcon_version.scpu1 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.scpu1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.fcon_version.scpu1 = defalut;
      print(mac_info.fcon_version.scpu1);
      expect(mac_info.fcon_version.scpu1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.scpu1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00557_element_check_00534 **********\n\n");
    });

    test('00558_element_check_00535', () async {
      print("\n********** テスト実行：00558_element_check_00535 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.fcon_version.scpu2;
      print(mac_info.fcon_version.scpu2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.fcon_version.scpu2 = testData1s;
      print(mac_info.fcon_version.scpu2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.fcon_version.scpu2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.fcon_version.scpu2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.fcon_version.scpu2 = testData2s;
      print(mac_info.fcon_version.scpu2);
      expect(mac_info.fcon_version.scpu2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.scpu2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.fcon_version.scpu2 = defalut;
      print(mac_info.fcon_version.scpu2);
      expect(mac_info.fcon_version.scpu2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.scpu2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00558_element_check_00535 **********\n\n");
    });

    test('00559_element_check_00536', () async {
      print("\n********** テスト実行：00559_element_check_00536 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.fcon_version.printer;
      print(mac_info.fcon_version.printer);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.fcon_version.printer = testData1s;
      print(mac_info.fcon_version.printer);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.fcon_version.printer == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.fcon_version.printer == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.fcon_version.printer = testData2s;
      print(mac_info.fcon_version.printer);
      expect(mac_info.fcon_version.printer == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.printer == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.fcon_version.printer = defalut;
      print(mac_info.fcon_version.printer);
      expect(mac_info.fcon_version.printer == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.printer == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00559_element_check_00536 **********\n\n");
    });

    test('00560_element_check_00537', () async {
      print("\n********** テスト実行：00560_element_check_00537 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.fcon_version.printer2;
      print(mac_info.fcon_version.printer2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.fcon_version.printer2 = testData1s;
      print(mac_info.fcon_version.printer2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.fcon_version.printer2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.fcon_version.printer2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.fcon_version.printer2 = testData2s;
      print(mac_info.fcon_version.printer2);
      expect(mac_info.fcon_version.printer2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.printer2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.fcon_version.printer2 = defalut;
      print(mac_info.fcon_version.printer2);
      expect(mac_info.fcon_version.printer2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.fcon_version.printer2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00560_element_check_00537 **********\n\n");
    });

    test('00561_element_check_00538', () async {
      print("\n********** テスト実行：00561_element_check_00538 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.MC_Connection.mc_tenant_cd;
      print(mac_info.MC_Connection.mc_tenant_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.MC_Connection.mc_tenant_cd = testData1;
      print(mac_info.MC_Connection.mc_tenant_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.MC_Connection.mc_tenant_cd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.MC_Connection.mc_tenant_cd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.MC_Connection.mc_tenant_cd = testData2;
      print(mac_info.MC_Connection.mc_tenant_cd);
      expect(mac_info.MC_Connection.mc_tenant_cd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.MC_Connection.mc_tenant_cd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.MC_Connection.mc_tenant_cd = defalut;
      print(mac_info.MC_Connection.mc_tenant_cd);
      expect(mac_info.MC_Connection.mc_tenant_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.MC_Connection.mc_tenant_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00561_element_check_00538 **********\n\n");
    });

    test('00562_element_check_00539', () async {
      print("\n********** テスト実行：00562_element_check_00539 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.deccin_bkup.bkup_auto_deccin;
      print(mac_info.deccin_bkup.bkup_auto_deccin);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.deccin_bkup.bkup_auto_deccin = testData1;
      print(mac_info.deccin_bkup.bkup_auto_deccin);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.deccin_bkup.bkup_auto_deccin == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.deccin_bkup.bkup_auto_deccin == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.deccin_bkup.bkup_auto_deccin = testData2;
      print(mac_info.deccin_bkup.bkup_auto_deccin);
      expect(mac_info.deccin_bkup.bkup_auto_deccin == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_auto_deccin == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.deccin_bkup.bkup_auto_deccin = defalut;
      print(mac_info.deccin_bkup.bkup_auto_deccin);
      expect(mac_info.deccin_bkup.bkup_auto_deccin == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_auto_deccin == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00562_element_check_00539 **********\n\n");
    });

    test('00563_element_check_00540', () async {
      print("\n********** テスト実行：00563_element_check_00540 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.deccin_bkup.bkup_acb_deccin;
      print(mac_info.deccin_bkup.bkup_acb_deccin);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.deccin_bkup.bkup_acb_deccin = testData1;
      print(mac_info.deccin_bkup.bkup_acb_deccin);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.deccin_bkup.bkup_acb_deccin == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.deccin_bkup.bkup_acb_deccin == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.deccin_bkup.bkup_acb_deccin = testData2;
      print(mac_info.deccin_bkup.bkup_acb_deccin);
      expect(mac_info.deccin_bkup.bkup_acb_deccin == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_acb_deccin == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.deccin_bkup.bkup_acb_deccin = defalut;
      print(mac_info.deccin_bkup.bkup_acb_deccin);
      expect(mac_info.deccin_bkup.bkup_acb_deccin == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_acb_deccin == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00563_element_check_00540 **********\n\n");
    });

    test('00564_element_check_00541', () async {
      print("\n********** テスト実行：00564_element_check_00541 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.deccin_bkup.bkup_acr_onoff;
      print(mac_info.deccin_bkup.bkup_acr_onoff);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.deccin_bkup.bkup_acr_onoff = testData1;
      print(mac_info.deccin_bkup.bkup_acr_onoff);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.deccin_bkup.bkup_acr_onoff == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.deccin_bkup.bkup_acr_onoff == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.deccin_bkup.bkup_acr_onoff = testData2;
      print(mac_info.deccin_bkup.bkup_acr_onoff);
      expect(mac_info.deccin_bkup.bkup_acr_onoff == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_acr_onoff == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.deccin_bkup.bkup_acr_onoff = defalut;
      print(mac_info.deccin_bkup.bkup_acr_onoff);
      expect(mac_info.deccin_bkup.bkup_acr_onoff == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_acr_onoff == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00564_element_check_00541 **********\n\n");
    });

    test('00565_element_check_00542', () async {
      print("\n********** テスト実行：00565_element_check_00542 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.deccin_bkup.bkup_acb_onoff;
      print(mac_info.deccin_bkup.bkup_acb_onoff);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.deccin_bkup.bkup_acb_onoff = testData1;
      print(mac_info.deccin_bkup.bkup_acb_onoff);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.deccin_bkup.bkup_acb_onoff == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.deccin_bkup.bkup_acb_onoff == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.deccin_bkup.bkup_acb_onoff = testData2;
      print(mac_info.deccin_bkup.bkup_acb_onoff);
      expect(mac_info.deccin_bkup.bkup_acb_onoff == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_acb_onoff == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.deccin_bkup.bkup_acb_onoff = defalut;
      print(mac_info.deccin_bkup.bkup_acb_onoff);
      expect(mac_info.deccin_bkup.bkup_acb_onoff == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.deccin_bkup.bkup_acb_onoff == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00565_element_check_00542 **********\n\n");
    });

    test('00566_element_check_00543', () async {
      print("\n********** テスト実行：00566_element_check_00543 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd;
      print(mac_info.identifies.identifies_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd = testData1s;
      print(mac_info.identifies.identifies_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd = testData2s;
      print(mac_info.identifies.identifies_cd);
      expect(mac_info.identifies.identifies_cd == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd = defalut;
      print(mac_info.identifies.identifies_cd);
      expect(mac_info.identifies.identifies_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00566_element_check_00543 **********\n\n");
    });

    test('00567_element_check_00544', () async {
      print("\n********** テスト実行：00567_element_check_00544 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd1;
      print(mac_info.identifies.identifies_cd1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd1 = testData1s;
      print(mac_info.identifies.identifies_cd1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd1 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd1 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd1 = testData2s;
      print(mac_info.identifies.identifies_cd1);
      expect(mac_info.identifies.identifies_cd1 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd1 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd1 = defalut;
      print(mac_info.identifies.identifies_cd1);
      expect(mac_info.identifies.identifies_cd1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00567_element_check_00544 **********\n\n");
    });

    test('00568_element_check_00545', () async {
      print("\n********** テスト実行：00568_element_check_00545 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd2;
      print(mac_info.identifies.identifies_cd2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd2 = testData1s;
      print(mac_info.identifies.identifies_cd2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd2 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd2 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd2 = testData2s;
      print(mac_info.identifies.identifies_cd2);
      expect(mac_info.identifies.identifies_cd2 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd2 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd2 = defalut;
      print(mac_info.identifies.identifies_cd2);
      expect(mac_info.identifies.identifies_cd2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00568_element_check_00545 **********\n\n");
    });

    test('00569_element_check_00546', () async {
      print("\n********** テスト実行：00569_element_check_00546 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd3;
      print(mac_info.identifies.identifies_cd3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd3 = testData1s;
      print(mac_info.identifies.identifies_cd3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd3 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd3 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd3 = testData2s;
      print(mac_info.identifies.identifies_cd3);
      expect(mac_info.identifies.identifies_cd3 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd3 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd3 = defalut;
      print(mac_info.identifies.identifies_cd3);
      expect(mac_info.identifies.identifies_cd3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00569_element_check_00546 **********\n\n");
    });

    test('00570_element_check_00547', () async {
      print("\n********** テスト実行：00570_element_check_00547 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd4;
      print(mac_info.identifies.identifies_cd4);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd4 = testData1s;
      print(mac_info.identifies.identifies_cd4);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd4 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd4 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd4 = testData2s;
      print(mac_info.identifies.identifies_cd4);
      expect(mac_info.identifies.identifies_cd4 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd4 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd4 = defalut;
      print(mac_info.identifies.identifies_cd4);
      expect(mac_info.identifies.identifies_cd4 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd4 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00570_element_check_00547 **********\n\n");
    });

    test('00571_element_check_00548', () async {
      print("\n********** テスト実行：00571_element_check_00548 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd5;
      print(mac_info.identifies.identifies_cd5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd5 = testData1s;
      print(mac_info.identifies.identifies_cd5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd5 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd5 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd5 = testData2s;
      print(mac_info.identifies.identifies_cd5);
      expect(mac_info.identifies.identifies_cd5 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd5 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd5 = defalut;
      print(mac_info.identifies.identifies_cd5);
      expect(mac_info.identifies.identifies_cd5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00571_element_check_00548 **********\n\n");
    });

    test('00572_element_check_00549', () async {
      print("\n********** テスト実行：00572_element_check_00549 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd6;
      print(mac_info.identifies.identifies_cd6);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd6 = testData1s;
      print(mac_info.identifies.identifies_cd6);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd6 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd6 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd6 = testData2s;
      print(mac_info.identifies.identifies_cd6);
      expect(mac_info.identifies.identifies_cd6 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd6 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd6 = defalut;
      print(mac_info.identifies.identifies_cd6);
      expect(mac_info.identifies.identifies_cd6 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd6 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00572_element_check_00549 **********\n\n");
    });

    test('00573_element_check_00550', () async {
      print("\n********** テスト実行：00573_element_check_00550 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd7;
      print(mac_info.identifies.identifies_cd7);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd7 = testData1s;
      print(mac_info.identifies.identifies_cd7);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd7 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd7 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd7 = testData2s;
      print(mac_info.identifies.identifies_cd7);
      expect(mac_info.identifies.identifies_cd7 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd7 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd7 = defalut;
      print(mac_info.identifies.identifies_cd7);
      expect(mac_info.identifies.identifies_cd7 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd7 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00573_element_check_00550 **********\n\n");
    });

    test('00574_element_check_00551', () async {
      print("\n********** テスト実行：00574_element_check_00551 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.identifies.identifies_cd8;
      print(mac_info.identifies.identifies_cd8);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.identifies.identifies_cd8 = testData1s;
      print(mac_info.identifies.identifies_cd8);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.identifies.identifies_cd8 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.identifies.identifies_cd8 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.identifies.identifies_cd8 = testData2s;
      print(mac_info.identifies.identifies_cd8);
      expect(mac_info.identifies.identifies_cd8 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd8 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.identifies.identifies_cd8 = defalut;
      print(mac_info.identifies.identifies_cd8);
      expect(mac_info.identifies.identifies_cd8 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.identifies.identifies_cd8 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00574_element_check_00551 **********\n\n");
    });

    test('00575_element_check_00552', () async {
      print("\n********** テスト実行：00575_element_check_00552 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acr50_ssw14_0;
      print(mac_info.acx_flg.acr50_ssw14_0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acr50_ssw14_0 = testData1;
      print(mac_info.acx_flg.acr50_ssw14_0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acr50_ssw14_0 = testData2;
      print(mac_info.acx_flg.acr50_ssw14_0);
      expect(mac_info.acx_flg.acr50_ssw14_0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acr50_ssw14_0 = defalut;
      print(mac_info.acx_flg.acr50_ssw14_0);
      expect(mac_info.acx_flg.acr50_ssw14_0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00575_element_check_00552 **********\n\n");
    });

    test('00576_element_check_00553', () async {
      print("\n********** テスト実行：00576_element_check_00553 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acr50_ssw14_1_2;
      print(mac_info.acx_flg.acr50_ssw14_1_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acr50_ssw14_1_2 = testData1;
      print(mac_info.acx_flg.acr50_ssw14_1_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_1_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_1_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acr50_ssw14_1_2 = testData2;
      print(mac_info.acx_flg.acr50_ssw14_1_2);
      expect(mac_info.acx_flg.acr50_ssw14_1_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_1_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acr50_ssw14_1_2 = defalut;
      print(mac_info.acx_flg.acr50_ssw14_1_2);
      expect(mac_info.acx_flg.acr50_ssw14_1_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_1_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00576_element_check_00553 **********\n\n");
    });

    test('00577_element_check_00554', () async {
      print("\n********** テスト実行：00577_element_check_00554 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acr50_ssw14_3_4;
      print(mac_info.acx_flg.acr50_ssw14_3_4);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acr50_ssw14_3_4 = testData1;
      print(mac_info.acx_flg.acr50_ssw14_3_4);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_3_4 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_3_4 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acr50_ssw14_3_4 = testData2;
      print(mac_info.acx_flg.acr50_ssw14_3_4);
      expect(mac_info.acx_flg.acr50_ssw14_3_4 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_3_4 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acr50_ssw14_3_4 = defalut;
      print(mac_info.acx_flg.acr50_ssw14_3_4);
      expect(mac_info.acx_flg.acr50_ssw14_3_4 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_3_4 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00577_element_check_00554 **********\n\n");
    });

    test('00578_element_check_00555', () async {
      print("\n********** テスト実行：00578_element_check_00555 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acr50_ssw14_5;
      print(mac_info.acx_flg.acr50_ssw14_5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acr50_ssw14_5 = testData1;
      print(mac_info.acx_flg.acr50_ssw14_5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acr50_ssw14_5 = testData2;
      print(mac_info.acx_flg.acr50_ssw14_5);
      expect(mac_info.acx_flg.acr50_ssw14_5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acr50_ssw14_5 = defalut;
      print(mac_info.acx_flg.acr50_ssw14_5);
      expect(mac_info.acx_flg.acr50_ssw14_5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00578_element_check_00555 **********\n\n");
    });

    test('00579_element_check_00556', () async {
      print("\n********** テスト実行：00579_element_check_00556 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acr50_ssw14_7;
      print(mac_info.acx_flg.acr50_ssw14_7);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acr50_ssw14_7 = testData1;
      print(mac_info.acx_flg.acr50_ssw14_7);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_7 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acr50_ssw14_7 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acr50_ssw14_7 = testData2;
      print(mac_info.acx_flg.acr50_ssw14_7);
      expect(mac_info.acx_flg.acr50_ssw14_7 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_7 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acr50_ssw14_7 = defalut;
      print(mac_info.acx_flg.acr50_ssw14_7);
      expect(mac_info.acx_flg.acr50_ssw14_7 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acr50_ssw14_7 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00579_element_check_00556 **********\n\n");
    });

    test('00580_element_check_00557', () async {
      print("\n********** テスト実行：00580_element_check_00557 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.pick_end;
      print(mac_info.acx_flg.pick_end);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.pick_end = testData1;
      print(mac_info.acx_flg.pick_end);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.pick_end == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.pick_end == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.pick_end = testData2;
      print(mac_info.acx_flg.pick_end);
      expect(mac_info.acx_flg.pick_end == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.pick_end == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.pick_end = defalut;
      print(mac_info.acx_flg.pick_end);
      expect(mac_info.acx_flg.pick_end == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.pick_end == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00580_element_check_00557 **********\n\n");
    });

    test('00581_element_check_00558', () async {
      print("\n********** テスト実行：00581_element_check_00558 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acxreal_system;
      print(mac_info.acx_flg.acxreal_system);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acxreal_system = testData1;
      print(mac_info.acx_flg.acxreal_system);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acxreal_system == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acxreal_system == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acxreal_system = testData2;
      print(mac_info.acx_flg.acxreal_system);
      expect(mac_info.acx_flg.acxreal_system == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acxreal_system == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acxreal_system = defalut;
      print(mac_info.acx_flg.acxreal_system);
      expect(mac_info.acx_flg.acxreal_system == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acxreal_system == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00581_element_check_00558 **********\n\n");
    });

    test('00582_element_check_00559', () async {
      print("\n********** テスト実行：00582_element_check_00559 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_pick_positn10000;
      print(mac_info.acx_flg.ecs_pick_positn10000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_pick_positn10000 = testData1;
      print(mac_info.acx_flg.ecs_pick_positn10000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn10000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn10000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_pick_positn10000 = testData2;
      print(mac_info.acx_flg.ecs_pick_positn10000);
      expect(mac_info.acx_flg.ecs_pick_positn10000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn10000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_pick_positn10000 = defalut;
      print(mac_info.acx_flg.ecs_pick_positn10000);
      expect(mac_info.acx_flg.ecs_pick_positn10000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn10000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00582_element_check_00559 **********\n\n");
    });

    test('00583_element_check_00560', () async {
      print("\n********** テスト実行：00583_element_check_00560 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_pick_positn5000;
      print(mac_info.acx_flg.ecs_pick_positn5000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_pick_positn5000 = testData1;
      print(mac_info.acx_flg.ecs_pick_positn5000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn5000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn5000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_pick_positn5000 = testData2;
      print(mac_info.acx_flg.ecs_pick_positn5000);
      expect(mac_info.acx_flg.ecs_pick_positn5000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn5000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_pick_positn5000 = defalut;
      print(mac_info.acx_flg.ecs_pick_positn5000);
      expect(mac_info.acx_flg.ecs_pick_positn5000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn5000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00583_element_check_00560 **********\n\n");
    });

    test('00584_element_check_00561', () async {
      print("\n********** テスト実行：00584_element_check_00561 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_pick_positn2000;
      print(mac_info.acx_flg.ecs_pick_positn2000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_pick_positn2000 = testData1;
      print(mac_info.acx_flg.ecs_pick_positn2000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn2000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn2000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_pick_positn2000 = testData2;
      print(mac_info.acx_flg.ecs_pick_positn2000);
      expect(mac_info.acx_flg.ecs_pick_positn2000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn2000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_pick_positn2000 = defalut;
      print(mac_info.acx_flg.ecs_pick_positn2000);
      expect(mac_info.acx_flg.ecs_pick_positn2000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn2000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00584_element_check_00561 **********\n\n");
    });

    test('00585_element_check_00562', () async {
      print("\n********** テスト実行：00585_element_check_00562 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_pick_positn1000;
      print(mac_info.acx_flg.ecs_pick_positn1000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_pick_positn1000 = testData1;
      print(mac_info.acx_flg.ecs_pick_positn1000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn1000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_pick_positn1000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_pick_positn1000 = testData2;
      print(mac_info.acx_flg.ecs_pick_positn1000);
      expect(mac_info.acx_flg.ecs_pick_positn1000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn1000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_pick_positn1000 = defalut;
      print(mac_info.acx_flg.ecs_pick_positn1000);
      expect(mac_info.acx_flg.ecs_pick_positn1000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_positn1000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00585_element_check_00562 **********\n\n");
    });

    test('00586_element_check_00563', () async {
      print("\n********** テスト実行：00586_element_check_00563 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data10000;
      print(mac_info.acx_flg.acx_pick_data10000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data10000 = testData1;
      print(mac_info.acx_flg.acx_pick_data10000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data10000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data10000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data10000 = testData2;
      print(mac_info.acx_flg.acx_pick_data10000);
      expect(mac_info.acx_flg.acx_pick_data10000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data10000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data10000 = defalut;
      print(mac_info.acx_flg.acx_pick_data10000);
      expect(mac_info.acx_flg.acx_pick_data10000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data10000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00586_element_check_00563 **********\n\n");
    });

    test('00587_element_check_00564', () async {
      print("\n********** テスト実行：00587_element_check_00564 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data5000;
      print(mac_info.acx_flg.acx_pick_data5000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data5000 = testData1;
      print(mac_info.acx_flg.acx_pick_data5000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data5000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data5000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data5000 = testData2;
      print(mac_info.acx_flg.acx_pick_data5000);
      expect(mac_info.acx_flg.acx_pick_data5000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data5000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data5000 = defalut;
      print(mac_info.acx_flg.acx_pick_data5000);
      expect(mac_info.acx_flg.acx_pick_data5000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data5000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00587_element_check_00564 **********\n\n");
    });

    test('00588_element_check_00565', () async {
      print("\n********** テスト実行：00588_element_check_00565 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data2000;
      print(mac_info.acx_flg.acx_pick_data2000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data2000 = testData1;
      print(mac_info.acx_flg.acx_pick_data2000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data2000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data2000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data2000 = testData2;
      print(mac_info.acx_flg.acx_pick_data2000);
      expect(mac_info.acx_flg.acx_pick_data2000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data2000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data2000 = defalut;
      print(mac_info.acx_flg.acx_pick_data2000);
      expect(mac_info.acx_flg.acx_pick_data2000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data2000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00588_element_check_00565 **********\n\n");
    });

    test('00589_element_check_00566', () async {
      print("\n********** テスト実行：00589_element_check_00566 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data1000;
      print(mac_info.acx_flg.acx_pick_data1000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data1000 = testData1;
      print(mac_info.acx_flg.acx_pick_data1000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data1000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data1000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data1000 = testData2;
      print(mac_info.acx_flg.acx_pick_data1000);
      expect(mac_info.acx_flg.acx_pick_data1000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data1000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data1000 = defalut;
      print(mac_info.acx_flg.acx_pick_data1000);
      expect(mac_info.acx_flg.acx_pick_data1000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data1000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00589_element_check_00566 **********\n\n");
    });

    test('00590_element_check_00567', () async {
      print("\n********** テスト実行：00590_element_check_00567 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data500;
      print(mac_info.acx_flg.acx_pick_data500);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data500 = testData1;
      print(mac_info.acx_flg.acx_pick_data500);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data500 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data500 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data500 = testData2;
      print(mac_info.acx_flg.acx_pick_data500);
      expect(mac_info.acx_flg.acx_pick_data500 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data500 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data500 = defalut;
      print(mac_info.acx_flg.acx_pick_data500);
      expect(mac_info.acx_flg.acx_pick_data500 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data500 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00590_element_check_00567 **********\n\n");
    });

    test('00591_element_check_00568', () async {
      print("\n********** テスト実行：00591_element_check_00568 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data100;
      print(mac_info.acx_flg.acx_pick_data100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data100 = testData1;
      print(mac_info.acx_flg.acx_pick_data100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data100 = testData2;
      print(mac_info.acx_flg.acx_pick_data100);
      expect(mac_info.acx_flg.acx_pick_data100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data100 = defalut;
      print(mac_info.acx_flg.acx_pick_data100);
      expect(mac_info.acx_flg.acx_pick_data100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00591_element_check_00568 **********\n\n");
    });

    test('00592_element_check_00569', () async {
      print("\n********** テスト実行：00592_element_check_00569 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data50;
      print(mac_info.acx_flg.acx_pick_data50);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data50 = testData1;
      print(mac_info.acx_flg.acx_pick_data50);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data50 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data50 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data50 = testData2;
      print(mac_info.acx_flg.acx_pick_data50);
      expect(mac_info.acx_flg.acx_pick_data50 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data50 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data50 = defalut;
      print(mac_info.acx_flg.acx_pick_data50);
      expect(mac_info.acx_flg.acx_pick_data50 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data50 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00592_element_check_00569 **********\n\n");
    });

    test('00593_element_check_00570', () async {
      print("\n********** テスト実行：00593_element_check_00570 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data10;
      print(mac_info.acx_flg.acx_pick_data10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data10 = testData1;
      print(mac_info.acx_flg.acx_pick_data10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data10 = testData2;
      print(mac_info.acx_flg.acx_pick_data10);
      expect(mac_info.acx_flg.acx_pick_data10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data10 = defalut;
      print(mac_info.acx_flg.acx_pick_data10);
      expect(mac_info.acx_flg.acx_pick_data10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00593_element_check_00570 **********\n\n");
    });

    test('00594_element_check_00571', () async {
      print("\n********** テスト実行：00594_element_check_00571 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data5;
      print(mac_info.acx_flg.acx_pick_data5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data5 = testData1;
      print(mac_info.acx_flg.acx_pick_data5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data5 = testData2;
      print(mac_info.acx_flg.acx_pick_data5);
      expect(mac_info.acx_flg.acx_pick_data5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data5 = defalut;
      print(mac_info.acx_flg.acx_pick_data5);
      expect(mac_info.acx_flg.acx_pick_data5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00594_element_check_00571 **********\n\n");
    });

    test('00595_element_check_00572', () async {
      print("\n********** テスト実行：00595_element_check_00572 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_data1;
      print(mac_info.acx_flg.acx_pick_data1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_data1 = testData1;
      print(mac_info.acx_flg.acx_pick_data1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_data1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_data1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_data1 = testData2;
      print(mac_info.acx_flg.acx_pick_data1);
      expect(mac_info.acx_flg.acx_pick_data1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_data1 = defalut;
      print(mac_info.acx_flg.acx_pick_data1);
      expect(mac_info.acx_flg.acx_pick_data1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_data1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00595_element_check_00572 **********\n\n");
    });

    test('00596_element_check_00573', () async {
      print("\n********** テスト実行：00596_element_check_00573 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_recalc_reject;
      print(mac_info.acx_flg.ecs_recalc_reject);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_recalc_reject = testData1;
      print(mac_info.acx_flg.ecs_recalc_reject);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_recalc_reject == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_recalc_reject == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_recalc_reject = testData2;
      print(mac_info.acx_flg.ecs_recalc_reject);
      expect(mac_info.acx_flg.ecs_recalc_reject == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_recalc_reject == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_recalc_reject = defalut;
      print(mac_info.acx_flg.ecs_recalc_reject);
      expect(mac_info.acx_flg.ecs_recalc_reject == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_recalc_reject == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00596_element_check_00573 **********\n\n");
    });

    test('00597_element_check_00574', () async {
      print("\n********** テスト実行：00597_element_check_00574 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.sst1_error_disp;
      print(mac_info.acx_flg.sst1_error_disp);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.sst1_error_disp = testData1;
      print(mac_info.acx_flg.sst1_error_disp);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.sst1_error_disp == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.sst1_error_disp == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.sst1_error_disp = testData2;
      print(mac_info.acx_flg.sst1_error_disp);
      expect(mac_info.acx_flg.sst1_error_disp == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.sst1_error_disp == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.sst1_error_disp = defalut;
      print(mac_info.acx_flg.sst1_error_disp);
      expect(mac_info.acx_flg.sst1_error_disp == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.sst1_error_disp == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00597_element_check_00574 **********\n\n");
    });

    test('00598_element_check_00575', () async {
      print("\n********** テスト実行：00598_element_check_00575 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.sst1_cin_retry;
      print(mac_info.acx_flg.sst1_cin_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.sst1_cin_retry = testData1;
      print(mac_info.acx_flg.sst1_cin_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.sst1_cin_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.sst1_cin_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.sst1_cin_retry = testData2;
      print(mac_info.acx_flg.sst1_cin_retry);
      expect(mac_info.acx_flg.sst1_cin_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.sst1_cin_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.sst1_cin_retry = defalut;
      print(mac_info.acx_flg.sst1_cin_retry);
      expect(mac_info.acx_flg.sst1_cin_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.sst1_cin_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00598_element_check_00575 **********\n\n");
    });

    test('00599_element_check_00576', () async {
      print("\n********** テスト実行：00599_element_check_00576 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min5000;
      print(mac_info.acx_flg.acx_resv_min5000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min5000 = testData1;
      print(mac_info.acx_flg.acx_resv_min5000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min5000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min5000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min5000 = testData2;
      print(mac_info.acx_flg.acx_resv_min5000);
      expect(mac_info.acx_flg.acx_resv_min5000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min5000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min5000 = defalut;
      print(mac_info.acx_flg.acx_resv_min5000);
      expect(mac_info.acx_flg.acx_resv_min5000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min5000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00599_element_check_00576 **********\n\n");
    });

    test('00600_element_check_00577', () async {
      print("\n********** テスト実行：00600_element_check_00577 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min2000;
      print(mac_info.acx_flg.acx_resv_min2000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min2000 = testData1;
      print(mac_info.acx_flg.acx_resv_min2000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min2000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min2000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min2000 = testData2;
      print(mac_info.acx_flg.acx_resv_min2000);
      expect(mac_info.acx_flg.acx_resv_min2000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min2000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min2000 = defalut;
      print(mac_info.acx_flg.acx_resv_min2000);
      expect(mac_info.acx_flg.acx_resv_min2000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min2000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00600_element_check_00577 **********\n\n");
    });

    test('00601_element_check_00578', () async {
      print("\n********** テスト実行：00601_element_check_00578 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min1000;
      print(mac_info.acx_flg.acx_resv_min1000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min1000 = testData1;
      print(mac_info.acx_flg.acx_resv_min1000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min1000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min1000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min1000 = testData2;
      print(mac_info.acx_flg.acx_resv_min1000);
      expect(mac_info.acx_flg.acx_resv_min1000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min1000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min1000 = defalut;
      print(mac_info.acx_flg.acx_resv_min1000);
      expect(mac_info.acx_flg.acx_resv_min1000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min1000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00601_element_check_00578 **********\n\n");
    });

    test('00602_element_check_00579', () async {
      print("\n********** テスト実行：00602_element_check_00579 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min500;
      print(mac_info.acx_flg.acx_resv_min500);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min500 = testData1;
      print(mac_info.acx_flg.acx_resv_min500);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min500 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min500 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min500 = testData2;
      print(mac_info.acx_flg.acx_resv_min500);
      expect(mac_info.acx_flg.acx_resv_min500 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min500 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min500 = defalut;
      print(mac_info.acx_flg.acx_resv_min500);
      expect(mac_info.acx_flg.acx_resv_min500 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min500 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00602_element_check_00579 **********\n\n");
    });

    test('00603_element_check_00580', () async {
      print("\n********** テスト実行：00603_element_check_00580 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min100;
      print(mac_info.acx_flg.acx_resv_min100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min100 = testData1;
      print(mac_info.acx_flg.acx_resv_min100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min100 = testData2;
      print(mac_info.acx_flg.acx_resv_min100);
      expect(mac_info.acx_flg.acx_resv_min100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min100 = defalut;
      print(mac_info.acx_flg.acx_resv_min100);
      expect(mac_info.acx_flg.acx_resv_min100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00603_element_check_00580 **********\n\n");
    });

    test('00604_element_check_00581', () async {
      print("\n********** テスト実行：00604_element_check_00581 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min50;
      print(mac_info.acx_flg.acx_resv_min50);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min50 = testData1;
      print(mac_info.acx_flg.acx_resv_min50);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min50 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min50 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min50 = testData2;
      print(mac_info.acx_flg.acx_resv_min50);
      expect(mac_info.acx_flg.acx_resv_min50 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min50 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min50 = defalut;
      print(mac_info.acx_flg.acx_resv_min50);
      expect(mac_info.acx_flg.acx_resv_min50 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min50 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00604_element_check_00581 **********\n\n");
    });

    test('00605_element_check_00582', () async {
      print("\n********** テスト実行：00605_element_check_00582 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min10;
      print(mac_info.acx_flg.acx_resv_min10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min10 = testData1;
      print(mac_info.acx_flg.acx_resv_min10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min10 = testData2;
      print(mac_info.acx_flg.acx_resv_min10);
      expect(mac_info.acx_flg.acx_resv_min10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min10 = defalut;
      print(mac_info.acx_flg.acx_resv_min10);
      expect(mac_info.acx_flg.acx_resv_min10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00605_element_check_00582 **********\n\n");
    });

    test('00606_element_check_00583', () async {
      print("\n********** テスト実行：00606_element_check_00583 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min5;
      print(mac_info.acx_flg.acx_resv_min5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min5 = testData1;
      print(mac_info.acx_flg.acx_resv_min5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min5 = testData2;
      print(mac_info.acx_flg.acx_resv_min5);
      expect(mac_info.acx_flg.acx_resv_min5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min5 = defalut;
      print(mac_info.acx_flg.acx_resv_min5);
      expect(mac_info.acx_flg.acx_resv_min5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00606_element_check_00583 **********\n\n");
    });

    test('00607_element_check_00584', () async {
      print("\n********** テスト実行：00607_element_check_00584 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_min1;
      print(mac_info.acx_flg.acx_resv_min1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_min1 = testData1;
      print(mac_info.acx_flg.acx_resv_min1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_min1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_min1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_min1 = testData2;
      print(mac_info.acx_flg.acx_resv_min1);
      expect(mac_info.acx_flg.acx_resv_min1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_min1 = defalut;
      print(mac_info.acx_flg.acx_resv_min1);
      expect(mac_info.acx_flg.acx_resv_min1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_min1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00607_element_check_00584 **********\n\n");
    });

    test('00608_element_check_00585', () async {
      print("\n********** テスト実行：00608_element_check_00585 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw13_0;
      print(mac_info.acx_flg.acb50_ssw13_0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw13_0 = testData1;
      print(mac_info.acx_flg.acb50_ssw13_0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw13_0 = testData2;
      print(mac_info.acx_flg.acb50_ssw13_0);
      expect(mac_info.acx_flg.acb50_ssw13_0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw13_0 = defalut;
      print(mac_info.acx_flg.acb50_ssw13_0);
      expect(mac_info.acx_flg.acb50_ssw13_0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00608_element_check_00585 **********\n\n");
    });

    test('00609_element_check_00586', () async {
      print("\n********** テスト実行：00609_element_check_00586 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw13_1_2;
      print(mac_info.acx_flg.acb50_ssw13_1_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw13_1_2 = testData1;
      print(mac_info.acx_flg.acb50_ssw13_1_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_1_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_1_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw13_1_2 = testData2;
      print(mac_info.acx_flg.acb50_ssw13_1_2);
      expect(mac_info.acx_flg.acb50_ssw13_1_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_1_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw13_1_2 = defalut;
      print(mac_info.acx_flg.acb50_ssw13_1_2);
      expect(mac_info.acx_flg.acb50_ssw13_1_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_1_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00609_element_check_00586 **********\n\n");
    });

    test('00610_element_check_00587', () async {
      print("\n********** テスト実行：00610_element_check_00587 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw13_3_4;
      print(mac_info.acx_flg.acb50_ssw13_3_4);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw13_3_4 = testData1;
      print(mac_info.acx_flg.acb50_ssw13_3_4);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_3_4 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_3_4 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw13_3_4 = testData2;
      print(mac_info.acx_flg.acb50_ssw13_3_4);
      expect(mac_info.acx_flg.acb50_ssw13_3_4 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_3_4 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw13_3_4 = defalut;
      print(mac_info.acx_flg.acb50_ssw13_3_4);
      expect(mac_info.acx_flg.acb50_ssw13_3_4 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_3_4 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00610_element_check_00587 **********\n\n");
    });

    test('00611_element_check_00588', () async {
      print("\n********** テスト実行：00611_element_check_00588 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw13_5;
      print(mac_info.acx_flg.acb50_ssw13_5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw13_5 = testData1;
      print(mac_info.acx_flg.acb50_ssw13_5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw13_5 = testData2;
      print(mac_info.acx_flg.acb50_ssw13_5);
      expect(mac_info.acx_flg.acb50_ssw13_5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw13_5 = defalut;
      print(mac_info.acx_flg.acb50_ssw13_5);
      expect(mac_info.acx_flg.acb50_ssw13_5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00611_element_check_00588 **********\n\n");
    });

    test('00612_element_check_00589', () async {
      print("\n********** テスト実行：00612_element_check_00589 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw13_6;
      print(mac_info.acx_flg.acb50_ssw13_6);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw13_6 = testData1;
      print(mac_info.acx_flg.acb50_ssw13_6);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_6 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw13_6 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw13_6 = testData2;
      print(mac_info.acx_flg.acb50_ssw13_6);
      expect(mac_info.acx_flg.acb50_ssw13_6 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_6 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw13_6 = defalut;
      print(mac_info.acx_flg.acb50_ssw13_6);
      expect(mac_info.acx_flg.acb50_ssw13_6 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw13_6 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00612_element_check_00589 **********\n\n");
    });

    test('00613_element_check_00590', () async {
      print("\n********** テスト実行：00613_element_check_00590 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.chgdrw_inout_tran;
      print(mac_info.acx_flg.chgdrw_inout_tran);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.chgdrw_inout_tran = testData1;
      print(mac_info.acx_flg.chgdrw_inout_tran);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.chgdrw_inout_tran == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.chgdrw_inout_tran == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.chgdrw_inout_tran = testData2;
      print(mac_info.acx_flg.chgdrw_inout_tran);
      expect(mac_info.acx_flg.chgdrw_inout_tran == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_inout_tran == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.chgdrw_inout_tran = defalut;
      print(mac_info.acx_flg.chgdrw_inout_tran);
      expect(mac_info.acx_flg.chgdrw_inout_tran == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_inout_tran == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00613_element_check_00590 **********\n\n");
    });

    test('00614_element_check_00591', () async {
      print("\n********** テスト実行：00614_element_check_00591 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.chgdrw_loan_tran;
      print(mac_info.acx_flg.chgdrw_loan_tran);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.chgdrw_loan_tran = testData1;
      print(mac_info.acx_flg.chgdrw_loan_tran);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.chgdrw_loan_tran == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.chgdrw_loan_tran == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.chgdrw_loan_tran = testData2;
      print(mac_info.acx_flg.chgdrw_loan_tran);
      expect(mac_info.acx_flg.chgdrw_loan_tran == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_loan_tran == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.chgdrw_loan_tran = defalut;
      print(mac_info.acx_flg.chgdrw_loan_tran);
      expect(mac_info.acx_flg.chgdrw_loan_tran == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_loan_tran == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00614_element_check_00591 **********\n\n");
    });

    test('00615_element_check_00592', () async {
      print("\n********** テスト実行：00615_element_check_00592 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw15_0;
      print(mac_info.acx_flg.acb50_ssw15_0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw15_0 = testData1;
      print(mac_info.acx_flg.acb50_ssw15_0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw15_0 = testData2;
      print(mac_info.acx_flg.acb50_ssw15_0);
      expect(mac_info.acx_flg.acb50_ssw15_0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw15_0 = defalut;
      print(mac_info.acx_flg.acb50_ssw15_0);
      expect(mac_info.acx_flg.acb50_ssw15_0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00615_element_check_00592 **********\n\n");
    });

    test('00616_element_check_00593', () async {
      print("\n********** テスト実行：00616_element_check_00593 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw15_1;
      print(mac_info.acx_flg.acb50_ssw15_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw15_1 = testData1;
      print(mac_info.acx_flg.acb50_ssw15_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw15_1 = testData2;
      print(mac_info.acx_flg.acb50_ssw15_1);
      expect(mac_info.acx_flg.acb50_ssw15_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw15_1 = defalut;
      print(mac_info.acx_flg.acb50_ssw15_1);
      expect(mac_info.acx_flg.acb50_ssw15_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00616_element_check_00593 **********\n\n");
    });

    test('00617_element_check_00594', () async {
      print("\n********** テスト実行：00617_element_check_00594 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw15_2;
      print(mac_info.acx_flg.acb50_ssw15_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw15_2 = testData1;
      print(mac_info.acx_flg.acb50_ssw15_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw15_2 = testData2;
      print(mac_info.acx_flg.acb50_ssw15_2);
      expect(mac_info.acx_flg.acb50_ssw15_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw15_2 = defalut;
      print(mac_info.acx_flg.acb50_ssw15_2);
      expect(mac_info.acx_flg.acb50_ssw15_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00617_element_check_00594 **********\n\n");
    });

    test('00618_element_check_00595', () async {
      print("\n********** テスト実行：00618_element_check_00595 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw15_3;
      print(mac_info.acx_flg.acb50_ssw15_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw15_3 = testData1;
      print(mac_info.acx_flg.acb50_ssw15_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw15_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw15_3 = testData2;
      print(mac_info.acx_flg.acb50_ssw15_3);
      expect(mac_info.acx_flg.acb50_ssw15_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw15_3 = defalut;
      print(mac_info.acx_flg.acb50_ssw15_3);
      expect(mac_info.acx_flg.acb50_ssw15_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw15_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00618_element_check_00595 **********\n\n");
    });

    test('00619_element_check_00596', () async {
      print("\n********** テスト実行：00619_element_check_00596 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw24_0;
      print(mac_info.acx_flg.acb50_ssw24_0);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw24_0 = testData1;
      print(mac_info.acx_flg.acb50_ssw24_0);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw24_0 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw24_0 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw24_0 = testData2;
      print(mac_info.acx_flg.acb50_ssw24_0);
      expect(mac_info.acx_flg.acb50_ssw24_0 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw24_0 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw24_0 = defalut;
      print(mac_info.acx_flg.acb50_ssw24_0);
      expect(mac_info.acx_flg.acb50_ssw24_0 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw24_0 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00619_element_check_00596 **********\n\n");
    });

    test('00620_element_check_00597', () async {
      print("\n********** テスト実行：00620_element_check_00597 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_1_1;
      print(mac_info.acx_flg.ecs_gpd_1_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_1_1 = testData1;
      print(mac_info.acx_flg.ecs_gpd_1_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_1_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_1_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_1_1 = testData2;
      print(mac_info.acx_flg.ecs_gpd_1_1);
      expect(mac_info.acx_flg.ecs_gpd_1_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_1_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_1_1 = defalut;
      print(mac_info.acx_flg.ecs_gpd_1_1);
      expect(mac_info.acx_flg.ecs_gpd_1_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_1_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00620_element_check_00597 **********\n\n");
    });

    test('00621_element_check_00598', () async {
      print("\n********** テスト実行：00621_element_check_00598 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_1_2;
      print(mac_info.acx_flg.ecs_gpd_1_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_1_2 = testData1;
      print(mac_info.acx_flg.ecs_gpd_1_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_1_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_1_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_1_2 = testData2;
      print(mac_info.acx_flg.ecs_gpd_1_2);
      expect(mac_info.acx_flg.ecs_gpd_1_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_1_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_1_2 = defalut;
      print(mac_info.acx_flg.ecs_gpd_1_2);
      expect(mac_info.acx_flg.ecs_gpd_1_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_1_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00621_element_check_00598 **********\n\n");
    });

    test('00622_element_check_00599', () async {
      print("\n********** テスト実行：00622_element_check_00599 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_2_1;
      print(mac_info.acx_flg.ecs_gpd_2_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_2_1 = testData1;
      print(mac_info.acx_flg.ecs_gpd_2_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_2_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_2_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_2_1 = testData2;
      print(mac_info.acx_flg.ecs_gpd_2_1);
      expect(mac_info.acx_flg.ecs_gpd_2_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_2_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_2_1 = defalut;
      print(mac_info.acx_flg.ecs_gpd_2_1);
      expect(mac_info.acx_flg.ecs_gpd_2_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_2_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00622_element_check_00599 **********\n\n");
    });

    test('00623_element_check_00600', () async {
      print("\n********** テスト実行：00623_element_check_00600 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_2_2;
      print(mac_info.acx_flg.ecs_gpd_2_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_2_2 = testData1;
      print(mac_info.acx_flg.ecs_gpd_2_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_2_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_2_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_2_2 = testData2;
      print(mac_info.acx_flg.ecs_gpd_2_2);
      expect(mac_info.acx_flg.ecs_gpd_2_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_2_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_2_2 = defalut;
      print(mac_info.acx_flg.ecs_gpd_2_2);
      expect(mac_info.acx_flg.ecs_gpd_2_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_2_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00623_element_check_00600 **********\n\n");
    });

    test('00624_element_check_00601', () async {
      print("\n********** テスト実行：00624_element_check_00601 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_3_1;
      print(mac_info.acx_flg.ecs_gpd_3_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_3_1 = testData1;
      print(mac_info.acx_flg.ecs_gpd_3_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_3_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_3_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_3_1 = testData2;
      print(mac_info.acx_flg.ecs_gpd_3_1);
      expect(mac_info.acx_flg.ecs_gpd_3_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_3_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_3_1 = defalut;
      print(mac_info.acx_flg.ecs_gpd_3_1);
      expect(mac_info.acx_flg.ecs_gpd_3_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_3_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00624_element_check_00601 **********\n\n");
    });

    test('00625_element_check_00602', () async {
      print("\n********** テスト実行：00625_element_check_00602 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_3_2;
      print(mac_info.acx_flg.ecs_gpd_3_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_3_2 = testData1;
      print(mac_info.acx_flg.ecs_gpd_3_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_3_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_3_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_3_2 = testData2;
      print(mac_info.acx_flg.ecs_gpd_3_2);
      expect(mac_info.acx_flg.ecs_gpd_3_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_3_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_3_2 = defalut;
      print(mac_info.acx_flg.ecs_gpd_3_2);
      expect(mac_info.acx_flg.ecs_gpd_3_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_3_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00625_element_check_00602 **********\n\n");
    });

    test('00626_element_check_00603', () async {
      print("\n********** テスト実行：00626_element_check_00603 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_4_1;
      print(mac_info.acx_flg.ecs_gpd_4_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_4_1 = testData1;
      print(mac_info.acx_flg.ecs_gpd_4_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_4_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_4_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_4_1 = testData2;
      print(mac_info.acx_flg.ecs_gpd_4_1);
      expect(mac_info.acx_flg.ecs_gpd_4_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_4_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_4_1 = defalut;
      print(mac_info.acx_flg.ecs_gpd_4_1);
      expect(mac_info.acx_flg.ecs_gpd_4_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_4_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00626_element_check_00603 **********\n\n");
    });

    test('00627_element_check_00604', () async {
      print("\n********** テスト実行：00627_element_check_00604 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_5_1;
      print(mac_info.acx_flg.ecs_gpd_5_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_5_1 = testData1;
      print(mac_info.acx_flg.ecs_gpd_5_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_5_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_5_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_5_1 = testData2;
      print(mac_info.acx_flg.ecs_gpd_5_1);
      expect(mac_info.acx_flg.ecs_gpd_5_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_5_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_5_1 = defalut;
      print(mac_info.acx_flg.ecs_gpd_5_1);
      expect(mac_info.acx_flg.ecs_gpd_5_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_5_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00627_element_check_00604 **********\n\n");
    });

    test('00628_element_check_00605', () async {
      print("\n********** テスト実行：00628_element_check_00605 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_5_2;
      print(mac_info.acx_flg.ecs_gpd_5_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_5_2 = testData1;
      print(mac_info.acx_flg.ecs_gpd_5_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_5_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_5_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_5_2 = testData2;
      print(mac_info.acx_flg.ecs_gpd_5_2);
      expect(mac_info.acx_flg.ecs_gpd_5_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_5_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_5_2 = defalut;
      print(mac_info.acx_flg.ecs_gpd_5_2);
      expect(mac_info.acx_flg.ecs_gpd_5_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_5_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00628_element_check_00605 **********\n\n");
    });

    test('00629_element_check_00606', () async {
      print("\n********** テスト実行：00629_element_check_00606 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpd_5_3;
      print(mac_info.acx_flg.ecs_gpd_5_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpd_5_3 = testData1;
      print(mac_info.acx_flg.ecs_gpd_5_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpd_5_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpd_5_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpd_5_3 = testData2;
      print(mac_info.acx_flg.ecs_gpd_5_3);
      expect(mac_info.acx_flg.ecs_gpd_5_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_5_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpd_5_3 = defalut;
      print(mac_info.acx_flg.ecs_gpd_5_3);
      expect(mac_info.acx_flg.ecs_gpd_5_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpd_5_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00629_element_check_00606 **********\n\n");
    });

    test('00630_element_check_00607', () async {
      print("\n********** テスト実行：00630_element_check_00607 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.chgdrw_in_tran_cd;
      print(mac_info.acx_flg.chgdrw_in_tran_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.chgdrw_in_tran_cd = testData1;
      print(mac_info.acx_flg.chgdrw_in_tran_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.chgdrw_in_tran_cd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.chgdrw_in_tran_cd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.chgdrw_in_tran_cd = testData2;
      print(mac_info.acx_flg.chgdrw_in_tran_cd);
      expect(mac_info.acx_flg.chgdrw_in_tran_cd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_in_tran_cd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.chgdrw_in_tran_cd = defalut;
      print(mac_info.acx_flg.chgdrw_in_tran_cd);
      expect(mac_info.acx_flg.chgdrw_in_tran_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_in_tran_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00630_element_check_00607 **********\n\n");
    });

    test('00631_element_check_00608', () async {
      print("\n********** テスト実行：00631_element_check_00608 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.chgdrw_out_tran_cd;
      print(mac_info.acx_flg.chgdrw_out_tran_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.chgdrw_out_tran_cd = testData1;
      print(mac_info.acx_flg.chgdrw_out_tran_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.chgdrw_out_tran_cd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.chgdrw_out_tran_cd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.chgdrw_out_tran_cd = testData2;
      print(mac_info.acx_flg.chgdrw_out_tran_cd);
      expect(mac_info.acx_flg.chgdrw_out_tran_cd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_out_tran_cd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.chgdrw_out_tran_cd = defalut;
      print(mac_info.acx_flg.chgdrw_out_tran_cd);
      expect(mac_info.acx_flg.chgdrw_out_tran_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.chgdrw_out_tran_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00631_element_check_00608 **********\n\n");
    });

    test('00632_element_check_00609', () async {
      print("\n********** テスト実行：00632_element_check_00609 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_nearfull_diff;
      print(mac_info.acx_flg.acx_nearfull_diff);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_nearfull_diff = testData1;
      print(mac_info.acx_flg.acx_nearfull_diff);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_nearfull_diff == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_nearfull_diff == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_nearfull_diff = testData2;
      print(mac_info.acx_flg.acx_nearfull_diff);
      expect(mac_info.acx_flg.acx_nearfull_diff == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_nearfull_diff == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_nearfull_diff = defalut;
      print(mac_info.acx_flg.acx_nearfull_diff);
      expect(mac_info.acx_flg.acx_nearfull_diff == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_nearfull_diff == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00632_element_check_00609 **********\n\n");
    });

    test('00633_element_check_00610', () async {
      print("\n********** テスト実行：00633_element_check_00610 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_pick_flg;
      print(mac_info.acx_flg.ecs_pick_flg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_pick_flg = testData1s;
      print(mac_info.acx_flg.ecs_pick_flg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_pick_flg == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_pick_flg == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_pick_flg = testData2s;
      print(mac_info.acx_flg.ecs_pick_flg);
      expect(mac_info.acx_flg.ecs_pick_flg == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_flg == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_pick_flg = defalut;
      print(mac_info.acx_flg.ecs_pick_flg);
      expect(mac_info.acx_flg.ecs_pick_flg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_pick_flg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00633_element_check_00610 **********\n\n");
    });

    test('00634_element_check_00611', () async {
      print("\n********** テスト実行：00634_element_check_00611 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_pick_cbillkind;
      print(mac_info.acx_flg.acx_pick_cbillkind);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_pick_cbillkind = testData1s;
      print(mac_info.acx_flg.acx_pick_cbillkind);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_pick_cbillkind == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_pick_cbillkind == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_pick_cbillkind = testData2s;
      print(mac_info.acx_flg.acx_pick_cbillkind);
      expect(mac_info.acx_flg.acx_pick_cbillkind == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_cbillkind == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_pick_cbillkind = defalut;
      print(mac_info.acx_flg.acx_pick_cbillkind);
      expect(mac_info.acx_flg.acx_pick_cbillkind == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_pick_cbillkind == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00634_element_check_00611 **********\n\n");
    });

    test('00635_element_check_00612', () async {
      print("\n********** テスト実行：00635_element_check_00612 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw50_0_1;
      print(mac_info.acx_flg.acb50_ssw50_0_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw50_0_1 = testData1;
      print(mac_info.acx_flg.acb50_ssw50_0_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_0_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_0_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw50_0_1 = testData2;
      print(mac_info.acx_flg.acb50_ssw50_0_1);
      expect(mac_info.acx_flg.acb50_ssw50_0_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_0_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw50_0_1 = defalut;
      print(mac_info.acx_flg.acb50_ssw50_0_1);
      expect(mac_info.acx_flg.acb50_ssw50_0_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_0_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00635_element_check_00612 **********\n\n");
    });

    test('00636_element_check_00613', () async {
      print("\n********** テスト実行：00636_element_check_00613 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw50_2;
      print(mac_info.acx_flg.acb50_ssw50_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw50_2 = testData1;
      print(mac_info.acx_flg.acb50_ssw50_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw50_2 = testData2;
      print(mac_info.acx_flg.acb50_ssw50_2);
      expect(mac_info.acx_flg.acb50_ssw50_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw50_2 = defalut;
      print(mac_info.acx_flg.acb50_ssw50_2);
      expect(mac_info.acx_flg.acb50_ssw50_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00636_element_check_00613 **********\n\n");
    });

    test('00637_element_check_00614', () async {
      print("\n********** テスト実行：00637_element_check_00614 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw50_3;
      print(mac_info.acx_flg.acb50_ssw50_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw50_3 = testData1;
      print(mac_info.acx_flg.acb50_ssw50_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw50_3 = testData2;
      print(mac_info.acx_flg.acb50_ssw50_3);
      expect(mac_info.acx_flg.acb50_ssw50_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw50_3 = defalut;
      print(mac_info.acx_flg.acb50_ssw50_3);
      expect(mac_info.acx_flg.acb50_ssw50_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00637_element_check_00614 **********\n\n");
    });

    test('00638_element_check_00615', () async {
      print("\n********** テスト実行：00638_element_check_00615 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw50_4_5;
      print(mac_info.acx_flg.acb50_ssw50_4_5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw50_4_5 = testData1;
      print(mac_info.acx_flg.acb50_ssw50_4_5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_4_5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_4_5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw50_4_5 = testData2;
      print(mac_info.acx_flg.acb50_ssw50_4_5);
      expect(mac_info.acx_flg.acb50_ssw50_4_5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_4_5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw50_4_5 = defalut;
      print(mac_info.acx_flg.acb50_ssw50_4_5);
      expect(mac_info.acx_flg.acb50_ssw50_4_5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_4_5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00638_element_check_00615 **********\n\n");
    });

    test('00639_element_check_00616', () async {
      print("\n********** テスト実行：00639_element_check_00616 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb50_ssw50_6_7;
      print(mac_info.acx_flg.acb50_ssw50_6_7);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb50_ssw50_6_7 = testData1;
      print(mac_info.acx_flg.acb50_ssw50_6_7);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_6_7 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb50_ssw50_6_7 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb50_ssw50_6_7 = testData2;
      print(mac_info.acx_flg.acb50_ssw50_6_7);
      expect(mac_info.acx_flg.acb50_ssw50_6_7 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_6_7 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb50_ssw50_6_7 = defalut;
      print(mac_info.acx_flg.acb50_ssw50_6_7);
      expect(mac_info.acx_flg.acb50_ssw50_6_7 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb50_ssw50_6_7 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00639_element_check_00616 **********\n\n");
    });

    test('00640_element_check_00617', () async {
      print("\n********** テスト実行：00640_element_check_00617 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acb_control_mode;
      print(mac_info.acx_flg.acb_control_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acb_control_mode = testData1;
      print(mac_info.acx_flg.acb_control_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acb_control_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acb_control_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acb_control_mode = testData2;
      print(mac_info.acx_flg.acb_control_mode);
      expect(mac_info.acx_flg.acb_control_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb_control_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acb_control_mode = defalut;
      print(mac_info.acx_flg.acb_control_mode);
      expect(mac_info.acx_flg.acb_control_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acb_control_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00640_element_check_00617 **********\n\n");
    });

    test('00641_element_check_00618', () async {
      print("\n********** テスト実行：00641_element_check_00618 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw;
      print(mac_info.acx_flg.acx_resv_drw);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw = testData1;
      print(mac_info.acx_flg.acx_resv_drw);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw = testData2;
      print(mac_info.acx_flg.acx_resv_drw);
      expect(mac_info.acx_flg.acx_resv_drw == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw = defalut;
      print(mac_info.acx_flg.acx_resv_drw);
      expect(mac_info.acx_flg.acx_resv_drw == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00641_element_check_00618 **********\n\n");
    });

    test('00642_element_check_00619', () async {
      print("\n********** テスト実行：00642_element_check_00619 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw500;
      print(mac_info.acx_flg.acx_resv_drw500);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw500 = testData1;
      print(mac_info.acx_flg.acx_resv_drw500);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw500 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw500 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw500 = testData2;
      print(mac_info.acx_flg.acx_resv_drw500);
      expect(mac_info.acx_flg.acx_resv_drw500 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw500 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw500 = defalut;
      print(mac_info.acx_flg.acx_resv_drw500);
      expect(mac_info.acx_flg.acx_resv_drw500 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw500 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00642_element_check_00619 **********\n\n");
    });

    test('00643_element_check_00620', () async {
      print("\n********** テスト実行：00643_element_check_00620 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw100;
      print(mac_info.acx_flg.acx_resv_drw100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw100 = testData1;
      print(mac_info.acx_flg.acx_resv_drw100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw100 = testData2;
      print(mac_info.acx_flg.acx_resv_drw100);
      expect(mac_info.acx_flg.acx_resv_drw100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw100 = defalut;
      print(mac_info.acx_flg.acx_resv_drw100);
      expect(mac_info.acx_flg.acx_resv_drw100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00643_element_check_00620 **********\n\n");
    });

    test('00644_element_check_00621', () async {
      print("\n********** テスト実行：00644_element_check_00621 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw50;
      print(mac_info.acx_flg.acx_resv_drw50);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw50 = testData1;
      print(mac_info.acx_flg.acx_resv_drw50);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw50 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw50 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw50 = testData2;
      print(mac_info.acx_flg.acx_resv_drw50);
      expect(mac_info.acx_flg.acx_resv_drw50 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw50 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw50 = defalut;
      print(mac_info.acx_flg.acx_resv_drw50);
      expect(mac_info.acx_flg.acx_resv_drw50 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw50 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00644_element_check_00621 **********\n\n");
    });

    test('00645_element_check_00622', () async {
      print("\n********** テスト実行：00645_element_check_00622 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw10;
      print(mac_info.acx_flg.acx_resv_drw10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw10 = testData1;
      print(mac_info.acx_flg.acx_resv_drw10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw10 = testData2;
      print(mac_info.acx_flg.acx_resv_drw10);
      expect(mac_info.acx_flg.acx_resv_drw10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw10 = defalut;
      print(mac_info.acx_flg.acx_resv_drw10);
      expect(mac_info.acx_flg.acx_resv_drw10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00645_element_check_00622 **********\n\n");
    });

    test('00646_element_check_00623', () async {
      print("\n********** テスト実行：00646_element_check_00623 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw5;
      print(mac_info.acx_flg.acx_resv_drw5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw5 = testData1;
      print(mac_info.acx_flg.acx_resv_drw5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw5 = testData2;
      print(mac_info.acx_flg.acx_resv_drw5);
      expect(mac_info.acx_flg.acx_resv_drw5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw5 = defalut;
      print(mac_info.acx_flg.acx_resv_drw5);
      expect(mac_info.acx_flg.acx_resv_drw5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00646_element_check_00623 **********\n\n");
    });

    test('00647_element_check_00624', () async {
      print("\n********** テスト実行：00647_element_check_00624 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_resv_drw1;
      print(mac_info.acx_flg.acx_resv_drw1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_resv_drw1 = testData1;
      print(mac_info.acx_flg.acx_resv_drw1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_resv_drw1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_resv_drw1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_resv_drw1 = testData2;
      print(mac_info.acx_flg.acx_resv_drw1);
      expect(mac_info.acx_flg.acx_resv_drw1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_resv_drw1 = defalut;
      print(mac_info.acx_flg.acx_resv_drw1);
      expect(mac_info.acx_flg.acx_resv_drw1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_resv_drw1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00647_element_check_00624 **********\n\n");
    });

    test('00648_element_check_00625', () async {
      print("\n********** テスト実行：00648_element_check_00625 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.acx_auto_stop_sec;
      print(mac_info.acx_flg.acx_auto_stop_sec);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.acx_auto_stop_sec = testData1;
      print(mac_info.acx_flg.acx_auto_stop_sec);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.acx_auto_stop_sec == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.acx_auto_stop_sec == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.acx_auto_stop_sec = testData2;
      print(mac_info.acx_flg.acx_auto_stop_sec);
      expect(mac_info.acx_flg.acx_auto_stop_sec == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_auto_stop_sec == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.acx_auto_stop_sec = defalut;
      print(mac_info.acx_flg.acx_auto_stop_sec);
      expect(mac_info.acx_flg.acx_auto_stop_sec == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.acx_auto_stop_sec == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00648_element_check_00625 **********\n\n");
    });

    test('00649_element_check_00626', () async {
      print("\n********** テスト実行：00649_element_check_00626 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp2_3_2;
      print(mac_info.acx_flg.ecs_gp2_3_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp2_3_2 = testData1;
      print(mac_info.acx_flg.ecs_gp2_3_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp2_3_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp2_3_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp2_3_2 = testData2;
      print(mac_info.acx_flg.ecs_gp2_3_2);
      expect(mac_info.acx_flg.ecs_gp2_3_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_3_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp2_3_2 = defalut;
      print(mac_info.acx_flg.ecs_gp2_3_2);
      expect(mac_info.acx_flg.ecs_gp2_3_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_3_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00649_element_check_00626 **********\n\n");
    });

    test('00650_element_check_00627', () async {
      print("\n********** テスト実行：00650_element_check_00627 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp2_4_1;
      print(mac_info.acx_flg.ecs_gp2_4_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp2_4_1 = testData1;
      print(mac_info.acx_flg.ecs_gp2_4_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp2_4_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp2_4_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp2_4_1 = testData2;
      print(mac_info.acx_flg.ecs_gp2_4_1);
      expect(mac_info.acx_flg.ecs_gp2_4_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_4_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp2_4_1 = defalut;
      print(mac_info.acx_flg.ecs_gp2_4_1);
      expect(mac_info.acx_flg.ecs_gp2_4_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_4_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00650_element_check_00627 **********\n\n");
    });

    test('00651_element_check_00628', () async {
      print("\n********** テスト実行：00651_element_check_00628 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp2_4_2;
      print(mac_info.acx_flg.ecs_gp2_4_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp2_4_2 = testData1;
      print(mac_info.acx_flg.ecs_gp2_4_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp2_4_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp2_4_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp2_4_2 = testData2;
      print(mac_info.acx_flg.ecs_gp2_4_2);
      expect(mac_info.acx_flg.ecs_gp2_4_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_4_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp2_4_2 = defalut;
      print(mac_info.acx_flg.ecs_gp2_4_2);
      expect(mac_info.acx_flg.ecs_gp2_4_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_4_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00651_element_check_00628 **********\n\n");
    });

    test('00652_element_check_00629', () async {
      print("\n********** テスト実行：00652_element_check_00629 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp2_5_1;
      print(mac_info.acx_flg.ecs_gp2_5_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp2_5_1 = testData1;
      print(mac_info.acx_flg.ecs_gp2_5_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp2_5_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp2_5_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp2_5_1 = testData2;
      print(mac_info.acx_flg.ecs_gp2_5_1);
      expect(mac_info.acx_flg.ecs_gp2_5_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_5_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp2_5_1 = defalut;
      print(mac_info.acx_flg.ecs_gp2_5_1);
      expect(mac_info.acx_flg.ecs_gp2_5_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp2_5_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00652_element_check_00629 **********\n\n");
    });

    test('00653_element_check_00630', () async {
      print("\n********** テスト実行：00653_element_check_00630 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_1_1;
      print(mac_info.acx_flg.ecs_gp7_1_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_1_1 = testData1;
      print(mac_info.acx_flg.ecs_gp7_1_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_1_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_1_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_1_1 = testData2;
      print(mac_info.acx_flg.ecs_gp7_1_1);
      expect(mac_info.acx_flg.ecs_gp7_1_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_1_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_1_1 = defalut;
      print(mac_info.acx_flg.ecs_gp7_1_1);
      expect(mac_info.acx_flg.ecs_gp7_1_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_1_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00653_element_check_00630 **********\n\n");
    });

    test('00654_element_check_00631', () async {
      print("\n********** テスト実行：00654_element_check_00631 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_1_2;
      print(mac_info.acx_flg.ecs_gp7_1_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_1_2 = testData1;
      print(mac_info.acx_flg.ecs_gp7_1_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_1_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_1_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_1_2 = testData2;
      print(mac_info.acx_flg.ecs_gp7_1_2);
      expect(mac_info.acx_flg.ecs_gp7_1_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_1_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_1_2 = defalut;
      print(mac_info.acx_flg.ecs_gp7_1_2);
      expect(mac_info.acx_flg.ecs_gp7_1_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_1_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00654_element_check_00631 **********\n\n");
    });

    test('00655_element_check_00632', () async {
      print("\n********** テスト実行：00655_element_check_00632 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_1_3;
      print(mac_info.acx_flg.ecs_gp7_1_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_1_3 = testData1;
      print(mac_info.acx_flg.ecs_gp7_1_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_1_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_1_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_1_3 = testData2;
      print(mac_info.acx_flg.ecs_gp7_1_3);
      expect(mac_info.acx_flg.ecs_gp7_1_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_1_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_1_3 = defalut;
      print(mac_info.acx_flg.ecs_gp7_1_3);
      expect(mac_info.acx_flg.ecs_gp7_1_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_1_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00655_element_check_00632 **********\n\n");
    });

    test('00656_element_check_00633', () async {
      print("\n********** テスト実行：00656_element_check_00633 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_2_1;
      print(mac_info.acx_flg.ecs_gp7_2_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_2_1 = testData1;
      print(mac_info.acx_flg.ecs_gp7_2_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_2_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_2_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_2_1 = testData2;
      print(mac_info.acx_flg.ecs_gp7_2_1);
      expect(mac_info.acx_flg.ecs_gp7_2_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_2_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_2_1 = defalut;
      print(mac_info.acx_flg.ecs_gp7_2_1);
      expect(mac_info.acx_flg.ecs_gp7_2_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_2_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00656_element_check_00633 **********\n\n");
    });

    test('00657_element_check_00634', () async {
      print("\n********** テスト実行：00657_element_check_00634 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_2_2;
      print(mac_info.acx_flg.ecs_gp7_2_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_2_2 = testData1;
      print(mac_info.acx_flg.ecs_gp7_2_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_2_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_2_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_2_2 = testData2;
      print(mac_info.acx_flg.ecs_gp7_2_2);
      expect(mac_info.acx_flg.ecs_gp7_2_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_2_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_2_2 = defalut;
      print(mac_info.acx_flg.ecs_gp7_2_2);
      expect(mac_info.acx_flg.ecs_gp7_2_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_2_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00657_element_check_00634 **********\n\n");
    });

    test('00658_element_check_00635', () async {
      print("\n********** テスト実行：00658_element_check_00635 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_3_1;
      print(mac_info.acx_flg.ecs_gp7_3_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_3_1 = testData1;
      print(mac_info.acx_flg.ecs_gp7_3_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_3_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_3_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_3_1 = testData2;
      print(mac_info.acx_flg.ecs_gp7_3_1);
      expect(mac_info.acx_flg.ecs_gp7_3_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_3_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_3_1 = defalut;
      print(mac_info.acx_flg.ecs_gp7_3_1);
      expect(mac_info.acx_flg.ecs_gp7_3_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_3_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00658_element_check_00635 **********\n\n");
    });

    test('00659_element_check_00636', () async {
      print("\n********** テスト実行：00659_element_check_00636 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_4_1;
      print(mac_info.acx_flg.ecs_gp7_4_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_4_1 = testData1;
      print(mac_info.acx_flg.ecs_gp7_4_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_4_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_4_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_4_1 = testData2;
      print(mac_info.acx_flg.ecs_gp7_4_1);
      expect(mac_info.acx_flg.ecs_gp7_4_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_4_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_4_1 = defalut;
      print(mac_info.acx_flg.ecs_gp7_4_1);
      expect(mac_info.acx_flg.ecs_gp7_4_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_4_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00659_element_check_00636 **********\n\n");
    });

    test('00660_element_check_00637', () async {
      print("\n********** テスト実行：00660_element_check_00637 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_5_1;
      print(mac_info.acx_flg.ecs_gp7_5_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_5_1 = testData1;
      print(mac_info.acx_flg.ecs_gp7_5_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_5_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_5_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_5_1 = testData2;
      print(mac_info.acx_flg.ecs_gp7_5_1);
      expect(mac_info.acx_flg.ecs_gp7_5_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_5_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_5_1 = defalut;
      print(mac_info.acx_flg.ecs_gp7_5_1);
      expect(mac_info.acx_flg.ecs_gp7_5_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_5_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00660_element_check_00637 **********\n\n");
    });

    test('00661_element_check_00638', () async {
      print("\n********** テスト実行：00661_element_check_00638 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gp7_5_2;
      print(mac_info.acx_flg.ecs_gp7_5_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gp7_5_2 = testData1;
      print(mac_info.acx_flg.ecs_gp7_5_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gp7_5_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gp7_5_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gp7_5_2 = testData2;
      print(mac_info.acx_flg.ecs_gp7_5_2);
      expect(mac_info.acx_flg.ecs_gp7_5_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_5_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gp7_5_2 = defalut;
      print(mac_info.acx_flg.ecs_gp7_5_2);
      expect(mac_info.acx_flg.ecs_gp7_5_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gp7_5_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00661_element_check_00638 **********\n\n");
    });

    test('00662_element_check_00639', () async {
      print("\n********** テスト実行：00662_element_check_00639 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_1_1;
      print(mac_info.acx_flg.ecs_gpb_1_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_1_1 = testData1;
      print(mac_info.acx_flg.ecs_gpb_1_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_1_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_1_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_1_1 = testData2;
      print(mac_info.acx_flg.ecs_gpb_1_1);
      expect(mac_info.acx_flg.ecs_gpb_1_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_1_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_1_1 = defalut;
      print(mac_info.acx_flg.ecs_gpb_1_1);
      expect(mac_info.acx_flg.ecs_gpb_1_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_1_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00662_element_check_00639 **********\n\n");
    });

    test('00663_element_check_00640', () async {
      print("\n********** テスト実行：00663_element_check_00640 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_2_1;
      print(mac_info.acx_flg.ecs_gpb_2_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_2_1 = testData1;
      print(mac_info.acx_flg.ecs_gpb_2_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_2_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_2_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_2_1 = testData2;
      print(mac_info.acx_flg.ecs_gpb_2_1);
      expect(mac_info.acx_flg.ecs_gpb_2_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_2_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_2_1 = defalut;
      print(mac_info.acx_flg.ecs_gpb_2_1);
      expect(mac_info.acx_flg.ecs_gpb_2_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_2_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00663_element_check_00640 **********\n\n");
    });

    test('00664_element_check_00641', () async {
      print("\n********** テスト実行：00664_element_check_00641 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_2_2;
      print(mac_info.acx_flg.ecs_gpb_2_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_2_2 = testData1;
      print(mac_info.acx_flg.ecs_gpb_2_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_2_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_2_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_2_2 = testData2;
      print(mac_info.acx_flg.ecs_gpb_2_2);
      expect(mac_info.acx_flg.ecs_gpb_2_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_2_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_2_2 = defalut;
      print(mac_info.acx_flg.ecs_gpb_2_2);
      expect(mac_info.acx_flg.ecs_gpb_2_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_2_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00664_element_check_00641 **********\n\n");
    });

    test('00665_element_check_00642', () async {
      print("\n********** テスト実行：00665_element_check_00642 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_2_3;
      print(mac_info.acx_flg.ecs_gpb_2_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_2_3 = testData1;
      print(mac_info.acx_flg.ecs_gpb_2_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_2_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_2_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_2_3 = testData2;
      print(mac_info.acx_flg.ecs_gpb_2_3);
      expect(mac_info.acx_flg.ecs_gpb_2_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_2_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_2_3 = defalut;
      print(mac_info.acx_flg.ecs_gpb_2_3);
      expect(mac_info.acx_flg.ecs_gpb_2_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_2_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00665_element_check_00642 **********\n\n");
    });

    test('00666_element_check_00643', () async {
      print("\n********** テスト実行：00666_element_check_00643 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_3_1;
      print(mac_info.acx_flg.ecs_gpb_3_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_3_1 = testData1;
      print(mac_info.acx_flg.ecs_gpb_3_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_3_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_3_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_3_1 = testData2;
      print(mac_info.acx_flg.ecs_gpb_3_1);
      expect(mac_info.acx_flg.ecs_gpb_3_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_3_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_3_1 = defalut;
      print(mac_info.acx_flg.ecs_gpb_3_1);
      expect(mac_info.acx_flg.ecs_gpb_3_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_3_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00666_element_check_00643 **********\n\n");
    });

    test('00667_element_check_00644', () async {
      print("\n********** テスト実行：00667_element_check_00644 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_3_2;
      print(mac_info.acx_flg.ecs_gpb_3_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_3_2 = testData1;
      print(mac_info.acx_flg.ecs_gpb_3_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_3_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_3_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_3_2 = testData2;
      print(mac_info.acx_flg.ecs_gpb_3_2);
      expect(mac_info.acx_flg.ecs_gpb_3_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_3_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_3_2 = defalut;
      print(mac_info.acx_flg.ecs_gpb_3_2);
      expect(mac_info.acx_flg.ecs_gpb_3_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_3_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00667_element_check_00644 **********\n\n");
    });

    test('00668_element_check_00645', () async {
      print("\n********** テスト実行：00668_element_check_00645 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_4_2;
      print(mac_info.acx_flg.ecs_gpb_4_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_4_2 = testData1;
      print(mac_info.acx_flg.ecs_gpb_4_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_4_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_4_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_4_2 = testData2;
      print(mac_info.acx_flg.ecs_gpb_4_2);
      expect(mac_info.acx_flg.ecs_gpb_4_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_4_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_4_2 = defalut;
      print(mac_info.acx_flg.ecs_gpb_4_2);
      expect(mac_info.acx_flg.ecs_gpb_4_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_4_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00668_element_check_00645 **********\n\n");
    });

    test('00669_element_check_00646', () async {
      print("\n********** テスト実行：00669_element_check_00646 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_4_3;
      print(mac_info.acx_flg.ecs_gpb_4_3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_4_3 = testData1;
      print(mac_info.acx_flg.ecs_gpb_4_3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_4_3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_4_3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_4_3 = testData2;
      print(mac_info.acx_flg.ecs_gpb_4_3);
      expect(mac_info.acx_flg.ecs_gpb_4_3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_4_3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_4_3 = defalut;
      print(mac_info.acx_flg.ecs_gpb_4_3);
      expect(mac_info.acx_flg.ecs_gpb_4_3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_4_3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00669_element_check_00646 **********\n\n");
    });

    test('00670_element_check_00647', () async {
      print("\n********** テスト実行：00670_element_check_00647 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_5_1;
      print(mac_info.acx_flg.ecs_gpb_5_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_5_1 = testData1;
      print(mac_info.acx_flg.ecs_gpb_5_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_5_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_5_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_5_1 = testData2;
      print(mac_info.acx_flg.ecs_gpb_5_1);
      expect(mac_info.acx_flg.ecs_gpb_5_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_5_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_5_1 = defalut;
      print(mac_info.acx_flg.ecs_gpb_5_1);
      expect(mac_info.acx_flg.ecs_gpb_5_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_5_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00670_element_check_00647 **********\n\n");
    });

    test('00671_element_check_00648', () async {
      print("\n********** テスト実行：00671_element_check_00648 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpb_5_2;
      print(mac_info.acx_flg.ecs_gpb_5_2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpb_5_2 = testData1;
      print(mac_info.acx_flg.ecs_gpb_5_2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpb_5_2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpb_5_2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpb_5_2 = testData2;
      print(mac_info.acx_flg.ecs_gpb_5_2);
      expect(mac_info.acx_flg.ecs_gpb_5_2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_5_2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpb_5_2 = defalut;
      print(mac_info.acx_flg.ecs_gpb_5_2);
      expect(mac_info.acx_flg.ecs_gpb_5_2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpb_5_2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00671_element_check_00648 **********\n\n");
    });

    test('00672_element_check_00649', () async {
      print("\n********** テスト実行：00672_element_check_00649 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_gpc_3_1_fwdl;
      print(mac_info.acx_flg.ecs_gpc_3_1_fwdl);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_gpc_3_1_fwdl = testData1;
      print(mac_info.acx_flg.ecs_gpc_3_1_fwdl);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_gpc_3_1_fwdl == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_gpc_3_1_fwdl == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_gpc_3_1_fwdl = testData2;
      print(mac_info.acx_flg.ecs_gpc_3_1_fwdl);
      expect(mac_info.acx_flg.ecs_gpc_3_1_fwdl == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpc_3_1_fwdl == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_gpc_3_1_fwdl = defalut;
      print(mac_info.acx_flg.ecs_gpc_3_1_fwdl);
      expect(mac_info.acx_flg.ecs_gpc_3_1_fwdl == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_gpc_3_1_fwdl == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00672_element_check_00649 **********\n\n");
    });

    test('00673_element_check_00650', () async {
      print("\n********** テスト実行：00673_element_check_00650 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_flg.ecs_overflowpick_use;
      print(mac_info.acx_flg.ecs_overflowpick_use);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_flg.ecs_overflowpick_use = testData1;
      print(mac_info.acx_flg.ecs_overflowpick_use);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_flg.ecs_overflowpick_use == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_flg.ecs_overflowpick_use == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_flg.ecs_overflowpick_use = testData2;
      print(mac_info.acx_flg.ecs_overflowpick_use);
      expect(mac_info.acx_flg.ecs_overflowpick_use == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_overflowpick_use == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_flg.ecs_overflowpick_use = defalut;
      print(mac_info.acx_flg.ecs_overflowpick_use);
      expect(mac_info.acx_flg.ecs_overflowpick_use == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_flg.ecs_overflowpick_use == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00673_element_check_00650 **********\n\n");
    });

    test('00674_element_check_00651', () async {
      print("\n********** テスト実行：00674_element_check_00651 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_timer.acx_enq_interval;
      print(mac_info.acx_timer.acx_enq_interval);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_timer.acx_enq_interval = testData1;
      print(mac_info.acx_timer.acx_enq_interval);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_timer.acx_enq_interval == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_timer.acx_enq_interval == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_timer.acx_enq_interval = testData2;
      print(mac_info.acx_timer.acx_enq_interval);
      expect(mac_info.acx_timer.acx_enq_interval == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_timer.acx_enq_interval == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_timer.acx_enq_interval = defalut;
      print(mac_info.acx_timer.acx_enq_interval);
      expect(mac_info.acx_timer.acx_enq_interval == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_timer.acx_enq_interval == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00674_element_check_00651 **********\n\n");
    });

    test('00675_element_check_00652', () async {
      print("\n********** テスト実行：00675_element_check_00652 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_timer.acx_enq_timeout;
      print(mac_info.acx_timer.acx_enq_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_timer.acx_enq_timeout = testData1;
      print(mac_info.acx_timer.acx_enq_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_timer.acx_enq_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_timer.acx_enq_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_timer.acx_enq_timeout = testData2;
      print(mac_info.acx_timer.acx_enq_timeout);
      expect(mac_info.acx_timer.acx_enq_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_timer.acx_enq_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_timer.acx_enq_timeout = defalut;
      print(mac_info.acx_timer.acx_enq_timeout);
      expect(mac_info.acx_timer.acx_enq_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_timer.acx_enq_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00675_element_check_00652 **********\n\n");
    });

    test('00676_element_check_00653', () async {
      print("\n********** テスト実行：00676_element_check_00653 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_timer.acxreal_interval;
      print(mac_info.acx_timer.acxreal_interval);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_timer.acxreal_interval = testData1;
      print(mac_info.acx_timer.acxreal_interval);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_timer.acxreal_interval == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_timer.acxreal_interval == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_timer.acxreal_interval = testData2;
      print(mac_info.acx_timer.acxreal_interval);
      expect(mac_info.acx_timer.acxreal_interval == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_timer.acxreal_interval == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_timer.acxreal_interval = defalut;
      print(mac_info.acx_timer.acxreal_interval);
      expect(mac_info.acx_timer.acxreal_interval == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_timer.acxreal_interval == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00676_element_check_00653 **********\n\n");
    });

    test('00677_element_check_00654', () async {
      print("\n********** テスト実行：00677_element_check_00654 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.eventinput.event_cd;
      print(mac_info.eventinput.event_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.eventinput.event_cd = testData1s;
      print(mac_info.eventinput.event_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.eventinput.event_cd == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.eventinput.event_cd == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.eventinput.event_cd = testData2s;
      print(mac_info.eventinput.event_cd);
      expect(mac_info.eventinput.event_cd == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.eventinput.event_cd == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.eventinput.event_cd = defalut;
      print(mac_info.eventinput.event_cd);
      expect(mac_info.eventinput.event_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.eventinput.event_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00677_element_check_00654 **********\n\n");
    });

    test('00678_element_check_00655', () async {
      print("\n********** テスト実行：00678_element_check_00655 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.eventinput.logo_cd;
      print(mac_info.eventinput.logo_cd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.eventinput.logo_cd = testData1s;
      print(mac_info.eventinput.logo_cd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.eventinput.logo_cd == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.eventinput.logo_cd == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.eventinput.logo_cd = testData2s;
      print(mac_info.eventinput.logo_cd);
      expect(mac_info.eventinput.logo_cd == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.eventinput.logo_cd == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.eventinput.logo_cd = defalut;
      print(mac_info.eventinput.logo_cd);
      expect(mac_info.eventinput.logo_cd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.eventinput.logo_cd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00678_element_check_00655 **********\n\n");
    });

    test('00679_element_check_00656', () async {
      print("\n********** テスト実行：00679_element_check_00656 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.eventinput.event_hall;
      print(mac_info.eventinput.event_hall);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.eventinput.event_hall = testData1;
      print(mac_info.eventinput.event_hall);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.eventinput.event_hall == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.eventinput.event_hall == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.eventinput.event_hall = testData2;
      print(mac_info.eventinput.event_hall);
      expect(mac_info.eventinput.event_hall == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.eventinput.event_hall == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.eventinput.event_hall = defalut;
      print(mac_info.eventinput.event_hall);
      expect(mac_info.eventinput.event_hall == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.eventinput.event_hall == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00679_element_check_00656 **********\n\n");
    });

    test('00680_element_check_00657', () async {
      print("\n********** テスト実行：00680_element_check_00657 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_5000;
      print(mac_info.acx_stop_info.acx_stop_5000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_5000 = testData1;
      print(mac_info.acx_stop_info.acx_stop_5000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_5000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_5000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_5000 = testData2;
      print(mac_info.acx_stop_info.acx_stop_5000);
      expect(mac_info.acx_stop_info.acx_stop_5000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_5000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_5000 = defalut;
      print(mac_info.acx_stop_info.acx_stop_5000);
      expect(mac_info.acx_stop_info.acx_stop_5000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_5000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00680_element_check_00657 **********\n\n");
    });

    test('00681_element_check_00658', () async {
      print("\n********** テスト実行：00681_element_check_00658 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_2000;
      print(mac_info.acx_stop_info.acx_stop_2000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_2000 = testData1;
      print(mac_info.acx_stop_info.acx_stop_2000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_2000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_2000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_2000 = testData2;
      print(mac_info.acx_stop_info.acx_stop_2000);
      expect(mac_info.acx_stop_info.acx_stop_2000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_2000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_2000 = defalut;
      print(mac_info.acx_stop_info.acx_stop_2000);
      expect(mac_info.acx_stop_info.acx_stop_2000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_2000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00681_element_check_00658 **********\n\n");
    });

    test('00682_element_check_00659', () async {
      print("\n********** テスト実行：00682_element_check_00659 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_1000;
      print(mac_info.acx_stop_info.acx_stop_1000);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_1000 = testData1;
      print(mac_info.acx_stop_info.acx_stop_1000);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_1000 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_1000 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_1000 = testData2;
      print(mac_info.acx_stop_info.acx_stop_1000);
      expect(mac_info.acx_stop_info.acx_stop_1000 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_1000 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_1000 = defalut;
      print(mac_info.acx_stop_info.acx_stop_1000);
      expect(mac_info.acx_stop_info.acx_stop_1000 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_1000 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00682_element_check_00659 **********\n\n");
    });

    test('00683_element_check_00660', () async {
      print("\n********** テスト実行：00683_element_check_00660 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_500;
      print(mac_info.acx_stop_info.acx_stop_500);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_500 = testData1;
      print(mac_info.acx_stop_info.acx_stop_500);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_500 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_500 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_500 = testData2;
      print(mac_info.acx_stop_info.acx_stop_500);
      expect(mac_info.acx_stop_info.acx_stop_500 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_500 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_500 = defalut;
      print(mac_info.acx_stop_info.acx_stop_500);
      expect(mac_info.acx_stop_info.acx_stop_500 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_500 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00683_element_check_00660 **********\n\n");
    });

    test('00684_element_check_00661', () async {
      print("\n********** テスト実行：00684_element_check_00661 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_100;
      print(mac_info.acx_stop_info.acx_stop_100);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_100 = testData1;
      print(mac_info.acx_stop_info.acx_stop_100);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_100 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_100 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_100 = testData2;
      print(mac_info.acx_stop_info.acx_stop_100);
      expect(mac_info.acx_stop_info.acx_stop_100 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_100 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_100 = defalut;
      print(mac_info.acx_stop_info.acx_stop_100);
      expect(mac_info.acx_stop_info.acx_stop_100 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_100 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00684_element_check_00661 **********\n\n");
    });

    test('00685_element_check_00662', () async {
      print("\n********** テスト実行：00685_element_check_00662 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_50;
      print(mac_info.acx_stop_info.acx_stop_50);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_50 = testData1;
      print(mac_info.acx_stop_info.acx_stop_50);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_50 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_50 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_50 = testData2;
      print(mac_info.acx_stop_info.acx_stop_50);
      expect(mac_info.acx_stop_info.acx_stop_50 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_50 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_50 = defalut;
      print(mac_info.acx_stop_info.acx_stop_50);
      expect(mac_info.acx_stop_info.acx_stop_50 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_50 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00685_element_check_00662 **********\n\n");
    });

    test('00686_element_check_00663', () async {
      print("\n********** テスト実行：00686_element_check_00663 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_10;
      print(mac_info.acx_stop_info.acx_stop_10);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_10 = testData1;
      print(mac_info.acx_stop_info.acx_stop_10);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_10 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_10 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_10 = testData2;
      print(mac_info.acx_stop_info.acx_stop_10);
      expect(mac_info.acx_stop_info.acx_stop_10 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_10 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_10 = defalut;
      print(mac_info.acx_stop_info.acx_stop_10);
      expect(mac_info.acx_stop_info.acx_stop_10 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_10 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00686_element_check_00663 **********\n\n");
    });

    test('00687_element_check_00664', () async {
      print("\n********** テスト実行：00687_element_check_00664 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_5;
      print(mac_info.acx_stop_info.acx_stop_5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_5 = testData1;
      print(mac_info.acx_stop_info.acx_stop_5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_5 = testData2;
      print(mac_info.acx_stop_info.acx_stop_5);
      expect(mac_info.acx_stop_info.acx_stop_5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_5 = defalut;
      print(mac_info.acx_stop_info.acx_stop_5);
      expect(mac_info.acx_stop_info.acx_stop_5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00687_element_check_00664 **********\n\n");
    });

    test('00688_element_check_00665', () async {
      print("\n********** テスト実行：00688_element_check_00665 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.acx_stop_info.acx_stop_1;
      print(mac_info.acx_stop_info.acx_stop_1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.acx_stop_info.acx_stop_1 = testData1;
      print(mac_info.acx_stop_info.acx_stop_1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.acx_stop_info.acx_stop_1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.acx_stop_info.acx_stop_1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.acx_stop_info.acx_stop_1 = testData2;
      print(mac_info.acx_stop_info.acx_stop_1);
      expect(mac_info.acx_stop_info.acx_stop_1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.acx_stop_info.acx_stop_1 = defalut;
      print(mac_info.acx_stop_info.acx_stop_1);
      expect(mac_info.acx_stop_info.acx_stop_1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.acx_stop_info.acx_stop_1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00688_element_check_00665 **********\n\n");
    });

    test('00689_element_check_00666', () async {
      print("\n********** テスト実行：00689_element_check_00666 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scn_cmd_desktop;
      print(mac_info.scanner.scn_cmd_desktop);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scn_cmd_desktop = testData1;
      print(mac_info.scanner.scn_cmd_desktop);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scn_cmd_desktop == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scn_cmd_desktop == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scn_cmd_desktop = testData2;
      print(mac_info.scanner.scn_cmd_desktop);
      expect(mac_info.scanner.scn_cmd_desktop == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scn_cmd_desktop == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scn_cmd_desktop = defalut;
      print(mac_info.scanner.scn_cmd_desktop);
      expect(mac_info.scanner.scn_cmd_desktop == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scn_cmd_desktop == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00689_element_check_00666 **********\n\n");
    });

    test('00690_element_check_00667', () async {
      print("\n********** テスト実行：00690_element_check_00667 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scn_cmd_tower;
      print(mac_info.scanner.scn_cmd_tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scn_cmd_tower = testData1;
      print(mac_info.scanner.scn_cmd_tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scn_cmd_tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scn_cmd_tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scn_cmd_tower = testData2;
      print(mac_info.scanner.scn_cmd_tower);
      expect(mac_info.scanner.scn_cmd_tower == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scn_cmd_tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scn_cmd_tower = defalut;
      print(mac_info.scanner.scn_cmd_tower);
      expect(mac_info.scanner.scn_cmd_tower == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scn_cmd_tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00690_element_check_00667 **********\n\n");
    });

    test('00691_element_check_00668', () async {
      print("\n********** テスト実行：00691_element_check_00668 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scn_cmd_add;
      print(mac_info.scanner.scn_cmd_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scn_cmd_add = testData1;
      print(mac_info.scanner.scn_cmd_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scn_cmd_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scn_cmd_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scn_cmd_add = testData2;
      print(mac_info.scanner.scn_cmd_add);
      expect(mac_info.scanner.scn_cmd_add == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scn_cmd_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scn_cmd_add = defalut;
      print(mac_info.scanner.scn_cmd_add);
      expect(mac_info.scanner.scn_cmd_add == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scn_cmd_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00691_element_check_00668 **********\n\n");
    });

    test('00692_element_check_00669', () async {
      print("\n********** テスト実行：00692_element_check_00669 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scan_dp_snd_desktop;
      print(mac_info.scanner.scan_dp_snd_desktop);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scan_dp_snd_desktop = testData1;
      print(mac_info.scanner.scan_dp_snd_desktop);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scan_dp_snd_desktop == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scan_dp_snd_desktop == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scan_dp_snd_desktop = testData2;
      print(mac_info.scanner.scan_dp_snd_desktop);
      expect(mac_info.scanner.scan_dp_snd_desktop == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_dp_snd_desktop == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scan_dp_snd_desktop = defalut;
      print(mac_info.scanner.scan_dp_snd_desktop);
      expect(mac_info.scanner.scan_dp_snd_desktop == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_dp_snd_desktop == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00692_element_check_00669 **********\n\n");
    });

    test('00693_element_check_00670', () async {
      print("\n********** テスト実行：00693_element_check_00670 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scan_dp_snd_tower;
      print(mac_info.scanner.scan_dp_snd_tower);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scan_dp_snd_tower = testData1;
      print(mac_info.scanner.scan_dp_snd_tower);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scan_dp_snd_tower == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scan_dp_snd_tower == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scan_dp_snd_tower = testData2;
      print(mac_info.scanner.scan_dp_snd_tower);
      expect(mac_info.scanner.scan_dp_snd_tower == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_dp_snd_tower == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scan_dp_snd_tower = defalut;
      print(mac_info.scanner.scan_dp_snd_tower);
      expect(mac_info.scanner.scan_dp_snd_tower == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_dp_snd_tower == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00693_element_check_00670 **********\n\n");
    });

    test('00694_element_check_00671', () async {
      print("\n********** テスト実行：00694_element_check_00671 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scan_dp_snd_add;
      print(mac_info.scanner.scan_dp_snd_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scan_dp_snd_add = testData1;
      print(mac_info.scanner.scan_dp_snd_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scan_dp_snd_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scan_dp_snd_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scan_dp_snd_add = testData2;
      print(mac_info.scanner.scan_dp_snd_add);
      expect(mac_info.scanner.scan_dp_snd_add == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_dp_snd_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scan_dp_snd_add = defalut;
      print(mac_info.scanner.scan_dp_snd_add);
      expect(mac_info.scanner.scan_dp_snd_add == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_dp_snd_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00694_element_check_00671 **********\n\n");
    });

    test('00695_element_check_00672', () async {
      print("\n********** テスト実行：00695_element_check_00672 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scan_happyself_2nd;
      print(mac_info.scanner.scan_happyself_2nd);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scan_happyself_2nd = testData1;
      print(mac_info.scanner.scan_happyself_2nd);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scan_happyself_2nd == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scan_happyself_2nd == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scan_happyself_2nd = testData2;
      print(mac_info.scanner.scan_happyself_2nd);
      expect(mac_info.scanner.scan_happyself_2nd == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_happyself_2nd == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scan_happyself_2nd = defalut;
      print(mac_info.scanner.scan_happyself_2nd);
      expect(mac_info.scanner.scan_happyself_2nd == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_happyself_2nd == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00695_element_check_00672 **********\n\n");
    });

    test('00696_element_check_00673', () async {
      print("\n********** テスト実行：00696_element_check_00673 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scan_display_mode;
      print(mac_info.scanner.scan_display_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scan_display_mode = testData1;
      print(mac_info.scanner.scan_display_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scan_display_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scan_display_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scan_display_mode = testData2;
      print(mac_info.scanner.scan_display_mode);
      expect(mac_info.scanner.scan_display_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_display_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scan_display_mode = defalut;
      print(mac_info.scanner.scan_display_mode);
      expect(mac_info.scanner.scan_display_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_display_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00696_element_check_00673 **********\n\n");
    });

    test('00697_element_check_00674', () async {
      print("\n********** テスト実行：00697_element_check_00674 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.scan_barcode_payment;
      print(mac_info.scanner.scan_barcode_payment);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.scan_barcode_payment = testData1;
      print(mac_info.scanner.scan_barcode_payment);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.scan_barcode_payment == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.scan_barcode_payment == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.scan_barcode_payment = testData2;
      print(mac_info.scanner.scan_barcode_payment);
      expect(mac_info.scanner.scan_barcode_payment == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_barcode_payment == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.scan_barcode_payment = defalut;
      print(mac_info.scanner.scan_barcode_payment);
      expect(mac_info.scanner.scan_barcode_payment == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.scan_barcode_payment == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00697_element_check_00674 **********\n\n");
    });

    test('00698_element_check_00675', () async {
      print("\n********** テスト実行：00698_element_check_00675 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.beep_times;
      print(mac_info.scanner.beep_times);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.beep_times = testData1;
      print(mac_info.scanner.beep_times);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.beep_times == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.beep_times == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.beep_times = testData2;
      print(mac_info.scanner.beep_times);
      expect(mac_info.scanner.beep_times == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.beep_times == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.beep_times = defalut;
      print(mac_info.scanner.beep_times);
      expect(mac_info.scanner.beep_times == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.beep_times == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00698_element_check_00675 **********\n\n");
    });

    test('00699_element_check_00676', () async {
      print("\n********** テスト実行：00699_element_check_00676 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scanner.beep_interval;
      print(mac_info.scanner.beep_interval);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scanner.beep_interval = testData1;
      print(mac_info.scanner.beep_interval);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scanner.beep_interval == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scanner.beep_interval == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scanner.beep_interval = testData2;
      print(mac_info.scanner.beep_interval);
      expect(mac_info.scanner.beep_interval == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.beep_interval == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scanner.beep_interval = defalut;
      print(mac_info.scanner.beep_interval);
      expect(mac_info.scanner.beep_interval == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scanner.beep_interval == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00699_element_check_00676 **********\n\n");
    });

    test('00700_element_check_00677', () async {
      print("\n********** テスト実行：00700_element_check_00677 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.CT3100_Connection.ct3100_waite_time;
      print(mac_info.CT3100_Connection.ct3100_waite_time);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.CT3100_Connection.ct3100_waite_time = testData1;
      print(mac_info.CT3100_Connection.ct3100_waite_time);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.CT3100_Connection.ct3100_waite_time == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.CT3100_Connection.ct3100_waite_time == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.CT3100_Connection.ct3100_waite_time = testData2;
      print(mac_info.CT3100_Connection.ct3100_waite_time);
      expect(mac_info.CT3100_Connection.ct3100_waite_time == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.CT3100_Connection.ct3100_waite_time == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.CT3100_Connection.ct3100_waite_time = defalut;
      print(mac_info.CT3100_Connection.ct3100_waite_time);
      expect(mac_info.CT3100_Connection.ct3100_waite_time == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.CT3100_Connection.ct3100_waite_time == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00700_element_check_00677 **********\n\n");
    });

    test('00701_element_check_00678', () async {
      print("\n********** テスト実行：00701_element_check_00678 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.CT3100_Connection.ct3100_point_type;
      print(mac_info.CT3100_Connection.ct3100_point_type);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.CT3100_Connection.ct3100_point_type = testData1;
      print(mac_info.CT3100_Connection.ct3100_point_type);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.CT3100_Connection.ct3100_point_type == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.CT3100_Connection.ct3100_point_type == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.CT3100_Connection.ct3100_point_type = testData2;
      print(mac_info.CT3100_Connection.ct3100_point_type);
      expect(mac_info.CT3100_Connection.ct3100_point_type == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.CT3100_Connection.ct3100_point_type == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.CT3100_Connection.ct3100_point_type = defalut;
      print(mac_info.CT3100_Connection.ct3100_point_type);
      expect(mac_info.CT3100_Connection.ct3100_point_type == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.CT3100_Connection.ct3100_point_type == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00701_element_check_00678 **********\n\n");
    });

    test('00702_element_check_00679', () async {
      print("\n********** テスト実行：00702_element_check_00679 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.upd_chk.upd_err_rbt;
      print(mac_info.upd_chk.upd_err_rbt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.upd_chk.upd_err_rbt = testData1;
      print(mac_info.upd_chk.upd_err_rbt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.upd_chk.upd_err_rbt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.upd_chk.upd_err_rbt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.upd_chk.upd_err_rbt = testData2;
      print(mac_info.upd_chk.upd_err_rbt);
      expect(mac_info.upd_chk.upd_err_rbt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.upd_chk.upd_err_rbt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.upd_chk.upd_err_rbt = defalut;
      print(mac_info.upd_chk.upd_err_rbt);
      expect(mac_info.upd_chk.upd_err_rbt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.upd_chk.upd_err_rbt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00702_element_check_00679 **********\n\n");
    });

    test('00703_element_check_00680', () async {
      print("\n********** テスト実行：00703_element_check_00680 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.upd_chk.timeout;
      print(mac_info.upd_chk.timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.upd_chk.timeout = testData1;
      print(mac_info.upd_chk.timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.upd_chk.timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.upd_chk.timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.upd_chk.timeout = testData2;
      print(mac_info.upd_chk.timeout);
      expect(mac_info.upd_chk.timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.upd_chk.timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.upd_chk.timeout = defalut;
      print(mac_info.upd_chk.timeout);
      expect(mac_info.upd_chk.timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.upd_chk.timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00703_element_check_00680 **********\n\n");
    });

    test('00704_element_check_00681', () async {
      print("\n********** テスト実行：00704_element_check_00681 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.drugrev.name;
      print(mac_info.drugrev.name);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.drugrev.name = testData1s;
      print(mac_info.drugrev.name);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.drugrev.name == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.drugrev.name == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.drugrev.name = testData2s;
      print(mac_info.drugrev.name);
      expect(mac_info.drugrev.name == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.drugrev.name == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.drugrev.name = defalut;
      print(mac_info.drugrev.name);
      expect(mac_info.drugrev.name == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.drugrev.name == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00704_element_check_00681 **********\n\n");
    });

    test('00705_element_check_00682', () async {
      print("\n********** テスト実行：00705_element_check_00682 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.center_server.hist_cycle;
      print(mac_info.center_server.hist_cycle);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.center_server.hist_cycle = testData1;
      print(mac_info.center_server.hist_cycle);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.center_server.hist_cycle == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.center_server.hist_cycle == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.center_server.hist_cycle = testData2;
      print(mac_info.center_server.hist_cycle);
      expect(mac_info.center_server.hist_cycle == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.hist_cycle == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.center_server.hist_cycle = defalut;
      print(mac_info.center_server.hist_cycle);
      expect(mac_info.center_server.hist_cycle == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.hist_cycle == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00705_element_check_00682 **********\n\n");
    });

    test('00706_element_check_00683', () async {
      print("\n********** テスト実行：00706_element_check_00683 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.center_server.stcls_send;
      print(mac_info.center_server.stcls_send);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.center_server.stcls_send = testData1;
      print(mac_info.center_server.stcls_send);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.center_server.stcls_send == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.center_server.stcls_send == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.center_server.stcls_send = testData2;
      print(mac_info.center_server.stcls_send);
      expect(mac_info.center_server.stcls_send == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.stcls_send == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.center_server.stcls_send = defalut;
      print(mac_info.center_server.stcls_send);
      expect(mac_info.center_server.stcls_send == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.stcls_send == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00706_element_check_00683 **********\n\n");
    });

    test('00707_element_check_00684', () async {
      print("\n********** テスト実行：00707_element_check_00684 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.center_server.bult_send;
      print(mac_info.center_server.bult_send);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.center_server.bult_send = testData1;
      print(mac_info.center_server.bult_send);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.center_server.bult_send == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.center_server.bult_send == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.center_server.bult_send = testData2;
      print(mac_info.center_server.bult_send);
      expect(mac_info.center_server.bult_send == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.bult_send == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.center_server.bult_send = defalut;
      print(mac_info.center_server.bult_send);
      expect(mac_info.center_server.bult_send == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.bult_send == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00707_element_check_00684 **********\n\n");
    });

    test('00708_element_check_00685', () async {
      print("\n********** テスト実行：00708_element_check_00685 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.center_server.tslnkweb_timeout;
      print(mac_info.center_server.tslnkweb_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.center_server.tslnkweb_timeout = testData1;
      print(mac_info.center_server.tslnkweb_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.center_server.tslnkweb_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.center_server.tslnkweb_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.center_server.tslnkweb_timeout = testData2;
      print(mac_info.center_server.tslnkweb_timeout);
      expect(mac_info.center_server.tslnkweb_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.tslnkweb_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.center_server.tslnkweb_timeout = defalut;
      print(mac_info.center_server.tslnkweb_timeout);
      expect(mac_info.center_server.tslnkweb_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.tslnkweb_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00708_element_check_00685 **********\n\n");
    });

    test('00709_element_check_00686', () async {
      print("\n********** テスト実行：00709_element_check_00686 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.center_server.pmod_dspmode;
      print(mac_info.center_server.pmod_dspmode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.center_server.pmod_dspmode = testData1;
      print(mac_info.center_server.pmod_dspmode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.center_server.pmod_dspmode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.center_server.pmod_dspmode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.center_server.pmod_dspmode = testData2;
      print(mac_info.center_server.pmod_dspmode);
      expect(mac_info.center_server.pmod_dspmode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.pmod_dspmode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.center_server.pmod_dspmode = defalut;
      print(mac_info.center_server.pmod_dspmode);
      expect(mac_info.center_server.pmod_dspmode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.center_server.pmod_dspmode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00709_element_check_00686 **********\n\n");
    });

    test('00710_element_check_00687', () async {
      print("\n********** テスト実行：00710_element_check_00687 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.stopn_retry.retry_cnt;
      print(mac_info.stopn_retry.retry_cnt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.stopn_retry.retry_cnt = testData1;
      print(mac_info.stopn_retry.retry_cnt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.stopn_retry.retry_cnt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.stopn_retry.retry_cnt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.stopn_retry.retry_cnt = testData2;
      print(mac_info.stopn_retry.retry_cnt);
      expect(mac_info.stopn_retry.retry_cnt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.retry_cnt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.stopn_retry.retry_cnt = defalut;
      print(mac_info.stopn_retry.retry_cnt);
      expect(mac_info.stopn_retry.retry_cnt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.retry_cnt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00710_element_check_00687 **********\n\n");
    });

    test('00711_element_check_00688', () async {
      print("\n********** テスト実行：00711_element_check_00688 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.stopn_retry.retry_inter;
      print(mac_info.stopn_retry.retry_inter);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.stopn_retry.retry_inter = testData1;
      print(mac_info.stopn_retry.retry_inter);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.stopn_retry.retry_inter == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.stopn_retry.retry_inter == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.stopn_retry.retry_inter = testData2;
      print(mac_info.stopn_retry.retry_inter);
      expect(mac_info.stopn_retry.retry_inter == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.retry_inter == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.stopn_retry.retry_inter = defalut;
      print(mac_info.stopn_retry.retry_inter);
      expect(mac_info.stopn_retry.retry_inter == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.retry_inter == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00711_element_check_00688 **********\n\n");
    });

    test('00712_element_check_00689', () async {
      print("\n********** テスト実行：00712_element_check_00689 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.stopn_retry.cls_downset;
      print(mac_info.stopn_retry.cls_downset);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.stopn_retry.cls_downset = testData1;
      print(mac_info.stopn_retry.cls_downset);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.stopn_retry.cls_downset == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.stopn_retry.cls_downset == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.stopn_retry.cls_downset = testData2;
      print(mac_info.stopn_retry.cls_downset);
      expect(mac_info.stopn_retry.cls_downset == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.cls_downset == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.stopn_retry.cls_downset = defalut;
      print(mac_info.stopn_retry.cls_downset);
      expect(mac_info.stopn_retry.cls_downset == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.cls_downset == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00712_element_check_00689 **********\n\n");
    });

    test('00713_element_check_00690', () async {
      print("\n********** テスト実行：00713_element_check_00690 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.stopn_retry.cls_downtime;
      print(mac_info.stopn_retry.cls_downtime);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.stopn_retry.cls_downtime = testData1s;
      print(mac_info.stopn_retry.cls_downtime);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.stopn_retry.cls_downtime == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.stopn_retry.cls_downtime == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.stopn_retry.cls_downtime = testData2s;
      print(mac_info.stopn_retry.cls_downtime);
      expect(mac_info.stopn_retry.cls_downtime == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.cls_downtime == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.stopn_retry.cls_downtime = defalut;
      print(mac_info.stopn_retry.cls_downtime);
      expect(mac_info.stopn_retry.cls_downtime == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stopn_retry.cls_downtime == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00713_element_check_00690 **********\n\n");
    });

    test('00714_element_check_00691', () async {
      print("\n********** テスト実行：00714_element_check_00691 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no1;
      print(mac_info.select_batrepo.batch_no1);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no1 = testData1;
      print(mac_info.select_batrepo.batch_no1);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no1 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no1 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no1 = testData2;
      print(mac_info.select_batrepo.batch_no1);
      expect(mac_info.select_batrepo.batch_no1 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no1 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no1 = defalut;
      print(mac_info.select_batrepo.batch_no1);
      expect(mac_info.select_batrepo.batch_no1 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no1 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00714_element_check_00691 **********\n\n");
    });

    test('00715_element_check_00692', () async {
      print("\n********** テスト実行：00715_element_check_00692 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no2;
      print(mac_info.select_batrepo.batch_no2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no2 = testData1;
      print(mac_info.select_batrepo.batch_no2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no2 = testData2;
      print(mac_info.select_batrepo.batch_no2);
      expect(mac_info.select_batrepo.batch_no2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no2 = defalut;
      print(mac_info.select_batrepo.batch_no2);
      expect(mac_info.select_batrepo.batch_no2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00715_element_check_00692 **********\n\n");
    });

    test('00716_element_check_00693', () async {
      print("\n********** テスト実行：00716_element_check_00693 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no3;
      print(mac_info.select_batrepo.batch_no3);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no3 = testData1;
      print(mac_info.select_batrepo.batch_no3);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no3 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no3 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no3 = testData2;
      print(mac_info.select_batrepo.batch_no3);
      expect(mac_info.select_batrepo.batch_no3 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no3 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no3 = defalut;
      print(mac_info.select_batrepo.batch_no3);
      expect(mac_info.select_batrepo.batch_no3 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no3 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00716_element_check_00693 **********\n\n");
    });

    test('00717_element_check_00694', () async {
      print("\n********** テスト実行：00717_element_check_00694 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no4;
      print(mac_info.select_batrepo.batch_no4);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no4 = testData1;
      print(mac_info.select_batrepo.batch_no4);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no4 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no4 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no4 = testData2;
      print(mac_info.select_batrepo.batch_no4);
      expect(mac_info.select_batrepo.batch_no4 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no4 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no4 = defalut;
      print(mac_info.select_batrepo.batch_no4);
      expect(mac_info.select_batrepo.batch_no4 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no4 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00717_element_check_00694 **********\n\n");
    });

    test('00718_element_check_00695', () async {
      print("\n********** テスト実行：00718_element_check_00695 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no5;
      print(mac_info.select_batrepo.batch_no5);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no5 = testData1;
      print(mac_info.select_batrepo.batch_no5);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no5 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no5 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no5 = testData2;
      print(mac_info.select_batrepo.batch_no5);
      expect(mac_info.select_batrepo.batch_no5 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no5 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no5 = defalut;
      print(mac_info.select_batrepo.batch_no5);
      expect(mac_info.select_batrepo.batch_no5 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no5 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00718_element_check_00695 **********\n\n");
    });

    test('00719_element_check_00696', () async {
      print("\n********** テスト実行：00719_element_check_00696 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no6;
      print(mac_info.select_batrepo.batch_no6);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no6 = testData1;
      print(mac_info.select_batrepo.batch_no6);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no6 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no6 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no6 = testData2;
      print(mac_info.select_batrepo.batch_no6);
      expect(mac_info.select_batrepo.batch_no6 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no6 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no6 = defalut;
      print(mac_info.select_batrepo.batch_no6);
      expect(mac_info.select_batrepo.batch_no6 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no6 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00719_element_check_00696 **********\n\n");
    });

    test('00720_element_check_00697', () async {
      print("\n********** テスト実行：00720_element_check_00697 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no7;
      print(mac_info.select_batrepo.batch_no7);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no7 = testData1;
      print(mac_info.select_batrepo.batch_no7);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no7 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no7 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no7 = testData2;
      print(mac_info.select_batrepo.batch_no7);
      expect(mac_info.select_batrepo.batch_no7 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no7 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no7 = defalut;
      print(mac_info.select_batrepo.batch_no7);
      expect(mac_info.select_batrepo.batch_no7 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no7 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00720_element_check_00697 **********\n\n");
    });

    test('00721_element_check_00698', () async {
      print("\n********** テスト実行：00721_element_check_00698 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no8;
      print(mac_info.select_batrepo.batch_no8);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no8 = testData1;
      print(mac_info.select_batrepo.batch_no8);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no8 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no8 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no8 = testData2;
      print(mac_info.select_batrepo.batch_no8);
      expect(mac_info.select_batrepo.batch_no8 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no8 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no8 = defalut;
      print(mac_info.select_batrepo.batch_no8);
      expect(mac_info.select_batrepo.batch_no8 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no8 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00721_element_check_00698 **********\n\n");
    });

    test('00722_element_check_00699', () async {
      print("\n********** テスト実行：00722_element_check_00699 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.select_batrepo.batch_no9;
      print(mac_info.select_batrepo.batch_no9);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.select_batrepo.batch_no9 = testData1;
      print(mac_info.select_batrepo.batch_no9);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.select_batrepo.batch_no9 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.select_batrepo.batch_no9 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.select_batrepo.batch_no9 = testData2;
      print(mac_info.select_batrepo.batch_no9);
      expect(mac_info.select_batrepo.batch_no9 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no9 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.select_batrepo.batch_no9 = defalut;
      print(mac_info.select_batrepo.batch_no9);
      expect(mac_info.select_batrepo.batch_no9 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.select_batrepo.batch_no9 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00722_element_check_00699 **********\n\n");
    });

    test('00723_element_check_00700', () async {
      print("\n********** テスト実行：00723_element_check_00700 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.rpm_timeout;
      print(mac_info.ftp.rpm_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.rpm_timeout = testData1;
      print(mac_info.ftp.rpm_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.rpm_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.rpm_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.rpm_timeout = testData2;
      print(mac_info.ftp.rpm_timeout);
      expect(mac_info.ftp.rpm_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.rpm_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.rpm_timeout = defalut;
      print(mac_info.ftp.rpm_timeout);
      expect(mac_info.ftp.rpm_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.rpm_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00723_element_check_00700 **********\n\n");
    });

    test('00724_element_check_00701', () async {
      print("\n********** テスト実行：00724_element_check_00701 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.rpm_retry;
      print(mac_info.ftp.rpm_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.rpm_retry = testData1;
      print(mac_info.ftp.rpm_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.rpm_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.rpm_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.rpm_retry = testData2;
      print(mac_info.ftp.rpm_retry);
      expect(mac_info.ftp.rpm_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.rpm_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.rpm_retry = defalut;
      print(mac_info.ftp.rpm_retry);
      expect(mac_info.ftp.rpm_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.rpm_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00724_element_check_00701 **********\n\n");
    });

    test('00725_element_check_00702', () async {
      print("\n********** テスト実行：00725_element_check_00702 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.landisk_timeout;
      print(mac_info.ftp.landisk_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.landisk_timeout = testData1;
      print(mac_info.ftp.landisk_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.landisk_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.landisk_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.landisk_timeout = testData2;
      print(mac_info.ftp.landisk_timeout);
      expect(mac_info.ftp.landisk_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.landisk_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.landisk_timeout = defalut;
      print(mac_info.ftp.landisk_timeout);
      expect(mac_info.ftp.landisk_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.landisk_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00725_element_check_00702 **********\n\n");
    });

    test('00726_element_check_00703', () async {
      print("\n********** テスト実行：00726_element_check_00703 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.landisk_retry;
      print(mac_info.ftp.landisk_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.landisk_retry = testData1;
      print(mac_info.ftp.landisk_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.landisk_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.landisk_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.landisk_retry = testData2;
      print(mac_info.ftp.landisk_retry);
      expect(mac_info.ftp.landisk_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.landisk_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.landisk_retry = defalut;
      print(mac_info.ftp.landisk_retry);
      expect(mac_info.ftp.landisk_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.landisk_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00726_element_check_00703 **********\n\n");
    });

    test('00727_element_check_00704', () async {
      print("\n********** テスト実行：00727_element_check_00704 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.mcput_timeout;
      print(mac_info.ftp.mcput_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.mcput_timeout = testData1;
      print(mac_info.ftp.mcput_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.mcput_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.mcput_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.mcput_timeout = testData2;
      print(mac_info.ftp.mcput_timeout);
      expect(mac_info.ftp.mcput_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcput_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.mcput_timeout = defalut;
      print(mac_info.ftp.mcput_timeout);
      expect(mac_info.ftp.mcput_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcput_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00727_element_check_00704 **********\n\n");
    });

    test('00728_element_check_00705', () async {
      print("\n********** テスト実行：00728_element_check_00705 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.mcput_retry;
      print(mac_info.ftp.mcput_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.mcput_retry = testData1;
      print(mac_info.ftp.mcput_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.mcput_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.mcput_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.mcput_retry = testData2;
      print(mac_info.ftp.mcput_retry);
      expect(mac_info.ftp.mcput_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcput_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.mcput_retry = defalut;
      print(mac_info.ftp.mcput_retry);
      expect(mac_info.ftp.mcput_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcput_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00728_element_check_00705 **********\n\n");
    });

    test('00729_element_check_00706', () async {
      print("\n********** テスト実行：00729_element_check_00706 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.mcget_timeout;
      print(mac_info.ftp.mcget_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.mcget_timeout = testData1;
      print(mac_info.ftp.mcget_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.mcget_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.mcget_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.mcget_timeout = testData2;
      print(mac_info.ftp.mcget_timeout);
      expect(mac_info.ftp.mcget_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcget_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.mcget_timeout = defalut;
      print(mac_info.ftp.mcget_timeout);
      expect(mac_info.ftp.mcget_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcget_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00729_element_check_00706 **********\n\n");
    });

    test('00730_element_check_00707', () async {
      print("\n********** テスト実行：00730_element_check_00707 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.mcget_retry;
      print(mac_info.ftp.mcget_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.mcget_retry = testData1;
      print(mac_info.ftp.mcget_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.mcget_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.mcget_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.mcget_retry = testData2;
      print(mac_info.ftp.mcget_retry);
      expect(mac_info.ftp.mcget_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcget_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.mcget_retry = defalut;
      print(mac_info.ftp.mcget_retry);
      expect(mac_info.ftp.mcget_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.mcget_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00730_element_check_00707 **********\n\n");
    });

    test('00731_element_check_00708', () async {
      print("\n********** テスト実行：00731_element_check_00708 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.void_timeout;
      print(mac_info.ftp.void_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.void_timeout = testData1;
      print(mac_info.ftp.void_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.void_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.void_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.void_timeout = testData2;
      print(mac_info.ftp.void_timeout);
      expect(mac_info.ftp.void_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.void_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.void_timeout = defalut;
      print(mac_info.ftp.void_timeout);
      expect(mac_info.ftp.void_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.void_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00731_element_check_00708 **********\n\n");
    });

    test('00732_element_check_00709', () async {
      print("\n********** テスト実行：00732_element_check_00709 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.void_retry;
      print(mac_info.ftp.void_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.void_retry = testData1;
      print(mac_info.ftp.void_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.void_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.void_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.void_retry = testData2;
      print(mac_info.ftp.void_retry);
      expect(mac_info.ftp.void_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.void_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.void_retry = defalut;
      print(mac_info.ftp.void_retry);
      expect(mac_info.ftp.void_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.void_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00732_element_check_00709 **********\n\n");
    });

    test('00733_element_check_00710', () async {
      print("\n********** テスト実行：00733_element_check_00710 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.hqput_timeout;
      print(mac_info.ftp.hqput_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.hqput_timeout = testData1;
      print(mac_info.ftp.hqput_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.hqput_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.hqput_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.hqput_timeout = testData2;
      print(mac_info.ftp.hqput_timeout);
      expect(mac_info.ftp.hqput_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.hqput_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.hqput_timeout = defalut;
      print(mac_info.ftp.hqput_timeout);
      expect(mac_info.ftp.hqput_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.hqput_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00733_element_check_00710 **********\n\n");
    });

    test('00734_element_check_00711', () async {
      print("\n********** テスト実行：00734_element_check_00711 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.hqput_retry;
      print(mac_info.ftp.hqput_retry);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.hqput_retry = testData1;
      print(mac_info.ftp.hqput_retry);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.hqput_retry == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.hqput_retry == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.hqput_retry = testData2;
      print(mac_info.ftp.hqput_retry);
      expect(mac_info.ftp.hqput_retry == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.hqput_retry == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.hqput_retry = defalut;
      print(mac_info.ftp.hqput_retry);
      expect(mac_info.ftp.hqput_retry == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.hqput_retry == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00734_element_check_00711 **********\n\n");
    });

    test('00735_element_check_00712', () async {
      print("\n********** テスト実行：00735_element_check_00712 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.offset_speed;
      print(mac_info.ftp.offset_speed);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.offset_speed = testData1;
      print(mac_info.ftp.offset_speed);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.offset_speed == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.offset_speed == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.offset_speed = testData2;
      print(mac_info.ftp.offset_speed);
      expect(mac_info.ftp.offset_speed == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.offset_speed == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.offset_speed = defalut;
      print(mac_info.ftp.offset_speed);
      expect(mac_info.ftp.offset_speed == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.offset_speed == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00735_element_check_00712 **********\n\n");
    });

    test('00736_element_check_00713', () async {
      print("\n********** テスト実行：00736_element_check_00713 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.error_timeout;
      print(mac_info.ftp.error_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.error_timeout = testData1;
      print(mac_info.ftp.error_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.error_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.error_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.error_timeout = testData2;
      print(mac_info.ftp.error_timeout);
      expect(mac_info.ftp.error_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.error_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.error_timeout = defalut;
      print(mac_info.ftp.error_timeout);
      expect(mac_info.ftp.error_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.error_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00736_element_check_00713 **********\n\n");
    });

    test('00737_element_check_00714', () async {
      print("\n********** テスト実行：00737_element_check_00714 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.offset_timeout;
      print(mac_info.ftp.offset_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.offset_timeout = testData1;
      print(mac_info.ftp.offset_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.offset_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.offset_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.offset_timeout = testData2;
      print(mac_info.ftp.offset_timeout);
      expect(mac_info.ftp.offset_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.offset_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.offset_timeout = defalut;
      print(mac_info.ftp.offset_timeout);
      expect(mac_info.ftp.offset_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.offset_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00737_element_check_00714 **********\n\n");
    });

    test('00738_element_check_00715', () async {
      print("\n********** テスト実行：00738_element_check_00715 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ftp.default_timeout;
      print(mac_info.ftp.default_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ftp.default_timeout = testData1;
      print(mac_info.ftp.default_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ftp.default_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ftp.default_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ftp.default_timeout = testData2;
      print(mac_info.ftp.default_timeout);
      expect(mac_info.ftp.default_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.default_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ftp.default_timeout = defalut;
      print(mac_info.ftp.default_timeout);
      expect(mac_info.ftp.default_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ftp.default_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00738_element_check_00715 **********\n\n");
    });

    test('00739_element_check_00716', () async {
      print("\n********** テスト実行：00739_element_check_00716 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.movsend.avispace;
      print(mac_info.movsend.avispace);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.movsend.avispace = testData1;
      print(mac_info.movsend.avispace);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.movsend.avispace == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.movsend.avispace == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.movsend.avispace = testData2;
      print(mac_info.movsend.avispace);
      expect(mac_info.movsend.avispace == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.avispace == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.movsend.avispace = defalut;
      print(mac_info.movsend.avispace);
      expect(mac_info.movsend.avispace == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.avispace == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00739_element_check_00716 **********\n\n");
    });

    test('00740_element_check_00717', () async {
      print("\n********** テスト実行：00740_element_check_00717 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.movsend.send_speed2;
      print(mac_info.movsend.send_speed2);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.movsend.send_speed2 = testData1;
      print(mac_info.movsend.send_speed2);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.movsend.send_speed2 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.movsend.send_speed2 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.movsend.send_speed2 = testData2;
      print(mac_info.movsend.send_speed2);
      expect(mac_info.movsend.send_speed2 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.send_speed2 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.movsend.send_speed2 = defalut;
      print(mac_info.movsend.send_speed2);
      expect(mac_info.movsend.send_speed2 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.send_speed2 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00740_element_check_00717 **********\n\n");
    });

    test('00741_element_check_00718', () async {
      print("\n********** テスト実行：00741_element_check_00718 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.movsend.extend_time;
      print(mac_info.movsend.extend_time);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.movsend.extend_time = testData1;
      print(mac_info.movsend.extend_time);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.movsend.extend_time == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.movsend.extend_time == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.movsend.extend_time = testData2;
      print(mac_info.movsend.extend_time);
      expect(mac_info.movsend.extend_time == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.extend_time == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.movsend.extend_time = defalut;
      print(mac_info.movsend.extend_time);
      expect(mac_info.movsend.extend_time == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.extend_time == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00741_element_check_00718 **********\n\n");
    });

    test('00742_element_check_00719', () async {
      print("\n********** テスト実行：00742_element_check_00719 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.movsend.taking_start;
      print(mac_info.movsend.taking_start);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.movsend.taking_start = testData1;
      print(mac_info.movsend.taking_start);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.movsend.taking_start == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.movsend.taking_start == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.movsend.taking_start = testData2;
      print(mac_info.movsend.taking_start);
      expect(mac_info.movsend.taking_start == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.taking_start == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.movsend.taking_start = defalut;
      print(mac_info.movsend.taking_start);
      expect(mac_info.movsend.taking_start == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.taking_start == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00742_element_check_00719 **********\n\n");
    });

    test('00743_element_check_00720', () async {
      print("\n********** テスト実行：00743_element_check_00720 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.movsend.usbcam_send;
      print(mac_info.movsend.usbcam_send);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.movsend.usbcam_send = testData1;
      print(mac_info.movsend.usbcam_send);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.movsend.usbcam_send == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.movsend.usbcam_send == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.movsend.usbcam_send = testData2;
      print(mac_info.movsend.usbcam_send);
      expect(mac_info.movsend.usbcam_send == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.usbcam_send == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.movsend.usbcam_send = defalut;
      print(mac_info.movsend.usbcam_send);
      expect(mac_info.movsend.usbcam_send == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.movsend.usbcam_send == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00743_element_check_00720 **********\n\n");
    });

    test('00744_element_check_00721', () async {
      print("\n********** テスト実行：00744_element_check_00721 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.disk_free.limit_size;
      print(mac_info.disk_free.limit_size);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.disk_free.limit_size = testData1;
      print(mac_info.disk_free.limit_size);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.disk_free.limit_size == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.disk_free.limit_size == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.disk_free.limit_size = testData2;
      print(mac_info.disk_free.limit_size);
      expect(mac_info.disk_free.limit_size == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.disk_free.limit_size == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.disk_free.limit_size = defalut;
      print(mac_info.disk_free.limit_size);
      expect(mac_info.disk_free.limit_size == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.disk_free.limit_size == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00744_element_check_00721 **********\n\n");
    });

    test('00745_element_check_00722', () async {
      print("\n********** テスト実行：00745_element_check_00722 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.disk_free.stat;
      print(mac_info.disk_free.stat);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.disk_free.stat = testData1;
      print(mac_info.disk_free.stat);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.disk_free.stat == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.disk_free.stat == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.disk_free.stat = testData2;
      print(mac_info.disk_free.stat);
      expect(mac_info.disk_free.stat == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.disk_free.stat == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.disk_free.stat = defalut;
      print(mac_info.disk_free.stat);
      expect(mac_info.disk_free.stat == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.disk_free.stat == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00745_element_check_00722 **********\n\n");
    });

    test('00746_element_check_00723', () async {
      print("\n********** テスト実行：00746_element_check_00723 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.other.ut1_wait;
      print(mac_info.other.ut1_wait);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.other.ut1_wait = testData1;
      print(mac_info.other.ut1_wait);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.other.ut1_wait == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.other.ut1_wait == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.other.ut1_wait = testData2;
      print(mac_info.other.ut1_wait);
      expect(mac_info.other.ut1_wait == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.ut1_wait == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.other.ut1_wait = defalut;
      print(mac_info.other.ut1_wait);
      expect(mac_info.other.ut1_wait == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.ut1_wait == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00746_element_check_00723 **********\n\n");
    });

    test('00747_element_check_00724', () async {
      print("\n********** テスト実行：00747_element_check_00724 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.other.multi_vega_env;
      print(mac_info.other.multi_vega_env);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.other.multi_vega_env = testData1;
      print(mac_info.other.multi_vega_env);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.other.multi_vega_env == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.other.multi_vega_env == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.other.multi_vega_env = testData2;
      print(mac_info.other.multi_vega_env);
      expect(mac_info.other.multi_vega_env == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.multi_vega_env == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.other.multi_vega_env = defalut;
      print(mac_info.other.multi_vega_env);
      expect(mac_info.other.multi_vega_env == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.multi_vega_env == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00747_element_check_00724 **********\n\n");
    });

    test('00748_element_check_00725', () async {
      print("\n********** テスト実行：00748_element_check_00725 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.other.quo_useup_flg;
      print(mac_info.other.quo_useup_flg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.other.quo_useup_flg = testData1;
      print(mac_info.other.quo_useup_flg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.other.quo_useup_flg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.other.quo_useup_flg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.other.quo_useup_flg = testData2;
      print(mac_info.other.quo_useup_flg);
      expect(mac_info.other.quo_useup_flg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.quo_useup_flg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.other.quo_useup_flg = defalut;
      print(mac_info.other.quo_useup_flg);
      expect(mac_info.other.quo_useup_flg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.quo_useup_flg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00748_element_check_00725 **********\n\n");
    });

    test('00749_element_check_00726', () async {
      print("\n********** テスト実行：00749_element_check_00726 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.other.jpqr_err_nonprint;
      print(mac_info.other.jpqr_err_nonprint);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.other.jpqr_err_nonprint = testData1;
      print(mac_info.other.jpqr_err_nonprint);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.other.jpqr_err_nonprint == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.other.jpqr_err_nonprint == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.other.jpqr_err_nonprint = testData2;
      print(mac_info.other.jpqr_err_nonprint);
      expect(mac_info.other.jpqr_err_nonprint == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.jpqr_err_nonprint == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.other.jpqr_err_nonprint = defalut;
      print(mac_info.other.jpqr_err_nonprint);
      expect(mac_info.other.jpqr_err_nonprint == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.other.jpqr_err_nonprint == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00749_element_check_00726 **********\n\n");
    });

    test('00750_element_check_00727', () async {
      print("\n********** テスト実行：00750_element_check_00727 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sqrc_sys.sqrc_back_timer;
      print(mac_info.sqrc_sys.sqrc_back_timer);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sqrc_sys.sqrc_back_timer = testData1;
      print(mac_info.sqrc_sys.sqrc_back_timer);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sqrc_sys.sqrc_back_timer == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sqrc_sys.sqrc_back_timer == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sqrc_sys.sqrc_back_timer = testData2;
      print(mac_info.sqrc_sys.sqrc_back_timer);
      expect(mac_info.sqrc_sys.sqrc_back_timer == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sqrc_sys.sqrc_back_timer == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sqrc_sys.sqrc_back_timer = defalut;
      print(mac_info.sqrc_sys.sqrc_back_timer);
      expect(mac_info.sqrc_sys.sqrc_back_timer == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sqrc_sys.sqrc_back_timer == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00750_element_check_00727 **********\n\n");
    });

    test('00751_element_check_00728', () async {
      print("\n********** テスト実行：00751_element_check_00728 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.histlog_get.histlog_get_change;
      print(mac_info.histlog_get.histlog_get_change);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.histlog_get.histlog_get_change = testData1;
      print(mac_info.histlog_get.histlog_get_change);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.histlog_get.histlog_get_change == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.histlog_get.histlog_get_change == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.histlog_get.histlog_get_change = testData2;
      print(mac_info.histlog_get.histlog_get_change);
      expect(mac_info.histlog_get.histlog_get_change == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.histlog_get.histlog_get_change == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.histlog_get.histlog_get_change = defalut;
      print(mac_info.histlog_get.histlog_get_change);
      expect(mac_info.histlog_get.histlog_get_change == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.histlog_get.histlog_get_change == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00751_element_check_00728 **********\n\n");
    });

    test('00752_element_check_00729', () async {
      print("\n********** テスト実行：00752_element_check_00729 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.sims_cnct.cls_wait_time;
      print(mac_info.sims_cnct.cls_wait_time);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.sims_cnct.cls_wait_time = testData1;
      print(mac_info.sims_cnct.cls_wait_time);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.sims_cnct.cls_wait_time == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.sims_cnct.cls_wait_time == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.sims_cnct.cls_wait_time = testData2;
      print(mac_info.sims_cnct.cls_wait_time);
      expect(mac_info.sims_cnct.cls_wait_time == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sims_cnct.cls_wait_time == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.sims_cnct.cls_wait_time = defalut;
      print(mac_info.sims_cnct.cls_wait_time);
      expect(mac_info.sims_cnct.cls_wait_time == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.sims_cnct.cls_wait_time == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00752_element_check_00729 **********\n\n");
    });

    test('00753_element_check_00730', () async {
      print("\n********** テスト実行：00753_element_check_00730 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.step2_bar.step2_bar_order;
      print(mac_info.step2_bar.step2_bar_order);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.step2_bar.step2_bar_order = testData1;
      print(mac_info.step2_bar.step2_bar_order);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.step2_bar.step2_bar_order == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.step2_bar.step2_bar_order == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.step2_bar.step2_bar_order = testData2;
      print(mac_info.step2_bar.step2_bar_order);
      expect(mac_info.step2_bar.step2_bar_order == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.step2_bar.step2_bar_order == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.step2_bar.step2_bar_order = defalut;
      print(mac_info.step2_bar.step2_bar_order);
      expect(mac_info.step2_bar.step2_bar_order == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.step2_bar.step2_bar_order == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00753_element_check_00730 **********\n\n");
    });

    test('00754_element_check_00731', () async {
      print("\n********** テスト実行：00754_element_check_00731 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.tax_free.tax_free_add;
      print(mac_info.tax_free.tax_free_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.tax_free.tax_free_add = testData1;
      print(mac_info.tax_free.tax_free_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.tax_free.tax_free_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.tax_free.tax_free_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.tax_free.tax_free_add = testData2;
      print(mac_info.tax_free.tax_free_add);
      expect(mac_info.tax_free.tax_free_add == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tax_free.tax_free_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.tax_free.tax_free_add = defalut;
      print(mac_info.tax_free.tax_free_add);
      expect(mac_info.tax_free.tax_free_add == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tax_free.tax_free_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00754_element_check_00731 **********\n\n");
    });

    test('00755_element_check_00732', () async {
      print("\n********** テスト実行：00755_element_check_00732 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.stcls.tran_interval;
      print(mac_info.stcls.tran_interval);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.stcls.tran_interval = testData1;
      print(mac_info.stcls.tran_interval);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.stcls.tran_interval == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.stcls.tran_interval == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.stcls.tran_interval = testData2;
      print(mac_info.stcls.tran_interval);
      expect(mac_info.stcls.tran_interval == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stcls.tran_interval == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.stcls.tran_interval = defalut;
      print(mac_info.stcls.tran_interval);
      expect(mac_info.stcls.tran_interval == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.stcls.tran_interval == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00755_element_check_00732 **********\n\n");
    });

    test('00756_element_check_00733', () async {
      print("\n********** テスト実行：00756_element_check_00733 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.ticket.ticket_cnt;
      print(mac_info.ticket.ticket_cnt);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.ticket.ticket_cnt = testData1;
      print(mac_info.ticket.ticket_cnt);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.ticket.ticket_cnt == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.ticket.ticket_cnt == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.ticket.ticket_cnt = testData2;
      print(mac_info.ticket.ticket_cnt);
      expect(mac_info.ticket.ticket_cnt == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ticket.ticket_cnt == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.ticket.ticket_cnt = defalut;
      print(mac_info.ticket.ticket_cnt);
      expect(mac_info.ticket.ticket_cnt == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.ticket.ticket_cnt == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00756_element_check_00733 **********\n\n");
    });

    test('00757_element_check_00734', () async {
      print("\n********** テスト実行：00757_element_check_00734 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.z_system.z_demo_mode;
      print(mac_info.z_system.z_demo_mode);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.z_system.z_demo_mode = testData1;
      print(mac_info.z_system.z_demo_mode);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.z_system.z_demo_mode == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.z_system.z_demo_mode == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.z_system.z_demo_mode = testData2;
      print(mac_info.z_system.z_demo_mode);
      expect(mac_info.z_system.z_demo_mode == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.z_system.z_demo_mode == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.z_system.z_demo_mode = defalut;
      print(mac_info.z_system.z_demo_mode);
      expect(mac_info.z_system.z_demo_mode == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.z_system.z_demo_mode == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00757_element_check_00734 **********\n\n");
    });

    test('00758_element_check_00735', () async {
      print("\n********** テスト実行：00758_element_check_00735 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.dpoint.client;
      print(mac_info.dpoint.client);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.dpoint.client = testData1s;
      print(mac_info.dpoint.client);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.dpoint.client == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.dpoint.client == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.dpoint.client = testData2s;
      print(mac_info.dpoint.client);
      expect(mac_info.dpoint.client == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.client == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.dpoint.client = defalut;
      print(mac_info.dpoint.client);
      expect(mac_info.dpoint.client == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.client == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00758_element_check_00735 **********\n\n");
    });

    test('00759_element_check_00736', () async {
      print("\n********** テスト実行：00759_element_check_00736 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.dpoint.branch;
      print(mac_info.dpoint.branch);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.dpoint.branch = testData1;
      print(mac_info.dpoint.branch);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.dpoint.branch == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.dpoint.branch == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.dpoint.branch = testData2;
      print(mac_info.dpoint.branch);
      expect(mac_info.dpoint.branch == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.branch == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.dpoint.branch = defalut;
      print(mac_info.dpoint.branch);
      expect(mac_info.dpoint.branch == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.branch == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00759_element_check_00736 **********\n\n");
    });

    test('00760_element_check_00737', () async {
      print("\n********** テスト実行：00760_element_check_00737 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.dpoint.store;
      print(mac_info.dpoint.store);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.dpoint.store = testData1;
      print(mac_info.dpoint.store);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.dpoint.store == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.dpoint.store == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.dpoint.store = testData2;
      print(mac_info.dpoint.store);
      expect(mac_info.dpoint.store == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.store == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.dpoint.store = defalut;
      print(mac_info.dpoint.store);
      expect(mac_info.dpoint.store == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.store == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00760_element_check_00737 **********\n\n");
    });

    test('00761_element_check_00738', () async {
      print("\n********** テスト実行：00761_element_check_00738 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.dpoint.srvdate;
      print(mac_info.dpoint.srvdate);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.dpoint.srvdate = testData1s;
      print(mac_info.dpoint.srvdate);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.dpoint.srvdate == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.dpoint.srvdate == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.dpoint.srvdate = testData2s;
      print(mac_info.dpoint.srvdate);
      expect(mac_info.dpoint.srvdate == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.srvdate == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.dpoint.srvdate = defalut;
      print(mac_info.dpoint.srvdate);
      expect(mac_info.dpoint.srvdate == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.srvdate == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00761_element_check_00738 **********\n\n");
    });

    test('00762_element_check_00739', () async {
      print("\n********** テスト実行：00762_element_check_00739 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.dpoint.backup_macno;
      print(mac_info.dpoint.backup_macno);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.dpoint.backup_macno = testData1;
      print(mac_info.dpoint.backup_macno);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.dpoint.backup_macno == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.dpoint.backup_macno == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.dpoint.backup_macno = testData2;
      print(mac_info.dpoint.backup_macno);
      expect(mac_info.dpoint.backup_macno == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.backup_macno == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.dpoint.backup_macno = defalut;
      print(mac_info.dpoint.backup_macno);
      expect(mac_info.dpoint.backup_macno == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.dpoint.backup_macno == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00762_element_check_00739 **********\n\n");
    });

    test('00763_element_check_00740', () async {
      print("\n********** テスト実行：00763_element_check_00740 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.tslnkweb_sys.mkttl_timeout;
      print(mac_info.tslnkweb_sys.mkttl_timeout);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.tslnkweb_sys.mkttl_timeout = testData1;
      print(mac_info.tslnkweb_sys.mkttl_timeout);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.tslnkweb_sys.mkttl_timeout == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.tslnkweb_sys.mkttl_timeout == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.tslnkweb_sys.mkttl_timeout = testData2;
      print(mac_info.tslnkweb_sys.mkttl_timeout);
      expect(mac_info.tslnkweb_sys.mkttl_timeout == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tslnkweb_sys.mkttl_timeout == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.tslnkweb_sys.mkttl_timeout = defalut;
      print(mac_info.tslnkweb_sys.mkttl_timeout);
      expect(mac_info.tslnkweb_sys.mkttl_timeout == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tslnkweb_sys.mkttl_timeout == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00763_element_check_00740 **********\n\n");
    });

    test('00764_element_check_00741', () async {
      print("\n********** テスト実行：00764_element_check_00741 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.coupon_off.coupon_off_flg;
      print(mac_info.coupon_off.coupon_off_flg);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.coupon_off.coupon_off_flg = testData1;
      print(mac_info.coupon_off.coupon_off_flg);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.coupon_off.coupon_off_flg == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.coupon_off.coupon_off_flg == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.coupon_off.coupon_off_flg = testData2;
      print(mac_info.coupon_off.coupon_off_flg);
      expect(mac_info.coupon_off.coupon_off_flg == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.coupon_off.coupon_off_flg == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.coupon_off.coupon_off_flg = defalut;
      print(mac_info.coupon_off.coupon_off_flg);
      expect(mac_info.coupon_off.coupon_off_flg == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.coupon_off.coupon_off_flg == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00764_element_check_00741 **********\n\n");
    });

    test('00765_element_check_00742', () async {
      print("\n********** テスト実行：00765_element_check_00742 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scalerm.over_plu_tare;
      print(mac_info.scalerm.over_plu_tare);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scalerm.over_plu_tare = testData1;
      print(mac_info.scalerm.over_plu_tare);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scalerm.over_plu_tare == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scalerm.over_plu_tare == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scalerm.over_plu_tare = testData2;
      print(mac_info.scalerm.over_plu_tare);
      expect(mac_info.scalerm.over_plu_tare == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scalerm.over_plu_tare == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scalerm.over_plu_tare = defalut;
      print(mac_info.scalerm.over_plu_tare);
      expect(mac_info.scalerm.over_plu_tare == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scalerm.over_plu_tare == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00765_element_check_00742 **********\n\n");
    });

    test('00766_element_check_00743', () async {
      print("\n********** テスト実行：00766_element_check_00743 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scalerm.tare_auto_clear;
      print(mac_info.scalerm.tare_auto_clear);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scalerm.tare_auto_clear = testData1;
      print(mac_info.scalerm.tare_auto_clear);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scalerm.tare_auto_clear == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scalerm.tare_auto_clear == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scalerm.tare_auto_clear = testData2;
      print(mac_info.scalerm.tare_auto_clear);
      expect(mac_info.scalerm.tare_auto_clear == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scalerm.tare_auto_clear == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scalerm.tare_auto_clear = defalut;
      print(mac_info.scalerm.tare_auto_clear);
      expect(mac_info.scalerm.tare_auto_clear == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scalerm.tare_auto_clear == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00766_element_check_00743 **********\n\n");
    });

    test('00767_element_check_00744', () async {
      print("\n********** テスト実行：00767_element_check_00744 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.scalerm.ad_res_watch;
      print(mac_info.scalerm.ad_res_watch);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.scalerm.ad_res_watch = testData1;
      print(mac_info.scalerm.ad_res_watch);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.scalerm.ad_res_watch == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.scalerm.ad_res_watch == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.scalerm.ad_res_watch = testData2;
      print(mac_info.scalerm.ad_res_watch);
      expect(mac_info.scalerm.ad_res_watch == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scalerm.ad_res_watch == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.scalerm.ad_res_watch = defalut;
      print(mac_info.scalerm.ad_res_watch);
      expect(mac_info.scalerm.ad_res_watch == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.scalerm.ad_res_watch == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00767_element_check_00744 **********\n\n");
    });

    test('00768_element_check_00745', () async {
      print("\n********** テスト実行：00768_element_check_00745 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.tax.realitmsend_add;
      print(mac_info.tax.realitmsend_add);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.tax.realitmsend_add = testData1;
      print(mac_info.tax.realitmsend_add);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.tax.realitmsend_add == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.tax.realitmsend_add == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.tax.realitmsend_add = testData2;
      print(mac_info.tax.realitmsend_add);
      expect(mac_info.tax.realitmsend_add == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tax.realitmsend_add == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.tax.realitmsend_add = defalut;
      print(mac_info.tax.realitmsend_add);
      expect(mac_info.tax.realitmsend_add == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.tax.realitmsend_add == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00768_element_check_00745 **********\n\n");
    });

    test('00769_element_check_00746', () async {
      print("\n********** テスト実行：00769_element_check_00746 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.leavegate.leave_ip01;
      print(mac_info.leavegate.leave_ip01);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.leavegate.leave_ip01 = testData1s;
      print(mac_info.leavegate.leave_ip01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.leavegate.leave_ip01 == testData1s, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.leavegate.leave_ip01 == testData1s, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.leavegate.leave_ip01 = testData2s;
      print(mac_info.leavegate.leave_ip01);
      expect(mac_info.leavegate.leave_ip01 == testData2s, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.leavegate.leave_ip01 == testData2s, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.leavegate.leave_ip01 = defalut;
      print(mac_info.leavegate.leave_ip01);
      expect(mac_info.leavegate.leave_ip01 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.leavegate.leave_ip01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00769_element_check_00746 **********\n\n");
    });

    test('00770_element_check_00747', () async {
      print("\n********** テスト実行：00770_element_check_00747 **********");

      mac_info = Mac_infoJsonFile();
      allPropatyCheckInit(mac_info);

      // ①loadを実行する。
      await mac_info.load();

      // ②指定したプロパティの初期値を取得する。
      final defalut = mac_info.leavegate.leave_port01;
      print(mac_info.leavegate.leave_port01);

      // ②指定したプロパティにテストデータ1を書き込む。
      mac_info.leavegate.leave_port01 = testData1;
      print(mac_info.leavegate.leave_port01);

      // ③指定したプロパティにテストデータを書き込み後に読み込み、一致していることを確認する。
      expect(mac_info.leavegate.leave_port01 == testData1, true);

      // ④saveを実行後、loadを実行する。
      await mac_info.save();
      await mac_info.load();

      // ⑤同じプロパティを読み込み、データに変化がないことを確認する。
      expect(mac_info.leavegate.leave_port01 == testData1, true);

      // ⑥③～⑤を異なるテストデータで実施する。
      mac_info.leavegate.leave_port01 = testData2;
      print(mac_info.leavegate.leave_port01);
      expect(mac_info.leavegate.leave_port01 == testData2, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.leavegate.leave_port01 == testData2, true);

      // ⑦③～⑤を手順①で取得した初期値で実施する。
      mac_info.leavegate.leave_port01 = defalut;
      print(mac_info.leavegate.leave_port01);
      expect(mac_info.leavegate.leave_port01 == defalut, true);
      await mac_info.save();
      await mac_info.load();
      expect(mac_info.leavegate.leave_port01 == defalut, true);

      // ⑧全てのプロパティが初期値になっていることを確認する。
      allPropatyCheck(mac_info, true);

      print("********** テスト終了：00770_element_check_00747 **********\n\n");
    });

  });
}

void allPropatyCheckInit(Mac_infoJsonFile test)
{
  expect(test.system.macno, 0);
  expect(test.system.crpno, 0);
  expect(test.system.shpno, 0);
  expect(test.system.wakeup_delay, 0);
  expect(test.system.tenant, 0);
  expect(test.system.serialno, 0);
  expect(test.system.join_area_cd, 0);
  expect(test.system.join_sub_area_cd, 0);
  expect(test.system.comp_cd, 0);
  expect(test.system.soc_timeout, 0);
  expect(test.system.soc_timback, 0);
  expect(test.system.kill_port, 0);
  expect(test.system.vpn, 0);
  expect(test.system.smart, 0);
  expect(test.system.drugrev_timeout, 0);
  expect(test.system.set_spec_no, 0);
  expect(test.system.reg_cruising, 0);
  expect(test.system.fip_connect, 0);
  expect(test.system.fip_display, 0);
  expect(test.system.ts_ver_mrg, 0);
  expect(test.system.print_screen, 0);
  expect(test.system.twoconnect, 0);
  expect(test.system.custsw_cnct, 0);
  expect(test.system.keytype_desk, 0);
  expect(test.system.keytype_tower, 0);
  expect(test.system.front_self_type, 0);
  expect(test.system.font, 0);
  expect(test.system.stcls_mode, 0);
  expect(test.system.verifone_center_cnct, 0);
  expect(test.system.verifone_one_receipt, 0);
  expect(test.system.device_connect, 0);
  expect(test.mm_system.mm_onoff, 0);
  expect(test.mm_system.mm_type, 0);
  expect(test.mm_system.add_total, 0);
  expect(test.mm_system.sc_cnct, 0);
  expect(test.mm_system.sc_adr, "");
  expect(test.mm_system.sc_port, 0);
  expect(test.mm_system.add_cust, 0);
  expect(test.mm_system.mente_port, 0);
  expect(test.mm_system.ej_txt_format, 0);
  expect(test.mm_system.ej_txt_make, 0);
  expect(test.mm_system.csvsend_cycle, 0);
  expect(test.mm_system.srvlog_save_date, 0);
  expect(test.mm_system.mupd_port, 0);
  expect(test.mm_system.mupd_cycle, 0);
  expect(test.mm_system.sgt_cf_wt, 0);
  expect(test.mm_system.sc_mente_port, 0);
  expect(test.mm_system.sc_port2, 0);
  expect(test.mm_system.sinq_timeout, 0);
  expect(test.mm_system.doc_fsck, 0);
  expect(test.mm_system.duty_dis, 0);
  expect(test.mm_system.clr_total, 0);
  expect(test.mm_system.clr_total_date, 0);
  expect(test.mm_system.reg_lrg_sum, 0);
  expect(test.logging.UnlimitSize, "");
  expect(test.logging.LogSaveDate, 0);
  expect(test.logging.TranSaveDate, 0);
  expect(test.mac_addr.m1, "");
  expect(test.mac_addr.m2, "");
  expect(test.mac_addr.s1, "");
  expect(test.mac_addr.s2, "");
  expect(test.mac_addr.s3, "");
  expect(test.mac_addr.fshare, "");
  expect(test.ip_addr.m1, "");
  expect(test.ip_addr.m2, "");
  expect(test.ip_addr.s1, "");
  expect(test.ip_addr.s2, "");
  expect(test.ip_addr.s3, "");
  expect(test.mac_no.m1, 0);
  expect(test.mac_no.m2, 0);
  expect(test.mac_no.s1, 0);
  expect(test.mac_no.s2, 0);
  expect(test.mac_no.s3, 0);
  expect(test.jnl_bkup.jnl_bkup_knd, 0);
  expect(test.jnl_bkup.jnl_bkup_week, 0);
  expect(test.jnl_bkup.jnl_bkup_date, 0);
  expect(test.data_bkup.data_bkup_knd, 0);
  expect(test.data_bkup.data_bkup_week, 0);
  expect(test.data_bkup.data_bkup_date, 0);
  expect(test.data_bkup.data_bkup_generation, 0);
  expect(test.data_bkup.data_bkup_generation2, 0);
  expect(test.csv_bkup.Bakup, 0);
  expect(test.csv_bkup.data_knd, 0);
  expect(test.csv_bkup.timeout, 0);
  expect(test.csv_bkup.css_filename, 0);
  expect(test.csv_bkup.css_retry_count, 0);
  expect(test.csv_bkup.css_retry_time, 0);
  expect(test.csv_bkup.time_zone, 0);
  expect(test.csv_bkup.name_add, 0);
  expect(test.csv_bkup.lgyoumu, 0);
  expect(test.csv_bkup.ext_digit, 0);
  expect(test.csv_bkup.pasv, 0);
  expect(test.csv_bkup.lgyoumu_full, 0);
  expect(test.csv_bkup.netdoa_mbr, 0);
  expect(test.csv_bkup.css_fixed_length, 0);
  expect(test.csv_bkup.css_date_file, 0);
  expect(test.csv_bkup.netdoa_comp_ej, 0);
  expect(test.csv_bkup.css_usb_bkup, 0);
  expect(test.csv_bkup.css_ment_tran, 0);
  expect(test.csv_bkup.css_proxy_type_add, 0);
  expect(test.csv_bkup.ping_check, 0);
  expect(test.csv_bkup.text_resend, 0);
  expect(test.csv_bkup.css_igyoumu_make, 0);
  expect(test.csv_bkup.netdoa_opetime_send, 0);
  expect(test.csv_bkup.nttb_item_cd_typ, 0);
  expect(test.csv_term.reg_mly_deal, 0);
  expect(test.csv_term.regmlydeal_week, 0);
  expect(test.csv_term.regmlydeal_day, 0);
  expect(test.csv_term.reg_mly_mdl, 0);
  expect(test.csv_term.regmlymdl_week, 0);
  expect(test.csv_term.regmlymdl_day, 0);
  expect(test.csv_term.reg_mly_sml, 0);
  expect(test.csv_term.regmlysml_week, 0);
  expect(test.csv_term.regmlysml_day, 0);
  expect(test.csv_term.reg_mly_plu, 0);
  expect(test.csv_term.regmlyplu_week, 0);
  expect(test.csv_term.regmlyplu_day, 0);
  expect(test.csv_term.reg_mly_cat, 0);
  expect(test.csv_term.regmlycat_week, 0);
  expect(test.csv_term.regmlycat_day, 0);
  expect(test.csv_term.reg_sch_brgn, 0);
  expect(test.csv_term.regschbrgn_week, 0);
  expect(test.csv_term.regschbrgn_day, 0);
  expect(test.csv_term.reg_sch_mach, 0);
  expect(test.csv_term.regschmach_week, 0);
  expect(test.csv_term.regschmach_day, 0);
  expect(test.csv_term.reg_mly_cust, 0);
  expect(test.csv_term.regmlycust_week, 0);
  expect(test.csv_term.regmlycust_day, 0);
  expect(test.csv_term.reg_mly_zone, 0);
  expect(test.csv_term.regmlyzone_week, 0);
  expect(test.csv_term.regmlyzone_day, 0);
  expect(test.csv_term.reg_mly_svs, 0);
  expect(test.csv_term.regmlysvs_week, 0);
  expect(test.csv_term.regmlysvs_day, 0);
  expect(test.csv_term.reg_mly_fspplu, 0);
  expect(test.csv_term.regmlyfspplu_week, 0);
  expect(test.csv_term.regmlyfspplu_day, 0);
  expect(test.csv_term.reg_mly_fspsml, 0);
  expect(test.csv_term.regmlyfspsml_week, 0);
  expect(test.csv_term.regmlyfspsml_day, 0);
  expect(test.csv_term.reg_mly_fspmdl, 0);
  expect(test.csv_term.regmlyfspmdl_week, 0);
  expect(test.csv_term.regmlyfspmdl_day, 0);
  expect(test.csv_term.reg_mly_fspttl, 0);
  expect(test.csv_term.regmlyfspttl_week, 0);
  expect(test.csv_term.regmlyfspttl_day, 0);
  expect(test.csv_term.reg_mly_lrg, 0);
  expect(test.csv_term.regmlylrg_week, 0);
  expect(test.csv_term.regmlylrg_day, 0);
  expect(test.csv_prg.mdl_cls_mst, 0);
  expect(test.csv_prg.mdlcls_week, 0);
  expect(test.csv_prg.mdlcls_day, 0);
  expect(test.csv_prg.sml_cls_mst, 0);
  expect(test.csv_prg.smlcls_week, 0);
  expect(test.csv_prg.smlcls_day, 0);
  expect(test.csv_prg.plu_mst, 0);
  expect(test.csv_prg.plumst_week, 0);
  expect(test.csv_prg.plumst_day, 0);
  expect(test.csv_prg.cat_dsc_mst, 0);
  expect(test.csv_prg.catdsc_week, 0);
  expect(test.csv_prg.catdsc_day, 0);
  expect(test.csv_prg.brgn_mst, 0);
  expect(test.csv_prg.brgnmst_week, 0);
  expect(test.csv_prg.brgnmst_day, 0);
  expect(test.csv_prg.bdl_mst, 0);
  expect(test.csv_prg.bdlmst_week, 0);
  expect(test.csv_prg.bdlmst_day, 0);
  expect(test.csv_prg.stm_mst, 0);
  expect(test.csv_prg.stmmst_week, 0);
  expect(test.csv_prg.stmmst_day, 0);
  expect(test.csv_prg.staff_mst, 0);
  expect(test.csv_prg.staffmst_week, 0);
  expect(test.csv_prg.staffmst_day, 0);
  expect(test.csv_prg.cust_mst, 0);
  expect(test.csv_prg.custmst_week, 0);
  expect(test.csv_prg.custmst_day, 0);
  expect(test.csv_prg.zone_mst, 0);
  expect(test.csv_prg.zonemst_week, 0);
  expect(test.csv_prg.zonemst_day, 0);
  expect(test.csv_prg.svs_mst, 0);
  expect(test.csv_prg.svsmst_week, 0);
  expect(test.csv_prg.svsmst_day, 0);
  expect(test.csv_prg.fspsch_mst, 0);
  expect(test.csv_prg.fspschmst_week, 0);
  expect(test.csv_prg.fspschmst_day, 0);
  expect(test.csv_prg.fspplan_plu, 0);
  expect(test.csv_prg.fspplanplu_week, 0);
  expect(test.csv_prg.fspplanplu_day, 0);
  expect(test.csv_prg.fspplan_mdl, 0);
  expect(test.csv_prg.fspplanmdl_week, 0);
  expect(test.csv_prg.fspplanmdl_day, 0);
  expect(test.csv_prg.fspplan_sml, 0);
  expect(test.csv_prg.fspplansml_week, 0);
  expect(test.csv_prg.fspplansml_day, 0);
  expect(test.csv_prg.dly_trm, 0);
  expect(test.csv_prg.dlytrm_week, 0);
  expect(test.csv_prg.dlytrm_day, 0);
  expect(test.csv_prg.dly_kopt, 0);
  expect(test.csv_prg.dlykopt_week, 0);
  expect(test.csv_prg.dlykopt_day, 0);
  expect(test.csv_prg.dly_recmsg, 0);
  expect(test.csv_prg.dlyrecmsg_week, 0);
  expect(test.csv_prg.dlyrecmsg_day, 0);
  expect(test.csv_prg.dly_preset, 0);
  expect(test.csv_prg.dlypreset_week, 0);
  expect(test.csv_prg.dlypreset_day, 0);
  expect(test.csv_prg.dly_batrepo, 0);
  expect(test.csv_prg.dlybatrepo_week, 0);
  expect(test.csv_prg.dlybatrepo_day, 0);
  expect(test.csv_prg.dly_img, 0);
  expect(test.csv_prg.dlyimg_week, 0);
  expect(test.csv_prg.dlyimg_day, 0);
  expect(test.csv_prg.tax_mst, 0);
  expect(test.csv_prg.tax_week, 0);
  expect(test.csv_prg.tax_day, 0);
  expect(test.csv_prg.ctrl_mst, 0);
  expect(test.csv_prg.ctrl_week, 0);
  expect(test.csv_prg.ctrl_day, 0);
  expect(test.csv_prg.instre_mst, 0);
  expect(test.csv_prg.instre_week, 0);
  expect(test.csv_prg.instre_day, 0);
  expect(test.csv_prg.mdlsch_mst, 0);
  expect(test.csv_prg.mdlsch_week, 0);
  expect(test.csv_prg.mdlsch_day, 0);
  expect(test.csv_prg.smlsch_mst, 0);
  expect(test.csv_prg.smlsch_week, 0);
  expect(test.csv_prg.smlsch_day, 0);
  expect(test.csv_prg.plusch_mst, 0);
  expect(test.csv_prg.plusch_week, 0);
  expect(test.csv_prg.plusch_day, 0);
  expect(test.csv_prg.batprcchg_mst, 0);
  expect(test.csv_prg.batprcchg_week, 0);
  expect(test.csv_prg.batprcchg_day, 0);
  expect(test.csv_prg.fipsch_mst, 0);
  expect(test.csv_prg.fipsch_week, 0);
  expect(test.csv_prg.fipsch_day, 0);
  expect(test.csv_prg.anvkind_mst, 0);
  expect(test.csv_prg.anvkind_week, 0);
  expect(test.csv_prg.anvkind_day, 0);
  expect(test.csv_prg.decrbt_mst, 0);
  expect(test.csv_prg.decrbt_week, 0);
  expect(test.csv_prg.decrbt_day, 0);
  expect(test.csv_prg.zipcode_mst, 0);
  expect(test.csv_prg.zipcode_week, 0);
  expect(test.csv_prg.zipcode_day, 0);
  expect(test.csv_prg.maker_mst, 0);
  expect(test.csv_prg.maker_week, 0);
  expect(test.csv_prg.maker_day, 0);
  expect(test.csv_prg.mcard_mst, 0);
  expect(test.csv_prg.mcard_week, 0);
  expect(test.csv_prg.mcard_day, 0);
  expect(test.csv_prg.reason_mst, 0);
  expect(test.csv_prg.reason_week, 0);
  expect(test.csv_prg.reason_day, 0);
  expect(test.csv_dly.dly_deal, 0);
  expect(test.csv_dly.dlydeal_week, 0);
  expect(test.csv_dly.dlydeal_day, 0);
  expect(test.csv_dly.dly_mdl, 0);
  expect(test.csv_dly.dlymdl_week, 0);
  expect(test.csv_dly.dlymdl_day, 0);
  expect(test.csv_dly.dly_sml, 0);
  expect(test.csv_dly.dlysml_week, 0);
  expect(test.csv_dly.dlysml_day, 0);
  expect(test.csv_dly.dly_plu, 0);
  expect(test.csv_dly.dlyplu_week, 0);
  expect(test.csv_dly.dlyplu_day, 0);
  expect(test.csv_dly.dly_cat, 0);
  expect(test.csv_dly.dlycat_week, 0);
  expect(test.csv_dly.dlycatl_day, 0);
  expect(test.csv_dly.dly_brgn, 0);
  expect(test.csv_dly.dlybrgn_week, 0);
  expect(test.csv_dly.dlybrgn_day, 0);
  expect(test.csv_dly.dly_mach, 0);
  expect(test.csv_dly.dlymach_week, 0);
  expect(test.csv_dly.dlymach_day, 0);
  expect(test.csv_dly.dly_crdt, 0);
  expect(test.csv_dly.dlycrdt_week, 0);
  expect(test.csv_dly.dlycrdt_day, 0);
  expect(test.csv_dly.dly_tmp, 0);
  expect(test.csv_dly.dlytmp_week, 0);
  expect(test.csv_dly.dlytmp_day, 0);
  expect(test.csv_dly.dly_prcchg, 0);
  expect(test.csv_dly.dlyprcchgl_week, 0);
  expect(test.csv_dly.dlyprcchg_day, 0);
  expect(test.csv_dly.dly_itemlog, 0);
  expect(test.csv_dly.dlyitemlog_week, 0);
  expect(test.csv_dly.dlyitmlog_day, 0);
  expect(test.csv_dly.dly_bdllog, 0);
  expect(test.csv_dly.dlybdllog_week, 0);
  expect(test.csv_dly.dlybdllog_day, 0);
  expect(test.csv_dly.dly_stmlog, 0);
  expect(test.csv_dly.dlystmlog_week, 0);
  expect(test.csv_dly.dlystmlog_day, 0);
  expect(test.csv_dly.dly_ttllog, 0);
  expect(test.csv_dly.dlyttllog_week, 0);
  expect(test.csv_dly.dlyttllog_day, 0);
  expect(test.csv_dly.dly_ejlog, 0);
  expect(test.csv_dly.dlyejlog_week, 0);
  expect(test.csv_dly.dlyejlog_day, 0);
  expect(test.csv_dly.dly_cust, 0);
  expect(test.csv_dly.dlycust_week, 0);
  expect(test.csv_dly.dlycust_day, 0);
  expect(test.csv_dly.dly_zone, 0);
  expect(test.csv_dly.dlyzone_week, 0);
  expect(test.csv_dly.dlyzone_day, 0);
  expect(test.csv_dly.dly_svs, 0);
  expect(test.csv_dly.dlysvs_week, 0);
  expect(test.csv_dly.dlysvs_day, 0);
  expect(test.csv_dly.dly_fspplu, 0);
  expect(test.csv_dly.dlyfspplu_week, 0);
  expect(test.csv_dly.dlyfspplu_day, 0);
  expect(test.csv_dly.dly_fspsml, 0);
  expect(test.csv_dly.dlyfspsml_week, 0);
  expect(test.csv_dly.dlyfspsml_day, 0);
  expect(test.csv_dly.dly_fspmdl, 0);
  expect(test.csv_dly.dlyfspmdl_week, 0);
  expect(test.csv_dly.dlyfspmdl_day, 0);
  expect(test.csv_dly.dly_fspttl, 0);
  expect(test.csv_dly.dlyfspttl_week, 0);
  expect(test.csv_dly.dlyfspttl_day, 0);
  expect(test.csv_dly.histlog, 0);
  expect(test.csv_dly.histlog_week, 0);
  expect(test.csv_dly.histlog_day, 0);
  expect(test.csv_dly.duty_log, 0);
  expect(test.csv_dly.dutylog_week, 0);
  expect(test.csv_dly.dutylog_day, 0);
  expect(test.csv_dly.sims_log, 0);
  expect(test.csv_dly.simslog_week, 0);
  expect(test.csv_dly.simslog_day, 0);
  expect(test.csv_dly.reserv_log, 0);
  expect(test.csv_dly.reservlog_week, 0);
  expect(test.csv_dly.reservlog_day, 0);
  expect(test.csv_dly.z_receipt, 0);
  expect(test.csv_dly.zreceipt_week, 0);
  expect(test.csv_dly.zreceipt_day, 0);
  expect(test.csv_dly.dly_lrg, 0);
  expect(test.csv_dly.dlylrg_week, 0);
  expect(test.csv_dly.dlylrg_day, 0);
  expect(test.csv_dly.drawchk_cash_log, 0);
  expect(test.csv_dly.drawchk_cash_log_week, 0);
  expect(test.csv_dly.drawchk_cash_log_day, 0);
  expect(test.csv_tpr8100.dly_plu_tpr8100, 0);
  expect(test.csv_tpr8100.dly_deal_tpr8100, 0);
  expect(test.csv_tpr8100.reg_dly_mly_mdl_tpr8100, 0);
  expect(test.csv_tpr8100.ibaraki_tpr8100, 0);
  expect(test.sch_delete.bgnsch_del_date, 0);
  expect(test.sch_delete.mmsch_del_date, 0);
  expect(test.sch_delete.smsch_del_date, 0);
  expect(test.sch_delete.clssch_del_date, 0);
  expect(test.sch_delete.plusch_del_date, 0);
  expect(test.sch_delete.ej_txt_del_date, 0);
  expect(test.sch_delete.csv_txt_del_date, 0);
  expect(test.sch_delete.schmsg_del_date, 0);
  expect(test.sch_delete.fipsch_del_date, 0);
  expect(test.sch_delete.reserv_del_date, 0);
  expect(test.sch_delete.custbkup_del_date, 0);
  expect(test.internal_flg.mode, 0);
  expect(test.internal_flg.auto_mode, 0);
  expect(test.internal_flg.rct_onoff, 0);
  expect(test.internal_flg.acr_onoff, 0);
  expect(test.internal_flg.acr_cnct, 0);
  expect(test.internal_flg.acr_errprn, 0);
  expect(test.internal_flg.card_cnct, 0);
  expect(test.internal_flg.acb_deccin, 0);
  expect(test.internal_flg.rwt_cnct, 0);
  expect(test.internal_flg.scale_cnct, 0);
  expect(test.internal_flg.acb_select, 0);
  expect(test.internal_flg.iis21_cnct, 0);
  expect(test.internal_flg.mobile_cnct, 0);
  expect(test.internal_flg.stpr_cnct, 0);
  expect(test.internal_flg.netwlpr_cnct, 0);
  expect(test.internal_flg.poppy_cnct, 0);
  expect(test.internal_flg.tag_cnct, 0);
  expect(test.internal_flg.auto_deccin, 0);
  expect(test.internal_flg.s2pr_cnct, 0);
  expect(test.internal_flg.pwrctrl_cnct, 0);
  expect(test.internal_flg.catalinapr_cnct, 0);
  expect(test.internal_flg.dish_cnct, 0);
  expect(test.internal_flg.custrealsvr_cnct, 0);
  expect(test.internal_flg.aivoice_cnct, 0);
  expect(test.internal_flg.gcat_cnct, 0);
  expect(test.internal_flg.suica_cnct, 0);
  expect(test.internal_flg.mp1_cnct, 0);
  expect(test.internal_flg.realitmsend_cnct, 0);
  expect(test.internal_flg.gramx_cnct, 0);
  expect(test.internal_flg.rfid_cnct, 0);
  expect(test.internal_flg.soft_keyb, 0);
  expect(test.internal_flg.keyb, 0);
  expect(test.internal_flg.msg_flg, 0);
  expect(test.internal_flg.multi_cnct, 0);
  expect(test.internal_flg.jrem_cnct, 0);
  expect(test.internal_flg.colordsp_cnct, 0);
  expect(test.internal_flg.usbcam_cnct, 0);
  expect(test.internal_flg.masr_cnct, 0);
  expect(test.internal_flg.brainfl_cnct, 0);
  expect(test.internal_flg.cat_jmups_twin_cnct, 0);
  expect(test.internal_flg.sqrc_ticket_cnct, 0);
  expect(test.internal_flg.custrealsvr_pqs_new_send, 0);
  expect(test.internal_flg.sqrc_drlabel_no, 0);
  expect(test.internal_flg.iccard_cnct, 0);
  expect(test.internal_flg.ecs_mode, 0);
  expect(test.internal_flg.colordsp_size, 0);
  expect(test.internal_flg.usbcam_direction, 0);
  expect(test.internal_flg.usbcam_disp, 0);
  expect(test.internal_flg.apbf_cnct, 0);
  expect(test.internal_flg.usbcam_disp_size, 0);
  expect(test.internal_flg.exc_cnct, 0);
  expect(test.internal_flg.hitouch_cnct, 0);
  expect(test.internal_flg.snresult, 0);
  expect(test.internal_flg.ami_cnct, 0);
  expect(test.internal_flg.hs_scale_cnct, 0);
  expect(test.cat_timer.cat_stat_timer, 0);
  expect(test.cat_timer.cat_recv_timer, 0);
  expect(test.printer.rct_spd, 0);
  expect(test.printer.rct_dns, 0);
  expect(test.printer.s2pr_topfeed, 0);
  expect(test.printer.s2pr_lineno, 0);
  expect(test.printer.rct_lf_plus, 0);
  expect(test.printer.rct_tb_cut, 0);
  expect(test.printer.rct_sp_width, 0);
  expect(test.printer.rct_cut_type, 0);
  expect(test.printer.rct_cut_type2, 0);
  expect(test.printer.err_rpr_timer, 0);
  expect(test.printer.nearend_check, 0);
  expect(test.printer.kitchen_prt_power, 0);
  expect(test.printer.zhq_cpn_rct_share, 0);
  expect(test.printer.nearend_note, 0);
  expect(test.printer.nearend_count, 0);
  expect(test.printer.hprt_fwver, 0);
  expect(test.printer_cntl.recipt_wid, 0);
  expect(test.printer_cntl.prnt_length, 0);
  expect(test.printer_cntl.start_speed, 0);
  expect(test.printer_cntl.top_speed, 0);
  expect(test.printer_cntl.top_sp_step, 0);
  expect(test.printer_cntl.start_density, 0);
  expect(test.printer_cntl.top_density, 0);
  expect(test.printer_cntl.top_den_step, 0);
  expect(test.printer_cntl.prt_position, 0);
  expect(test.printer_cntl.head_wid, 0);
  expect(test.printer_cntl.prt_start_size, 0);
  expect(test.printer_cntl.err_mask, 0);
  expect(test.printer_cntl.x_offset, 0);
  expect(test.printer_cntl.recipt_wid80, 0);
  expect(test.printer_def.rct_tspd_0, 0);
  expect(test.printer_def.rct_tspd_1, 0);
  expect(test.printer_def.rct_tspd_2, 0);
  expect(test.printer_def.rct_tspd_3, 0);
  expect(test.printer_def.rct_lspeed_dens0, 0);
  expect(test.printer_def.rct_lspeed_dens1, 0);
  expect(test.printer_def.rct_lspeed_dens2, 0);
  expect(test.printer_def.rct_lspeed_dens3, 0);
  expect(test.printer_def.rct_mspeed_dens0, 0);
  expect(test.printer_def.rct_mspeed_dens1, 0);
  expect(test.printer_def.rct_mspeed_dens2, 0);
  expect(test.printer_def.rct_mspeed_dens3, 0);
  expect(test.printer_def.rct_hmspeed_dens0, 0);
  expect(test.printer_def.rct_hmspeed_dens1, 0);
  expect(test.printer_def.rct_hmspeed_dens2, 0);
  expect(test.printer_def.rct_hmspeed_dens3, 0);
  expect(test.printer_def.rct_hspeed_dens0, 0);
  expect(test.printer_def.rct_hspeed_dens1, 0);
  expect(test.printer_def.rct_hspeed_dens2, 0);
  expect(test.printer_def.rct_hspeed_dens3, 0);
  expect(test.clerksave.spoolend, 0);
  expect(test.printer_font.fontname_j, "");
  expect(test.printer_font.fontname_e, "");
  expect(test.ups.pfcheck, 0);
  expect(test.ups.pftime, 0);
  expect(test.ups.pfretry, 0);
  expect(test.ups.pftime2, 0);
  expect(test.ups.pfretry2, 0);
  expect(test.ups.pfmaxwait, 0);
  expect(test.ups.port, "");
  expect(test.ups.entry, "");
  expect(test.ups.entry2, "");
  expect(test.ups.port2, "");
  expect(test.doc.update, 0);
  expect(test.mem_size_db5_M.M1, 0);
  expect(test.mem_size_db5_M.M5, 0);
  expect(test.mem_size_db5_M.M10, 0);
  expect(test.mem_size_db5_S.S1, 0);
  expect(test.mem_size_db5_S.S5, 0);
  expect(test.mem_size_db5_S.S10, 0);
  expect(test.mem_size_db6_M.M1, 0);
  expect(test.mem_size_db6_M.M5, 0);
  expect(test.mem_size_db6_M.M10, 0);
  expect(test.mem_size_db6_M.M15, 0);
  expect(test.mem_size_db6_S.S1, 0);
  expect(test.mem_size_db6_S.S5, 0);
  expect(test.mem_size_db6_S.S10, 0);
  expect(test.mem_size_db6_S.S15, 0);
  expect(test.tag_poppy.poppy_print, 0);
  expect(test.tag_poppy.tag_print, 0);
  expect(test.FJ_FTP.store_chd, 0);
  expect(test.select_self.self_mode, 0);
  expect(test.select_self.self_mac_mode, 0);
  expect(test.select_self.assist_port, 0);
  expect(test.select_self.reg_cruising_drct, 0);
  expect(test.select_self.self_chart_output, 0);
  expect(test.select_self.select_dspmode, 0);
  expect(test.select_self.qs_auto_reboot, 0);
  expect(test.select_self.self_regbag1_plucd, 0);
  expect(test.select_self.self_regbag2_plucd, 0);
  expect(test.select_self.self_regbag3_plucd, 0);
  expect(test.select_self.self_separate_in_scl, 0);
  expect(test.select_self.qc_mode, 0);
  expect(test.select_self.selfmactyp, 0);
  expect(test.select_self.self_scan_typ, 0);
  expect(test.select_self.self_stre_typ, 0);
  expect(test.select_self.hs_start_mode, 0);
  expect(test.select_self.psensor_scan_swing, 0);
  expect(test.select_self.psensor_swing_notice, 0);
  expect(test.select_self.psensor_scan_slow, 0);
  expect(test.select_self.psensor_slow_notice, 0);
  expect(test.select_self.psensor_scan_slowtime, 0);
  expect(test.select_self.psensor_scan_away, 0);
  expect(test.select_self.psensor_away_notice, 0);
  expect(test.select_self.psensor_scan_awaytime, 0);
  expect(test.select_self.psensor_disptime, 0);
  expect(test.select_self.psensor_notice, 0);
  expect(test.select_self.kpi_hs_mode, 0);
  expect(test.select_self.psensor_swing_cnt, 0);
  expect(test.select_self.psensor_scan_slow_sound, 0);
  expect(test.select_self.psensor_away_sound, 0);
  expect(test.select_self.leave_qr_mode, 0);
  expect(test.select_self.aibox_select_mode, 0);
  expect(test.select_self.psensor_position, 0);
  expect(test.select_self.leave_qr_prn_ptn, 0);
  expect(test.prime_fip.prime_fip, 0);
  expect(test.Edy_Connection.edy_retry_timeout, 0);
  expect(test.Edy_Connection.edy_connect_timeout, 0);
  expect(test.timeserver.timeserver, 0);
  expect(test.fcon_version.scpu1, "");
  expect(test.fcon_version.scpu2, "");
  expect(test.fcon_version.printer, "");
  expect(test.fcon_version.printer2, "");
  expect(test.MC_Connection.mc_tenant_cd, 0);
  expect(test.deccin_bkup.bkup_auto_deccin, 0);
  expect(test.deccin_bkup.bkup_acb_deccin, 0);
  expect(test.deccin_bkup.bkup_acr_onoff, 0);
  expect(test.deccin_bkup.bkup_acb_onoff, 0);
  expect(test.identifies.identifies_cd, "");
  expect(test.identifies.identifies_cd1, "");
  expect(test.identifies.identifies_cd2, "");
  expect(test.identifies.identifies_cd3, "");
  expect(test.identifies.identifies_cd4, "");
  expect(test.identifies.identifies_cd5, "");
  expect(test.identifies.identifies_cd6, "");
  expect(test.identifies.identifies_cd7, "");
  expect(test.identifies.identifies_cd8, "");
  expect(test.acx_flg.acr50_ssw14_0, 0);
  expect(test.acx_flg.acr50_ssw14_1_2, 0);
  expect(test.acx_flg.acr50_ssw14_3_4, 0);
  expect(test.acx_flg.acr50_ssw14_5, 0);
  expect(test.acx_flg.acr50_ssw14_7, 0);
  expect(test.acx_flg.pick_end, 0);
  expect(test.acx_flg.acxreal_system, 0);
  expect(test.acx_flg.ecs_pick_positn10000, 0);
  expect(test.acx_flg.ecs_pick_positn5000, 0);
  expect(test.acx_flg.ecs_pick_positn2000, 0);
  expect(test.acx_flg.ecs_pick_positn1000, 0);
  expect(test.acx_flg.acx_pick_data10000, 0);
  expect(test.acx_flg.acx_pick_data5000, 0);
  expect(test.acx_flg.acx_pick_data2000, 0);
  expect(test.acx_flg.acx_pick_data1000, 0);
  expect(test.acx_flg.acx_pick_data500, 0);
  expect(test.acx_flg.acx_pick_data100, 0);
  expect(test.acx_flg.acx_pick_data50, 0);
  expect(test.acx_flg.acx_pick_data10, 0);
  expect(test.acx_flg.acx_pick_data5, 0);
  expect(test.acx_flg.acx_pick_data1, 0);
  expect(test.acx_flg.ecs_recalc_reject, 0);
  expect(test.acx_flg.sst1_error_disp, 0);
  expect(test.acx_flg.sst1_cin_retry, 0);
  expect(test.acx_flg.acx_resv_min5000, 0);
  expect(test.acx_flg.acx_resv_min2000, 0);
  expect(test.acx_flg.acx_resv_min1000, 0);
  expect(test.acx_flg.acx_resv_min500, 0);
  expect(test.acx_flg.acx_resv_min100, 0);
  expect(test.acx_flg.acx_resv_min50, 0);
  expect(test.acx_flg.acx_resv_min10, 0);
  expect(test.acx_flg.acx_resv_min5, 0);
  expect(test.acx_flg.acx_resv_min1, 0);
  expect(test.acx_flg.acb50_ssw13_0, 0);
  expect(test.acx_flg.acb50_ssw13_1_2, 0);
  expect(test.acx_flg.acb50_ssw13_3_4, 0);
  expect(test.acx_flg.acb50_ssw13_5, 0);
  expect(test.acx_flg.acb50_ssw13_6, 0);
  expect(test.acx_flg.chgdrw_inout_tran, 0);
  expect(test.acx_flg.chgdrw_loan_tran, 0);
  expect(test.acx_flg.acb50_ssw15_0, 0);
  expect(test.acx_flg.acb50_ssw15_1, 0);
  expect(test.acx_flg.acb50_ssw15_2, 0);
  expect(test.acx_flg.acb50_ssw15_3, 0);
  expect(test.acx_flg.acb50_ssw24_0, 0);
  expect(test.acx_flg.ecs_gpd_1_1, 0);
  expect(test.acx_flg.ecs_gpd_1_2, 0);
  expect(test.acx_flg.ecs_gpd_2_1, 0);
  expect(test.acx_flg.ecs_gpd_2_2, 0);
  expect(test.acx_flg.ecs_gpd_3_1, 0);
  expect(test.acx_flg.ecs_gpd_3_2, 0);
  expect(test.acx_flg.ecs_gpd_4_1, 0);
  expect(test.acx_flg.ecs_gpd_5_1, 0);
  expect(test.acx_flg.ecs_gpd_5_2, 0);
  expect(test.acx_flg.ecs_gpd_5_3, 0);
  expect(test.acx_flg.chgdrw_in_tran_cd, 0);
  expect(test.acx_flg.chgdrw_out_tran_cd, 0);
  expect(test.acx_flg.acx_nearfull_diff, 0);
  expect(test.acx_flg.ecs_pick_flg, "");
  expect(test.acx_flg.acx_pick_cbillkind, "");
  expect(test.acx_flg.acb50_ssw50_0_1, 0);
  expect(test.acx_flg.acb50_ssw50_2, 0);
  expect(test.acx_flg.acb50_ssw50_3, 0);
  expect(test.acx_flg.acb50_ssw50_4_5, 0);
  expect(test.acx_flg.acb50_ssw50_6_7, 0);
  expect(test.acx_flg.acb_control_mode, 0);
  expect(test.acx_flg.acx_resv_drw, 0);
  expect(test.acx_flg.acx_resv_drw500, 0);
  expect(test.acx_flg.acx_resv_drw100, 0);
  expect(test.acx_flg.acx_resv_drw50, 0);
  expect(test.acx_flg.acx_resv_drw10, 0);
  expect(test.acx_flg.acx_resv_drw5, 0);
  expect(test.acx_flg.acx_resv_drw1, 0);
  expect(test.acx_flg.acx_auto_stop_sec, 0);
  expect(test.acx_flg.ecs_gp2_3_2, 0);
  expect(test.acx_flg.ecs_gp2_4_1, 0);
  expect(test.acx_flg.ecs_gp2_4_2, 0);
  expect(test.acx_flg.ecs_gp2_5_1, 0);
  expect(test.acx_flg.ecs_gp7_1_1, 0);
  expect(test.acx_flg.ecs_gp7_1_2, 0);
  expect(test.acx_flg.ecs_gp7_1_3, 0);
  expect(test.acx_flg.ecs_gp7_2_1, 0);
  expect(test.acx_flg.ecs_gp7_2_2, 0);
  expect(test.acx_flg.ecs_gp7_3_1, 0);
  expect(test.acx_flg.ecs_gp7_4_1, 0);
  expect(test.acx_flg.ecs_gp7_5_1, 0);
  expect(test.acx_flg.ecs_gp7_5_2, 0);
  expect(test.acx_flg.ecs_gpb_1_1, 0);
  expect(test.acx_flg.ecs_gpb_2_1, 0);
  expect(test.acx_flg.ecs_gpb_2_2, 0);
  expect(test.acx_flg.ecs_gpb_2_3, 0);
  expect(test.acx_flg.ecs_gpb_3_1, 0);
  expect(test.acx_flg.ecs_gpb_3_2, 0);
  expect(test.acx_flg.ecs_gpb_4_2, 0);
  expect(test.acx_flg.ecs_gpb_4_3, 0);
  expect(test.acx_flg.ecs_gpb_5_1, 0);
  expect(test.acx_flg.ecs_gpb_5_2, 0);
  expect(test.acx_flg.ecs_gpc_3_1_fwdl, 0);
  expect(test.acx_flg.ecs_overflowpick_use, 0);
  expect(test.acx_timer.acx_enq_interval, 0);
  expect(test.acx_timer.acx_enq_timeout, 0);
  expect(test.acx_timer.acxreal_interval, 0);
  expect(test.eventinput.event_cd, "");
  expect(test.eventinput.logo_cd, "");
  expect(test.eventinput.event_hall, 0);
  expect(test.acx_stop_info.acx_stop_5000, 0);
  expect(test.acx_stop_info.acx_stop_2000, 0);
  expect(test.acx_stop_info.acx_stop_1000, 0);
  expect(test.acx_stop_info.acx_stop_500, 0);
  expect(test.acx_stop_info.acx_stop_100, 0);
  expect(test.acx_stop_info.acx_stop_50, 0);
  expect(test.acx_stop_info.acx_stop_10, 0);
  expect(test.acx_stop_info.acx_stop_5, 0);
  expect(test.acx_stop_info.acx_stop_1, 0);
  expect(test.scanner.scn_cmd_desktop, 0);
  expect(test.scanner.scn_cmd_tower, 0);
  expect(test.scanner.scn_cmd_add, 0);
  expect(test.scanner.scan_dp_snd_desktop, 0);
  expect(test.scanner.scan_dp_snd_tower, 0);
  expect(test.scanner.scan_dp_snd_add, 0);
  expect(test.scanner.scan_happyself_2nd, 0);
  expect(test.scanner.scan_display_mode, 0);
  expect(test.scanner.scan_barcode_payment, 0);
  expect(test.scanner.beep_times, 0);
  expect(test.scanner.beep_interval, 0);
  expect(test.CT3100_Connection.ct3100_waite_time, 0);
  expect(test.CT3100_Connection.ct3100_point_type, 0);
  expect(test.upd_chk.upd_err_rbt, 0);
  expect(test.upd_chk.timeout, 0);
  expect(test.drugrev.name, "");
  expect(test.center_server.hist_cycle, 0);
  expect(test.center_server.stcls_send, 0);
  expect(test.center_server.bult_send, 0);
  expect(test.center_server.tslnkweb_timeout, 0);
  expect(test.center_server.pmod_dspmode, 0);
  expect(test.stopn_retry.retry_cnt, 0);
  expect(test.stopn_retry.retry_inter, 0);
  expect(test.stopn_retry.cls_downset, 0);
  expect(test.stopn_retry.cls_downtime, "");
  expect(test.select_batrepo.batch_no1, 0);
  expect(test.select_batrepo.batch_no2, 0);
  expect(test.select_batrepo.batch_no3, 0);
  expect(test.select_batrepo.batch_no4, 0);
  expect(test.select_batrepo.batch_no5, 0);
  expect(test.select_batrepo.batch_no6, 0);
  expect(test.select_batrepo.batch_no7, 0);
  expect(test.select_batrepo.batch_no8, 0);
  expect(test.select_batrepo.batch_no9, 0);
  expect(test.ftp.rpm_timeout, 0);
  expect(test.ftp.rpm_retry, 0);
  expect(test.ftp.landisk_timeout, 0);
  expect(test.ftp.landisk_retry, 0);
  expect(test.ftp.mcput_timeout, 0);
  expect(test.ftp.mcput_retry, 0);
  expect(test.ftp.mcget_timeout, 0);
  expect(test.ftp.mcget_retry, 0);
  expect(test.ftp.void_timeout, 0);
  expect(test.ftp.void_retry, 0);
  expect(test.ftp.hqput_timeout, 0);
  expect(test.ftp.hqput_retry, 0);
  expect(test.ftp.offset_speed, 0);
  expect(test.ftp.error_timeout, 0);
  expect(test.ftp.offset_timeout, 0);
  expect(test.ftp.default_timeout, 0);
  expect(test.movsend.avispace, 0);
  expect(test.movsend.send_speed2, 0);
  expect(test.movsend.extend_time, 0);
  expect(test.movsend.taking_start, 0);
  expect(test.movsend.usbcam_send, 0);
  expect(test.disk_free.limit_size, 0);
  expect(test.disk_free.stat, 0);
  expect(test.other.ut1_wait, 0);
  expect(test.other.multi_vega_env, 0);
  expect(test.other.quo_useup_flg, 0);
  expect(test.other.jpqr_err_nonprint, 0);
  expect(test.sqrc_sys.sqrc_back_timer, 0);
  expect(test.histlog_get.histlog_get_change, 0);
  expect(test.sims_cnct.cls_wait_time, 0);
  expect(test.step2_bar.step2_bar_order, 0);
  expect(test.tax_free.tax_free_add, 0);
  expect(test.stcls.tran_interval, 0);
  expect(test.ticket.ticket_cnt, 0);
  expect(test.z_system.z_demo_mode, 0);
  expect(test.dpoint.client, "");
  expect(test.dpoint.branch, 0);
  expect(test.dpoint.store, 0);
  expect(test.dpoint.srvdate, "");
  expect(test.dpoint.backup_macno, 0);
  expect(test.tslnkweb_sys.mkttl_timeout, 0);
  expect(test.coupon_off.coupon_off_flg, 0);
  expect(test.scalerm.over_plu_tare, 0);
  expect(test.scalerm.tare_auto_clear, 0);
  expect(test.scalerm.ad_res_watch, 0);
  expect(test.tax.realitmsend_add, 0);
  expect(test.leavegate.leave_ip01, "");
  expect(test.leavegate.leave_port01, 0);
}

void allPropatyCheck(Mac_infoJsonFile test, bool firstItemCheck)
{
  if(firstItemCheck == true) {
    expect(test.system.macno, 3);
  }
  expect(test.system.crpno, 1);
  expect(test.system.shpno, 10310);
  expect(test.system.wakeup_delay, 2);
  expect(test.system.tenant, 0);
  expect(test.system.serialno, 1);
  expect(test.system.join_area_cd, 0);
  expect(test.system.join_sub_area_cd, 0);
  expect(test.system.comp_cd, 1);
  expect(test.system.soc_timeout, 5);
  expect(test.system.soc_timback, 5);
  expect(test.system.kill_port, 9734);
  expect(test.system.vpn, 0);
  expect(test.system.smart, 0);
  expect(test.system.drugrev_timeout, 300);
  expect(test.system.set_spec_no, 0);
  expect(test.system.reg_cruising, 0);
  expect(test.system.fip_connect, 0);
  expect(test.system.fip_display, 0);
  expect(test.system.ts_ver_mrg, 0);
  expect(test.system.print_screen, 0);
  expect(test.system.twoconnect, 0);
  expect(test.system.custsw_cnct, 0);
  expect(test.system.keytype_desk, 0);
  expect(test.system.keytype_tower, 0);
  expect(test.system.front_self_type, 0);
  expect(test.system.font, 0);
  expect(test.system.stcls_mode, 0);
  expect(test.system.verifone_center_cnct, 0);
  expect(test.system.verifone_one_receipt, 0);
  expect(test.system.device_connect, 0);
  expect(test.mm_system.mm_onoff, 0);
  expect(test.mm_system.mm_type, 0);
  expect(test.mm_system.add_total, 0);
  expect(test.mm_system.sc_cnct, 0);
  expect(test.mm_system.sc_adr, "0.0.0.0");
  expect(test.mm_system.sc_port, 9736);
  expect(test.mm_system.add_cust, 0);
  expect(test.mm_system.mente_port, 9738);
  expect(test.mm_system.ej_txt_format, 0);
  expect(test.mm_system.ej_txt_make, 0);
  expect(test.mm_system.csvsend_cycle, 60);
  expect(test.mm_system.srvlog_save_date, 7);
  expect(test.mm_system.mupd_port, 9750);
  expect(test.mm_system.mupd_cycle, 10);
  expect(test.mm_system.sgt_cf_wt, 0);
  expect(test.mm_system.sc_mente_port, 9740);
  expect(test.mm_system.sc_port2, 9737);
  expect(test.mm_system.sinq_timeout, 5);
  expect(test.mm_system.doc_fsck, 0);
  expect(test.mm_system.duty_dis, 0);
  expect(test.mm_system.clr_total, 0);
  expect(test.mm_system.clr_total_date, 1);
  expect(test.mm_system.reg_lrg_sum, 0);
  expect(test.logging.UnlimitSize, "yes");
  expect(test.logging.LogSaveDate, 30);
  expect(test.logging.TranSaveDate, 30);
  expect(test.mac_addr.m1, "00:00:00:00:00:00");
  expect(test.mac_addr.m2, "00:00:00:00:00:00");
  expect(test.mac_addr.s1, "00:00:00:00:00:00");
  expect(test.mac_addr.s2, "00:00:00:00:00:00");
  expect(test.mac_addr.s3, "00:00:00:00:00:00");
  expect(test.mac_addr.fshare, "00:00:00:00:00:00");
  expect(test.ip_addr.m1, "0.0.0.0");
  expect(test.ip_addr.m2, "0.0.0.0");
  expect(test.ip_addr.s1, "0.0.0.0");
  expect(test.ip_addr.s2, "0.0.0.0");
  expect(test.ip_addr.s3, "0.0.0.0");
  expect(test.mac_no.m1, 1);
  expect(test.mac_no.m2, 2);
  expect(test.mac_no.s1, 1);
  expect(test.mac_no.s2, 2);
  expect(test.mac_no.s3, 3);
  expect(test.jnl_bkup.jnl_bkup_knd, 0);
  expect(test.jnl_bkup.jnl_bkup_week, 0);
  expect(test.jnl_bkup.jnl_bkup_date, 1);
  expect(test.data_bkup.data_bkup_knd, 0);
  expect(test.data_bkup.data_bkup_week, 0);
  expect(test.data_bkup.data_bkup_date, 1);
  expect(test.data_bkup.data_bkup_generation, 7);
  expect(test.data_bkup.data_bkup_generation2, 3);
  expect(test.csv_bkup.Bakup, 0);
  expect(test.csv_bkup.data_knd, 2);
  expect(test.csv_bkup.timeout, 10);
  expect(test.csv_bkup.css_filename, 0);
  expect(test.csv_bkup.css_retry_count, 0);
  expect(test.csv_bkup.css_retry_time, 5);
  expect(test.csv_bkup.time_zone, 0);
  expect(test.csv_bkup.name_add, 1);
  expect(test.csv_bkup.lgyoumu, 0);
  expect(test.csv_bkup.ext_digit, 0);
  expect(test.csv_bkup.pasv, 0);
  expect(test.csv_bkup.lgyoumu_full, 0);
  expect(test.csv_bkup.netdoa_mbr, 0);
  expect(test.csv_bkup.css_fixed_length, 0);
  expect(test.csv_bkup.css_date_file, 0);
  expect(test.csv_bkup.netdoa_comp_ej, 0);
  expect(test.csv_bkup.css_usb_bkup, 0);
  expect(test.csv_bkup.css_ment_tran, 0);
  expect(test.csv_bkup.css_proxy_type_add, 1);
  expect(test.csv_bkup.ping_check, 1);
  expect(test.csv_bkup.text_resend, 0);
  expect(test.csv_bkup.css_igyoumu_make, 0);
  expect(test.csv_bkup.netdoa_opetime_send, 0);
  expect(test.csv_bkup.nttb_item_cd_typ, 0);
  expect(test.csv_term.reg_mly_deal, 0);
  expect(test.csv_term.regmlydeal_week, 0);
  expect(test.csv_term.regmlydeal_day, 1);
  expect(test.csv_term.reg_mly_mdl, 0);
  expect(test.csv_term.regmlymdl_week, 0);
  expect(test.csv_term.regmlymdl_day, 1);
  expect(test.csv_term.reg_mly_sml, 0);
  expect(test.csv_term.regmlysml_week, 0);
  expect(test.csv_term.regmlysml_day, 1);
  expect(test.csv_term.reg_mly_plu, 0);
  expect(test.csv_term.regmlyplu_week, 0);
  expect(test.csv_term.regmlyplu_day, 1);
  expect(test.csv_term.reg_mly_cat, 0);
  expect(test.csv_term.regmlycat_week, 0);
  expect(test.csv_term.regmlycat_day, 1);
  expect(test.csv_term.reg_sch_brgn, 0);
  expect(test.csv_term.regschbrgn_week, 0);
  expect(test.csv_term.regschbrgn_day, 1);
  expect(test.csv_term.reg_sch_mach, 0);
  expect(test.csv_term.regschmach_week, 0);
  expect(test.csv_term.regschmach_day, 1);
  expect(test.csv_term.reg_mly_cust, 0);
  expect(test.csv_term.regmlycust_week, 0);
  expect(test.csv_term.regmlycust_day, 1);
  expect(test.csv_term.reg_mly_zone, 0);
  expect(test.csv_term.regmlyzone_week, 0);
  expect(test.csv_term.regmlyzone_day, 1);
  expect(test.csv_term.reg_mly_svs, 0);
  expect(test.csv_term.regmlysvs_week, 0);
  expect(test.csv_term.regmlysvs_day, 1);
  expect(test.csv_term.reg_mly_fspplu, 0);
  expect(test.csv_term.regmlyfspplu_week, 0);
  expect(test.csv_term.regmlyfspplu_day, 1);
  expect(test.csv_term.reg_mly_fspsml, 0);
  expect(test.csv_term.regmlyfspsml_week, 0);
  expect(test.csv_term.regmlyfspsml_day, 1);
  expect(test.csv_term.reg_mly_fspmdl, 0);
  expect(test.csv_term.regmlyfspmdl_week, 0);
  expect(test.csv_term.regmlyfspmdl_day, 1);
  expect(test.csv_term.reg_mly_fspttl, 0);
  expect(test.csv_term.regmlyfspttl_week, 0);
  expect(test.csv_term.regmlyfspttl_day, 1);
  expect(test.csv_term.reg_mly_lrg, 0);
  expect(test.csv_term.regmlylrg_week, 0);
  expect(test.csv_term.regmlylrg_day, 1);
  expect(test.csv_prg.mdl_cls_mst, 0);
  expect(test.csv_prg.mdlcls_week, 0);
  expect(test.csv_prg.mdlcls_day, 1);
  expect(test.csv_prg.sml_cls_mst, 0);
  expect(test.csv_prg.smlcls_week, 0);
  expect(test.csv_prg.smlcls_day, 1);
  expect(test.csv_prg.plu_mst, 0);
  expect(test.csv_prg.plumst_week, 0);
  expect(test.csv_prg.plumst_day, 1);
  expect(test.csv_prg.cat_dsc_mst, 0);
  expect(test.csv_prg.catdsc_week, 0);
  expect(test.csv_prg.catdsc_day, 1);
  expect(test.csv_prg.brgn_mst, 0);
  expect(test.csv_prg.brgnmst_week, 0);
  expect(test.csv_prg.brgnmst_day, 1);
  expect(test.csv_prg.bdl_mst, 0);
  expect(test.csv_prg.bdlmst_week, 0);
  expect(test.csv_prg.bdlmst_day, 1);
  expect(test.csv_prg.stm_mst, 0);
  expect(test.csv_prg.stmmst_week, 0);
  expect(test.csv_prg.stmmst_day, 1);
  expect(test.csv_prg.staff_mst, 0);
  expect(test.csv_prg.staffmst_week, 0);
  expect(test.csv_prg.staffmst_day, 1);
  expect(test.csv_prg.cust_mst, 0);
  expect(test.csv_prg.custmst_week, 0);
  expect(test.csv_prg.custmst_day, 1);
  expect(test.csv_prg.zone_mst, 0);
  expect(test.csv_prg.zonemst_week, 0);
  expect(test.csv_prg.zonemst_day, 1);
  expect(test.csv_prg.svs_mst, 0);
  expect(test.csv_prg.svsmst_week, 0);
  expect(test.csv_prg.svsmst_day, 1);
  expect(test.csv_prg.fspsch_mst, 0);
  expect(test.csv_prg.fspschmst_week, 0);
  expect(test.csv_prg.fspschmst_day, 1);
  expect(test.csv_prg.fspplan_plu, 0);
  expect(test.csv_prg.fspplanplu_week, 0);
  expect(test.csv_prg.fspplanplu_day, 1);
  expect(test.csv_prg.fspplan_mdl, 0);
  expect(test.csv_prg.fspplanmdl_week, 0);
  expect(test.csv_prg.fspplanmdl_day, 1);
  expect(test.csv_prg.fspplan_sml, 0);
  expect(test.csv_prg.fspplansml_week, 0);
  expect(test.csv_prg.fspplansml_day, 1);
  expect(test.csv_prg.dly_trm, 0);
  expect(test.csv_prg.dlytrm_week, 0);
  expect(test.csv_prg.dlytrm_day, 1);
  expect(test.csv_prg.dly_kopt, 0);
  expect(test.csv_prg.dlykopt_week, 0);
  expect(test.csv_prg.dlykopt_day, 1);
  expect(test.csv_prg.dly_recmsg, 0);
  expect(test.csv_prg.dlyrecmsg_week, 0);
  expect(test.csv_prg.dlyrecmsg_day, 1);
  expect(test.csv_prg.dly_preset, 0);
  expect(test.csv_prg.dlypreset_week, 0);
  expect(test.csv_prg.dlypreset_day, 1);
  expect(test.csv_prg.dly_batrepo, 0);
  expect(test.csv_prg.dlybatrepo_week, 0);
  expect(test.csv_prg.dlybatrepo_day, 1);
  expect(test.csv_prg.dly_img, 0);
  expect(test.csv_prg.dlyimg_week, 0);
  expect(test.csv_prg.dlyimg_day, 1);
  expect(test.csv_prg.tax_mst, 0);
  expect(test.csv_prg.tax_week, 0);
  expect(test.csv_prg.tax_day, 1);
  expect(test.csv_prg.ctrl_mst, 0);
  expect(test.csv_prg.ctrl_week, 0);
  expect(test.csv_prg.ctrl_day, 1);
  expect(test.csv_prg.instre_mst, 0);
  expect(test.csv_prg.instre_week, 0);
  expect(test.csv_prg.instre_day, 1);
  expect(test.csv_prg.mdlsch_mst, 0);
  expect(test.csv_prg.mdlsch_week, 0);
  expect(test.csv_prg.mdlsch_day, 1);
  expect(test.csv_prg.smlsch_mst, 0);
  expect(test.csv_prg.smlsch_week, 0);
  expect(test.csv_prg.smlsch_day, 1);
  expect(test.csv_prg.plusch_mst, 0);
  expect(test.csv_prg.plusch_week, 0);
  expect(test.csv_prg.plusch_day, 1);
  expect(test.csv_prg.batprcchg_mst, 0);
  expect(test.csv_prg.batprcchg_week, 0);
  expect(test.csv_prg.batprcchg_day, 1);
  expect(test.csv_prg.fipsch_mst, 0);
  expect(test.csv_prg.fipsch_week, 0);
  expect(test.csv_prg.fipsch_day, 1);
  expect(test.csv_prg.anvkind_mst, 0);
  expect(test.csv_prg.anvkind_week, 0);
  expect(test.csv_prg.anvkind_day, 1);
  expect(test.csv_prg.decrbt_mst, 0);
  expect(test.csv_prg.decrbt_week, 0);
  expect(test.csv_prg.decrbt_day, 1);
  expect(test.csv_prg.zipcode_mst, 0);
  expect(test.csv_prg.zipcode_week, 0);
  expect(test.csv_prg.zipcode_day, 1);
  expect(test.csv_prg.maker_mst, 0);
  expect(test.csv_prg.maker_week, 0);
  expect(test.csv_prg.maker_day, 1);
  expect(test.csv_prg.mcard_mst, 0);
  expect(test.csv_prg.mcard_week, 0);
  expect(test.csv_prg.mcard_day, 1);
  expect(test.csv_prg.reason_mst, 0);
  expect(test.csv_prg.reason_week, 0);
  expect(test.csv_prg.reason_day, 1);
  expect(test.csv_dly.dly_deal, 0);
  expect(test.csv_dly.dlydeal_week, 0);
  expect(test.csv_dly.dlydeal_day, 1);
  expect(test.csv_dly.dly_mdl, 0);
  expect(test.csv_dly.dlymdl_week, 0);
  expect(test.csv_dly.dlymdl_day, 1);
  expect(test.csv_dly.dly_sml, 0);
  expect(test.csv_dly.dlysml_week, 0);
  expect(test.csv_dly.dlysml_day, 1);
  expect(test.csv_dly.dly_plu, 0);
  expect(test.csv_dly.dlyplu_week, 0);
  expect(test.csv_dly.dlyplu_day, 1);
  expect(test.csv_dly.dly_cat, 0);
  expect(test.csv_dly.dlycat_week, 0);
  expect(test.csv_dly.dlycatl_day, 1);
  expect(test.csv_dly.dly_brgn, 0);
  expect(test.csv_dly.dlybrgn_week, 0);
  expect(test.csv_dly.dlybrgn_day, 1);
  expect(test.csv_dly.dly_mach, 0);
  expect(test.csv_dly.dlymach_week, 0);
  expect(test.csv_dly.dlymach_day, 1);
  expect(test.csv_dly.dly_crdt, 0);
  expect(test.csv_dly.dlycrdt_week, 0);
  expect(test.csv_dly.dlycrdt_day, 1);
  expect(test.csv_dly.dly_tmp, 0);
  expect(test.csv_dly.dlytmp_week, 0);
  expect(test.csv_dly.dlytmp_day, 1);
  expect(test.csv_dly.dly_prcchg, 0);
  expect(test.csv_dly.dlyprcchgl_week, 0);
  expect(test.csv_dly.dlyprcchg_day, 1);
  expect(test.csv_dly.dly_itemlog, 0);
  expect(test.csv_dly.dlyitemlog_week, 0);
  expect(test.csv_dly.dlyitmlog_day, 1);
  expect(test.csv_dly.dly_bdllog, 0);
  expect(test.csv_dly.dlybdllog_week, 0);
  expect(test.csv_dly.dlybdllog_day, 1);
  expect(test.csv_dly.dly_stmlog, 0);
  expect(test.csv_dly.dlystmlog_week, 0);
  expect(test.csv_dly.dlystmlog_day, 1);
  expect(test.csv_dly.dly_ttllog, 0);
  expect(test.csv_dly.dlyttllog_week, 0);
  expect(test.csv_dly.dlyttllog_day, 1);
  expect(test.csv_dly.dly_ejlog, 0);
  expect(test.csv_dly.dlyejlog_week, 0);
  expect(test.csv_dly.dlyejlog_day, 1);
  expect(test.csv_dly.dly_cust, 0);
  expect(test.csv_dly.dlycust_week, 0);
  expect(test.csv_dly.dlycust_day, 1);
  expect(test.csv_dly.dly_zone, 0);
  expect(test.csv_dly.dlyzone_week, 0);
  expect(test.csv_dly.dlyzone_day, 1);
  expect(test.csv_dly.dly_svs, 0);
  expect(test.csv_dly.dlysvs_week, 0);
  expect(test.csv_dly.dlysvs_day, 1);
  expect(test.csv_dly.dly_fspplu, 0);
  expect(test.csv_dly.dlyfspplu_week, 0);
  expect(test.csv_dly.dlyfspplu_day, 1);
  expect(test.csv_dly.dly_fspsml, 0);
  expect(test.csv_dly.dlyfspsml_week, 0);
  expect(test.csv_dly.dlyfspsml_day, 1);
  expect(test.csv_dly.dly_fspmdl, 0);
  expect(test.csv_dly.dlyfspmdl_week, 0);
  expect(test.csv_dly.dlyfspmdl_day, 1);
  expect(test.csv_dly.dly_fspttl, 0);
  expect(test.csv_dly.dlyfspttl_week, 0);
  expect(test.csv_dly.dlyfspttl_day, 1);
  expect(test.csv_dly.histlog, 0);
  expect(test.csv_dly.histlog_week, 0);
  expect(test.csv_dly.histlog_day, 1);
  expect(test.csv_dly.duty_log, 1);
  expect(test.csv_dly.dutylog_week, 0);
  expect(test.csv_dly.dutylog_day, 1);
  expect(test.csv_dly.sims_log, 0);
  expect(test.csv_dly.simslog_week, 0);
  expect(test.csv_dly.simslog_day, 1);
  expect(test.csv_dly.reserv_log, 0);
  expect(test.csv_dly.reservlog_week, 0);
  expect(test.csv_dly.reservlog_day, 1);
  expect(test.csv_dly.z_receipt, 0);
  expect(test.csv_dly.zreceipt_week, 0);
  expect(test.csv_dly.zreceipt_day, 1);
  expect(test.csv_dly.dly_lrg, 0);
  expect(test.csv_dly.dlylrg_week, 0);
  expect(test.csv_dly.dlylrg_day, 1);
  expect(test.csv_dly.drawchk_cash_log, 0);
  expect(test.csv_dly.drawchk_cash_log_week, 0);
  expect(test.csv_dly.drawchk_cash_log_day, 1);
  expect(test.csv_tpr8100.dly_plu_tpr8100, 0);
  expect(test.csv_tpr8100.dly_deal_tpr8100, 0);
  expect(test.csv_tpr8100.reg_dly_mly_mdl_tpr8100, 0);
  expect(test.csv_tpr8100.ibaraki_tpr8100, 0);
  expect(test.sch_delete.bgnsch_del_date, 7);
  expect(test.sch_delete.mmsch_del_date, 7);
  expect(test.sch_delete.smsch_del_date, 7);
  expect(test.sch_delete.clssch_del_date, 7);
  expect(test.sch_delete.plusch_del_date, 7);
  expect(test.sch_delete.ej_txt_del_date, 3);
  expect(test.sch_delete.csv_txt_del_date, 1);
  expect(test.sch_delete.schmsg_del_date, 7);
  expect(test.sch_delete.fipsch_del_date, 7);
  expect(test.sch_delete.reserv_del_date, 7);
  expect(test.sch_delete.custbkup_del_date, 7);
  expect(test.internal_flg.mode, 0);
  expect(test.internal_flg.auto_mode, 0);
  expect(test.internal_flg.rct_onoff, 0);
  expect(test.internal_flg.acr_onoff, 0);
  expect(test.internal_flg.acr_cnct, 0);
  expect(test.internal_flg.acr_errprn, 0);
  expect(test.internal_flg.card_cnct, 0);
  expect(test.internal_flg.acb_deccin, 0);
  expect(test.internal_flg.rwt_cnct, 0);
  expect(test.internal_flg.scale_cnct, 0);
  expect(test.internal_flg.acb_select, 0);
  expect(test.internal_flg.iis21_cnct, 0);
  expect(test.internal_flg.mobile_cnct, 0);
  expect(test.internal_flg.stpr_cnct, 0);
  expect(test.internal_flg.netwlpr_cnct, 0);
  expect(test.internal_flg.poppy_cnct, 0);
  expect(test.internal_flg.tag_cnct, 0);
  expect(test.internal_flg.auto_deccin, 0);
  expect(test.internal_flg.s2pr_cnct, 0);
  expect(test.internal_flg.pwrctrl_cnct, 0);
  expect(test.internal_flg.catalinapr_cnct, 0);
  expect(test.internal_flg.dish_cnct, 0);
  expect(test.internal_flg.custrealsvr_cnct, 0);
  expect(test.internal_flg.aivoice_cnct, 0);
  expect(test.internal_flg.gcat_cnct, 0);
  expect(test.internal_flg.suica_cnct, 0);
  expect(test.internal_flg.mp1_cnct, 0);
  expect(test.internal_flg.realitmsend_cnct, 0);
  expect(test.internal_flg.gramx_cnct, 0);
  expect(test.internal_flg.rfid_cnct, 0);
  expect(test.internal_flg.soft_keyb, 0);
  expect(test.internal_flg.keyb, 0);
  expect(test.internal_flg.msg_flg, 0);
  expect(test.internal_flg.multi_cnct, 0);
  expect(test.internal_flg.jrem_cnct, 0);
  expect(test.internal_flg.colordsp_cnct, 1);
  expect(test.internal_flg.usbcam_cnct, 0);
  expect(test.internal_flg.masr_cnct, 0);
  expect(test.internal_flg.brainfl_cnct, 0);
  expect(test.internal_flg.cat_jmups_twin_cnct, 0);
  expect(test.internal_flg.sqrc_ticket_cnct, 0);
  expect(test.internal_flg.custrealsvr_pqs_new_send, 0);
  expect(test.internal_flg.sqrc_drlabel_no, 1);
  expect(test.internal_flg.iccard_cnct, 0);
  expect(test.internal_flg.ecs_mode, 1);
  expect(test.internal_flg.colordsp_size, 0);
  expect(test.internal_flg.usbcam_direction, 0);
  expect(test.internal_flg.usbcam_disp, 0);
  expect(test.internal_flg.apbf_cnct, 0);
  expect(test.internal_flg.usbcam_disp_size, 0);
  expect(test.internal_flg.exc_cnct, 0);
  expect(test.internal_flg.hitouch_cnct, 0);
  expect(test.internal_flg.snresult, 0);
  expect(test.internal_flg.ami_cnct, 0);
  expect(test.internal_flg.hs_scale_cnct, 0);
  expect(test.cat_timer.cat_stat_timer, 300);
  expect(test.cat_timer.cat_recv_timer, 3000);
  expect(test.printer.rct_spd, 3);
  expect(test.printer.rct_dns, 1);
  expect(test.printer.s2pr_topfeed, 6);
  expect(test.printer.s2pr_lineno, 18);
  expect(test.printer.rct_lf_plus, 6);
  expect(test.printer.rct_tb_cut, 0);
  expect(test.printer.rct_sp_width, 0);
  expect(test.printer.rct_cut_type, 0);
  expect(test.printer.rct_cut_type2, 0);
  expect(test.printer.err_rpr_timer, 10);
  expect(test.printer.nearend_check, 0);
  expect(test.printer.kitchen_prt_power, 0);
  expect(test.printer.zhq_cpn_rct_share, 0);
  expect(test.printer.nearend_note, 0);
  expect(test.printer.nearend_count, 3);
  expect(test.printer.hprt_fwver, 0);
  expect(test.printer_cntl.recipt_wid, 464);
  expect(test.printer_cntl.prnt_length, 0);
  expect(test.printer_cntl.start_speed, 300);
  expect(test.printer_cntl.top_speed, 1200);
  expect(test.printer_cntl.top_sp_step, 100);
  expect(test.printer_cntl.start_density, 1020);
  expect(test.printer_cntl.top_density, 1020);
  expect(test.printer_cntl.top_den_step, 100);
  expect(test.printer_cntl.prt_position, 0);
  expect(test.printer_cntl.head_wid, 640);
  expect(test.printer_cntl.prt_start_size, 3200);
  expect(test.printer_cntl.err_mask, 48);
  expect(test.printer_cntl.x_offset, 40);
  expect(test.printer_cntl.recipt_wid80, 576);
  expect(test.printer_def.rct_tspd_0, 800);
  expect(test.printer_def.rct_tspd_1, 800);
  expect(test.printer_def.rct_tspd_2, 1000);
  expect(test.printer_def.rct_tspd_3, 1200);
  expect(test.printer_def.rct_lspeed_dens0, 900);
  expect(test.printer_def.rct_lspeed_dens1, 1000);
  expect(test.printer_def.rct_lspeed_dens2, 1100);
  expect(test.printer_def.rct_lspeed_dens3, 1200);
  expect(test.printer_def.rct_mspeed_dens0, 900);
  expect(test.printer_def.rct_mspeed_dens1, 1000);
  expect(test.printer_def.rct_mspeed_dens2, 1100);
  expect(test.printer_def.rct_mspeed_dens3, 1200);
  expect(test.printer_def.rct_hmspeed_dens0, 810);
  expect(test.printer_def.rct_hmspeed_dens1, 900);
  expect(test.printer_def.rct_hmspeed_dens2, 990);
  expect(test.printer_def.rct_hmspeed_dens3, 1080);
  expect(test.printer_def.rct_hspeed_dens0, 918);
  expect(test.printer_def.rct_hspeed_dens1, 1020);
  expect(test.printer_def.rct_hspeed_dens2, 1122);
  expect(test.printer_def.rct_hspeed_dens3, 1224);
  expect(test.clerksave.spoolend, 5);
  expect(test.printer_font.fontname_j, "rgmj0124.bdf");
  expect(test.printer_font.fontname_e, "rgmhhc24.bdf");
  expect(test.ups.pfcheck, 10);
  expect(test.ups.pftime, 3);
  expect(test.ups.pfretry, 4);
  expect(test.ups.pftime2, 1);
  expect(test.ups.pfretry2, 3);
  expect(test.ups.pfmaxwait, 45);
  expect(test.ups.port, "/dev/ttyS0");
  expect(test.ups.entry, "tprdrv_ups");
  expect(test.ups.entry2, "tprdrv_ups_plus");
  expect(test.ups.port2, "/dev/ttyS5");
  expect(test.doc.update, 0);
  expect(test.mem_size_db5_M.M1, 64);
  expect(test.mem_size_db5_M.M5, 64);
  expect(test.mem_size_db5_M.M10, 128);
  expect(test.mem_size_db5_S.S1, 64);
  expect(test.mem_size_db5_S.S5, 64);
  expect(test.mem_size_db5_S.S10, 64);
  expect(test.mem_size_db6_M.M1, 64);
  expect(test.mem_size_db6_M.M5, 128);
  expect(test.mem_size_db6_M.M10, 128);
  expect(test.mem_size_db6_M.M15, 256);
  expect(test.mem_size_db6_S.S1, 64);
  expect(test.mem_size_db6_S.S5, 64);
  expect(test.mem_size_db6_S.S10, 64);
  expect(test.mem_size_db6_S.S15, 64);
  expect(test.tag_poppy.poppy_print, 0);
  expect(test.tag_poppy.tag_print, 0);
  expect(test.FJ_FTP.store_chd, 0);
  expect(test.select_self.self_mode, 0);
  expect(test.select_self.self_mac_mode, 0);
  expect(test.select_self.assist_port, 9760);
  expect(test.select_self.reg_cruising_drct, 0);
  expect(test.select_self.self_chart_output, 0);
  expect(test.select_self.select_dspmode, 0);
  expect(test.select_self.qs_auto_reboot, 0);
  expect(test.select_self.self_regbag1_plucd, 0);
  expect(test.select_self.self_regbag2_plucd, 0);
  expect(test.select_self.self_regbag3_plucd, 0);
  expect(test.select_self.self_separate_in_scl, 0);
  expect(test.select_self.qc_mode, 1);
  expect(test.select_self.selfmactyp, 0);
  expect(test.select_self.self_scan_typ, 1);
  expect(test.select_self.self_stre_typ, 0);
  expect(test.select_self.hs_start_mode, 0);
  expect(test.select_self.psensor_scan_swing, 1);
  expect(test.select_self.psensor_swing_notice, 0);
  expect(test.select_self.psensor_scan_slow, 1);
  expect(test.select_self.psensor_slow_notice, 0);
  expect(test.select_self.psensor_scan_slowtime, 2);
  expect(test.select_self.psensor_scan_away, 1);
  expect(test.select_self.psensor_away_notice, 1);
  expect(test.select_self.psensor_scan_awaytime, 2);
  expect(test.select_self.psensor_disptime, 1000);
  expect(test.select_self.psensor_notice, 1);
  expect(test.select_self.kpi_hs_mode, 0);
  expect(test.select_self.psensor_swing_cnt, 1);
  expect(test.select_self.psensor_scan_slow_sound, 0);
  expect(test.select_self.psensor_away_sound, 0);
  expect(test.select_self.leave_qr_mode, 0);
  expect(test.select_self.aibox_select_mode, 0);
  expect(test.select_self.psensor_position, 0);
  expect(test.select_self.leave_qr_prn_ptn, 0);
  expect(test.prime_fip.prime_fip, 0);
  expect(test.Edy_Connection.edy_retry_timeout, 60);
  expect(test.Edy_Connection.edy_connect_timeout, 120);
  expect(test.timeserver.timeserver, 0);
  expect(test.fcon_version.scpu1, "");
  expect(test.fcon_version.scpu2, "");
  expect(test.fcon_version.printer, "");
  expect(test.fcon_version.printer2, "");
  expect(test.MC_Connection.mc_tenant_cd, 0);
  expect(test.deccin_bkup.bkup_auto_deccin, 0);
  expect(test.deccin_bkup.bkup_acb_deccin, 0);
  expect(test.deccin_bkup.bkup_acr_onoff, 0);
  expect(test.deccin_bkup.bkup_acb_onoff, 0);
  expect(test.identifies.identifies_cd, "");
  expect(test.identifies.identifies_cd1, "");
  expect(test.identifies.identifies_cd2, "");
  expect(test.identifies.identifies_cd3, "");
  expect(test.identifies.identifies_cd4, "");
  expect(test.identifies.identifies_cd5, "");
  expect(test.identifies.identifies_cd6, "");
  expect(test.identifies.identifies_cd7, "");
  expect(test.identifies.identifies_cd8, "");
  expect(test.acx_flg.acr50_ssw14_0, 0);
  expect(test.acx_flg.acr50_ssw14_1_2, 0);
  expect(test.acx_flg.acr50_ssw14_3_4, 0);
  expect(test.acx_flg.acr50_ssw14_5, 0);
  expect(test.acx_flg.acr50_ssw14_7, 0);
  expect(test.acx_flg.pick_end, 0);
  expect(test.acx_flg.acxreal_system, 0);
  expect(test.acx_flg.ecs_pick_positn10000, 1);
  expect(test.acx_flg.ecs_pick_positn5000, 1);
  expect(test.acx_flg.ecs_pick_positn2000, 1);
  expect(test.acx_flg.ecs_pick_positn1000, 1);
  expect(test.acx_flg.acx_pick_data10000, 0);
  expect(test.acx_flg.acx_pick_data5000, 1);
  expect(test.acx_flg.acx_pick_data2000, 0);
  expect(test.acx_flg.acx_pick_data1000, 10);
  expect(test.acx_flg.acx_pick_data500, 5);
  expect(test.acx_flg.acx_pick_data100, 5);
  expect(test.acx_flg.acx_pick_data50, 5);
  expect(test.acx_flg.acx_pick_data10, 5);
  expect(test.acx_flg.acx_pick_data5, 5);
  expect(test.acx_flg.acx_pick_data1, 5);
  expect(test.acx_flg.ecs_recalc_reject, 2);
  expect(test.acx_flg.sst1_error_disp, 0);
  expect(test.acx_flg.sst1_cin_retry, 3);
  expect(test.acx_flg.acx_resv_min5000, 0);
  expect(test.acx_flg.acx_resv_min2000, 0);
  expect(test.acx_flg.acx_resv_min1000, 0);
  expect(test.acx_flg.acx_resv_min500, 0);
  expect(test.acx_flg.acx_resv_min100, 0);
  expect(test.acx_flg.acx_resv_min50, 0);
  expect(test.acx_flg.acx_resv_min10, 0);
  expect(test.acx_flg.acx_resv_min5, 0);
  expect(test.acx_flg.acx_resv_min1, 0);
  expect(test.acx_flg.acb50_ssw13_0, 1);
  expect(test.acx_flg.acb50_ssw13_1_2, 1);
  expect(test.acx_flg.acb50_ssw13_3_4, 1);
  expect(test.acx_flg.acb50_ssw13_5, 0);
  expect(test.acx_flg.acb50_ssw13_6, 0);
  expect(test.acx_flg.chgdrw_inout_tran, 0);
  expect(test.acx_flg.chgdrw_loan_tran, 0);
  expect(test.acx_flg.acb50_ssw15_0, 0);
  expect(test.acx_flg.acb50_ssw15_1, 0);
  expect(test.acx_flg.acb50_ssw15_2, 1);
  expect(test.acx_flg.acb50_ssw15_3, 0);
  expect(test.acx_flg.acb50_ssw24_0, 0);
  expect(test.acx_flg.ecs_gpd_1_1, 0);
  expect(test.acx_flg.ecs_gpd_1_2, 0);
  expect(test.acx_flg.ecs_gpd_2_1, 0);
  expect(test.acx_flg.ecs_gpd_2_2, 0);
  expect(test.acx_flg.ecs_gpd_3_1, 0);
  expect(test.acx_flg.ecs_gpd_3_2, 0);
  expect(test.acx_flg.ecs_gpd_4_1, 0);
  expect(test.acx_flg.ecs_gpd_5_1, 0);
  expect(test.acx_flg.ecs_gpd_5_2, 0);
  expect(test.acx_flg.ecs_gpd_5_3, 0);
  expect(test.acx_flg.chgdrw_in_tran_cd, 0);
  expect(test.acx_flg.chgdrw_out_tran_cd, 0);
  expect(test.acx_flg.acx_nearfull_diff, 20);
  expect(test.acx_flg.ecs_pick_flg, "000000");
  expect(test.acx_flg.acx_pick_cbillkind, "0000000000");
  expect(test.acx_flg.acb50_ssw50_0_1, 2);
  expect(test.acx_flg.acb50_ssw50_2, 0);
  expect(test.acx_flg.acb50_ssw50_3, 1);
  expect(test.acx_flg.acb50_ssw50_4_5, 0);
  expect(test.acx_flg.acb50_ssw50_6_7, 0);
  expect(test.acx_flg.acb_control_mode, 0);
  expect(test.acx_flg.acx_resv_drw, 0);
  expect(test.acx_flg.acx_resv_drw500, 0);
  expect(test.acx_flg.acx_resv_drw100, 0);
  expect(test.acx_flg.acx_resv_drw50, 0);
  expect(test.acx_flg.acx_resv_drw10, 0);
  expect(test.acx_flg.acx_resv_drw5, 0);
  expect(test.acx_flg.acx_resv_drw1, 0);
  expect(test.acx_flg.acx_auto_stop_sec, 30);
  expect(test.acx_flg.ecs_gp2_3_2, 0);
  expect(test.acx_flg.ecs_gp2_4_1, 0);
  expect(test.acx_flg.ecs_gp2_4_2, 0);
  expect(test.acx_flg.ecs_gp2_5_1, 0);
  expect(test.acx_flg.ecs_gp7_1_1, 0);
  expect(test.acx_flg.ecs_gp7_1_2, 0);
  expect(test.acx_flg.ecs_gp7_1_3, 0);
  expect(test.acx_flg.ecs_gp7_2_1, 0);
  expect(test.acx_flg.ecs_gp7_2_2, 0);
  expect(test.acx_flg.ecs_gp7_3_1, 2);
  expect(test.acx_flg.ecs_gp7_4_1, 0);
  expect(test.acx_flg.ecs_gp7_5_1, 2);
  expect(test.acx_flg.ecs_gp7_5_2, 0);
  expect(test.acx_flg.ecs_gpb_1_1, 2);
  expect(test.acx_flg.ecs_gpb_2_1, 1);
  expect(test.acx_flg.ecs_gpb_2_2, 1);
  expect(test.acx_flg.ecs_gpb_2_3, 0);
  expect(test.acx_flg.ecs_gpb_3_1, 3);
  expect(test.acx_flg.ecs_gpb_3_2, 1);
  expect(test.acx_flg.ecs_gpb_4_2, 0);
  expect(test.acx_flg.ecs_gpb_4_3, 0);
  expect(test.acx_flg.ecs_gpb_5_1, 0);
  expect(test.acx_flg.ecs_gpb_5_2, 0);
  expect(test.acx_flg.ecs_gpc_3_1_fwdl, 115200);
  expect(test.acx_flg.ecs_overflowpick_use, 0);
  expect(test.acx_timer.acx_enq_interval, 3);
  expect(test.acx_timer.acx_enq_timeout, 30);
  expect(test.acx_timer.acxreal_interval, 3);
  expect(test.eventinput.event_cd, "0000");
  expect(test.eventinput.logo_cd, "01");
  expect(test.eventinput.event_hall, 0);
  expect(test.acx_stop_info.acx_stop_5000, 0);
  expect(test.acx_stop_info.acx_stop_2000, 0);
  expect(test.acx_stop_info.acx_stop_1000, 9);
  expect(test.acx_stop_info.acx_stop_500, 1);
  expect(test.acx_stop_info.acx_stop_100, 4);
  expect(test.acx_stop_info.acx_stop_50, 1);
  expect(test.acx_stop_info.acx_stop_10, 4);
  expect(test.acx_stop_info.acx_stop_5, 1);
  expect(test.acx_stop_info.acx_stop_1, 5);
  expect(test.scanner.scn_cmd_desktop, 0);
  expect(test.scanner.scn_cmd_tower, 0);
  expect(test.scanner.scn_cmd_add, 0);
  expect(test.scanner.scan_dp_snd_desktop, 0);
  expect(test.scanner.scan_dp_snd_tower, 0);
  expect(test.scanner.scan_dp_snd_add, 0);
  expect(test.scanner.scan_happyself_2nd, 0);
  expect(test.scanner.scan_display_mode, 0);
  expect(test.scanner.scan_barcode_payment, 0);
  expect(test.scanner.beep_times, 1);
  expect(test.scanner.beep_interval, 1);
  expect(test.CT3100_Connection.ct3100_waite_time, 12);
  expect(test.CT3100_Connection.ct3100_point_type, 2);
  expect(test.upd_chk.upd_err_rbt, 0);
  expect(test.upd_chk.timeout, 30);
  expect(test.drugrev.name, "drugrev");
  expect(test.center_server.hist_cycle, 10);
  expect(test.center_server.stcls_send, 0);
  expect(test.center_server.bult_send, 0);
  expect(test.center_server.tslnkweb_timeout, 60);
  expect(test.center_server.pmod_dspmode, 0);
  expect(test.stopn_retry.retry_cnt, 20);
  expect(test.stopn_retry.retry_inter, 5);
  expect(test.stopn_retry.cls_downset, 0);
  expect(test.stopn_retry.cls_downtime, "0000");
  expect(test.select_batrepo.batch_no1, 0);
  expect(test.select_batrepo.batch_no2, 0);
  expect(test.select_batrepo.batch_no3, 0);
  expect(test.select_batrepo.batch_no4, 0);
  expect(test.select_batrepo.batch_no5, 0);
  expect(test.select_batrepo.batch_no6, 0);
  expect(test.select_batrepo.batch_no7, 0);
  expect(test.select_batrepo.batch_no8, 0);
  expect(test.select_batrepo.batch_no9, 0);
  expect(test.ftp.rpm_timeout, 600);
  expect(test.ftp.rpm_retry, 2);
  expect(test.ftp.landisk_timeout, 600);
  expect(test.ftp.landisk_retry, 2);
  expect(test.ftp.mcput_timeout, 600);
  expect(test.ftp.mcput_retry, 1);
  expect(test.ftp.mcget_timeout, 600);
  expect(test.ftp.mcget_retry, 1);
  expect(test.ftp.void_timeout, 90);
  expect(test.ftp.void_retry, 1);
  expect(test.ftp.hqput_timeout, 180);
  expect(test.ftp.hqput_retry, 1);
  expect(test.ftp.offset_speed, 5);
  expect(test.ftp.error_timeout, 240);
  expect(test.ftp.offset_timeout, 60);
  expect(test.ftp.default_timeout, 60);
  expect(test.movsend.avispace, 12);
  expect(test.movsend.send_speed2, 500);
  expect(test.movsend.extend_time, 10);
  expect(test.movsend.taking_start, 0);
  expect(test.movsend.usbcam_send, 0);
  expect(test.disk_free.limit_size, 2500);
  expect(test.disk_free.stat, 0);
  expect(test.other.ut1_wait, 10);
  expect(test.other.multi_vega_env, 0);
  expect(test.other.quo_useup_flg, 0);
  expect(test.other.jpqr_err_nonprint, 0);
  expect(test.sqrc_sys.sqrc_back_timer, 30);
  expect(test.histlog_get.histlog_get_change, 0);
  expect(test.sims_cnct.cls_wait_time, 300);
  expect(test.step2_bar.step2_bar_order, 0);
  expect(test.tax_free.tax_free_add, 0);
  expect(test.stcls.tran_interval, 2);
  expect(test.ticket.ticket_cnt, 0);
  expect(test.z_system.z_demo_mode, 0);
  expect(test.dpoint.client, "");
  expect(test.dpoint.branch, 0);
  expect(test.dpoint.store, 0);
  expect(test.dpoint.srvdate, "2019-01-01");
  expect(test.dpoint.backup_macno, 0);
  expect(test.tslnkweb_sys.mkttl_timeout, 120);
  expect(test.coupon_off.coupon_off_flg, 0);
  expect(test.scalerm.over_plu_tare, 0);
  expect(test.scalerm.tare_auto_clear, 0);
  expect(test.scalerm.ad_res_watch, 30);
  expect(test.tax.realitmsend_add, 0);
  expect(test.leavegate.leave_ip01, "0.0.0.0");
  expect(test.leavegate.leave_port01, 4444);
}

